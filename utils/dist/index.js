"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter);
      exporter("__generator", __generator);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values);
      exporter("__read", __read);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        throw error;
      }
    };
    exports.deserializerMiddleware = deserializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      const request = await serializer(args.input, options);
      return next(__spreadProps(__spreadValues({}, args), {
        request
      }));
    };
    exports.serializerMiddleware = serializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports.serializerMiddlewareOption);
        }
      };
    }
    exports.getSerdePlugin = getSerdePlugin;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  "node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_deserializerMiddleware(), exports);
    tslib_1.__exportStar(require_serdePlugin(), exports);
    tslib_1.__exportStar(require_serializerMiddleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  "node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, __spreadValues({}, entry));
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, __spreadValues({}, entry));
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = () => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = __spreadProps(__spreadValues({}, entry), {
            before: [],
            after: []
          });
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = __spreadProps(__spreadValues({}, entry), {
            before: [],
            after: []
          });
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {
          wholeList.push(...expendedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain.map((entry) => entry.middleware);
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = __spreadValues({
            step: "initialize",
            priority: "normal",
            middleware
          }, options);
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = __spreadValues({
            middleware
          }, options);
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().reverse()) {
            handler = middleware(handler, context);
          }
          return handler;
        }
      };
      return stack;
    };
    exports.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  "node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_MiddlewareStack(), exports);
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Client = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports.Client = Client;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/command.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Command = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports.Command = Command;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SENSITIVE_STRING = void 0;
    exports.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.strictParseByte = exports.strictParseShort = exports.strictParseInt32 = exports.strictParseInt = exports.strictParseLong = exports.limitedParseFloat32 = exports.limitedParseFloat = exports.handleFloat = exports.limitedParseDouble = exports.strictParseFloat32 = exports.strictParseFloat = exports.strictParseDouble = exports.expectUnion = exports.expectString = exports.expectObject = exports.expectNonNull = exports.expectByte = exports.expectShort = exports.expectInt32 = exports.expectInt = exports.expectLong = exports.expectFloat32 = exports.expectNumber = exports.expectBoolean = exports.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}`);
    };
    exports.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}`);
    };
    exports.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}`);
    };
    exports.expectLong = expectLong;
    exports.expectInt = exports.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      throw new TypeError(`Expected object, got ${typeof value}`);
    };
    exports.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      throw new TypeError(`Expected string, got ${typeof value}`);
    };
    exports.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([_, v]) => v !== null && v !== void 0).map(([k, _]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectNumber)(parseNumber(value));
      }
      return (0, exports.expectNumber)(value);
    };
    exports.strictParseDouble = strictParseDouble;
    exports.strictParseFloat = exports.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return (0, exports.expectFloat32)(parseNumber(value));
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectNumber)(value);
    };
    exports.limitedParseDouble = limitedParseDouble;
    exports.handleFloat = exports.limitedParseDouble;
    exports.limitedParseFloat = exports.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports.expectFloat32)(value);
    };
    exports.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectLong)(parseNumber(value));
      }
      return (0, exports.expectLong)(value);
    };
    exports.strictParseLong = strictParseLong;
    exports.strictParseInt = exports.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectInt32)(parseNumber(value));
      }
      return (0, exports.expectInt32)(value);
    };
    exports.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectShort)(parseNumber(value));
      }
      return (0, exports.expectShort)(value);
    };
    exports.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return (0, exports.expectByte)(parseNumber(value));
      }
      return (0, exports.expectByte)(value);
    };
    exports.strictParseByte = strictParseByte;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEpochTimestamp = exports.parseRfc7231DateTime = exports.parseRfc3339DateTime = exports.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports.parseRfc3339DateTime = parseRfc3339DateTime;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = new Date().getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version) => {
      if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 12) {
        warningEmitted = true;
        process.emitWarning(`The AWS SDK for JavaScript (v3) will
no longer support Node.js ${version} as of January 1, 2022.
To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to Node.js 12.x or later.

More information can be found at: https://a.co/1l6FLnu`, `NodeDeprecationWarning`);
      }
    };
    exports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateServiceException = exports.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports.decorateServiceException = decorateServiceException;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports.getValueFromTextNode = getValueFromTextNode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyJsonString = exports.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports.StringWrapper = StringWrapper;
    exports.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports.StringWrapper, String);
    var LazyJsonString = class extends exports.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    exports.LazyJsonString = LazyJsonString;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports.serializeFloat = serializeFloat;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports.splitEvery = splitEvery;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  "node_modules/@aws-sdk/smithy-client/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_client(), exports);
    tslib_1.__exportStar(require_command(), exports);
    tslib_1.__exportStar(require_constants(), exports);
    tslib_1.__exportStar(require_date_utils(), exports);
    tslib_1.__exportStar(require_defaults_mode(), exports);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports);
    tslib_1.__exportStar(require_exceptions(), exports);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports);
    tslib_1.__exportStar(require_lazy_json(), exports);
    tslib_1.__exportStar(require_parse_utils(), exports);
    tslib_1.__exportStar(require_ser_utils(), exports);
    tslib_1.__exportStar(require_split_every(), exports);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js
var require_DynamoDBServiceException = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynamoDBServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var DynamoDBServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, DynamoDBServiceException.prototype);
      }
    };
    exports.DynamoDBServiceException = DynamoDBServiceException;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProvisionedThroughputOverride = exports.CreateGlobalTableInput = exports.Replica = exports.CreateGlobalSecondaryIndexAction = exports.TableNotFoundException = exports.TableInUseException = exports.LimitExceededException = exports.CreateBackupOutput = exports.CreateBackupInput = exports.ContributorInsightsSummary = exports.ContinuousBackupsUnavailableException = exports.ContinuousBackupsDescription = exports.PointInTimeRecoveryDescription = exports.ConditionalCheckFailedException = exports.BillingModeSummary = exports.ItemCollectionSizeLimitExceededException = exports.ResourceNotFoundException = exports.ProvisionedThroughputExceededException = exports.InvalidEndpointException = exports.RequestLimitExceeded = exports.InternalServerError = exports.BatchStatementError = exports.BatchStatementErrorCodeEnum = exports.ConsumedCapacity = exports.Capacity = exports.BackupTypeFilter = exports.BackupSummary = exports.BackupNotFoundException = exports.BackupInUseException = exports.BackupDescription = exports.SourceTableFeatureDetails = exports.TimeToLiveDescription = exports.StreamSpecification = exports.SSEDescription = exports.LocalSecondaryIndexInfo = exports.GlobalSecondaryIndexInfo = exports.Projection = exports.SourceTableDetails = exports.ProvisionedThroughput = exports.KeySchemaElement = exports.BackupDetails = exports.BackupType = exports.AutoScalingSettingsUpdate = exports.AutoScalingSettingsDescription = exports.AutoScalingPolicyUpdate = exports.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = exports.AutoScalingPolicyDescription = exports.AutoScalingTargetTrackingScalingPolicyConfigurationDescription = exports.AttributeDefinition = exports.ArchivalSummary = void 0;
    exports.DescribeGlobalTableSettingsInput = exports.GlobalTableNotFoundException = exports.DescribeGlobalTableOutput = exports.DescribeGlobalTableInput = exports.ExportNotFoundException = exports.DescribeExportOutput = exports.ExportDescription = exports.ExportStatus = exports.ExportFormat = exports.DescribeExportInput = exports.DescribeEndpointsResponse = exports.Endpoint = exports.DescribeEndpointsRequest = exports.DescribeContributorInsightsOutput = exports.FailureException = exports.DescribeContributorInsightsInput = exports.DescribeContinuousBackupsOutput = exports.DescribeContinuousBackupsInput = exports.DescribeBackupOutput = exports.DescribeBackupInput = exports.DeleteTableOutput = exports.DeleteTableInput = exports.DeleteReplicationGroupMemberAction = exports.DeleteReplicaAction = exports.TransactionConflictException = exports.DeleteGlobalSecondaryIndexAction = exports.DeleteBackupOutput = exports.DeleteBackupInput = exports.ResourceInUseException = exports.CreateTableOutput = exports.TableDescription = exports.RestoreSummary = exports.LocalSecondaryIndexDescription = exports.GlobalSecondaryIndexDescription = exports.ProvisionedThroughputDescription = exports.CreateTableInput = exports.Tag = exports.SSESpecification = exports.LocalSecondaryIndex = exports.GlobalSecondaryIndex = exports.CreateReplicationGroupMemberAction = exports.ReplicaGlobalSecondaryIndex = exports.CreateReplicaAction = exports.GlobalTableAlreadyExistsException = exports.CreateGlobalTableOutput = exports.GlobalTableDescription = exports.ReplicaDescription = exports.TableClassSummary = exports.TableClass = exports.ReplicaGlobalSecondaryIndexDescription = void 0;
    exports.PointInTimeRecoverySpecification = exports.UntagResourceInput = exports.TagResourceInput = exports.RestoreTableToPointInTimeOutput = exports.RestoreTableToPointInTimeInput = exports.InvalidRestoreTimeException = exports.TableAlreadyExistsException = exports.RestoreTableFromBackupOutput = exports.RestoreTableFromBackupInput = exports.ListTagsOfResourceOutput = exports.ListTagsOfResourceInput = exports.ListTablesOutput = exports.ListTablesInput = exports.ListGlobalTablesOutput = exports.GlobalTable = exports.ListGlobalTablesInput = exports.ListExportsOutput = exports.ExportSummary = exports.ListExportsInput = exports.ListContributorInsightsOutput = exports.ListContributorInsightsInput = exports.ListBackupsOutput = exports.ListBackupsInput = exports.PointInTimeRecoveryUnavailableException = exports.InvalidExportTimeException = exports.ExportTableToPointInTimeOutput = exports.ExportTableToPointInTimeInput = exports.ExportConflictException = exports.TransactionInProgressException = exports.IdempotentParameterMismatchException = exports.DuplicateItemException = exports.KinesisStreamingDestinationOutput = exports.KinesisStreamingDestinationInput = exports.DescribeTimeToLiveOutput = exports.DescribeTimeToLiveInput = exports.DescribeTableReplicaAutoScalingOutput = exports.TableAutoScalingDescription = exports.ReplicaAutoScalingDescription = exports.ReplicaGlobalSecondaryIndexAutoScalingDescription = exports.DescribeTableReplicaAutoScalingInput = exports.DescribeTableOutput = exports.DescribeTableInput = exports.DescribeLimitsOutput = exports.DescribeLimitsInput = exports.DescribeKinesisStreamingDestinationOutput = exports.KinesisDataStreamDestination = exports.DescribeKinesisStreamingDestinationInput = exports.DescribeGlobalTableSettingsOutput = exports.ReplicaSettingsDescription = exports.ReplicaGlobalSecondaryIndexSettingsDescription = void 0;
    exports.ExecuteTransactionOutput = exports.ExecuteTransactionInput = exports.BatchExecuteStatementOutput = exports.BatchExecuteStatementInput = exports.TransactGetItem = exports.KeysAndAttributes = exports.PutRequest = exports.ParameterizedStatement = exports.ItemResponse = exports.ItemCollectionMetrics = exports.GetItemOutput = exports.GetItemInput = exports.Get = exports.ExecuteStatementInput = exports.DeleteRequest = exports.Condition = exports.CancellationReason = exports.BatchStatementResponse = exports.BatchStatementRequest = exports.AttributeValueUpdate = exports.AttributeValue = exports.UpdateTimeToLiveOutput = exports.UpdateTimeToLiveInput = exports.TimeToLiveSpecification = exports.UpdateTableReplicaAutoScalingOutput = exports.UpdateTableReplicaAutoScalingInput = exports.ReplicaAutoScalingUpdate = exports.ReplicaGlobalSecondaryIndexAutoScalingUpdate = exports.GlobalSecondaryIndexAutoScalingUpdate = exports.UpdateTableOutput = exports.UpdateTableInput = exports.ReplicationGroupUpdate = exports.UpdateReplicationGroupMemberAction = exports.GlobalSecondaryIndexUpdate = exports.UpdateGlobalSecondaryIndexAction = exports.UpdateGlobalTableSettingsOutput = exports.UpdateGlobalTableSettingsInput = exports.ReplicaSettingsUpdate = exports.ReplicaGlobalSecondaryIndexSettingsUpdate = exports.GlobalTableGlobalSecondaryIndexSettingsUpdate = exports.IndexNotFoundException = exports.UpdateGlobalTableOutput = exports.UpdateGlobalTableInput = exports.ReplicaUpdate = exports.ReplicaNotFoundException = exports.ReplicaAlreadyExistsException = exports.UpdateContributorInsightsOutput = exports.UpdateContributorInsightsInput = exports.UpdateContinuousBackupsOutput = exports.UpdateContinuousBackupsInput = void 0;
    exports.TransactWriteItemsInput = exports.TransactWriteItem = exports.UpdateItemInput = exports.BatchWriteItemOutput = exports.QueryInput = exports.PutItemInput = exports.DeleteItemInput = exports.BatchWriteItemInput = exports.ScanInput = exports.BatchGetItemOutput = exports.WriteRequest = exports.UpdateItemOutput = exports.ScanOutput = exports.QueryOutput = exports.PutItemOutput = exports.ExecuteStatementOutput = exports.DeleteItemOutput = exports.Update = exports.Put = exports.Delete = exports.ConditionCheck = exports.TransactWriteItemsOutput = exports.TransactGetItemsInput = exports.ExpectedAttributeValue = exports.BatchGetItemInput = exports.TransactionCanceledException = exports.TransactGetItemsOutput = void 0;
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    var ArchivalSummary;
    (function(ArchivalSummary2) {
      ArchivalSummary2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ArchivalSummary = exports.ArchivalSummary || (exports.ArchivalSummary = {}));
    var AttributeDefinition;
    (function(AttributeDefinition2) {
      AttributeDefinition2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AttributeDefinition = exports.AttributeDefinition || (exports.AttributeDefinition = {}));
    var AutoScalingTargetTrackingScalingPolicyConfigurationDescription;
    (function(AutoScalingTargetTrackingScalingPolicyConfigurationDescription2) {
      AutoScalingTargetTrackingScalingPolicyConfigurationDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AutoScalingTargetTrackingScalingPolicyConfigurationDescription = exports.AutoScalingTargetTrackingScalingPolicyConfigurationDescription || (exports.AutoScalingTargetTrackingScalingPolicyConfigurationDescription = {}));
    var AutoScalingPolicyDescription;
    (function(AutoScalingPolicyDescription2) {
      AutoScalingPolicyDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AutoScalingPolicyDescription = exports.AutoScalingPolicyDescription || (exports.AutoScalingPolicyDescription = {}));
    var AutoScalingTargetTrackingScalingPolicyConfigurationUpdate;
    (function(AutoScalingTargetTrackingScalingPolicyConfigurationUpdate2) {
      AutoScalingTargetTrackingScalingPolicyConfigurationUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = exports.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate || (exports.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = {}));
    var AutoScalingPolicyUpdate;
    (function(AutoScalingPolicyUpdate2) {
      AutoScalingPolicyUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AutoScalingPolicyUpdate = exports.AutoScalingPolicyUpdate || (exports.AutoScalingPolicyUpdate = {}));
    var AutoScalingSettingsDescription;
    (function(AutoScalingSettingsDescription2) {
      AutoScalingSettingsDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AutoScalingSettingsDescription = exports.AutoScalingSettingsDescription || (exports.AutoScalingSettingsDescription = {}));
    var AutoScalingSettingsUpdate;
    (function(AutoScalingSettingsUpdate2) {
      AutoScalingSettingsUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AutoScalingSettingsUpdate = exports.AutoScalingSettingsUpdate || (exports.AutoScalingSettingsUpdate = {}));
    var BackupType;
    (function(BackupType2) {
      BackupType2["AWS_BACKUP"] = "AWS_BACKUP";
      BackupType2["SYSTEM"] = "SYSTEM";
      BackupType2["USER"] = "USER";
    })(BackupType = exports.BackupType || (exports.BackupType = {}));
    var BackupDetails;
    (function(BackupDetails2) {
      BackupDetails2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(BackupDetails = exports.BackupDetails || (exports.BackupDetails = {}));
    var KeySchemaElement;
    (function(KeySchemaElement2) {
      KeySchemaElement2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(KeySchemaElement = exports.KeySchemaElement || (exports.KeySchemaElement = {}));
    var ProvisionedThroughput;
    (function(ProvisionedThroughput2) {
      ProvisionedThroughput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ProvisionedThroughput = exports.ProvisionedThroughput || (exports.ProvisionedThroughput = {}));
    var SourceTableDetails;
    (function(SourceTableDetails2) {
      SourceTableDetails2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SourceTableDetails = exports.SourceTableDetails || (exports.SourceTableDetails = {}));
    var Projection;
    (function(Projection2) {
      Projection2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Projection = exports.Projection || (exports.Projection = {}));
    var GlobalSecondaryIndexInfo;
    (function(GlobalSecondaryIndexInfo2) {
      GlobalSecondaryIndexInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GlobalSecondaryIndexInfo = exports.GlobalSecondaryIndexInfo || (exports.GlobalSecondaryIndexInfo = {}));
    var LocalSecondaryIndexInfo;
    (function(LocalSecondaryIndexInfo2) {
      LocalSecondaryIndexInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(LocalSecondaryIndexInfo = exports.LocalSecondaryIndexInfo || (exports.LocalSecondaryIndexInfo = {}));
    var SSEDescription;
    (function(SSEDescription2) {
      SSEDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SSEDescription = exports.SSEDescription || (exports.SSEDescription = {}));
    var StreamSpecification;
    (function(StreamSpecification2) {
      StreamSpecification2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(StreamSpecification = exports.StreamSpecification || (exports.StreamSpecification = {}));
    var TimeToLiveDescription;
    (function(TimeToLiveDescription2) {
      TimeToLiveDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TimeToLiveDescription = exports.TimeToLiveDescription || (exports.TimeToLiveDescription = {}));
    var SourceTableFeatureDetails;
    (function(SourceTableFeatureDetails2) {
      SourceTableFeatureDetails2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SourceTableFeatureDetails = exports.SourceTableFeatureDetails || (exports.SourceTableFeatureDetails = {}));
    var BackupDescription;
    (function(BackupDescription2) {
      BackupDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(BackupDescription = exports.BackupDescription || (exports.BackupDescription = {}));
    var BackupInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "BackupInUseException",
          $fault: "client"
        }, opts));
        this.name = "BackupInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupInUseException.prototype);
      }
    };
    exports.BackupInUseException = BackupInUseException;
    var BackupNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "BackupNotFoundException",
          $fault: "client"
        }, opts));
        this.name = "BackupNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupNotFoundException.prototype);
      }
    };
    exports.BackupNotFoundException = BackupNotFoundException;
    var BackupSummary;
    (function(BackupSummary2) {
      BackupSummary2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(BackupSummary = exports.BackupSummary || (exports.BackupSummary = {}));
    var BackupTypeFilter;
    (function(BackupTypeFilter2) {
      BackupTypeFilter2["ALL"] = "ALL";
      BackupTypeFilter2["AWS_BACKUP"] = "AWS_BACKUP";
      BackupTypeFilter2["SYSTEM"] = "SYSTEM";
      BackupTypeFilter2["USER"] = "USER";
    })(BackupTypeFilter = exports.BackupTypeFilter || (exports.BackupTypeFilter = {}));
    var Capacity;
    (function(Capacity2) {
      Capacity2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Capacity = exports.Capacity || (exports.Capacity = {}));
    var ConsumedCapacity;
    (function(ConsumedCapacity2) {
      ConsumedCapacity2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ConsumedCapacity = exports.ConsumedCapacity || (exports.ConsumedCapacity = {}));
    var BatchStatementErrorCodeEnum;
    (function(BatchStatementErrorCodeEnum2) {
      BatchStatementErrorCodeEnum2["AccessDenied"] = "AccessDenied";
      BatchStatementErrorCodeEnum2["ConditionalCheckFailed"] = "ConditionalCheckFailed";
      BatchStatementErrorCodeEnum2["DuplicateItem"] = "DuplicateItem";
      BatchStatementErrorCodeEnum2["InternalServerError"] = "InternalServerError";
      BatchStatementErrorCodeEnum2["ItemCollectionSizeLimitExceeded"] = "ItemCollectionSizeLimitExceeded";
      BatchStatementErrorCodeEnum2["ProvisionedThroughputExceeded"] = "ProvisionedThroughputExceeded";
      BatchStatementErrorCodeEnum2["RequestLimitExceeded"] = "RequestLimitExceeded";
      BatchStatementErrorCodeEnum2["ResourceNotFound"] = "ResourceNotFound";
      BatchStatementErrorCodeEnum2["ThrottlingError"] = "ThrottlingError";
      BatchStatementErrorCodeEnum2["TransactionConflict"] = "TransactionConflict";
      BatchStatementErrorCodeEnum2["ValidationError"] = "ValidationError";
    })(BatchStatementErrorCodeEnum = exports.BatchStatementErrorCodeEnum || (exports.BatchStatementErrorCodeEnum = {}));
    var BatchStatementError;
    (function(BatchStatementError2) {
      BatchStatementError2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(BatchStatementError = exports.BatchStatementError || (exports.BatchStatementError = {}));
    var InternalServerError = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InternalServerError",
          $fault: "server"
        }, opts));
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
      }
    };
    exports.InternalServerError = InternalServerError;
    var RequestLimitExceeded = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "RequestLimitExceeded",
          $fault: "client"
        }, opts));
        this.name = "RequestLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestLimitExceeded.prototype);
      }
    };
    exports.RequestLimitExceeded = RequestLimitExceeded;
    var InvalidEndpointException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidEndpointException",
          $fault: "client"
        }, opts));
        this.name = "InvalidEndpointException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.InvalidEndpointException = InvalidEndpointException;
    var ProvisionedThroughputExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ProvisionedThroughputExceededException",
          $fault: "client"
        }, opts));
        this.name = "ProvisionedThroughputExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
      }
    };
    exports.ProvisionedThroughputExceededException = ProvisionedThroughputExceededException;
    var ResourceNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ResourceNotFoundException",
          $fault: "client"
        }, opts));
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var ItemCollectionSizeLimitExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ItemCollectionSizeLimitExceededException",
          $fault: "client"
        }, opts));
        this.name = "ItemCollectionSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ItemCollectionSizeLimitExceededException.prototype);
      }
    };
    exports.ItemCollectionSizeLimitExceededException = ItemCollectionSizeLimitExceededException;
    var BillingModeSummary;
    (function(BillingModeSummary2) {
      BillingModeSummary2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(BillingModeSummary = exports.BillingModeSummary || (exports.BillingModeSummary = {}));
    var ConditionalCheckFailedException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ConditionalCheckFailedException",
          $fault: "client"
        }, opts));
        this.name = "ConditionalCheckFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConditionalCheckFailedException.prototype);
      }
    };
    exports.ConditionalCheckFailedException = ConditionalCheckFailedException;
    var PointInTimeRecoveryDescription;
    (function(PointInTimeRecoveryDescription2) {
      PointInTimeRecoveryDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PointInTimeRecoveryDescription = exports.PointInTimeRecoveryDescription || (exports.PointInTimeRecoveryDescription = {}));
    var ContinuousBackupsDescription;
    (function(ContinuousBackupsDescription2) {
      ContinuousBackupsDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ContinuousBackupsDescription = exports.ContinuousBackupsDescription || (exports.ContinuousBackupsDescription = {}));
    var ContinuousBackupsUnavailableException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ContinuousBackupsUnavailableException",
          $fault: "client"
        }, opts));
        this.name = "ContinuousBackupsUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ContinuousBackupsUnavailableException.prototype);
      }
    };
    exports.ContinuousBackupsUnavailableException = ContinuousBackupsUnavailableException;
    var ContributorInsightsSummary;
    (function(ContributorInsightsSummary2) {
      ContributorInsightsSummary2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ContributorInsightsSummary = exports.ContributorInsightsSummary || (exports.ContributorInsightsSummary = {}));
    var CreateBackupInput;
    (function(CreateBackupInput2) {
      CreateBackupInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateBackupInput = exports.CreateBackupInput || (exports.CreateBackupInput = {}));
    var CreateBackupOutput;
    (function(CreateBackupOutput2) {
      CreateBackupOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateBackupOutput = exports.CreateBackupOutput || (exports.CreateBackupOutput = {}));
    var LimitExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "LimitExceededException",
          $fault: "client"
        }, opts));
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
      }
    };
    exports.LimitExceededException = LimitExceededException;
    var TableInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TableInUseException",
          $fault: "client"
        }, opts));
        this.name = "TableInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TableInUseException.prototype);
      }
    };
    exports.TableInUseException = TableInUseException;
    var TableNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TableNotFoundException",
          $fault: "client"
        }, opts));
        this.name = "TableNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TableNotFoundException.prototype);
      }
    };
    exports.TableNotFoundException = TableNotFoundException;
    var CreateGlobalSecondaryIndexAction;
    (function(CreateGlobalSecondaryIndexAction2) {
      CreateGlobalSecondaryIndexAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateGlobalSecondaryIndexAction = exports.CreateGlobalSecondaryIndexAction || (exports.CreateGlobalSecondaryIndexAction = {}));
    var Replica;
    (function(Replica2) {
      Replica2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Replica = exports.Replica || (exports.Replica = {}));
    var CreateGlobalTableInput;
    (function(CreateGlobalTableInput2) {
      CreateGlobalTableInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateGlobalTableInput = exports.CreateGlobalTableInput || (exports.CreateGlobalTableInput = {}));
    var ProvisionedThroughputOverride;
    (function(ProvisionedThroughputOverride2) {
      ProvisionedThroughputOverride2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ProvisionedThroughputOverride = exports.ProvisionedThroughputOverride || (exports.ProvisionedThroughputOverride = {}));
    var ReplicaGlobalSecondaryIndexDescription;
    (function(ReplicaGlobalSecondaryIndexDescription2) {
      ReplicaGlobalSecondaryIndexDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaGlobalSecondaryIndexDescription = exports.ReplicaGlobalSecondaryIndexDescription || (exports.ReplicaGlobalSecondaryIndexDescription = {}));
    var TableClass;
    (function(TableClass2) {
      TableClass2["STANDARD"] = "STANDARD";
      TableClass2["STANDARD_INFREQUENT_ACCESS"] = "STANDARD_INFREQUENT_ACCESS";
    })(TableClass = exports.TableClass || (exports.TableClass = {}));
    var TableClassSummary;
    (function(TableClassSummary2) {
      TableClassSummary2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TableClassSummary = exports.TableClassSummary || (exports.TableClassSummary = {}));
    var ReplicaDescription;
    (function(ReplicaDescription2) {
      ReplicaDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaDescription = exports.ReplicaDescription || (exports.ReplicaDescription = {}));
    var GlobalTableDescription;
    (function(GlobalTableDescription2) {
      GlobalTableDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GlobalTableDescription = exports.GlobalTableDescription || (exports.GlobalTableDescription = {}));
    var CreateGlobalTableOutput;
    (function(CreateGlobalTableOutput2) {
      CreateGlobalTableOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateGlobalTableOutput = exports.CreateGlobalTableOutput || (exports.CreateGlobalTableOutput = {}));
    var GlobalTableAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "GlobalTableAlreadyExistsException",
          $fault: "client"
        }, opts));
        this.name = "GlobalTableAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalTableAlreadyExistsException.prototype);
      }
    };
    exports.GlobalTableAlreadyExistsException = GlobalTableAlreadyExistsException;
    var CreateReplicaAction;
    (function(CreateReplicaAction2) {
      CreateReplicaAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateReplicaAction = exports.CreateReplicaAction || (exports.CreateReplicaAction = {}));
    var ReplicaGlobalSecondaryIndex;
    (function(ReplicaGlobalSecondaryIndex2) {
      ReplicaGlobalSecondaryIndex2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaGlobalSecondaryIndex = exports.ReplicaGlobalSecondaryIndex || (exports.ReplicaGlobalSecondaryIndex = {}));
    var CreateReplicationGroupMemberAction;
    (function(CreateReplicationGroupMemberAction2) {
      CreateReplicationGroupMemberAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateReplicationGroupMemberAction = exports.CreateReplicationGroupMemberAction || (exports.CreateReplicationGroupMemberAction = {}));
    var GlobalSecondaryIndex;
    (function(GlobalSecondaryIndex2) {
      GlobalSecondaryIndex2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GlobalSecondaryIndex = exports.GlobalSecondaryIndex || (exports.GlobalSecondaryIndex = {}));
    var LocalSecondaryIndex;
    (function(LocalSecondaryIndex2) {
      LocalSecondaryIndex2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(LocalSecondaryIndex = exports.LocalSecondaryIndex || (exports.LocalSecondaryIndex = {}));
    var SSESpecification;
    (function(SSESpecification2) {
      SSESpecification2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(SSESpecification = exports.SSESpecification || (exports.SSESpecification = {}));
    var Tag;
    (function(Tag2) {
      Tag2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Tag = exports.Tag || (exports.Tag = {}));
    var CreateTableInput;
    (function(CreateTableInput2) {
      CreateTableInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateTableInput = exports.CreateTableInput || (exports.CreateTableInput = {}));
    var ProvisionedThroughputDescription;
    (function(ProvisionedThroughputDescription2) {
      ProvisionedThroughputDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ProvisionedThroughputDescription = exports.ProvisionedThroughputDescription || (exports.ProvisionedThroughputDescription = {}));
    var GlobalSecondaryIndexDescription;
    (function(GlobalSecondaryIndexDescription2) {
      GlobalSecondaryIndexDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GlobalSecondaryIndexDescription = exports.GlobalSecondaryIndexDescription || (exports.GlobalSecondaryIndexDescription = {}));
    var LocalSecondaryIndexDescription;
    (function(LocalSecondaryIndexDescription2) {
      LocalSecondaryIndexDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(LocalSecondaryIndexDescription = exports.LocalSecondaryIndexDescription || (exports.LocalSecondaryIndexDescription = {}));
    var RestoreSummary;
    (function(RestoreSummary2) {
      RestoreSummary2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreSummary = exports.RestoreSummary || (exports.RestoreSummary = {}));
    var TableDescription;
    (function(TableDescription2) {
      TableDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TableDescription = exports.TableDescription || (exports.TableDescription = {}));
    var CreateTableOutput;
    (function(CreateTableOutput2) {
      CreateTableOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(CreateTableOutput = exports.CreateTableOutput || (exports.CreateTableOutput = {}));
    var ResourceInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ResourceInUseException",
          $fault: "client"
        }, opts));
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
      }
    };
    exports.ResourceInUseException = ResourceInUseException;
    var DeleteBackupInput;
    (function(DeleteBackupInput2) {
      DeleteBackupInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteBackupInput = exports.DeleteBackupInput || (exports.DeleteBackupInput = {}));
    var DeleteBackupOutput;
    (function(DeleteBackupOutput2) {
      DeleteBackupOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteBackupOutput = exports.DeleteBackupOutput || (exports.DeleteBackupOutput = {}));
    var DeleteGlobalSecondaryIndexAction;
    (function(DeleteGlobalSecondaryIndexAction2) {
      DeleteGlobalSecondaryIndexAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteGlobalSecondaryIndexAction = exports.DeleteGlobalSecondaryIndexAction || (exports.DeleteGlobalSecondaryIndexAction = {}));
    var TransactionConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TransactionConflictException",
          $fault: "client"
        }, opts));
        this.name = "TransactionConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionConflictException.prototype);
      }
    };
    exports.TransactionConflictException = TransactionConflictException;
    var DeleteReplicaAction;
    (function(DeleteReplicaAction2) {
      DeleteReplicaAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteReplicaAction = exports.DeleteReplicaAction || (exports.DeleteReplicaAction = {}));
    var DeleteReplicationGroupMemberAction;
    (function(DeleteReplicationGroupMemberAction2) {
      DeleteReplicationGroupMemberAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteReplicationGroupMemberAction = exports.DeleteReplicationGroupMemberAction || (exports.DeleteReplicationGroupMemberAction = {}));
    var DeleteTableInput;
    (function(DeleteTableInput2) {
      DeleteTableInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteTableInput = exports.DeleteTableInput || (exports.DeleteTableInput = {}));
    var DeleteTableOutput;
    (function(DeleteTableOutput2) {
      DeleteTableOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DeleteTableOutput = exports.DeleteTableOutput || (exports.DeleteTableOutput = {}));
    var DescribeBackupInput;
    (function(DescribeBackupInput2) {
      DescribeBackupInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeBackupInput = exports.DescribeBackupInput || (exports.DescribeBackupInput = {}));
    var DescribeBackupOutput;
    (function(DescribeBackupOutput2) {
      DescribeBackupOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeBackupOutput = exports.DescribeBackupOutput || (exports.DescribeBackupOutput = {}));
    var DescribeContinuousBackupsInput;
    (function(DescribeContinuousBackupsInput2) {
      DescribeContinuousBackupsInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeContinuousBackupsInput = exports.DescribeContinuousBackupsInput || (exports.DescribeContinuousBackupsInput = {}));
    var DescribeContinuousBackupsOutput;
    (function(DescribeContinuousBackupsOutput2) {
      DescribeContinuousBackupsOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeContinuousBackupsOutput = exports.DescribeContinuousBackupsOutput || (exports.DescribeContinuousBackupsOutput = {}));
    var DescribeContributorInsightsInput;
    (function(DescribeContributorInsightsInput2) {
      DescribeContributorInsightsInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeContributorInsightsInput = exports.DescribeContributorInsightsInput || (exports.DescribeContributorInsightsInput = {}));
    var FailureException;
    (function(FailureException2) {
      FailureException2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(FailureException = exports.FailureException || (exports.FailureException = {}));
    var DescribeContributorInsightsOutput;
    (function(DescribeContributorInsightsOutput2) {
      DescribeContributorInsightsOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeContributorInsightsOutput = exports.DescribeContributorInsightsOutput || (exports.DescribeContributorInsightsOutput = {}));
    var DescribeEndpointsRequest;
    (function(DescribeEndpointsRequest2) {
      DescribeEndpointsRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeEndpointsRequest = exports.DescribeEndpointsRequest || (exports.DescribeEndpointsRequest = {}));
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
    var DescribeEndpointsResponse;
    (function(DescribeEndpointsResponse2) {
      DescribeEndpointsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeEndpointsResponse = exports.DescribeEndpointsResponse || (exports.DescribeEndpointsResponse = {}));
    var DescribeExportInput;
    (function(DescribeExportInput2) {
      DescribeExportInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeExportInput = exports.DescribeExportInput || (exports.DescribeExportInput = {}));
    var ExportFormat;
    (function(ExportFormat2) {
      ExportFormat2["DYNAMODB_JSON"] = "DYNAMODB_JSON";
      ExportFormat2["ION"] = "ION";
    })(ExportFormat = exports.ExportFormat || (exports.ExportFormat = {}));
    var ExportStatus;
    (function(ExportStatus2) {
      ExportStatus2["COMPLETED"] = "COMPLETED";
      ExportStatus2["FAILED"] = "FAILED";
      ExportStatus2["IN_PROGRESS"] = "IN_PROGRESS";
    })(ExportStatus = exports.ExportStatus || (exports.ExportStatus = {}));
    var ExportDescription;
    (function(ExportDescription2) {
      ExportDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ExportDescription = exports.ExportDescription || (exports.ExportDescription = {}));
    var DescribeExportOutput;
    (function(DescribeExportOutput2) {
      DescribeExportOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeExportOutput = exports.DescribeExportOutput || (exports.DescribeExportOutput = {}));
    var ExportNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ExportNotFoundException",
          $fault: "client"
        }, opts));
        this.name = "ExportNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportNotFoundException.prototype);
      }
    };
    exports.ExportNotFoundException = ExportNotFoundException;
    var DescribeGlobalTableInput;
    (function(DescribeGlobalTableInput2) {
      DescribeGlobalTableInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeGlobalTableInput = exports.DescribeGlobalTableInput || (exports.DescribeGlobalTableInput = {}));
    var DescribeGlobalTableOutput;
    (function(DescribeGlobalTableOutput2) {
      DescribeGlobalTableOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeGlobalTableOutput = exports.DescribeGlobalTableOutput || (exports.DescribeGlobalTableOutput = {}));
    var GlobalTableNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "GlobalTableNotFoundException",
          $fault: "client"
        }, opts));
        this.name = "GlobalTableNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalTableNotFoundException.prototype);
      }
    };
    exports.GlobalTableNotFoundException = GlobalTableNotFoundException;
    var DescribeGlobalTableSettingsInput;
    (function(DescribeGlobalTableSettingsInput2) {
      DescribeGlobalTableSettingsInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeGlobalTableSettingsInput = exports.DescribeGlobalTableSettingsInput || (exports.DescribeGlobalTableSettingsInput = {}));
    var ReplicaGlobalSecondaryIndexSettingsDescription;
    (function(ReplicaGlobalSecondaryIndexSettingsDescription2) {
      ReplicaGlobalSecondaryIndexSettingsDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaGlobalSecondaryIndexSettingsDescription = exports.ReplicaGlobalSecondaryIndexSettingsDescription || (exports.ReplicaGlobalSecondaryIndexSettingsDescription = {}));
    var ReplicaSettingsDescription;
    (function(ReplicaSettingsDescription2) {
      ReplicaSettingsDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaSettingsDescription = exports.ReplicaSettingsDescription || (exports.ReplicaSettingsDescription = {}));
    var DescribeGlobalTableSettingsOutput;
    (function(DescribeGlobalTableSettingsOutput2) {
      DescribeGlobalTableSettingsOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeGlobalTableSettingsOutput = exports.DescribeGlobalTableSettingsOutput || (exports.DescribeGlobalTableSettingsOutput = {}));
    var DescribeKinesisStreamingDestinationInput;
    (function(DescribeKinesisStreamingDestinationInput2) {
      DescribeKinesisStreamingDestinationInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeKinesisStreamingDestinationInput = exports.DescribeKinesisStreamingDestinationInput || (exports.DescribeKinesisStreamingDestinationInput = {}));
    var KinesisDataStreamDestination;
    (function(KinesisDataStreamDestination2) {
      KinesisDataStreamDestination2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(KinesisDataStreamDestination = exports.KinesisDataStreamDestination || (exports.KinesisDataStreamDestination = {}));
    var DescribeKinesisStreamingDestinationOutput;
    (function(DescribeKinesisStreamingDestinationOutput2) {
      DescribeKinesisStreamingDestinationOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeKinesisStreamingDestinationOutput = exports.DescribeKinesisStreamingDestinationOutput || (exports.DescribeKinesisStreamingDestinationOutput = {}));
    var DescribeLimitsInput;
    (function(DescribeLimitsInput2) {
      DescribeLimitsInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeLimitsInput = exports.DescribeLimitsInput || (exports.DescribeLimitsInput = {}));
    var DescribeLimitsOutput;
    (function(DescribeLimitsOutput2) {
      DescribeLimitsOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeLimitsOutput = exports.DescribeLimitsOutput || (exports.DescribeLimitsOutput = {}));
    var DescribeTableInput;
    (function(DescribeTableInput2) {
      DescribeTableInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeTableInput = exports.DescribeTableInput || (exports.DescribeTableInput = {}));
    var DescribeTableOutput;
    (function(DescribeTableOutput2) {
      DescribeTableOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeTableOutput = exports.DescribeTableOutput || (exports.DescribeTableOutput = {}));
    var DescribeTableReplicaAutoScalingInput;
    (function(DescribeTableReplicaAutoScalingInput2) {
      DescribeTableReplicaAutoScalingInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeTableReplicaAutoScalingInput = exports.DescribeTableReplicaAutoScalingInput || (exports.DescribeTableReplicaAutoScalingInput = {}));
    var ReplicaGlobalSecondaryIndexAutoScalingDescription;
    (function(ReplicaGlobalSecondaryIndexAutoScalingDescription2) {
      ReplicaGlobalSecondaryIndexAutoScalingDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaGlobalSecondaryIndexAutoScalingDescription = exports.ReplicaGlobalSecondaryIndexAutoScalingDescription || (exports.ReplicaGlobalSecondaryIndexAutoScalingDescription = {}));
    var ReplicaAutoScalingDescription;
    (function(ReplicaAutoScalingDescription2) {
      ReplicaAutoScalingDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaAutoScalingDescription = exports.ReplicaAutoScalingDescription || (exports.ReplicaAutoScalingDescription = {}));
    var TableAutoScalingDescription;
    (function(TableAutoScalingDescription2) {
      TableAutoScalingDescription2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TableAutoScalingDescription = exports.TableAutoScalingDescription || (exports.TableAutoScalingDescription = {}));
    var DescribeTableReplicaAutoScalingOutput;
    (function(DescribeTableReplicaAutoScalingOutput2) {
      DescribeTableReplicaAutoScalingOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeTableReplicaAutoScalingOutput = exports.DescribeTableReplicaAutoScalingOutput || (exports.DescribeTableReplicaAutoScalingOutput = {}));
    var DescribeTimeToLiveInput;
    (function(DescribeTimeToLiveInput2) {
      DescribeTimeToLiveInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeTimeToLiveInput = exports.DescribeTimeToLiveInput || (exports.DescribeTimeToLiveInput = {}));
    var DescribeTimeToLiveOutput;
    (function(DescribeTimeToLiveOutput2) {
      DescribeTimeToLiveOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DescribeTimeToLiveOutput = exports.DescribeTimeToLiveOutput || (exports.DescribeTimeToLiveOutput = {}));
    var KinesisStreamingDestinationInput;
    (function(KinesisStreamingDestinationInput2) {
      KinesisStreamingDestinationInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(KinesisStreamingDestinationInput = exports.KinesisStreamingDestinationInput || (exports.KinesisStreamingDestinationInput = {}));
    var KinesisStreamingDestinationOutput;
    (function(KinesisStreamingDestinationOutput2) {
      KinesisStreamingDestinationOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(KinesisStreamingDestinationOutput = exports.KinesisStreamingDestinationOutput || (exports.KinesisStreamingDestinationOutput = {}));
    var DuplicateItemException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "DuplicateItemException",
          $fault: "client"
        }, opts));
        this.name = "DuplicateItemException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateItemException.prototype);
      }
    };
    exports.DuplicateItemException = DuplicateItemException;
    var IdempotentParameterMismatchException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IdempotentParameterMismatchException",
          $fault: "client"
        }, opts));
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
    var TransactionInProgressException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TransactionInProgressException",
          $fault: "client"
        }, opts));
        this.name = "TransactionInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionInProgressException.prototype);
        this.Message = opts.Message;
      }
    };
    exports.TransactionInProgressException = TransactionInProgressException;
    var ExportConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ExportConflictException",
          $fault: "client"
        }, opts));
        this.name = "ExportConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportConflictException.prototype);
      }
    };
    exports.ExportConflictException = ExportConflictException;
    var ExportTableToPointInTimeInput;
    (function(ExportTableToPointInTimeInput2) {
      ExportTableToPointInTimeInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ExportTableToPointInTimeInput = exports.ExportTableToPointInTimeInput || (exports.ExportTableToPointInTimeInput = {}));
    var ExportTableToPointInTimeOutput;
    (function(ExportTableToPointInTimeOutput2) {
      ExportTableToPointInTimeOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ExportTableToPointInTimeOutput = exports.ExportTableToPointInTimeOutput || (exports.ExportTableToPointInTimeOutput = {}));
    var InvalidExportTimeException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidExportTimeException",
          $fault: "client"
        }, opts));
        this.name = "InvalidExportTimeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportTimeException.prototype);
      }
    };
    exports.InvalidExportTimeException = InvalidExportTimeException;
    var PointInTimeRecoveryUnavailableException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "PointInTimeRecoveryUnavailableException",
          $fault: "client"
        }, opts));
        this.name = "PointInTimeRecoveryUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PointInTimeRecoveryUnavailableException.prototype);
      }
    };
    exports.PointInTimeRecoveryUnavailableException = PointInTimeRecoveryUnavailableException;
    var ListBackupsInput;
    (function(ListBackupsInput2) {
      ListBackupsInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListBackupsInput = exports.ListBackupsInput || (exports.ListBackupsInput = {}));
    var ListBackupsOutput;
    (function(ListBackupsOutput2) {
      ListBackupsOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListBackupsOutput = exports.ListBackupsOutput || (exports.ListBackupsOutput = {}));
    var ListContributorInsightsInput;
    (function(ListContributorInsightsInput2) {
      ListContributorInsightsInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListContributorInsightsInput = exports.ListContributorInsightsInput || (exports.ListContributorInsightsInput = {}));
    var ListContributorInsightsOutput;
    (function(ListContributorInsightsOutput2) {
      ListContributorInsightsOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListContributorInsightsOutput = exports.ListContributorInsightsOutput || (exports.ListContributorInsightsOutput = {}));
    var ListExportsInput;
    (function(ListExportsInput2) {
      ListExportsInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListExportsInput = exports.ListExportsInput || (exports.ListExportsInput = {}));
    var ExportSummary;
    (function(ExportSummary2) {
      ExportSummary2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ExportSummary = exports.ExportSummary || (exports.ExportSummary = {}));
    var ListExportsOutput;
    (function(ListExportsOutput2) {
      ListExportsOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListExportsOutput = exports.ListExportsOutput || (exports.ListExportsOutput = {}));
    var ListGlobalTablesInput;
    (function(ListGlobalTablesInput2) {
      ListGlobalTablesInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListGlobalTablesInput = exports.ListGlobalTablesInput || (exports.ListGlobalTablesInput = {}));
    var GlobalTable;
    (function(GlobalTable2) {
      GlobalTable2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GlobalTable = exports.GlobalTable || (exports.GlobalTable = {}));
    var ListGlobalTablesOutput;
    (function(ListGlobalTablesOutput2) {
      ListGlobalTablesOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListGlobalTablesOutput = exports.ListGlobalTablesOutput || (exports.ListGlobalTablesOutput = {}));
    var ListTablesInput;
    (function(ListTablesInput2) {
      ListTablesInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListTablesInput = exports.ListTablesInput || (exports.ListTablesInput = {}));
    var ListTablesOutput;
    (function(ListTablesOutput2) {
      ListTablesOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListTablesOutput = exports.ListTablesOutput || (exports.ListTablesOutput = {}));
    var ListTagsOfResourceInput;
    (function(ListTagsOfResourceInput2) {
      ListTagsOfResourceInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListTagsOfResourceInput = exports.ListTagsOfResourceInput || (exports.ListTagsOfResourceInput = {}));
    var ListTagsOfResourceOutput;
    (function(ListTagsOfResourceOutput2) {
      ListTagsOfResourceOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListTagsOfResourceOutput = exports.ListTagsOfResourceOutput || (exports.ListTagsOfResourceOutput = {}));
    var RestoreTableFromBackupInput;
    (function(RestoreTableFromBackupInput2) {
      RestoreTableFromBackupInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreTableFromBackupInput = exports.RestoreTableFromBackupInput || (exports.RestoreTableFromBackupInput = {}));
    var RestoreTableFromBackupOutput;
    (function(RestoreTableFromBackupOutput2) {
      RestoreTableFromBackupOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreTableFromBackupOutput = exports.RestoreTableFromBackupOutput || (exports.RestoreTableFromBackupOutput = {}));
    var TableAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TableAlreadyExistsException",
          $fault: "client"
        }, opts));
        this.name = "TableAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TableAlreadyExistsException.prototype);
      }
    };
    exports.TableAlreadyExistsException = TableAlreadyExistsException;
    var InvalidRestoreTimeException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidRestoreTimeException",
          $fault: "client"
        }, opts));
        this.name = "InvalidRestoreTimeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRestoreTimeException.prototype);
      }
    };
    exports.InvalidRestoreTimeException = InvalidRestoreTimeException;
    var RestoreTableToPointInTimeInput;
    (function(RestoreTableToPointInTimeInput2) {
      RestoreTableToPointInTimeInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreTableToPointInTimeInput = exports.RestoreTableToPointInTimeInput || (exports.RestoreTableToPointInTimeInput = {}));
    var RestoreTableToPointInTimeOutput;
    (function(RestoreTableToPointInTimeOutput2) {
      RestoreTableToPointInTimeOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RestoreTableToPointInTimeOutput = exports.RestoreTableToPointInTimeOutput || (exports.RestoreTableToPointInTimeOutput = {}));
    var TagResourceInput;
    (function(TagResourceInput2) {
      TagResourceInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TagResourceInput = exports.TagResourceInput || (exports.TagResourceInput = {}));
    var UntagResourceInput;
    (function(UntagResourceInput2) {
      UntagResourceInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UntagResourceInput = exports.UntagResourceInput || (exports.UntagResourceInput = {}));
    var PointInTimeRecoverySpecification;
    (function(PointInTimeRecoverySpecification2) {
      PointInTimeRecoverySpecification2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PointInTimeRecoverySpecification = exports.PointInTimeRecoverySpecification || (exports.PointInTimeRecoverySpecification = {}));
    var UpdateContinuousBackupsInput;
    (function(UpdateContinuousBackupsInput2) {
      UpdateContinuousBackupsInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateContinuousBackupsInput = exports.UpdateContinuousBackupsInput || (exports.UpdateContinuousBackupsInput = {}));
    var UpdateContinuousBackupsOutput;
    (function(UpdateContinuousBackupsOutput2) {
      UpdateContinuousBackupsOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateContinuousBackupsOutput = exports.UpdateContinuousBackupsOutput || (exports.UpdateContinuousBackupsOutput = {}));
    var UpdateContributorInsightsInput;
    (function(UpdateContributorInsightsInput2) {
      UpdateContributorInsightsInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateContributorInsightsInput = exports.UpdateContributorInsightsInput || (exports.UpdateContributorInsightsInput = {}));
    var UpdateContributorInsightsOutput;
    (function(UpdateContributorInsightsOutput2) {
      UpdateContributorInsightsOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateContributorInsightsOutput = exports.UpdateContributorInsightsOutput || (exports.UpdateContributorInsightsOutput = {}));
    var ReplicaAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ReplicaAlreadyExistsException",
          $fault: "client"
        }, opts));
        this.name = "ReplicaAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReplicaAlreadyExistsException.prototype);
      }
    };
    exports.ReplicaAlreadyExistsException = ReplicaAlreadyExistsException;
    var ReplicaNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ReplicaNotFoundException",
          $fault: "client"
        }, opts));
        this.name = "ReplicaNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReplicaNotFoundException.prototype);
      }
    };
    exports.ReplicaNotFoundException = ReplicaNotFoundException;
    var ReplicaUpdate;
    (function(ReplicaUpdate2) {
      ReplicaUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaUpdate = exports.ReplicaUpdate || (exports.ReplicaUpdate = {}));
    var UpdateGlobalTableInput;
    (function(UpdateGlobalTableInput2) {
      UpdateGlobalTableInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateGlobalTableInput = exports.UpdateGlobalTableInput || (exports.UpdateGlobalTableInput = {}));
    var UpdateGlobalTableOutput;
    (function(UpdateGlobalTableOutput2) {
      UpdateGlobalTableOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateGlobalTableOutput = exports.UpdateGlobalTableOutput || (exports.UpdateGlobalTableOutput = {}));
    var IndexNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IndexNotFoundException",
          $fault: "client"
        }, opts));
        this.name = "IndexNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IndexNotFoundException.prototype);
      }
    };
    exports.IndexNotFoundException = IndexNotFoundException;
    var GlobalTableGlobalSecondaryIndexSettingsUpdate;
    (function(GlobalTableGlobalSecondaryIndexSettingsUpdate2) {
      GlobalTableGlobalSecondaryIndexSettingsUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GlobalTableGlobalSecondaryIndexSettingsUpdate = exports.GlobalTableGlobalSecondaryIndexSettingsUpdate || (exports.GlobalTableGlobalSecondaryIndexSettingsUpdate = {}));
    var ReplicaGlobalSecondaryIndexSettingsUpdate;
    (function(ReplicaGlobalSecondaryIndexSettingsUpdate2) {
      ReplicaGlobalSecondaryIndexSettingsUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaGlobalSecondaryIndexSettingsUpdate = exports.ReplicaGlobalSecondaryIndexSettingsUpdate || (exports.ReplicaGlobalSecondaryIndexSettingsUpdate = {}));
    var ReplicaSettingsUpdate;
    (function(ReplicaSettingsUpdate2) {
      ReplicaSettingsUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaSettingsUpdate = exports.ReplicaSettingsUpdate || (exports.ReplicaSettingsUpdate = {}));
    var UpdateGlobalTableSettingsInput;
    (function(UpdateGlobalTableSettingsInput2) {
      UpdateGlobalTableSettingsInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateGlobalTableSettingsInput = exports.UpdateGlobalTableSettingsInput || (exports.UpdateGlobalTableSettingsInput = {}));
    var UpdateGlobalTableSettingsOutput;
    (function(UpdateGlobalTableSettingsOutput2) {
      UpdateGlobalTableSettingsOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateGlobalTableSettingsOutput = exports.UpdateGlobalTableSettingsOutput || (exports.UpdateGlobalTableSettingsOutput = {}));
    var UpdateGlobalSecondaryIndexAction;
    (function(UpdateGlobalSecondaryIndexAction2) {
      UpdateGlobalSecondaryIndexAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateGlobalSecondaryIndexAction = exports.UpdateGlobalSecondaryIndexAction || (exports.UpdateGlobalSecondaryIndexAction = {}));
    var GlobalSecondaryIndexUpdate;
    (function(GlobalSecondaryIndexUpdate2) {
      GlobalSecondaryIndexUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GlobalSecondaryIndexUpdate = exports.GlobalSecondaryIndexUpdate || (exports.GlobalSecondaryIndexUpdate = {}));
    var UpdateReplicationGroupMemberAction;
    (function(UpdateReplicationGroupMemberAction2) {
      UpdateReplicationGroupMemberAction2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateReplicationGroupMemberAction = exports.UpdateReplicationGroupMemberAction || (exports.UpdateReplicationGroupMemberAction = {}));
    var ReplicationGroupUpdate;
    (function(ReplicationGroupUpdate2) {
      ReplicationGroupUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicationGroupUpdate = exports.ReplicationGroupUpdate || (exports.ReplicationGroupUpdate = {}));
    var UpdateTableInput;
    (function(UpdateTableInput2) {
      UpdateTableInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateTableInput = exports.UpdateTableInput || (exports.UpdateTableInput = {}));
    var UpdateTableOutput;
    (function(UpdateTableOutput2) {
      UpdateTableOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateTableOutput = exports.UpdateTableOutput || (exports.UpdateTableOutput = {}));
    var GlobalSecondaryIndexAutoScalingUpdate;
    (function(GlobalSecondaryIndexAutoScalingUpdate2) {
      GlobalSecondaryIndexAutoScalingUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GlobalSecondaryIndexAutoScalingUpdate = exports.GlobalSecondaryIndexAutoScalingUpdate || (exports.GlobalSecondaryIndexAutoScalingUpdate = {}));
    var ReplicaGlobalSecondaryIndexAutoScalingUpdate;
    (function(ReplicaGlobalSecondaryIndexAutoScalingUpdate2) {
      ReplicaGlobalSecondaryIndexAutoScalingUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaGlobalSecondaryIndexAutoScalingUpdate = exports.ReplicaGlobalSecondaryIndexAutoScalingUpdate || (exports.ReplicaGlobalSecondaryIndexAutoScalingUpdate = {}));
    var ReplicaAutoScalingUpdate;
    (function(ReplicaAutoScalingUpdate2) {
      ReplicaAutoScalingUpdate2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ReplicaAutoScalingUpdate = exports.ReplicaAutoScalingUpdate || (exports.ReplicaAutoScalingUpdate = {}));
    var UpdateTableReplicaAutoScalingInput;
    (function(UpdateTableReplicaAutoScalingInput2) {
      UpdateTableReplicaAutoScalingInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateTableReplicaAutoScalingInput = exports.UpdateTableReplicaAutoScalingInput || (exports.UpdateTableReplicaAutoScalingInput = {}));
    var UpdateTableReplicaAutoScalingOutput;
    (function(UpdateTableReplicaAutoScalingOutput2) {
      UpdateTableReplicaAutoScalingOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateTableReplicaAutoScalingOutput = exports.UpdateTableReplicaAutoScalingOutput || (exports.UpdateTableReplicaAutoScalingOutput = {}));
    var TimeToLiveSpecification;
    (function(TimeToLiveSpecification2) {
      TimeToLiveSpecification2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(TimeToLiveSpecification = exports.TimeToLiveSpecification || (exports.TimeToLiveSpecification = {}));
    var UpdateTimeToLiveInput;
    (function(UpdateTimeToLiveInput2) {
      UpdateTimeToLiveInput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateTimeToLiveInput = exports.UpdateTimeToLiveInput || (exports.UpdateTimeToLiveInput = {}));
    var UpdateTimeToLiveOutput;
    (function(UpdateTimeToLiveOutput2) {
      UpdateTimeToLiveOutput2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(UpdateTimeToLiveOutput = exports.UpdateTimeToLiveOutput || (exports.UpdateTimeToLiveOutput = {}));
    var AttributeValue;
    (function(AttributeValue2) {
      AttributeValue2.visit = (value, visitor) => {
        if (value.S !== void 0)
          return visitor.S(value.S);
        if (value.N !== void 0)
          return visitor.N(value.N);
        if (value.B !== void 0)
          return visitor.B(value.B);
        if (value.SS !== void 0)
          return visitor.SS(value.SS);
        if (value.NS !== void 0)
          return visitor.NS(value.NS);
        if (value.BS !== void 0)
          return visitor.BS(value.BS);
        if (value.M !== void 0)
          return visitor.M(value.M);
        if (value.L !== void 0)
          return visitor.L(value.L);
        if (value.NULL !== void 0)
          return visitor.NULL(value.NULL);
        if (value.BOOL !== void 0)
          return visitor.BOOL(value.BOOL);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
      AttributeValue2.filterSensitiveLog = (obj) => {
        if (obj.S !== void 0)
          return { S: obj.S };
        if (obj.N !== void 0)
          return { N: obj.N };
        if (obj.B !== void 0)
          return { B: obj.B };
        if (obj.SS !== void 0)
          return { SS: obj.SS };
        if (obj.NS !== void 0)
          return { NS: obj.NS };
        if (obj.BS !== void 0)
          return { BS: obj.BS };
        if (obj.M !== void 0)
          return {
            M: Object.entries(obj.M).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
              [key]: AttributeValue2.filterSensitiveLog(value)
            }), {})
          };
        if (obj.L !== void 0)
          return { L: obj.L.map((item) => AttributeValue2.filterSensitiveLog(item)) };
        if (obj.NULL !== void 0)
          return { NULL: obj.NULL };
        if (obj.BOOL !== void 0)
          return { BOOL: obj.BOOL };
        if (obj.$unknown !== void 0)
          return { [obj.$unknown[0]]: "UNKNOWN" };
      };
    })(AttributeValue = exports.AttributeValue || (exports.AttributeValue = {}));
    var AttributeValueUpdate;
    (function(AttributeValueUpdate2) {
      AttributeValueUpdate2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Value && { Value: AttributeValue.filterSensitiveLog(obj.Value) });
    })(AttributeValueUpdate = exports.AttributeValueUpdate || (exports.AttributeValueUpdate = {}));
    var BatchStatementRequest;
    (function(BatchStatementRequest2) {
      BatchStatementRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Parameters && { Parameters: obj.Parameters.map((item) => AttributeValue.filterSensitiveLog(item)) });
    })(BatchStatementRequest = exports.BatchStatementRequest || (exports.BatchStatementRequest = {}));
    var BatchStatementResponse;
    (function(BatchStatementResponse2) {
      BatchStatementResponse2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(BatchStatementResponse = exports.BatchStatementResponse || (exports.BatchStatementResponse = {}));
    var CancellationReason;
    (function(CancellationReason2) {
      CancellationReason2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(CancellationReason = exports.CancellationReason || (exports.CancellationReason = {}));
    var Condition;
    (function(Condition2) {
      Condition2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.AttributeValueList && {
        AttributeValueList: obj.AttributeValueList.map((item) => AttributeValue.filterSensitiveLog(item))
      });
    })(Condition = exports.Condition || (exports.Condition = {}));
    var DeleteRequest;
    (function(DeleteRequest2) {
      DeleteRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(DeleteRequest = exports.DeleteRequest || (exports.DeleteRequest = {}));
    var ExecuteStatementInput;
    (function(ExecuteStatementInput2) {
      ExecuteStatementInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Parameters && { Parameters: obj.Parameters.map((item) => AttributeValue.filterSensitiveLog(item)) });
    })(ExecuteStatementInput = exports.ExecuteStatementInput || (exports.ExecuteStatementInput = {}));
    var Get;
    (function(Get2) {
      Get2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(Get = exports.Get || (exports.Get = {}));
    var GetItemInput;
    (function(GetItemInput2) {
      GetItemInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(GetItemInput = exports.GetItemInput || (exports.GetItemInput = {}));
    var GetItemOutput;
    (function(GetItemOutput2) {
      GetItemOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(GetItemOutput = exports.GetItemOutput || (exports.GetItemOutput = {}));
    var ItemCollectionMetrics;
    (function(ItemCollectionMetrics2) {
      ItemCollectionMetrics2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.ItemCollectionKey && {
        ItemCollectionKey: Object.entries(obj.ItemCollectionKey).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(ItemCollectionMetrics = exports.ItemCollectionMetrics || (exports.ItemCollectionMetrics = {}));
    var ItemResponse;
    (function(ItemResponse2) {
      ItemResponse2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(ItemResponse = exports.ItemResponse || (exports.ItemResponse = {}));
    var ParameterizedStatement;
    (function(ParameterizedStatement2) {
      ParameterizedStatement2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Parameters && { Parameters: obj.Parameters.map((item) => AttributeValue.filterSensitiveLog(item)) });
    })(ParameterizedStatement = exports.ParameterizedStatement || (exports.ParameterizedStatement = {}));
    var PutRequest;
    (function(PutRequest2) {
      PutRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(PutRequest = exports.PutRequest || (exports.PutRequest = {}));
    var KeysAndAttributes;
    (function(KeysAndAttributes2) {
      KeysAndAttributes2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Keys && {
        Keys: obj.Keys.map((item) => Object.entries(item).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {}))
      });
    })(KeysAndAttributes = exports.KeysAndAttributes || (exports.KeysAndAttributes = {}));
    var TransactGetItem;
    (function(TransactGetItem2) {
      TransactGetItem2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Get && { Get: Get.filterSensitiveLog(obj.Get) });
    })(TransactGetItem = exports.TransactGetItem || (exports.TransactGetItem = {}));
    var BatchExecuteStatementInput;
    (function(BatchExecuteStatementInput2) {
      BatchExecuteStatementInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Statements && { Statements: obj.Statements.map((item) => BatchStatementRequest.filterSensitiveLog(item)) });
    })(BatchExecuteStatementInput = exports.BatchExecuteStatementInput || (exports.BatchExecuteStatementInput = {}));
    var BatchExecuteStatementOutput;
    (function(BatchExecuteStatementOutput2) {
      BatchExecuteStatementOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Responses && { Responses: obj.Responses.map((item) => BatchStatementResponse.filterSensitiveLog(item)) });
    })(BatchExecuteStatementOutput = exports.BatchExecuteStatementOutput || (exports.BatchExecuteStatementOutput = {}));
    var ExecuteTransactionInput;
    (function(ExecuteTransactionInput2) {
      ExecuteTransactionInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.TransactStatements && {
        TransactStatements: obj.TransactStatements.map((item) => ParameterizedStatement.filterSensitiveLog(item))
      });
    })(ExecuteTransactionInput = exports.ExecuteTransactionInput || (exports.ExecuteTransactionInput = {}));
    var ExecuteTransactionOutput;
    (function(ExecuteTransactionOutput2) {
      ExecuteTransactionOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Responses && { Responses: obj.Responses.map((item) => ItemResponse.filterSensitiveLog(item)) });
    })(ExecuteTransactionOutput = exports.ExecuteTransactionOutput || (exports.ExecuteTransactionOutput = {}));
    var TransactGetItemsOutput;
    (function(TransactGetItemsOutput2) {
      TransactGetItemsOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.Responses && { Responses: obj.Responses.map((item) => ItemResponse.filterSensitiveLog(item)) });
    })(TransactGetItemsOutput = exports.TransactGetItemsOutput || (exports.TransactGetItemsOutput = {}));
    var TransactionCanceledException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TransactionCanceledException",
          $fault: "client"
        }, opts));
        this.name = "TransactionCanceledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionCanceledException.prototype);
        this.Message = opts.Message;
        this.CancellationReasons = opts.CancellationReasons;
      }
    };
    exports.TransactionCanceledException = TransactionCanceledException;
    var BatchGetItemInput;
    (function(BatchGetItemInput2) {
      BatchGetItemInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.RequestItems && {
        RequestItems: Object.entries(obj.RequestItems).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: KeysAndAttributes.filterSensitiveLog(value)
        }), {})
      });
    })(BatchGetItemInput = exports.BatchGetItemInput || (exports.BatchGetItemInput = {}));
    var ExpectedAttributeValue;
    (function(ExpectedAttributeValue2) {
      ExpectedAttributeValue2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Value && { Value: AttributeValue.filterSensitiveLog(obj.Value) }), obj.AttributeValueList && {
        AttributeValueList: obj.AttributeValueList.map((item) => AttributeValue.filterSensitiveLog(item))
      });
    })(ExpectedAttributeValue = exports.ExpectedAttributeValue || (exports.ExpectedAttributeValue = {}));
    var TransactGetItemsInput;
    (function(TransactGetItemsInput2) {
      TransactGetItemsInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.TransactItems && {
        TransactItems: obj.TransactItems.map((item) => TransactGetItem.filterSensitiveLog(item))
      });
    })(TransactGetItemsInput = exports.TransactGetItemsInput || (exports.TransactGetItemsInput = {}));
    var TransactWriteItemsOutput;
    (function(TransactWriteItemsOutput2) {
      TransactWriteItemsOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: Object.entries(obj.ItemCollectionMetrics).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: value.map((item) => ItemCollectionMetrics.filterSensitiveLog(item))
        }), {})
      });
    })(TransactWriteItemsOutput = exports.TransactWriteItemsOutput || (exports.TransactWriteItemsOutput = {}));
    var ConditionCheck;
    (function(ConditionCheck2) {
      ConditionCheck2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(ConditionCheck = exports.ConditionCheck || (exports.ConditionCheck = {}));
    var Delete;
    (function(Delete2) {
      Delete2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(Delete = exports.Delete || (exports.Delete = {}));
    var Put;
    (function(Put2) {
      Put2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(Put = exports.Put || (exports.Put = {}));
    var Update;
    (function(Update2) {
      Update2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(Update = exports.Update || (exports.Update = {}));
    var DeleteItemOutput;
    (function(DeleteItemOutput2) {
      DeleteItemOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Attributes && {
        Attributes: Object.entries(obj.Attributes).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: ItemCollectionMetrics.filterSensitiveLog(obj.ItemCollectionMetrics)
      });
    })(DeleteItemOutput = exports.DeleteItemOutput || (exports.DeleteItemOutput = {}));
    var ExecuteStatementOutput;
    (function(ExecuteStatementOutput2) {
      ExecuteStatementOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Items && {
        Items: obj.Items.map((item) => Object.entries(item).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {}))
      }), obj.LastEvaluatedKey && {
        LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(ExecuteStatementOutput = exports.ExecuteStatementOutput || (exports.ExecuteStatementOutput = {}));
    var PutItemOutput2;
    (function(PutItemOutput3) {
      PutItemOutput3.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Attributes && {
        Attributes: Object.entries(obj.Attributes).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: ItemCollectionMetrics.filterSensitiveLog(obj.ItemCollectionMetrics)
      });
    })(PutItemOutput2 = exports.PutItemOutput || (exports.PutItemOutput = {}));
    var QueryOutput;
    (function(QueryOutput2) {
      QueryOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Items && {
        Items: obj.Items.map((item) => Object.entries(item).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {}))
      }), obj.LastEvaluatedKey && {
        LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(QueryOutput = exports.QueryOutput || (exports.QueryOutput = {}));
    var ScanOutput;
    (function(ScanOutput2) {
      ScanOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Items && {
        Items: obj.Items.map((item) => Object.entries(item).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {}))
      }), obj.LastEvaluatedKey && {
        LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(ScanOutput = exports.ScanOutput || (exports.ScanOutput = {}));
    var UpdateItemOutput;
    (function(UpdateItemOutput2) {
      UpdateItemOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Attributes && {
        Attributes: Object.entries(obj.Attributes).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: ItemCollectionMetrics.filterSensitiveLog(obj.ItemCollectionMetrics)
      });
    })(UpdateItemOutput = exports.UpdateItemOutput || (exports.UpdateItemOutput = {}));
    var WriteRequest;
    (function(WriteRequest2) {
      WriteRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.PutRequest && { PutRequest: PutRequest.filterSensitiveLog(obj.PutRequest) }), obj.DeleteRequest && { DeleteRequest: DeleteRequest.filterSensitiveLog(obj.DeleteRequest) });
    })(WriteRequest = exports.WriteRequest || (exports.WriteRequest = {}));
    var BatchGetItemOutput;
    (function(BatchGetItemOutput2) {
      BatchGetItemOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.Responses && {
        Responses: Object.entries(obj.Responses).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: value.map((item) => Object.entries(item).reduce((acc2, [key2, value2]) => __spreadProps(__spreadValues({}, acc2), {
            [key2]: AttributeValue.filterSensitiveLog(value2)
          }), {}))
        }), {})
      }), obj.UnprocessedKeys && {
        UnprocessedKeys: Object.entries(obj.UnprocessedKeys).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: KeysAndAttributes.filterSensitiveLog(value)
        }), {})
      });
    })(BatchGetItemOutput = exports.BatchGetItemOutput || (exports.BatchGetItemOutput = {}));
    var ScanInput;
    (function(ScanInput2) {
      ScanInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, obj), obj.ScanFilter && {
        ScanFilter: Object.entries(obj.ScanFilter).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: Condition.filterSensitiveLog(value)
        }), {})
      }), obj.ExclusiveStartKey && {
        ExclusiveStartKey: Object.entries(obj.ExclusiveStartKey).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(ScanInput = exports.ScanInput || (exports.ScanInput = {}));
    var BatchWriteItemInput;
    (function(BatchWriteItemInput2) {
      BatchWriteItemInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.RequestItems && {
        RequestItems: Object.entries(obj.RequestItems).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: value.map((item) => WriteRequest.filterSensitiveLog(item))
        }), {})
      });
    })(BatchWriteItemInput = exports.BatchWriteItemInput || (exports.BatchWriteItemInput = {}));
    var DeleteItemInput;
    (function(DeleteItemInput2) {
      DeleteItemInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, obj), obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.Expected && {
        Expected: Object.entries(obj.Expected).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: ExpectedAttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(DeleteItemInput = exports.DeleteItemInput || (exports.DeleteItemInput = {}));
    var PutItemInput;
    (function(PutItemInput2) {
      PutItemInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, obj), obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.Expected && {
        Expected: Object.entries(obj.Expected).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: ExpectedAttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(PutItemInput = exports.PutItemInput || (exports.PutItemInput = {}));
    var QueryInput;
    (function(QueryInput2) {
      QueryInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, obj), obj.KeyConditions && {
        KeyConditions: Object.entries(obj.KeyConditions).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: Condition.filterSensitiveLog(value)
        }), {})
      }), obj.QueryFilter && {
        QueryFilter: Object.entries(obj.QueryFilter).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: Condition.filterSensitiveLog(value)
        }), {})
      }), obj.ExclusiveStartKey && {
        ExclusiveStartKey: Object.entries(obj.ExclusiveStartKey).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(QueryInput = exports.QueryInput || (exports.QueryInput = {}));
    var BatchWriteItemOutput;
    (function(BatchWriteItemOutput2) {
      BatchWriteItemOutput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.UnprocessedItems && {
        UnprocessedItems: Object.entries(obj.UnprocessedItems).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: value.map((item) => WriteRequest.filterSensitiveLog(item))
        }), {})
      }), obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: Object.entries(obj.ItemCollectionMetrics).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: value.map((item) => ItemCollectionMetrics.filterSensitiveLog(item))
        }), {})
      });
    })(BatchWriteItemOutput = exports.BatchWriteItemOutput || (exports.BatchWriteItemOutput = {}));
    var UpdateItemInput;
    (function(UpdateItemInput2) {
      UpdateItemInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, obj), obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.AttributeUpdates && {
        AttributeUpdates: Object.entries(obj.AttributeUpdates).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValueUpdate.filterSensitiveLog(value)
        }), {})
      }), obj.Expected && {
        Expected: Object.entries(obj.Expected).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: ExpectedAttributeValue.filterSensitiveLog(value)
        }), {})
      }), obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
          [key]: AttributeValue.filterSensitiveLog(value)
        }), {})
      });
    })(UpdateItemInput = exports.UpdateItemInput || (exports.UpdateItemInput = {}));
    var TransactWriteItem;
    (function(TransactWriteItem2) {
      TransactWriteItem2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, obj), obj.ConditionCheck && { ConditionCheck: ConditionCheck.filterSensitiveLog(obj.ConditionCheck) }), obj.Put && { Put: Put.filterSensitiveLog(obj.Put) }), obj.Delete && { Delete: Delete.filterSensitiveLog(obj.Delete) }), obj.Update && { Update: Update.filterSensitiveLog(obj.Update) });
    })(TransactWriteItem = exports.TransactWriteItem || (exports.TransactWriteItem = {}));
    var TransactWriteItemsInput;
    (function(TransactWriteItemsInput2) {
      TransactWriteItemsInput2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.TransactItems && {
        TransactItems: obj.TransactItems.map((item) => TransactWriteItem.filterSensitiveLog(item))
      });
    })(TransactWriteItemsInput = exports.TransactWriteItemsInput || (exports.TransactWriteItemsInput = {}));
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new HttpRequest(__spreadProps(__spreadValues({}, this), {
          headers: __spreadValues({}, this.headers)
        }));
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return __spreadProps(__spreadValues({}, carry), {
          [paramName]: Array.isArray(param) ? [...param] : param
        });
      }, {});
    }
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports.HttpResponse = HttpResponse;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports.isValidHostname = isValidHostname;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  "node_modules/@aws-sdk/protocol-http/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_httpHandler(), exports);
    tslib_1.__exportStar(require_httpRequest(), exports);
    tslib_1.__exportStar(require_httpResponse(), exports);
    tslib_1.__exportStar(require_isValidHostname(), exports);
  }
});

// node_modules/uuid/dist/rng.js
var require_rng = __commonJS({
  "node_modules/uuid/dist/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rnds8Pool = new Uint8Array(256);
    var poolPtr = rnds8Pool.length;
    function rng() {
      if (poolPtr > rnds8Pool.length - 16) {
        _crypto.default.randomFillSync(rnds8Pool);
        poolPtr = 0;
      }
      return rnds8Pool.slice(poolPtr, poolPtr += 16);
    }
  }
});

// node_modules/uuid/dist/regex.js
var require_regex = __commonJS({
  "node_modules/uuid/dist/regex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/validate.js
var require_validate = __commonJS({
  "node_modules/uuid/dist/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === "string" && _regex.default.test(uuid);
    }
    var _default = validate;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS({
  "node_modules/uuid/dist/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    function stringify(arr, offset = 0) {
      const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    var _default = stringify;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/dist/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.default)(b);
    }
    var _default = v1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/parse.js
var require_parse = __commonJS({
  "node_modules/uuid/dist/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v35.js
var require_v35 = __commonJS({
  "node_modules/uuid/dist/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _default;
    exports.URL = exports.DNS = void 0;
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.DNS = DNS;
    var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = URL2;
    function _default(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === "string") {
          value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
          namespace = (0, _parse.default)(namespace);
        }
        if (namespace.length !== 16) {
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.default)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  }
});

// node_modules/uuid/dist/md5.js
var require_md5 = __commonJS({
  "node_modules/uuid/dist/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function md5(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("md5").update(bytes).digest();
    }
    var _default = md5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v3.js
var require_v3 = __commonJS({
  "node_modules/uuid/dist/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default);
    var _default = v3;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/dist/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.default)(rnds);
    }
    var _default = v4;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS({
  "node_modules/uuid/dist/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _crypto = _interopRequireDefault(require("crypto"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function sha1(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === "string") {
        bytes = Buffer.from(bytes, "utf8");
      }
      return _crypto.default.createHash("sha1").update(bytes).digest();
    }
    var _default = sha1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/v5.js
var require_v5 = __commonJS({
  "node_modules/uuid/dist/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/nil.js
var require_nil = __commonJS({
  "node_modules/uuid/dist/nil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports.default = _default;
  }
});

// node_modules/uuid/dist/version.js
var require_version = __commonJS({
  "node_modules/uuid/dist/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.substr(14, 1), 16);
    }
    var _default = version;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/index.js
var require_dist = __commonJS({
  "node_modules/uuid/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function() {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports, "NIL", {
      enumerable: true,
      get: function() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function() {
        return _version.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "stringify", {
      enumerable: true,
      get: function() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function() {
        return _parse.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js
var require_Aws_json1_0 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeAws_json1_0UpdateTimeToLiveCommand = exports.serializeAws_json1_0UpdateTableReplicaAutoScalingCommand = exports.serializeAws_json1_0UpdateTableCommand = exports.serializeAws_json1_0UpdateItemCommand = exports.serializeAws_json1_0UpdateGlobalTableSettingsCommand = exports.serializeAws_json1_0UpdateGlobalTableCommand = exports.serializeAws_json1_0UpdateContributorInsightsCommand = exports.serializeAws_json1_0UpdateContinuousBackupsCommand = exports.serializeAws_json1_0UntagResourceCommand = exports.serializeAws_json1_0TransactWriteItemsCommand = exports.serializeAws_json1_0TransactGetItemsCommand = exports.serializeAws_json1_0TagResourceCommand = exports.serializeAws_json1_0ScanCommand = exports.serializeAws_json1_0RestoreTableToPointInTimeCommand = exports.serializeAws_json1_0RestoreTableFromBackupCommand = exports.serializeAws_json1_0QueryCommand = exports.serializeAws_json1_0PutItemCommand = exports.serializeAws_json1_0ListTagsOfResourceCommand = exports.serializeAws_json1_0ListTablesCommand = exports.serializeAws_json1_0ListGlobalTablesCommand = exports.serializeAws_json1_0ListExportsCommand = exports.serializeAws_json1_0ListContributorInsightsCommand = exports.serializeAws_json1_0ListBackupsCommand = exports.serializeAws_json1_0GetItemCommand = exports.serializeAws_json1_0ExportTableToPointInTimeCommand = exports.serializeAws_json1_0ExecuteTransactionCommand = exports.serializeAws_json1_0ExecuteStatementCommand = exports.serializeAws_json1_0EnableKinesisStreamingDestinationCommand = exports.serializeAws_json1_0DisableKinesisStreamingDestinationCommand = exports.serializeAws_json1_0DescribeTimeToLiveCommand = exports.serializeAws_json1_0DescribeTableReplicaAutoScalingCommand = exports.serializeAws_json1_0DescribeTableCommand = exports.serializeAws_json1_0DescribeLimitsCommand = exports.serializeAws_json1_0DescribeKinesisStreamingDestinationCommand = exports.serializeAws_json1_0DescribeGlobalTableSettingsCommand = exports.serializeAws_json1_0DescribeGlobalTableCommand = exports.serializeAws_json1_0DescribeExportCommand = exports.serializeAws_json1_0DescribeEndpointsCommand = exports.serializeAws_json1_0DescribeContributorInsightsCommand = exports.serializeAws_json1_0DescribeContinuousBackupsCommand = exports.serializeAws_json1_0DescribeBackupCommand = exports.serializeAws_json1_0DeleteTableCommand = exports.serializeAws_json1_0DeleteItemCommand = exports.serializeAws_json1_0DeleteBackupCommand = exports.serializeAws_json1_0CreateTableCommand = exports.serializeAws_json1_0CreateGlobalTableCommand = exports.serializeAws_json1_0CreateBackupCommand = exports.serializeAws_json1_0BatchWriteItemCommand = exports.serializeAws_json1_0BatchGetItemCommand = exports.serializeAws_json1_0BatchExecuteStatementCommand = void 0;
    exports.deserializeAws_json1_0UpdateTimeToLiveCommand = exports.deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand = exports.deserializeAws_json1_0UpdateTableCommand = exports.deserializeAws_json1_0UpdateItemCommand = exports.deserializeAws_json1_0UpdateGlobalTableSettingsCommand = exports.deserializeAws_json1_0UpdateGlobalTableCommand = exports.deserializeAws_json1_0UpdateContributorInsightsCommand = exports.deserializeAws_json1_0UpdateContinuousBackupsCommand = exports.deserializeAws_json1_0UntagResourceCommand = exports.deserializeAws_json1_0TransactWriteItemsCommand = exports.deserializeAws_json1_0TransactGetItemsCommand = exports.deserializeAws_json1_0TagResourceCommand = exports.deserializeAws_json1_0ScanCommand = exports.deserializeAws_json1_0RestoreTableToPointInTimeCommand = exports.deserializeAws_json1_0RestoreTableFromBackupCommand = exports.deserializeAws_json1_0QueryCommand = exports.deserializeAws_json1_0PutItemCommand = exports.deserializeAws_json1_0ListTagsOfResourceCommand = exports.deserializeAws_json1_0ListTablesCommand = exports.deserializeAws_json1_0ListGlobalTablesCommand = exports.deserializeAws_json1_0ListExportsCommand = exports.deserializeAws_json1_0ListContributorInsightsCommand = exports.deserializeAws_json1_0ListBackupsCommand = exports.deserializeAws_json1_0GetItemCommand = exports.deserializeAws_json1_0ExportTableToPointInTimeCommand = exports.deserializeAws_json1_0ExecuteTransactionCommand = exports.deserializeAws_json1_0ExecuteStatementCommand = exports.deserializeAws_json1_0EnableKinesisStreamingDestinationCommand = exports.deserializeAws_json1_0DisableKinesisStreamingDestinationCommand = exports.deserializeAws_json1_0DescribeTimeToLiveCommand = exports.deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand = exports.deserializeAws_json1_0DescribeTableCommand = exports.deserializeAws_json1_0DescribeLimitsCommand = exports.deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand = exports.deserializeAws_json1_0DescribeGlobalTableSettingsCommand = exports.deserializeAws_json1_0DescribeGlobalTableCommand = exports.deserializeAws_json1_0DescribeExportCommand = exports.deserializeAws_json1_0DescribeEndpointsCommand = exports.deserializeAws_json1_0DescribeContributorInsightsCommand = exports.deserializeAws_json1_0DescribeContinuousBackupsCommand = exports.deserializeAws_json1_0DescribeBackupCommand = exports.deserializeAws_json1_0DeleteTableCommand = exports.deserializeAws_json1_0DeleteItemCommand = exports.deserializeAws_json1_0DeleteBackupCommand = exports.deserializeAws_json1_0CreateTableCommand = exports.deserializeAws_json1_0CreateGlobalTableCommand = exports.deserializeAws_json1_0CreateBackupCommand = exports.deserializeAws_json1_0BatchWriteItemCommand = exports.deserializeAws_json1_0BatchGetItemCommand = exports.deserializeAws_json1_0BatchExecuteStatementCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var uuid_1 = require_dist();
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    var models_0_1 = require_models_0();
    var serializeAws_json1_0BatchExecuteStatementCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.BatchExecuteStatement"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0BatchExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0BatchExecuteStatementCommand = serializeAws_json1_0BatchExecuteStatementCommand;
    var serializeAws_json1_0BatchGetItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.BatchGetItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0BatchGetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0BatchGetItemCommand = serializeAws_json1_0BatchGetItemCommand;
    var serializeAws_json1_0BatchWriteItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.BatchWriteItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0BatchWriteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0BatchWriteItemCommand = serializeAws_json1_0BatchWriteItemCommand;
    var serializeAws_json1_0CreateBackupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.CreateBackup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0CreateBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0CreateBackupCommand = serializeAws_json1_0CreateBackupCommand;
    var serializeAws_json1_0CreateGlobalTableCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.CreateGlobalTable"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0CreateGlobalTableInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0CreateGlobalTableCommand = serializeAws_json1_0CreateGlobalTableCommand;
    var serializeAws_json1_0CreateTableCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.CreateTable"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0CreateTableInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0CreateTableCommand = serializeAws_json1_0CreateTableCommand;
    var serializeAws_json1_0DeleteBackupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DeleteBackup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DeleteBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DeleteBackupCommand = serializeAws_json1_0DeleteBackupCommand;
    var serializeAws_json1_0DeleteItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DeleteItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DeleteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DeleteItemCommand = serializeAws_json1_0DeleteItemCommand;
    var serializeAws_json1_0DeleteTableCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DeleteTable"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DeleteTableInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DeleteTableCommand = serializeAws_json1_0DeleteTableCommand;
    var serializeAws_json1_0DescribeBackupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeBackup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeBackupCommand = serializeAws_json1_0DescribeBackupCommand;
    var serializeAws_json1_0DescribeContinuousBackupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeContinuousBackups"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeContinuousBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeContinuousBackupsCommand = serializeAws_json1_0DescribeContinuousBackupsCommand;
    var serializeAws_json1_0DescribeContributorInsightsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeContributorInsights"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeContributorInsightsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeContributorInsightsCommand = serializeAws_json1_0DescribeContributorInsightsCommand;
    var serializeAws_json1_0DescribeEndpointsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeEndpoints"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeEndpointsRequest(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeEndpointsCommand = serializeAws_json1_0DescribeEndpointsCommand;
    var serializeAws_json1_0DescribeExportCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeExport"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeExportInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeExportCommand = serializeAws_json1_0DescribeExportCommand;
    var serializeAws_json1_0DescribeGlobalTableCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeGlobalTable"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeGlobalTableInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeGlobalTableCommand = serializeAws_json1_0DescribeGlobalTableCommand;
    var serializeAws_json1_0DescribeGlobalTableSettingsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeGlobalTableSettings"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeGlobalTableSettingsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeGlobalTableSettingsCommand = serializeAws_json1_0DescribeGlobalTableSettingsCommand;
    var serializeAws_json1_0DescribeKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeKinesisStreamingDestination"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeKinesisStreamingDestinationInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeKinesisStreamingDestinationCommand = serializeAws_json1_0DescribeKinesisStreamingDestinationCommand;
    var serializeAws_json1_0DescribeLimitsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeLimits"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeLimitsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeLimitsCommand = serializeAws_json1_0DescribeLimitsCommand;
    var serializeAws_json1_0DescribeTableCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeTable"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeTableInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeTableCommand = serializeAws_json1_0DescribeTableCommand;
    var serializeAws_json1_0DescribeTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeTableReplicaAutoScaling"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeTableReplicaAutoScalingInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeTableReplicaAutoScalingCommand = serializeAws_json1_0DescribeTableReplicaAutoScalingCommand;
    var serializeAws_json1_0DescribeTimeToLiveCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeTimeToLive"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeTimeToLiveInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DescribeTimeToLiveCommand = serializeAws_json1_0DescribeTimeToLiveCommand;
    var serializeAws_json1_0DisableKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DisableKinesisStreamingDestination"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0KinesisStreamingDestinationInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0DisableKinesisStreamingDestinationCommand = serializeAws_json1_0DisableKinesisStreamingDestinationCommand;
    var serializeAws_json1_0EnableKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.EnableKinesisStreamingDestination"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0KinesisStreamingDestinationInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0EnableKinesisStreamingDestinationCommand = serializeAws_json1_0EnableKinesisStreamingDestinationCommand;
    var serializeAws_json1_0ExecuteStatementCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ExecuteStatement"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0ExecuteStatementCommand = serializeAws_json1_0ExecuteStatementCommand;
    var serializeAws_json1_0ExecuteTransactionCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ExecuteTransaction"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ExecuteTransactionInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0ExecuteTransactionCommand = serializeAws_json1_0ExecuteTransactionCommand;
    var serializeAws_json1_0ExportTableToPointInTimeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ExportTableToPointInTime"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ExportTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0ExportTableToPointInTimeCommand = serializeAws_json1_0ExportTableToPointInTimeCommand;
    var serializeAws_json1_0GetItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.GetItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0GetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0GetItemCommand = serializeAws_json1_0GetItemCommand;
    var serializeAws_json1_0ListBackupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListBackups"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0ListBackupsCommand = serializeAws_json1_0ListBackupsCommand;
    var serializeAws_json1_0ListContributorInsightsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListContributorInsights"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListContributorInsightsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0ListContributorInsightsCommand = serializeAws_json1_0ListContributorInsightsCommand;
    var serializeAws_json1_0ListExportsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListExports"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListExportsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0ListExportsCommand = serializeAws_json1_0ListExportsCommand;
    var serializeAws_json1_0ListGlobalTablesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListGlobalTables"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListGlobalTablesInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0ListGlobalTablesCommand = serializeAws_json1_0ListGlobalTablesCommand;
    var serializeAws_json1_0ListTablesCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListTables"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListTablesInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0ListTablesCommand = serializeAws_json1_0ListTablesCommand;
    var serializeAws_json1_0ListTagsOfResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListTagsOfResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListTagsOfResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0ListTagsOfResourceCommand = serializeAws_json1_0ListTagsOfResourceCommand;
    var serializeAws_json1_0PutItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.PutItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0PutItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0PutItemCommand = serializeAws_json1_0PutItemCommand;
    var serializeAws_json1_0QueryCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.Query"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0QueryInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0QueryCommand = serializeAws_json1_0QueryCommand;
    var serializeAws_json1_0RestoreTableFromBackupCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.RestoreTableFromBackup"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0RestoreTableFromBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0RestoreTableFromBackupCommand = serializeAws_json1_0RestoreTableFromBackupCommand;
    var serializeAws_json1_0RestoreTableToPointInTimeCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.RestoreTableToPointInTime"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0RestoreTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0RestoreTableToPointInTimeCommand = serializeAws_json1_0RestoreTableToPointInTimeCommand;
    var serializeAws_json1_0ScanCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.Scan"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ScanInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0ScanCommand = serializeAws_json1_0ScanCommand;
    var serializeAws_json1_0TagResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.TagResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0TagResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0TagResourceCommand = serializeAws_json1_0TagResourceCommand;
    var serializeAws_json1_0TransactGetItemsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.TransactGetItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0TransactGetItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0TransactGetItemsCommand = serializeAws_json1_0TransactGetItemsCommand;
    var serializeAws_json1_0TransactWriteItemsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.TransactWriteItems"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0TransactWriteItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0TransactWriteItemsCommand = serializeAws_json1_0TransactWriteItemsCommand;
    var serializeAws_json1_0UntagResourceCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UntagResource"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UntagResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0UntagResourceCommand = serializeAws_json1_0UntagResourceCommand;
    var serializeAws_json1_0UpdateContinuousBackupsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateContinuousBackups"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateContinuousBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0UpdateContinuousBackupsCommand = serializeAws_json1_0UpdateContinuousBackupsCommand;
    var serializeAws_json1_0UpdateContributorInsightsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateContributorInsights"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateContributorInsightsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0UpdateContributorInsightsCommand = serializeAws_json1_0UpdateContributorInsightsCommand;
    var serializeAws_json1_0UpdateGlobalTableCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateGlobalTable"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateGlobalTableInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0UpdateGlobalTableCommand = serializeAws_json1_0UpdateGlobalTableCommand;
    var serializeAws_json1_0UpdateGlobalTableSettingsCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateGlobalTableSettings"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateGlobalTableSettingsInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0UpdateGlobalTableSettingsCommand = serializeAws_json1_0UpdateGlobalTableSettingsCommand;
    var serializeAws_json1_0UpdateItemCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateItem"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateItemInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0UpdateItemCommand = serializeAws_json1_0UpdateItemCommand;
    var serializeAws_json1_0UpdateTableCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateTable"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateTableInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0UpdateTableCommand = serializeAws_json1_0UpdateTableCommand;
    var serializeAws_json1_0UpdateTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateTableReplicaAutoScaling"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateTableReplicaAutoScalingInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0UpdateTableReplicaAutoScalingCommand = serializeAws_json1_0UpdateTableReplicaAutoScalingCommand;
    var serializeAws_json1_0UpdateTimeToLiveCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateTimeToLive"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateTimeToLiveInput(input, context));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_json1_0UpdateTimeToLiveCommand = serializeAws_json1_0UpdateTimeToLiveCommand;
    var deserializeAws_json1_0BatchExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0BatchExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0BatchExecuteStatementOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0BatchExecuteStatementCommand = deserializeAws_json1_0BatchExecuteStatementCommand;
    var deserializeAws_json1_0BatchExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0BatchGetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0BatchGetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0BatchGetItemOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0BatchGetItemCommand = deserializeAws_json1_0BatchGetItemCommand;
    var deserializeAws_json1_0BatchGetItemCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0BatchWriteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0BatchWriteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0BatchWriteItemOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0BatchWriteItemCommand = deserializeAws_json1_0BatchWriteItemCommand;
    var deserializeAws_json1_0BatchWriteItemCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0CreateBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0CreateBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0CreateBackupOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0CreateBackupCommand = deserializeAws_json1_0CreateBackupCommand;
    var deserializeAws_json1_0CreateBackupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
          throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case "ContinuousBackupsUnavailableException":
        case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
          throw await deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
          throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0CreateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0CreateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0CreateGlobalTableOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0CreateGlobalTableCommand = deserializeAws_json1_0CreateGlobalTableCommand;
    var deserializeAws_json1_0CreateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableAlreadyExistsException":
        case "com.amazonaws.dynamodb#GlobalTableAlreadyExistsException":
          throw await deserializeAws_json1_0GlobalTableAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0CreateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0CreateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0CreateTableOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0CreateTableCommand = deserializeAws_json1_0CreateTableCommand;
    var deserializeAws_json1_0CreateTableCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DeleteBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DeleteBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DeleteBackupOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DeleteBackupCommand = deserializeAws_json1_0DeleteBackupCommand;
    var deserializeAws_json1_0DeleteBackupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
          throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
          throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DeleteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DeleteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DeleteItemOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DeleteItemCommand = deserializeAws_json1_0DeleteItemCommand;
    var deserializeAws_json1_0DeleteItemCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DeleteTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DeleteTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DeleteTableOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DeleteTableCommand = deserializeAws_json1_0DeleteTableCommand;
    var deserializeAws_json1_0DeleteTableCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeBackupOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeBackupCommand = deserializeAws_json1_0DescribeBackupCommand;
    var deserializeAws_json1_0DescribeBackupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
          throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeContinuousBackupsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeContinuousBackupsCommand = deserializeAws_json1_0DescribeContinuousBackupsCommand;
    var deserializeAws_json1_0DescribeContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeContributorInsightsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeContributorInsightsCommand = deserializeAws_json1_0DescribeContributorInsightsCommand;
    var deserializeAws_json1_0DescribeContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeEndpointsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeEndpointsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeEndpointsResponse(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeEndpointsCommand = deserializeAws_json1_0DescribeEndpointsCommand;
    var deserializeAws_json1_0DescribeEndpointsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeExportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeExportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeExportOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeExportCommand = deserializeAws_json1_0DescribeExportCommand;
    var deserializeAws_json1_0DescribeExportCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExportNotFoundException":
        case "com.amazonaws.dynamodb#ExportNotFoundException":
          throw await deserializeAws_json1_0ExportNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeGlobalTableOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeGlobalTableCommand = deserializeAws_json1_0DescribeGlobalTableCommand;
    var deserializeAws_json1_0DescribeGlobalTableCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeGlobalTableSettingsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeGlobalTableSettingsCommand = deserializeAws_json1_0DescribeGlobalTableSettingsCommand;
    var deserializeAws_json1_0DescribeGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeKinesisStreamingDestinationOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand = deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand;
    var deserializeAws_json1_0DescribeKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeLimitsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeLimitsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeLimitsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeLimitsCommand = deserializeAws_json1_0DescribeLimitsCommand;
    var deserializeAws_json1_0DescribeLimitsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeTableOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeTableCommand = deserializeAws_json1_0DescribeTableCommand;
    var deserializeAws_json1_0DescribeTableCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeTableReplicaAutoScalingOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand = deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand;
    var deserializeAws_json1_0DescribeTableReplicaAutoScalingCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DescribeTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeTimeToLiveOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DescribeTimeToLiveCommand = deserializeAws_json1_0DescribeTimeToLiveCommand;
    var deserializeAws_json1_0DescribeTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0DisableKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DisableKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0KinesisStreamingDestinationOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0DisableKinesisStreamingDestinationCommand = deserializeAws_json1_0DisableKinesisStreamingDestinationCommand;
    var deserializeAws_json1_0DisableKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0EnableKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0EnableKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0KinesisStreamingDestinationOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0EnableKinesisStreamingDestinationCommand = deserializeAws_json1_0EnableKinesisStreamingDestinationCommand;
    var deserializeAws_json1_0EnableKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ExecuteStatementOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ExecuteStatementCommand = deserializeAws_json1_0ExecuteStatementCommand;
    var deserializeAws_json1_0ExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case "DuplicateItemException":
        case "com.amazonaws.dynamodb#DuplicateItemException":
          throw await deserializeAws_json1_0DuplicateItemExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ExecuteTransactionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ExecuteTransactionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ExecuteTransactionOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ExecuteTransactionCommand = deserializeAws_json1_0ExecuteTransactionCommand;
    var deserializeAws_json1_0ExecuteTransactionCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
          throw await deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
          throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        case "TransactionInProgressException":
        case "com.amazonaws.dynamodb#TransactionInProgressException":
          throw await deserializeAws_json1_0TransactionInProgressExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ExportTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ExportTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ExportTableToPointInTimeOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ExportTableToPointInTimeCommand = deserializeAws_json1_0ExportTableToPointInTimeCommand;
    var deserializeAws_json1_0ExportTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExportConflictException":
        case "com.amazonaws.dynamodb#ExportConflictException":
          throw await deserializeAws_json1_0ExportConflictExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidExportTimeException":
        case "com.amazonaws.dynamodb#InvalidExportTimeException":
          throw await deserializeAws_json1_0InvalidExportTimeExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "PointInTimeRecoveryUnavailableException":
        case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
          throw await deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0GetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0GetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0GetItemOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0GetItemCommand = deserializeAws_json1_0GetItemCommand;
    var deserializeAws_json1_0GetItemCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListBackupsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListBackupsCommand = deserializeAws_json1_0ListBackupsCommand;
    var deserializeAws_json1_0ListBackupsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListContributorInsightsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListContributorInsightsCommand = deserializeAws_json1_0ListContributorInsightsCommand;
    var deserializeAws_json1_0ListContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListExportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListExportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListExportsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListExportsCommand = deserializeAws_json1_0ListExportsCommand;
    var deserializeAws_json1_0ListExportsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListGlobalTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListGlobalTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListGlobalTablesOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListGlobalTablesCommand = deserializeAws_json1_0ListGlobalTablesCommand;
    var deserializeAws_json1_0ListGlobalTablesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListTablesOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListTablesCommand = deserializeAws_json1_0ListTablesCommand;
    var deserializeAws_json1_0ListTablesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ListTagsOfResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListTagsOfResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListTagsOfResourceOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ListTagsOfResourceCommand = deserializeAws_json1_0ListTagsOfResourceCommand;
    var deserializeAws_json1_0ListTagsOfResourceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0PutItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0PutItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0PutItemOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0PutItemCommand = deserializeAws_json1_0PutItemCommand;
    var deserializeAws_json1_0PutItemCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0QueryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0QueryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0QueryOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0QueryCommand = deserializeAws_json1_0QueryCommand;
    var deserializeAws_json1_0QueryCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0RestoreTableFromBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0RestoreTableFromBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0RestoreTableFromBackupOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0RestoreTableFromBackupCommand = deserializeAws_json1_0RestoreTableFromBackupCommand;
    var deserializeAws_json1_0RestoreTableFromBackupCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
          throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
          throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "TableAlreadyExistsException":
        case "com.amazonaws.dynamodb#TableAlreadyExistsException":
          throw await deserializeAws_json1_0TableAlreadyExistsExceptionResponse(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
          throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0RestoreTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0RestoreTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0RestoreTableToPointInTimeOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0RestoreTableToPointInTimeCommand = deserializeAws_json1_0RestoreTableToPointInTimeCommand;
    var deserializeAws_json1_0RestoreTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "InvalidRestoreTimeException":
        case "com.amazonaws.dynamodb#InvalidRestoreTimeException":
          throw await deserializeAws_json1_0InvalidRestoreTimeExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "PointInTimeRecoveryUnavailableException":
        case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
          throw await deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse(parsedOutput, context);
        case "TableAlreadyExistsException":
        case "com.amazonaws.dynamodb#TableAlreadyExistsException":
          throw await deserializeAws_json1_0TableAlreadyExistsExceptionResponse(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
          throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0ScanCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ScanCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ScanOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0ScanCommand = deserializeAws_json1_0ScanCommand;
    var deserializeAws_json1_0ScanCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0TagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0TagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0TagResourceCommand = deserializeAws_json1_0TagResourceCommand;
    var deserializeAws_json1_0TagResourceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0TransactGetItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0TransactGetItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0TransactGetItemsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0TransactGetItemsCommand = deserializeAws_json1_0TransactGetItemsCommand;
    var deserializeAws_json1_0TransactGetItemsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
          throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0TransactWriteItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0TransactWriteItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0TransactWriteItemsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0TransactWriteItemsCommand = deserializeAws_json1_0TransactWriteItemsCommand;
    var deserializeAws_json1_0TransactWriteItemsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
          throw await deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
          throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        case "TransactionInProgressException":
        case "com.amazonaws.dynamodb#TransactionInProgressException":
          throw await deserializeAws_json1_0TransactionInProgressExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UntagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UntagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UntagResourceCommand = deserializeAws_json1_0UntagResourceCommand;
    var deserializeAws_json1_0UntagResourceCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateContinuousBackupsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateContinuousBackupsCommand = deserializeAws_json1_0UpdateContinuousBackupsCommand;
    var deserializeAws_json1_0UpdateContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ContinuousBackupsUnavailableException":
        case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
          throw await deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateContributorInsightsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateContributorInsightsCommand = deserializeAws_json1_0UpdateContributorInsightsCommand;
    var deserializeAws_json1_0UpdateContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateGlobalTableOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateGlobalTableCommand = deserializeAws_json1_0UpdateGlobalTableCommand;
    var deserializeAws_json1_0UpdateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ReplicaAlreadyExistsException":
        case "com.amazonaws.dynamodb#ReplicaAlreadyExistsException":
          throw await deserializeAws_json1_0ReplicaAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ReplicaNotFoundException":
        case "com.amazonaws.dynamodb#ReplicaNotFoundException":
          throw await deserializeAws_json1_0ReplicaNotFoundExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateGlobalTableSettingsOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateGlobalTableSettingsCommand = deserializeAws_json1_0UpdateGlobalTableSettingsCommand;
    var deserializeAws_json1_0UpdateGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case "IndexNotFoundException":
        case "com.amazonaws.dynamodb#IndexNotFoundException":
          throw await deserializeAws_json1_0IndexNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ReplicaNotFoundException":
        case "com.amazonaws.dynamodb#ReplicaNotFoundException":
          throw await deserializeAws_json1_0ReplicaNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateItemOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateItemCommand = deserializeAws_json1_0UpdateItemCommand;
    var deserializeAws_json1_0UpdateItemCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateTableOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateTableCommand = deserializeAws_json1_0UpdateTableCommand;
    var deserializeAws_json1_0UpdateTableCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateTableReplicaAutoScalingOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand = deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand;
    var deserializeAws_json1_0UpdateTableReplicaAutoScalingCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0UpdateTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateTimeToLiveOutput(data, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_json1_0UpdateTimeToLiveCommand = deserializeAws_json1_0UpdateTimeToLiveCommand;
    var deserializeAws_json1_0UpdateTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new DynamoDBServiceException_1.DynamoDBServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_json1_0BackupInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0BackupInUseException(body, context);
      const exception = new models_0_1.BackupInUseException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0BackupNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0BackupNotFoundException(body, context);
      const exception = new models_0_1.BackupNotFoundException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ConditionalCheckFailedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ConditionalCheckFailedException(body, context);
      const exception = new models_0_1.ConditionalCheckFailedException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ContinuousBackupsUnavailableException(body, context);
      const exception = new models_0_1.ContinuousBackupsUnavailableException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0DuplicateItemExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0DuplicateItemException(body, context);
      const exception = new models_0_1.DuplicateItemException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ExportConflictExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ExportConflictException(body, context);
      const exception = new models_0_1.ExportConflictException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ExportNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ExportNotFoundException(body, context);
      const exception = new models_0_1.ExportNotFoundException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0GlobalTableAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0GlobalTableAlreadyExistsException(body, context);
      const exception = new models_0_1.GlobalTableAlreadyExistsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0GlobalTableNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0GlobalTableNotFoundException(body, context);
      const exception = new models_0_1.GlobalTableNotFoundException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0IdempotentParameterMismatchException(body, context);
      const exception = new models_0_1.IdempotentParameterMismatchException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0IndexNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0IndexNotFoundException(body, context);
      const exception = new models_0_1.IndexNotFoundException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InternalServerErrorResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InternalServerError(body, context);
      const exception = new models_0_1.InternalServerError(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InvalidEndpointExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InvalidEndpointException(body, context);
      const exception = new models_0_1.InvalidEndpointException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InvalidExportTimeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InvalidExportTimeException(body, context);
      const exception = new models_0_1.InvalidExportTimeException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InvalidRestoreTimeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InvalidRestoreTimeException(body, context);
      const exception = new models_0_1.InvalidRestoreTimeException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ItemCollectionSizeLimitExceededException(body, context);
      const exception = new models_0_1.ItemCollectionSizeLimitExceededException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0LimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0LimitExceededException(body, context);
      const exception = new models_0_1.LimitExceededException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0PointInTimeRecoveryUnavailableException(body, context);
      const exception = new models_0_1.PointInTimeRecoveryUnavailableException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ProvisionedThroughputExceededException(body, context);
      const exception = new models_0_1.ProvisionedThroughputExceededException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ReplicaAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ReplicaAlreadyExistsException(body, context);
      const exception = new models_0_1.ReplicaAlreadyExistsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ReplicaNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ReplicaNotFoundException(body, context);
      const exception = new models_0_1.ReplicaNotFoundException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0RequestLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0RequestLimitExceeded(body, context);
      const exception = new models_0_1.RequestLimitExceeded(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ResourceInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ResourceInUseException(body, context);
      const exception = new models_0_1.ResourceInUseException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ResourceNotFoundException(body, context);
      const exception = new models_0_1.ResourceNotFoundException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TableAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TableAlreadyExistsException(body, context);
      const exception = new models_0_1.TableAlreadyExistsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TableInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TableInUseException(body, context);
      const exception = new models_0_1.TableInUseException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TableNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TableNotFoundException(body, context);
      const exception = new models_0_1.TableNotFoundException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TransactionCanceledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TransactionCanceledException(body, context);
      const exception = new models_0_1.TransactionCanceledException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TransactionConflictExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TransactionConflictException(body, context);
      const exception = new models_0_1.TransactionConflictException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TransactionInProgressExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TransactionInProgressException(body, context);
      const exception = new models_0_1.TransactionInProgressException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_json1_0AttributeDefinition = (input, context) => {
      return __spreadValues(__spreadValues({}, input.AttributeName !== void 0 && input.AttributeName !== null && { AttributeName: input.AttributeName }), input.AttributeType !== void 0 && input.AttributeType !== null && { AttributeType: input.AttributeType });
    };
    var serializeAws_json1_0AttributeDefinitions = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0AttributeDefinition(entry, context);
      });
    };
    var serializeAws_json1_0AttributeNameList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_0AttributeUpdates = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: serializeAws_json1_0AttributeValueUpdate(value, context)
        });
      }, {});
    };
    var serializeAws_json1_0AttributeValue = (input, context) => {
      return models_0_1.AttributeValue.visit(input, {
        B: (value) => ({ B: context.base64Encoder(value) }),
        BOOL: (value) => ({ BOOL: value }),
        BS: (value) => ({ BS: serializeAws_json1_0BinarySetAttributeValue(value, context) }),
        L: (value) => ({ L: serializeAws_json1_0ListAttributeValue(value, context) }),
        M: (value) => ({ M: serializeAws_json1_0MapAttributeValue(value, context) }),
        N: (value) => ({ N: value }),
        NS: (value) => ({ NS: serializeAws_json1_0NumberSetAttributeValue(value, context) }),
        NULL: (value) => ({ NULL: value }),
        S: (value) => ({ S: value }),
        SS: (value) => ({ SS: serializeAws_json1_0StringSetAttributeValue(value, context) }),
        _: (name, value) => ({ name: value })
      });
    };
    var serializeAws_json1_0AttributeValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0AttributeValue(entry, context);
      });
    };
    var serializeAws_json1_0AttributeValueUpdate = (input, context) => {
      return __spreadValues(__spreadValues({}, input.Action !== void 0 && input.Action !== null && { Action: input.Action }), input.Value !== void 0 && input.Value !== null && { Value: serializeAws_json1_0AttributeValue(input.Value, context) });
    };
    var serializeAws_json1_0AutoScalingPolicyUpdate = (input, context) => {
      return __spreadValues(__spreadValues({}, input.PolicyName !== void 0 && input.PolicyName !== null && { PolicyName: input.PolicyName }), input.TargetTrackingScalingPolicyConfiguration !== void 0 && input.TargetTrackingScalingPolicyConfiguration !== null && {
        TargetTrackingScalingPolicyConfiguration: serializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(input.TargetTrackingScalingPolicyConfiguration, context)
      });
    };
    var serializeAws_json1_0AutoScalingSettingsUpdate = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.AutoScalingDisabled !== void 0 && input.AutoScalingDisabled !== null && { AutoScalingDisabled: input.AutoScalingDisabled }), input.AutoScalingRoleArn !== void 0 && input.AutoScalingRoleArn !== null && { AutoScalingRoleArn: input.AutoScalingRoleArn }), input.MaximumUnits !== void 0 && input.MaximumUnits !== null && { MaximumUnits: input.MaximumUnits }), input.MinimumUnits !== void 0 && input.MinimumUnits !== null && { MinimumUnits: input.MinimumUnits }), input.ScalingPolicyUpdate !== void 0 && input.ScalingPolicyUpdate !== null && {
        ScalingPolicyUpdate: serializeAws_json1_0AutoScalingPolicyUpdate(input.ScalingPolicyUpdate, context)
      });
    };
    var serializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.DisableScaleIn !== void 0 && input.DisableScaleIn !== null && { DisableScaleIn: input.DisableScaleIn }), input.ScaleInCooldown !== void 0 && input.ScaleInCooldown !== null && { ScaleInCooldown: input.ScaleInCooldown }), input.ScaleOutCooldown !== void 0 && input.ScaleOutCooldown !== null && { ScaleOutCooldown: input.ScaleOutCooldown }), input.TargetValue !== void 0 && input.TargetValue !== null && { TargetValue: (0, smithy_client_1.serializeFloat)(input.TargetValue) });
    };
    var serializeAws_json1_0BatchExecuteStatementInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.Statements !== void 0 && input.Statements !== null && { Statements: serializeAws_json1_0PartiQLBatchRequest(input.Statements, context) });
    };
    var serializeAws_json1_0BatchGetItemInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.RequestItems !== void 0 && input.RequestItems !== null && {
        RequestItems: serializeAws_json1_0BatchGetRequestMap(input.RequestItems, context)
      }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity });
    };
    var serializeAws_json1_0BatchGetRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: serializeAws_json1_0KeysAndAttributes(value, context)
        });
      }, {});
    };
    var serializeAws_json1_0BatchStatementRequest = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.Parameters !== void 0 && input.Parameters !== null && {
        Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
      }), input.Statement !== void 0 && input.Statement !== null && { Statement: input.Statement });
    };
    var serializeAws_json1_0BatchWriteItemInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.RequestItems !== void 0 && input.RequestItems !== null && {
        RequestItems: serializeAws_json1_0BatchWriteItemRequestMap(input.RequestItems, context)
      }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ReturnItemCollectionMetrics !== void 0 && input.ReturnItemCollectionMetrics !== null && { ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics });
    };
    var serializeAws_json1_0BatchWriteItemRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: serializeAws_json1_0WriteRequests(value, context)
        });
      }, {});
    };
    var serializeAws_json1_0BinarySetAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return context.base64Encoder(entry);
      });
    };
    var serializeAws_json1_0Condition = (input, context) => {
      return __spreadValues(__spreadValues({}, input.AttributeValueList !== void 0 && input.AttributeValueList !== null && {
        AttributeValueList: serializeAws_json1_0AttributeValueList(input.AttributeValueList, context)
      }), input.ComparisonOperator !== void 0 && input.ComparisonOperator !== null && { ComparisonOperator: input.ComparisonOperator });
    };
    var serializeAws_json1_0ConditionCheck = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
        ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
      }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ReturnValuesOnConditionCheckFailure !== void 0 && input.ReturnValuesOnConditionCheckFailure !== null && {
        ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
      }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0CreateBackupInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.BackupName !== void 0 && input.BackupName !== null && { BackupName: input.BackupName }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0CreateGlobalSecondaryIndexAction = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.KeySchema !== void 0 && input.KeySchema !== null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }), input.Projection !== void 0 && input.Projection !== null && { Projection: serializeAws_json1_0Projection(input.Projection, context) }), input.ProvisionedThroughput !== void 0 && input.ProvisionedThroughput !== null && {
        ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
      });
    };
    var serializeAws_json1_0CreateGlobalTableInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.GlobalTableName !== void 0 && input.GlobalTableName !== null && { GlobalTableName: input.GlobalTableName }), input.ReplicationGroup !== void 0 && input.ReplicationGroup !== null && {
        ReplicationGroup: serializeAws_json1_0ReplicaList(input.ReplicationGroup, context)
      });
    };
    var serializeAws_json1_0CreateReplicaAction = (input, context) => {
      return __spreadValues({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
    };
    var serializeAws_json1_0CreateReplicationGroupMemberAction = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.GlobalSecondaryIndexes !== void 0 && input.GlobalSecondaryIndexes !== null && {
        GlobalSecondaryIndexes: serializeAws_json1_0ReplicaGlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
      }), input.KMSMasterKeyId !== void 0 && input.KMSMasterKeyId !== null && { KMSMasterKeyId: input.KMSMasterKeyId }), input.ProvisionedThroughputOverride !== void 0 && input.ProvisionedThroughputOverride !== null && {
        ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
      }), input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName }), input.TableClassOverride !== void 0 && input.TableClassOverride !== null && { TableClassOverride: input.TableClassOverride });
    };
    var serializeAws_json1_0CreateTableInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.AttributeDefinitions !== void 0 && input.AttributeDefinitions !== null && {
        AttributeDefinitions: serializeAws_json1_0AttributeDefinitions(input.AttributeDefinitions, context)
      }), input.BillingMode !== void 0 && input.BillingMode !== null && { BillingMode: input.BillingMode }), input.GlobalSecondaryIndexes !== void 0 && input.GlobalSecondaryIndexes !== null && {
        GlobalSecondaryIndexes: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
      }), input.KeySchema !== void 0 && input.KeySchema !== null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }), input.LocalSecondaryIndexes !== void 0 && input.LocalSecondaryIndexes !== null && {
        LocalSecondaryIndexes: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexes, context)
      }), input.ProvisionedThroughput !== void 0 && input.ProvisionedThroughput !== null && {
        ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
      }), input.SSESpecification !== void 0 && input.SSESpecification !== null && {
        SSESpecification: serializeAws_json1_0SSESpecification(input.SSESpecification, context)
      }), input.StreamSpecification !== void 0 && input.StreamSpecification !== null && {
        StreamSpecification: serializeAws_json1_0StreamSpecification(input.StreamSpecification, context)
      }), input.TableClass !== void 0 && input.TableClass !== null && { TableClass: input.TableClass }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_0TagList(input.Tags, context) });
    };
    var serializeAws_json1_0Delete = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
        ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
      }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ReturnValuesOnConditionCheckFailure !== void 0 && input.ReturnValuesOnConditionCheckFailure !== null && {
        ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
      }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0DeleteBackupInput = (input, context) => {
      return __spreadValues({}, input.BackupArn !== void 0 && input.BackupArn !== null && { BackupArn: input.BackupArn });
    };
    var serializeAws_json1_0DeleteGlobalSecondaryIndexAction = (input, context) => {
      return __spreadValues({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName });
    };
    var serializeAws_json1_0DeleteItemInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ConditionalOperator !== void 0 && input.ConditionalOperator !== null && { ConditionalOperator: input.ConditionalOperator }), input.Expected !== void 0 && input.Expected !== null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
        ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
      }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ReturnItemCollectionMetrics !== void 0 && input.ReturnItemCollectionMetrics !== null && { ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics }), input.ReturnValues !== void 0 && input.ReturnValues !== null && { ReturnValues: input.ReturnValues }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0DeleteReplicaAction = (input, context) => {
      return __spreadValues({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
    };
    var serializeAws_json1_0DeleteReplicationGroupMemberAction = (input, context) => {
      return __spreadValues({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
    };
    var serializeAws_json1_0DeleteRequest = (input, context) => {
      return __spreadValues({}, input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) });
    };
    var serializeAws_json1_0DeleteTableInput = (input, context) => {
      return __spreadValues({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0DescribeBackupInput = (input, context) => {
      return __spreadValues({}, input.BackupArn !== void 0 && input.BackupArn !== null && { BackupArn: input.BackupArn });
    };
    var serializeAws_json1_0DescribeContinuousBackupsInput = (input, context) => {
      return __spreadValues({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0DescribeContributorInsightsInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0DescribeEndpointsRequest = (input, context) => {
      return {};
    };
    var serializeAws_json1_0DescribeExportInput = (input, context) => {
      return __spreadValues({}, input.ExportArn !== void 0 && input.ExportArn !== null && { ExportArn: input.ExportArn });
    };
    var serializeAws_json1_0DescribeGlobalTableInput = (input, context) => {
      return __spreadValues({}, input.GlobalTableName !== void 0 && input.GlobalTableName !== null && { GlobalTableName: input.GlobalTableName });
    };
    var serializeAws_json1_0DescribeGlobalTableSettingsInput = (input, context) => {
      return __spreadValues({}, input.GlobalTableName !== void 0 && input.GlobalTableName !== null && { GlobalTableName: input.GlobalTableName });
    };
    var serializeAws_json1_0DescribeKinesisStreamingDestinationInput = (input, context) => {
      return __spreadValues({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0DescribeLimitsInput = (input, context) => {
      return {};
    };
    var serializeAws_json1_0DescribeTableInput = (input, context) => {
      return __spreadValues({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0DescribeTableReplicaAutoScalingInput = (input, context) => {
      return __spreadValues({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0DescribeTimeToLiveInput = (input, context) => {
      return __spreadValues({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0ExecuteStatementInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }), input.Parameters !== void 0 && input.Parameters !== null && {
        Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
      }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.Statement !== void 0 && input.Statement !== null && { Statement: input.Statement });
    };
    var serializeAws_json1_0ExecuteTransactionInput = (input, context) => {
      var _a;
      return __spreadValues(__spreadValues({
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)()
      }, input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.TransactStatements !== void 0 && input.TransactStatements !== null && {
        TransactStatements: serializeAws_json1_0ParameterizedStatements(input.TransactStatements, context)
      });
    };
    var serializeAws_json1_0ExpectedAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: serializeAws_json1_0ExpectedAttributeValue(value, context)
        });
      }, {});
    };
    var serializeAws_json1_0ExpectedAttributeValue = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.AttributeValueList !== void 0 && input.AttributeValueList !== null && {
        AttributeValueList: serializeAws_json1_0AttributeValueList(input.AttributeValueList, context)
      }), input.ComparisonOperator !== void 0 && input.ComparisonOperator !== null && { ComparisonOperator: input.ComparisonOperator }), input.Exists !== void 0 && input.Exists !== null && { Exists: input.Exists }), input.Value !== void 0 && input.Value !== null && { Value: serializeAws_json1_0AttributeValue(input.Value, context) });
    };
    var serializeAws_json1_0ExportTableToPointInTimeInput = (input, context) => {
      var _a;
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({
        ClientToken: (_a = input.ClientToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)()
      }, input.ExportFormat !== void 0 && input.ExportFormat !== null && { ExportFormat: input.ExportFormat }), input.ExportTime !== void 0 && input.ExportTime !== null && { ExportTime: Math.round(input.ExportTime.getTime() / 1e3) }), input.S3Bucket !== void 0 && input.S3Bucket !== null && { S3Bucket: input.S3Bucket }), input.S3BucketOwner !== void 0 && input.S3BucketOwner !== null && { S3BucketOwner: input.S3BucketOwner }), input.S3Prefix !== void 0 && input.S3Prefix !== null && { S3Prefix: input.S3Prefix }), input.S3SseAlgorithm !== void 0 && input.S3SseAlgorithm !== null && { S3SseAlgorithm: input.S3SseAlgorithm }), input.S3SseKmsKeyId !== void 0 && input.S3SseKmsKeyId !== null && { S3SseKmsKeyId: input.S3SseKmsKeyId }), input.TableArn !== void 0 && input.TableArn !== null && { TableArn: input.TableArn });
    };
    var serializeAws_json1_0ExpressionAttributeNameMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: value
        });
      }, {});
    };
    var serializeAws_json1_0ExpressionAttributeValueMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: serializeAws_json1_0AttributeValue(value, context)
        });
      }, {});
    };
    var serializeAws_json1_0FilterConditionMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: serializeAws_json1_0Condition(value, context)
        });
      }, {});
    };
    var serializeAws_json1_0Get = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ProjectionExpression !== void 0 && input.ProjectionExpression !== null && { ProjectionExpression: input.ProjectionExpression }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0GetItemInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.AttributesToGet !== void 0 && input.AttributesToGet !== null && {
        AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
      }), input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ProjectionExpression !== void 0 && input.ProjectionExpression !== null && { ProjectionExpression: input.ProjectionExpression }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0GlobalSecondaryIndex = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.KeySchema !== void 0 && input.KeySchema !== null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }), input.Projection !== void 0 && input.Projection !== null && { Projection: serializeAws_json1_0Projection(input.Projection, context) }), input.ProvisionedThroughput !== void 0 && input.ProvisionedThroughput !== null && {
        ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
      });
    };
    var serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return __spreadValues(__spreadValues({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedWriteCapacityAutoScalingUpdate !== void 0 && input.ProvisionedWriteCapacityAutoScalingUpdate !== null && {
        ProvisionedWriteCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingUpdate, context)
      });
    };
    var serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdate(entry, context);
      });
    };
    var serializeAws_json1_0GlobalSecondaryIndexList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0GlobalSecondaryIndex(entry, context);
      });
    };
    var serializeAws_json1_0GlobalSecondaryIndexUpdate = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.Create !== void 0 && input.Create !== null && { Create: serializeAws_json1_0CreateGlobalSecondaryIndexAction(input.Create, context) }), input.Delete !== void 0 && input.Delete !== null && { Delete: serializeAws_json1_0DeleteGlobalSecondaryIndexAction(input.Delete, context) }), input.Update !== void 0 && input.Update !== null && { Update: serializeAws_json1_0UpdateGlobalSecondaryIndexAction(input.Update, context) });
    };
    var serializeAws_json1_0GlobalSecondaryIndexUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0GlobalSecondaryIndexUpdate(entry, context);
      });
    };
    var serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedWriteCapacityAutoScalingSettingsUpdate !== void 0 && input.ProvisionedWriteCapacityAutoScalingSettingsUpdate !== null && {
        ProvisionedWriteCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingSettingsUpdate, context)
      }), input.ProvisionedWriteCapacityUnits !== void 0 && input.ProvisionedWriteCapacityUnits !== null && {
        ProvisionedWriteCapacityUnits: input.ProvisionedWriteCapacityUnits
      });
    };
    var serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdate(entry, context);
      });
    };
    var serializeAws_json1_0Key = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: serializeAws_json1_0AttributeValue(value, context)
        });
      }, {});
    };
    var serializeAws_json1_0KeyConditions = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: serializeAws_json1_0Condition(value, context)
        });
      }, {});
    };
    var serializeAws_json1_0KeyList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0Key(entry, context);
      });
    };
    var serializeAws_json1_0KeysAndAttributes = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.AttributesToGet !== void 0 && input.AttributesToGet !== null && {
        AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
      }), input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.Keys !== void 0 && input.Keys !== null && { Keys: serializeAws_json1_0KeyList(input.Keys, context) }), input.ProjectionExpression !== void 0 && input.ProjectionExpression !== null && { ProjectionExpression: input.ProjectionExpression });
    };
    var serializeAws_json1_0KeySchema = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0KeySchemaElement(entry, context);
      });
    };
    var serializeAws_json1_0KeySchemaElement = (input, context) => {
      return __spreadValues(__spreadValues({}, input.AttributeName !== void 0 && input.AttributeName !== null && { AttributeName: input.AttributeName }), input.KeyType !== void 0 && input.KeyType !== null && { KeyType: input.KeyType });
    };
    var serializeAws_json1_0KinesisStreamingDestinationInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.StreamArn !== void 0 && input.StreamArn !== null && { StreamArn: input.StreamArn }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0ListAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0AttributeValue(entry, context);
      });
    };
    var serializeAws_json1_0ListBackupsInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.BackupType !== void 0 && input.BackupType !== null && { BackupType: input.BackupType }), input.ExclusiveStartBackupArn !== void 0 && input.ExclusiveStartBackupArn !== null && { ExclusiveStartBackupArn: input.ExclusiveStartBackupArn }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.TimeRangeLowerBound !== void 0 && input.TimeRangeLowerBound !== null && {
        TimeRangeLowerBound: Math.round(input.TimeRangeLowerBound.getTime() / 1e3)
      }), input.TimeRangeUpperBound !== void 0 && input.TimeRangeUpperBound !== null && {
        TimeRangeUpperBound: Math.round(input.TimeRangeUpperBound.getTime() / 1e3)
      });
    };
    var serializeAws_json1_0ListContributorInsightsInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0ListExportsInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.MaxResults !== void 0 && input.MaxResults !== null && { MaxResults: input.MaxResults }), input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }), input.TableArn !== void 0 && input.TableArn !== null && { TableArn: input.TableArn });
    };
    var serializeAws_json1_0ListGlobalTablesInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.ExclusiveStartGlobalTableName !== void 0 && input.ExclusiveStartGlobalTableName !== null && {
        ExclusiveStartGlobalTableName: input.ExclusiveStartGlobalTableName
      }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
    };
    var serializeAws_json1_0ListTablesInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.ExclusiveStartTableName !== void 0 && input.ExclusiveStartTableName !== null && { ExclusiveStartTableName: input.ExclusiveStartTableName }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit });
    };
    var serializeAws_json1_0ListTagsOfResourceInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.NextToken !== void 0 && input.NextToken !== null && { NextToken: input.NextToken }), input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn });
    };
    var serializeAws_json1_0LocalSecondaryIndex = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.KeySchema !== void 0 && input.KeySchema !== null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) }), input.Projection !== void 0 && input.Projection !== null && { Projection: serializeAws_json1_0Projection(input.Projection, context) });
    };
    var serializeAws_json1_0LocalSecondaryIndexList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0LocalSecondaryIndex(entry, context);
      });
    };
    var serializeAws_json1_0MapAttributeValue = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: serializeAws_json1_0AttributeValue(value, context)
        });
      }, {});
    };
    var serializeAws_json1_0NonKeyAttributeNameList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_0NumberSetAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_0ParameterizedStatement = (input, context) => {
      return __spreadValues(__spreadValues({}, input.Parameters !== void 0 && input.Parameters !== null && {
        Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
      }), input.Statement !== void 0 && input.Statement !== null && { Statement: input.Statement });
    };
    var serializeAws_json1_0ParameterizedStatements = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0ParameterizedStatement(entry, context);
      });
    };
    var serializeAws_json1_0PartiQLBatchRequest = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0BatchStatementRequest(entry, context);
      });
    };
    var serializeAws_json1_0PointInTimeRecoverySpecification = (input, context) => {
      return __spreadValues({}, input.PointInTimeRecoveryEnabled !== void 0 && input.PointInTimeRecoveryEnabled !== null && { PointInTimeRecoveryEnabled: input.PointInTimeRecoveryEnabled });
    };
    var serializeAws_json1_0PreparedStatementParameters = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0AttributeValue(entry, context);
      });
    };
    var serializeAws_json1_0Projection = (input, context) => {
      return __spreadValues(__spreadValues({}, input.NonKeyAttributes !== void 0 && input.NonKeyAttributes !== null && {
        NonKeyAttributes: serializeAws_json1_0NonKeyAttributeNameList(input.NonKeyAttributes, context)
      }), input.ProjectionType !== void 0 && input.ProjectionType !== null && { ProjectionType: input.ProjectionType });
    };
    var serializeAws_json1_0ProvisionedThroughput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.ReadCapacityUnits !== void 0 && input.ReadCapacityUnits !== null && { ReadCapacityUnits: input.ReadCapacityUnits }), input.WriteCapacityUnits !== void 0 && input.WriteCapacityUnits !== null && { WriteCapacityUnits: input.WriteCapacityUnits });
    };
    var serializeAws_json1_0ProvisionedThroughputOverride = (input, context) => {
      return __spreadValues({}, input.ReadCapacityUnits !== void 0 && input.ReadCapacityUnits !== null && { ReadCapacityUnits: input.ReadCapacityUnits });
    };
    var serializeAws_json1_0Put = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
        ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
      }), input.Item !== void 0 && input.Item !== null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) }), input.ReturnValuesOnConditionCheckFailure !== void 0 && input.ReturnValuesOnConditionCheckFailure !== null && {
        ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
      }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0PutItemInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ConditionalOperator !== void 0 && input.ConditionalOperator !== null && { ConditionalOperator: input.ConditionalOperator }), input.Expected !== void 0 && input.Expected !== null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
        ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
      }), input.Item !== void 0 && input.Item !== null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ReturnItemCollectionMetrics !== void 0 && input.ReturnItemCollectionMetrics !== null && { ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics }), input.ReturnValues !== void 0 && input.ReturnValues !== null && { ReturnValues: input.ReturnValues }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0PutItemInputAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: serializeAws_json1_0AttributeValue(value, context)
        });
      }, {});
    };
    var serializeAws_json1_0PutRequest = (input, context) => {
      return __spreadValues({}, input.Item !== void 0 && input.Item !== null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) });
    };
    var serializeAws_json1_0QueryInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.AttributesToGet !== void 0 && input.AttributesToGet !== null && {
        AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
      }), input.ConditionalOperator !== void 0 && input.ConditionalOperator !== null && { ConditionalOperator: input.ConditionalOperator }), input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.ExclusiveStartKey !== void 0 && input.ExclusiveStartKey !== null && {
        ExclusiveStartKey: serializeAws_json1_0Key(input.ExclusiveStartKey, context)
      }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
        ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
      }), input.FilterExpression !== void 0 && input.FilterExpression !== null && { FilterExpression: input.FilterExpression }), input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.KeyConditionExpression !== void 0 && input.KeyConditionExpression !== null && { KeyConditionExpression: input.KeyConditionExpression }), input.KeyConditions !== void 0 && input.KeyConditions !== null && {
        KeyConditions: serializeAws_json1_0KeyConditions(input.KeyConditions, context)
      }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.ProjectionExpression !== void 0 && input.ProjectionExpression !== null && { ProjectionExpression: input.ProjectionExpression }), input.QueryFilter !== void 0 && input.QueryFilter !== null && {
        QueryFilter: serializeAws_json1_0FilterConditionMap(input.QueryFilter, context)
      }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ScanIndexForward !== void 0 && input.ScanIndexForward !== null && { ScanIndexForward: input.ScanIndexForward }), input.Select !== void 0 && input.Select !== null && { Select: input.Select }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0Replica = (input, context) => {
      return __spreadValues({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName });
    };
    var serializeAws_json1_0ReplicaAutoScalingUpdate = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName }), input.ReplicaGlobalSecondaryIndexUpdates !== void 0 && input.ReplicaGlobalSecondaryIndexUpdates !== null && {
        ReplicaGlobalSecondaryIndexUpdates: serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdateList(input.ReplicaGlobalSecondaryIndexUpdates, context)
      }), input.ReplicaProvisionedReadCapacityAutoScalingUpdate !== void 0 && input.ReplicaProvisionedReadCapacityAutoScalingUpdate !== null && {
        ReplicaProvisionedReadCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ReplicaProvisionedReadCapacityAutoScalingUpdate, context)
      });
    };
    var serializeAws_json1_0ReplicaAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0ReplicaAutoScalingUpdate(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndex = (input, context) => {
      return __spreadValues(__spreadValues({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedThroughputOverride !== void 0 && input.ProvisionedThroughputOverride !== null && {
        ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
      });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return __spreadValues(__spreadValues({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedReadCapacityAutoScalingUpdate !== void 0 && input.ProvisionedReadCapacityAutoScalingUpdate !== null && {
        ProvisionedReadCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedReadCapacityAutoScalingUpdate, context)
      });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdate(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0ReplicaGlobalSecondaryIndex(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedReadCapacityAutoScalingSettingsUpdate !== void 0 && input.ProvisionedReadCapacityAutoScalingSettingsUpdate !== null && {
        ProvisionedReadCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedReadCapacityAutoScalingSettingsUpdate, context)
      }), input.ProvisionedReadCapacityUnits !== void 0 && input.ProvisionedReadCapacityUnits !== null && {
        ProvisionedReadCapacityUnits: input.ProvisionedReadCapacityUnits
      });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdate(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0Replica(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaSettingsUpdate = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName }), input.ReplicaGlobalSecondaryIndexSettingsUpdate !== void 0 && input.ReplicaGlobalSecondaryIndexSettingsUpdate !== null && {
        ReplicaGlobalSecondaryIndexSettingsUpdate: serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdateList(input.ReplicaGlobalSecondaryIndexSettingsUpdate, context)
      }), input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate !== void 0 && input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate !== null && {
        ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate, context)
      }), input.ReplicaProvisionedReadCapacityUnits !== void 0 && input.ReplicaProvisionedReadCapacityUnits !== null && {
        ReplicaProvisionedReadCapacityUnits: input.ReplicaProvisionedReadCapacityUnits
      }), input.ReplicaTableClass !== void 0 && input.ReplicaTableClass !== null && { ReplicaTableClass: input.ReplicaTableClass });
    };
    var serializeAws_json1_0ReplicaSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0ReplicaSettingsUpdate(entry, context);
      });
    };
    var serializeAws_json1_0ReplicationGroupUpdate = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.Create !== void 0 && input.Create !== null && {
        Create: serializeAws_json1_0CreateReplicationGroupMemberAction(input.Create, context)
      }), input.Delete !== void 0 && input.Delete !== null && {
        Delete: serializeAws_json1_0DeleteReplicationGroupMemberAction(input.Delete, context)
      }), input.Update !== void 0 && input.Update !== null && {
        Update: serializeAws_json1_0UpdateReplicationGroupMemberAction(input.Update, context)
      });
    };
    var serializeAws_json1_0ReplicationGroupUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0ReplicationGroupUpdate(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaUpdate = (input, context) => {
      return __spreadValues(__spreadValues({}, input.Create !== void 0 && input.Create !== null && { Create: serializeAws_json1_0CreateReplicaAction(input.Create, context) }), input.Delete !== void 0 && input.Delete !== null && { Delete: serializeAws_json1_0DeleteReplicaAction(input.Delete, context) });
    };
    var serializeAws_json1_0ReplicaUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0ReplicaUpdate(entry, context);
      });
    };
    var serializeAws_json1_0RestoreTableFromBackupInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.BackupArn !== void 0 && input.BackupArn !== null && { BackupArn: input.BackupArn }), input.BillingModeOverride !== void 0 && input.BillingModeOverride !== null && { BillingModeOverride: input.BillingModeOverride }), input.GlobalSecondaryIndexOverride !== void 0 && input.GlobalSecondaryIndexOverride !== null && {
        GlobalSecondaryIndexOverride: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexOverride, context)
      }), input.LocalSecondaryIndexOverride !== void 0 && input.LocalSecondaryIndexOverride !== null && {
        LocalSecondaryIndexOverride: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexOverride, context)
      }), input.ProvisionedThroughputOverride !== void 0 && input.ProvisionedThroughputOverride !== null && {
        ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughputOverride, context)
      }), input.SSESpecificationOverride !== void 0 && input.SSESpecificationOverride !== null && {
        SSESpecificationOverride: serializeAws_json1_0SSESpecification(input.SSESpecificationOverride, context)
      }), input.TargetTableName !== void 0 && input.TargetTableName !== null && { TargetTableName: input.TargetTableName });
    };
    var serializeAws_json1_0RestoreTableToPointInTimeInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.BillingModeOverride !== void 0 && input.BillingModeOverride !== null && { BillingModeOverride: input.BillingModeOverride }), input.GlobalSecondaryIndexOverride !== void 0 && input.GlobalSecondaryIndexOverride !== null && {
        GlobalSecondaryIndexOverride: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexOverride, context)
      }), input.LocalSecondaryIndexOverride !== void 0 && input.LocalSecondaryIndexOverride !== null && {
        LocalSecondaryIndexOverride: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexOverride, context)
      }), input.ProvisionedThroughputOverride !== void 0 && input.ProvisionedThroughputOverride !== null && {
        ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughputOverride, context)
      }), input.RestoreDateTime !== void 0 && input.RestoreDateTime !== null && { RestoreDateTime: Math.round(input.RestoreDateTime.getTime() / 1e3) }), input.SSESpecificationOverride !== void 0 && input.SSESpecificationOverride !== null && {
        SSESpecificationOverride: serializeAws_json1_0SSESpecification(input.SSESpecificationOverride, context)
      }), input.SourceTableArn !== void 0 && input.SourceTableArn !== null && { SourceTableArn: input.SourceTableArn }), input.SourceTableName !== void 0 && input.SourceTableName !== null && { SourceTableName: input.SourceTableName }), input.TargetTableName !== void 0 && input.TargetTableName !== null && { TargetTableName: input.TargetTableName }), input.UseLatestRestorableTime !== void 0 && input.UseLatestRestorableTime !== null && { UseLatestRestorableTime: input.UseLatestRestorableTime });
    };
    var serializeAws_json1_0ScanInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.AttributesToGet !== void 0 && input.AttributesToGet !== null && {
        AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
      }), input.ConditionalOperator !== void 0 && input.ConditionalOperator !== null && { ConditionalOperator: input.ConditionalOperator }), input.ConsistentRead !== void 0 && input.ConsistentRead !== null && { ConsistentRead: input.ConsistentRead }), input.ExclusiveStartKey !== void 0 && input.ExclusiveStartKey !== null && {
        ExclusiveStartKey: serializeAws_json1_0Key(input.ExclusiveStartKey, context)
      }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
        ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
      }), input.FilterExpression !== void 0 && input.FilterExpression !== null && { FilterExpression: input.FilterExpression }), input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.Limit !== void 0 && input.Limit !== null && { Limit: input.Limit }), input.ProjectionExpression !== void 0 && input.ProjectionExpression !== null && { ProjectionExpression: input.ProjectionExpression }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ScanFilter !== void 0 && input.ScanFilter !== null && { ScanFilter: serializeAws_json1_0FilterConditionMap(input.ScanFilter, context) }), input.Segment !== void 0 && input.Segment !== null && { Segment: input.Segment }), input.Select !== void 0 && input.Select !== null && { Select: input.Select }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.TotalSegments !== void 0 && input.TotalSegments !== null && { TotalSegments: input.TotalSegments });
    };
    var serializeAws_json1_0SSESpecification = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.Enabled !== void 0 && input.Enabled !== null && { Enabled: input.Enabled }), input.KMSMasterKeyId !== void 0 && input.KMSMasterKeyId !== null && { KMSMasterKeyId: input.KMSMasterKeyId }), input.SSEType !== void 0 && input.SSEType !== null && { SSEType: input.SSEType });
    };
    var serializeAws_json1_0StreamSpecification = (input, context) => {
      return __spreadValues(__spreadValues({}, input.StreamEnabled !== void 0 && input.StreamEnabled !== null && { StreamEnabled: input.StreamEnabled }), input.StreamViewType !== void 0 && input.StreamViewType !== null && { StreamViewType: input.StreamViewType });
    };
    var serializeAws_json1_0StringSetAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_0Tag = (input, context) => {
      return __spreadValues(__spreadValues({}, input.Key !== void 0 && input.Key !== null && { Key: input.Key }), input.Value !== void 0 && input.Value !== null && { Value: input.Value });
    };
    var serializeAws_json1_0TagKeyList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return entry;
      });
    };
    var serializeAws_json1_0TagList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0Tag(entry, context);
      });
    };
    var serializeAws_json1_0TagResourceInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }), input.Tags !== void 0 && input.Tags !== null && { Tags: serializeAws_json1_0TagList(input.Tags, context) });
    };
    var serializeAws_json1_0TimeToLiveSpecification = (input, context) => {
      return __spreadValues(__spreadValues({}, input.AttributeName !== void 0 && input.AttributeName !== null && { AttributeName: input.AttributeName }), input.Enabled !== void 0 && input.Enabled !== null && { Enabled: input.Enabled });
    };
    var serializeAws_json1_0TransactGetItem = (input, context) => {
      return __spreadValues({}, input.Get !== void 0 && input.Get !== null && { Get: serializeAws_json1_0Get(input.Get, context) });
    };
    var serializeAws_json1_0TransactGetItemList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0TransactGetItem(entry, context);
      });
    };
    var serializeAws_json1_0TransactGetItemsInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.TransactItems !== void 0 && input.TransactItems !== null && {
        TransactItems: serializeAws_json1_0TransactGetItemList(input.TransactItems, context)
      });
    };
    var serializeAws_json1_0TransactWriteItem = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.ConditionCheck !== void 0 && input.ConditionCheck !== null && {
        ConditionCheck: serializeAws_json1_0ConditionCheck(input.ConditionCheck, context)
      }), input.Delete !== void 0 && input.Delete !== null && { Delete: serializeAws_json1_0Delete(input.Delete, context) }), input.Put !== void 0 && input.Put !== null && { Put: serializeAws_json1_0Put(input.Put, context) }), input.Update !== void 0 && input.Update !== null && { Update: serializeAws_json1_0Update(input.Update, context) });
    };
    var serializeAws_json1_0TransactWriteItemList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0TransactWriteItem(entry, context);
      });
    };
    var serializeAws_json1_0TransactWriteItemsInput = (input, context) => {
      var _a;
      return __spreadValues(__spreadValues(__spreadValues({
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)()
      }, input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ReturnItemCollectionMetrics !== void 0 && input.ReturnItemCollectionMetrics !== null && { ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics }), input.TransactItems !== void 0 && input.TransactItems !== null && {
        TransactItems: serializeAws_json1_0TransactWriteItemList(input.TransactItems, context)
      });
    };
    var serializeAws_json1_0UntagResourceInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.ResourceArn !== void 0 && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }), input.TagKeys !== void 0 && input.TagKeys !== null && { TagKeys: serializeAws_json1_0TagKeyList(input.TagKeys, context) });
    };
    var serializeAws_json1_0Update = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
        ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
      }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ReturnValuesOnConditionCheckFailure !== void 0 && input.ReturnValuesOnConditionCheckFailure !== null && {
        ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
      }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.UpdateExpression !== void 0 && input.UpdateExpression !== null && { UpdateExpression: input.UpdateExpression });
    };
    var serializeAws_json1_0UpdateContinuousBackupsInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.PointInTimeRecoverySpecification !== void 0 && input.PointInTimeRecoverySpecification !== null && {
        PointInTimeRecoverySpecification: serializeAws_json1_0PointInTimeRecoverySpecification(input.PointInTimeRecoverySpecification, context)
      }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0UpdateContributorInsightsInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues({}, input.ContributorInsightsAction !== void 0 && input.ContributorInsightsAction !== null && { ContributorInsightsAction: input.ContributorInsightsAction }), input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0UpdateGlobalSecondaryIndexAction = (input, context) => {
      return __spreadValues(__spreadValues({}, input.IndexName !== void 0 && input.IndexName !== null && { IndexName: input.IndexName }), input.ProvisionedThroughput !== void 0 && input.ProvisionedThroughput !== null && {
        ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
      });
    };
    var serializeAws_json1_0UpdateGlobalTableInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.GlobalTableName !== void 0 && input.GlobalTableName !== null && { GlobalTableName: input.GlobalTableName }), input.ReplicaUpdates !== void 0 && input.ReplicaUpdates !== null && {
        ReplicaUpdates: serializeAws_json1_0ReplicaUpdateList(input.ReplicaUpdates, context)
      });
    };
    var serializeAws_json1_0UpdateGlobalTableSettingsInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.GlobalTableBillingMode !== void 0 && input.GlobalTableBillingMode !== null && { GlobalTableBillingMode: input.GlobalTableBillingMode }), input.GlobalTableGlobalSecondaryIndexSettingsUpdate !== void 0 && input.GlobalTableGlobalSecondaryIndexSettingsUpdate !== null && {
        GlobalTableGlobalSecondaryIndexSettingsUpdate: serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdateList(input.GlobalTableGlobalSecondaryIndexSettingsUpdate, context)
      }), input.GlobalTableName !== void 0 && input.GlobalTableName !== null && { GlobalTableName: input.GlobalTableName }), input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate !== void 0 && input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate !== null && {
        GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate, context)
      }), input.GlobalTableProvisionedWriteCapacityUnits !== void 0 && input.GlobalTableProvisionedWriteCapacityUnits !== null && {
        GlobalTableProvisionedWriteCapacityUnits: input.GlobalTableProvisionedWriteCapacityUnits
      }), input.ReplicaSettingsUpdate !== void 0 && input.ReplicaSettingsUpdate !== null && {
        ReplicaSettingsUpdate: serializeAws_json1_0ReplicaSettingsUpdateList(input.ReplicaSettingsUpdate, context)
      });
    };
    var serializeAws_json1_0UpdateItemInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.AttributeUpdates !== void 0 && input.AttributeUpdates !== null && {
        AttributeUpdates: serializeAws_json1_0AttributeUpdates(input.AttributeUpdates, context)
      }), input.ConditionExpression !== void 0 && input.ConditionExpression !== null && { ConditionExpression: input.ConditionExpression }), input.ConditionalOperator !== void 0 && input.ConditionalOperator !== null && { ConditionalOperator: input.ConditionalOperator }), input.Expected !== void 0 && input.Expected !== null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) }), input.ExpressionAttributeNames !== void 0 && input.ExpressionAttributeNames !== null && {
        ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
      }), input.ExpressionAttributeValues !== void 0 && input.ExpressionAttributeValues !== null && {
        ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
      }), input.Key !== void 0 && input.Key !== null && { Key: serializeAws_json1_0Key(input.Key, context) }), input.ReturnConsumedCapacity !== void 0 && input.ReturnConsumedCapacity !== null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }), input.ReturnItemCollectionMetrics !== void 0 && input.ReturnItemCollectionMetrics !== null && { ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics }), input.ReturnValues !== void 0 && input.ReturnValues !== null && { ReturnValues: input.ReturnValues }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.UpdateExpression !== void 0 && input.UpdateExpression !== null && { UpdateExpression: input.UpdateExpression });
    };
    var serializeAws_json1_0UpdateReplicationGroupMemberAction = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.GlobalSecondaryIndexes !== void 0 && input.GlobalSecondaryIndexes !== null && {
        GlobalSecondaryIndexes: serializeAws_json1_0ReplicaGlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
      }), input.KMSMasterKeyId !== void 0 && input.KMSMasterKeyId !== null && { KMSMasterKeyId: input.KMSMasterKeyId }), input.ProvisionedThroughputOverride !== void 0 && input.ProvisionedThroughputOverride !== null && {
        ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
      }), input.RegionName !== void 0 && input.RegionName !== null && { RegionName: input.RegionName }), input.TableClassOverride !== void 0 && input.TableClassOverride !== null && { TableClassOverride: input.TableClassOverride });
    };
    var serializeAws_json1_0UpdateTableInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.AttributeDefinitions !== void 0 && input.AttributeDefinitions !== null && {
        AttributeDefinitions: serializeAws_json1_0AttributeDefinitions(input.AttributeDefinitions, context)
      }), input.BillingMode !== void 0 && input.BillingMode !== null && { BillingMode: input.BillingMode }), input.GlobalSecondaryIndexUpdates !== void 0 && input.GlobalSecondaryIndexUpdates !== null && {
        GlobalSecondaryIndexUpdates: serializeAws_json1_0GlobalSecondaryIndexUpdateList(input.GlobalSecondaryIndexUpdates, context)
      }), input.ProvisionedThroughput !== void 0 && input.ProvisionedThroughput !== null && {
        ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
      }), input.ReplicaUpdates !== void 0 && input.ReplicaUpdates !== null && {
        ReplicaUpdates: serializeAws_json1_0ReplicationGroupUpdateList(input.ReplicaUpdates, context)
      }), input.SSESpecification !== void 0 && input.SSESpecification !== null && {
        SSESpecification: serializeAws_json1_0SSESpecification(input.SSESpecification, context)
      }), input.StreamSpecification !== void 0 && input.StreamSpecification !== null && {
        StreamSpecification: serializeAws_json1_0StreamSpecification(input.StreamSpecification, context)
      }), input.TableClass !== void 0 && input.TableClass !== null && { TableClass: input.TableClass }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0UpdateTableReplicaAutoScalingInput = (input, context) => {
      return __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, input.GlobalSecondaryIndexUpdates !== void 0 && input.GlobalSecondaryIndexUpdates !== null && {
        GlobalSecondaryIndexUpdates: serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdateList(input.GlobalSecondaryIndexUpdates, context)
      }), input.ProvisionedWriteCapacityAutoScalingUpdate !== void 0 && input.ProvisionedWriteCapacityAutoScalingUpdate !== null && {
        ProvisionedWriteCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingUpdate, context)
      }), input.ReplicaUpdates !== void 0 && input.ReplicaUpdates !== null && {
        ReplicaUpdates: serializeAws_json1_0ReplicaAutoScalingUpdateList(input.ReplicaUpdates, context)
      }), input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName });
    };
    var serializeAws_json1_0UpdateTimeToLiveInput = (input, context) => {
      return __spreadValues(__spreadValues({}, input.TableName !== void 0 && input.TableName !== null && { TableName: input.TableName }), input.TimeToLiveSpecification !== void 0 && input.TimeToLiveSpecification !== null && {
        TimeToLiveSpecification: serializeAws_json1_0TimeToLiveSpecification(input.TimeToLiveSpecification, context)
      });
    };
    var serializeAws_json1_0WriteRequest = (input, context) => {
      return __spreadValues(__spreadValues({}, input.DeleteRequest !== void 0 && input.DeleteRequest !== null && {
        DeleteRequest: serializeAws_json1_0DeleteRequest(input.DeleteRequest, context)
      }), input.PutRequest !== void 0 && input.PutRequest !== null && { PutRequest: serializeAws_json1_0PutRequest(input.PutRequest, context) });
    };
    var serializeAws_json1_0WriteRequests = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return serializeAws_json1_0WriteRequest(entry, context);
      });
    };
    var deserializeAws_json1_0ArchivalSummary = (output, context) => {
      return {
        ArchivalBackupArn: (0, smithy_client_1.expectString)(output.ArchivalBackupArn),
        ArchivalDateTime: output.ArchivalDateTime !== void 0 && output.ArchivalDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ArchivalDateTime))) : void 0,
        ArchivalReason: (0, smithy_client_1.expectString)(output.ArchivalReason)
      };
    };
    var deserializeAws_json1_0AttributeDefinition = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        AttributeType: (0, smithy_client_1.expectString)(output.AttributeType)
      };
    };
    var deserializeAws_json1_0AttributeDefinitions = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0AttributeDefinition(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0AttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context)
        });
      }, {});
    };
    var deserializeAws_json1_0AttributeNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0AttributeValue = (output, context) => {
      if (output.B !== void 0 && output.B !== null) {
        return {
          B: context.base64Decoder(output.B)
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.BOOL) !== void 0) {
        return { BOOL: (0, smithy_client_1.expectBoolean)(output.BOOL) };
      }
      if (output.BS !== void 0 && output.BS !== null) {
        return {
          BS: deserializeAws_json1_0BinarySetAttributeValue(output.BS, context)
        };
      }
      if (output.L !== void 0 && output.L !== null) {
        return {
          L: deserializeAws_json1_0ListAttributeValue(output.L, context)
        };
      }
      if (output.M !== void 0 && output.M !== null) {
        return {
          M: deserializeAws_json1_0MapAttributeValue(output.M, context)
        };
      }
      if ((0, smithy_client_1.expectString)(output.N) !== void 0) {
        return { N: (0, smithy_client_1.expectString)(output.N) };
      }
      if (output.NS !== void 0 && output.NS !== null) {
        return {
          NS: deserializeAws_json1_0NumberSetAttributeValue(output.NS, context)
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.NULL) !== void 0) {
        return { NULL: (0, smithy_client_1.expectBoolean)(output.NULL) };
      }
      if ((0, smithy_client_1.expectString)(output.S) !== void 0) {
        return { S: (0, smithy_client_1.expectString)(output.S) };
      }
      if (output.SS !== void 0 && output.SS !== null) {
        return {
          SS: deserializeAws_json1_0StringSetAttributeValue(output.SS, context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var deserializeAws_json1_0AutoScalingPolicyDescription = (output, context) => {
      return {
        PolicyName: (0, smithy_client_1.expectString)(output.PolicyName),
        TargetTrackingScalingPolicyConfiguration: output.TargetTrackingScalingPolicyConfiguration !== void 0 && output.TargetTrackingScalingPolicyConfiguration !== null ? deserializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationDescription(output.TargetTrackingScalingPolicyConfiguration, context) : void 0
      };
    };
    var deserializeAws_json1_0AutoScalingPolicyDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0AutoScalingPolicyDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0AutoScalingSettingsDescription = (output, context) => {
      return {
        AutoScalingDisabled: (0, smithy_client_1.expectBoolean)(output.AutoScalingDisabled),
        AutoScalingRoleArn: (0, smithy_client_1.expectString)(output.AutoScalingRoleArn),
        MaximumUnits: (0, smithy_client_1.expectLong)(output.MaximumUnits),
        MinimumUnits: (0, smithy_client_1.expectLong)(output.MinimumUnits),
        ScalingPolicies: output.ScalingPolicies !== void 0 && output.ScalingPolicies !== null ? deserializeAws_json1_0AutoScalingPolicyDescriptionList(output.ScalingPolicies, context) : void 0
      };
    };
    var deserializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationDescription = (output, context) => {
      return {
        DisableScaleIn: (0, smithy_client_1.expectBoolean)(output.DisableScaleIn),
        ScaleInCooldown: (0, smithy_client_1.expectInt32)(output.ScaleInCooldown),
        ScaleOutCooldown: (0, smithy_client_1.expectInt32)(output.ScaleOutCooldown),
        TargetValue: (0, smithy_client_1.limitedParseDouble)(output.TargetValue)
      };
    };
    var deserializeAws_json1_0BackupDescription = (output, context) => {
      return {
        BackupDetails: output.BackupDetails !== void 0 && output.BackupDetails !== null ? deserializeAws_json1_0BackupDetails(output.BackupDetails, context) : void 0,
        SourceTableDetails: output.SourceTableDetails !== void 0 && output.SourceTableDetails !== null ? deserializeAws_json1_0SourceTableDetails(output.SourceTableDetails, context) : void 0,
        SourceTableFeatureDetails: output.SourceTableFeatureDetails !== void 0 && output.SourceTableFeatureDetails !== null ? deserializeAws_json1_0SourceTableFeatureDetails(output.SourceTableFeatureDetails, context) : void 0
      };
    };
    var deserializeAws_json1_0BackupDetails = (output, context) => {
      return {
        BackupArn: (0, smithy_client_1.expectString)(output.BackupArn),
        BackupCreationDateTime: output.BackupCreationDateTime !== void 0 && output.BackupCreationDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.BackupCreationDateTime))) : void 0,
        BackupExpiryDateTime: output.BackupExpiryDateTime !== void 0 && output.BackupExpiryDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.BackupExpiryDateTime))) : void 0,
        BackupName: (0, smithy_client_1.expectString)(output.BackupName),
        BackupSizeBytes: (0, smithy_client_1.expectLong)(output.BackupSizeBytes),
        BackupStatus: (0, smithy_client_1.expectString)(output.BackupStatus),
        BackupType: (0, smithy_client_1.expectString)(output.BackupType)
      };
    };
    var deserializeAws_json1_0BackupInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0BackupNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0BackupSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0BackupSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0BackupSummary = (output, context) => {
      return {
        BackupArn: (0, smithy_client_1.expectString)(output.BackupArn),
        BackupCreationDateTime: output.BackupCreationDateTime !== void 0 && output.BackupCreationDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.BackupCreationDateTime))) : void 0,
        BackupExpiryDateTime: output.BackupExpiryDateTime !== void 0 && output.BackupExpiryDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.BackupExpiryDateTime))) : void 0,
        BackupName: (0, smithy_client_1.expectString)(output.BackupName),
        BackupSizeBytes: (0, smithy_client_1.expectLong)(output.BackupSizeBytes),
        BackupStatus: (0, smithy_client_1.expectString)(output.BackupStatus),
        BackupType: (0, smithy_client_1.expectString)(output.BackupType),
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableId: (0, smithy_client_1.expectString)(output.TableId),
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0BatchExecuteStatementOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        Responses: output.Responses !== void 0 && output.Responses !== null ? deserializeAws_json1_0PartiQLBatchResponse(output.Responses, context) : void 0
      };
    };
    var deserializeAws_json1_0BatchGetItemOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        Responses: output.Responses !== void 0 && output.Responses !== null ? deserializeAws_json1_0BatchGetResponseMap(output.Responses, context) : void 0,
        UnprocessedKeys: output.UnprocessedKeys !== void 0 && output.UnprocessedKeys !== null ? deserializeAws_json1_0BatchGetRequestMap(output.UnprocessedKeys, context) : void 0
      };
    };
    var deserializeAws_json1_0BatchGetRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: deserializeAws_json1_0KeysAndAttributes(value, context)
        });
      }, {});
    };
    var deserializeAws_json1_0BatchGetResponseMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: deserializeAws_json1_0ItemList(value, context)
        });
      }, {});
    };
    var deserializeAws_json1_0BatchStatementError = (output, context) => {
      return {
        Code: (0, smithy_client_1.expectString)(output.Code),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0BatchStatementResponse = (output, context) => {
      return {
        Error: output.Error !== void 0 && output.Error !== null ? deserializeAws_json1_0BatchStatementError(output.Error, context) : void 0,
        Item: output.Item !== void 0 && output.Item !== null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0BatchWriteItemOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        ItemCollectionMetrics: output.ItemCollectionMetrics !== void 0 && output.ItemCollectionMetrics !== null ? deserializeAws_json1_0ItemCollectionMetricsPerTable(output.ItemCollectionMetrics, context) : void 0,
        UnprocessedItems: output.UnprocessedItems !== void 0 && output.UnprocessedItems !== null ? deserializeAws_json1_0BatchWriteItemRequestMap(output.UnprocessedItems, context) : void 0
      };
    };
    var deserializeAws_json1_0BatchWriteItemRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: deserializeAws_json1_0WriteRequests(value, context)
        });
      }, {});
    };
    var deserializeAws_json1_0BillingModeSummary = (output, context) => {
      return {
        BillingMode: (0, smithy_client_1.expectString)(output.BillingMode),
        LastUpdateToPayPerRequestDateTime: output.LastUpdateToPayPerRequestDateTime !== void 0 && output.LastUpdateToPayPerRequestDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateToPayPerRequestDateTime))) : void 0
      };
    };
    var deserializeAws_json1_0BinarySetAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return context.base64Decoder(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0CancellationReason = (output, context) => {
      return {
        Code: (0, smithy_client_1.expectString)(output.Code),
        Item: output.Item !== void 0 && output.Item !== null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0,
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0CancellationReasonList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0CancellationReason(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0Capacity = (output, context) => {
      return {
        CapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.CapacityUnits),
        ReadCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.WriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0ConditionalCheckFailedException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ConsumedCapacity = (output, context) => {
      return {
        CapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.CapacityUnits),
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes !== void 0 && output.GlobalSecondaryIndexes !== null ? deserializeAws_json1_0SecondaryIndexesCapacityMap(output.GlobalSecondaryIndexes, context) : void 0,
        LocalSecondaryIndexes: output.LocalSecondaryIndexes !== void 0 && output.LocalSecondaryIndexes !== null ? deserializeAws_json1_0SecondaryIndexesCapacityMap(output.LocalSecondaryIndexes, context) : void 0,
        ReadCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.ReadCapacityUnits),
        Table: output.Table !== void 0 && output.Table !== null ? deserializeAws_json1_0Capacity(output.Table, context) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        WriteCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.WriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0ConsumedCapacityMultiple = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ConsumedCapacity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ContinuousBackupsDescription = (output, context) => {
      return {
        ContinuousBackupsStatus: (0, smithy_client_1.expectString)(output.ContinuousBackupsStatus),
        PointInTimeRecoveryDescription: output.PointInTimeRecoveryDescription !== void 0 && output.PointInTimeRecoveryDescription !== null ? deserializeAws_json1_0PointInTimeRecoveryDescription(output.PointInTimeRecoveryDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0ContinuousBackupsUnavailableException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ContributorInsightsRuleList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0ContributorInsightsSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ContributorInsightsSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ContributorInsightsSummary = (output, context) => {
      return {
        ContributorInsightsStatus: (0, smithy_client_1.expectString)(output.ContributorInsightsStatus),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0CreateBackupOutput = (output, context) => {
      return {
        BackupDetails: output.BackupDetails !== void 0 && output.BackupDetails !== null ? deserializeAws_json1_0BackupDetails(output.BackupDetails, context) : void 0
      };
    };
    var deserializeAws_json1_0CreateGlobalTableOutput = (output, context) => {
      return {
        GlobalTableDescription: output.GlobalTableDescription !== void 0 && output.GlobalTableDescription !== null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0CreateTableOutput = (output, context) => {
      return {
        TableDescription: output.TableDescription !== void 0 && output.TableDescription !== null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DeleteBackupOutput = (output, context) => {
      return {
        BackupDescription: output.BackupDescription !== void 0 && output.BackupDescription !== null ? deserializeAws_json1_0BackupDescription(output.BackupDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DeleteItemOutput = (output, context) => {
      return {
        Attributes: output.Attributes !== void 0 && output.Attributes !== null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        ItemCollectionMetrics: output.ItemCollectionMetrics !== void 0 && output.ItemCollectionMetrics !== null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : void 0
      };
    };
    var deserializeAws_json1_0DeleteRequest = (output, context) => {
      return {
        Key: output.Key !== void 0 && output.Key !== null ? deserializeAws_json1_0Key(output.Key, context) : void 0
      };
    };
    var deserializeAws_json1_0DeleteTableOutput = (output, context) => {
      return {
        TableDescription: output.TableDescription !== void 0 && output.TableDescription !== null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeBackupOutput = (output, context) => {
      return {
        BackupDescription: output.BackupDescription !== void 0 && output.BackupDescription !== null ? deserializeAws_json1_0BackupDescription(output.BackupDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeContinuousBackupsOutput = (output, context) => {
      return {
        ContinuousBackupsDescription: output.ContinuousBackupsDescription !== void 0 && output.ContinuousBackupsDescription !== null ? deserializeAws_json1_0ContinuousBackupsDescription(output.ContinuousBackupsDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeContributorInsightsOutput = (output, context) => {
      return {
        ContributorInsightsRuleList: output.ContributorInsightsRuleList !== void 0 && output.ContributorInsightsRuleList !== null ? deserializeAws_json1_0ContributorInsightsRuleList(output.ContributorInsightsRuleList, context) : void 0,
        ContributorInsightsStatus: (0, smithy_client_1.expectString)(output.ContributorInsightsStatus),
        FailureException: output.FailureException !== void 0 && output.FailureException !== null ? deserializeAws_json1_0FailureException(output.FailureException, context) : void 0,
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        LastUpdateDateTime: output.LastUpdateDateTime !== void 0 && output.LastUpdateDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateDateTime))) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0DescribeEndpointsResponse = (output, context) => {
      return {
        Endpoints: output.Endpoints !== void 0 && output.Endpoints !== null ? deserializeAws_json1_0Endpoints(output.Endpoints, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeExportOutput = (output, context) => {
      return {
        ExportDescription: output.ExportDescription !== void 0 && output.ExportDescription !== null ? deserializeAws_json1_0ExportDescription(output.ExportDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeGlobalTableOutput = (output, context) => {
      return {
        GlobalTableDescription: output.GlobalTableDescription !== void 0 && output.GlobalTableDescription !== null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeGlobalTableSettingsOutput = (output, context) => {
      return {
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        ReplicaSettings: output.ReplicaSettings !== void 0 && output.ReplicaSettings !== null ? deserializeAws_json1_0ReplicaSettingsDescriptionList(output.ReplicaSettings, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeKinesisStreamingDestinationOutput = (output, context) => {
      return {
        KinesisDataStreamDestinations: output.KinesisDataStreamDestinations !== void 0 && output.KinesisDataStreamDestinations !== null ? deserializeAws_json1_0KinesisDataStreamDestinations(output.KinesisDataStreamDestinations, context) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0DescribeLimitsOutput = (output, context) => {
      return {
        AccountMaxReadCapacityUnits: (0, smithy_client_1.expectLong)(output.AccountMaxReadCapacityUnits),
        AccountMaxWriteCapacityUnits: (0, smithy_client_1.expectLong)(output.AccountMaxWriteCapacityUnits),
        TableMaxReadCapacityUnits: (0, smithy_client_1.expectLong)(output.TableMaxReadCapacityUnits),
        TableMaxWriteCapacityUnits: (0, smithy_client_1.expectLong)(output.TableMaxWriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0DescribeTableOutput = (output, context) => {
      return {
        Table: output.Table !== void 0 && output.Table !== null ? deserializeAws_json1_0TableDescription(output.Table, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeTableReplicaAutoScalingOutput = (output, context) => {
      return {
        TableAutoScalingDescription: output.TableAutoScalingDescription !== void 0 && output.TableAutoScalingDescription !== null ? deserializeAws_json1_0TableAutoScalingDescription(output.TableAutoScalingDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeTimeToLiveOutput = (output, context) => {
      return {
        TimeToLiveDescription: output.TimeToLiveDescription !== void 0 && output.TimeToLiveDescription !== null ? deserializeAws_json1_0TimeToLiveDescription(output.TimeToLiveDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DuplicateItemException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0Endpoint = (output, context) => {
      return {
        Address: (0, smithy_client_1.expectString)(output.Address),
        CachePeriodInMinutes: (0, smithy_client_1.expectLong)(output.CachePeriodInMinutes)
      };
    };
    var deserializeAws_json1_0Endpoints = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0Endpoint(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ExecuteStatementOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        Items: output.Items !== void 0 && output.Items !== null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
        LastEvaluatedKey: output.LastEvaluatedKey !== void 0 && output.LastEvaluatedKey !== null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_0ExecuteTransactionOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        Responses: output.Responses !== void 0 && output.Responses !== null ? deserializeAws_json1_0ItemResponseList(output.Responses, context) : void 0
      };
    };
    var deserializeAws_json1_0ExportConflictException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ExportDescription = (output, context) => {
      return {
        BilledSizeBytes: (0, smithy_client_1.expectLong)(output.BilledSizeBytes),
        ClientToken: (0, smithy_client_1.expectString)(output.ClientToken),
        EndTime: output.EndTime !== void 0 && output.EndTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        ExportArn: (0, smithy_client_1.expectString)(output.ExportArn),
        ExportFormat: (0, smithy_client_1.expectString)(output.ExportFormat),
        ExportManifest: (0, smithy_client_1.expectString)(output.ExportManifest),
        ExportStatus: (0, smithy_client_1.expectString)(output.ExportStatus),
        ExportTime: output.ExportTime !== void 0 && output.ExportTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExportTime))) : void 0,
        FailureCode: (0, smithy_client_1.expectString)(output.FailureCode),
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        S3Bucket: (0, smithy_client_1.expectString)(output.S3Bucket),
        S3BucketOwner: (0, smithy_client_1.expectString)(output.S3BucketOwner),
        S3Prefix: (0, smithy_client_1.expectString)(output.S3Prefix),
        S3SseAlgorithm: (0, smithy_client_1.expectString)(output.S3SseAlgorithm),
        S3SseKmsKeyId: (0, smithy_client_1.expectString)(output.S3SseKmsKeyId),
        StartTime: output.StartTime !== void 0 && output.StartTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableId: (0, smithy_client_1.expectString)(output.TableId)
      };
    };
    var deserializeAws_json1_0ExportNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ExportSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ExportSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ExportSummary = (output, context) => {
      return {
        ExportArn: (0, smithy_client_1.expectString)(output.ExportArn),
        ExportStatus: (0, smithy_client_1.expectString)(output.ExportStatus)
      };
    };
    var deserializeAws_json1_0ExportTableToPointInTimeOutput = (output, context) => {
      return {
        ExportDescription: output.ExportDescription !== void 0 && output.ExportDescription !== null ? deserializeAws_json1_0ExportDescription(output.ExportDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0ExpressionAttributeNameMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: (0, smithy_client_1.expectString)(value)
        });
      }, {});
    };
    var deserializeAws_json1_0FailureException = (output, context) => {
      return {
        ExceptionDescription: (0, smithy_client_1.expectString)(output.ExceptionDescription),
        ExceptionName: (0, smithy_client_1.expectString)(output.ExceptionName)
      };
    };
    var deserializeAws_json1_0GetItemOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        Item: output.Item !== void 0 && output.Item !== null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0
      };
    };
    var deserializeAws_json1_0GlobalSecondaryIndexDescription = (output, context) => {
      return {
        Backfilling: (0, smithy_client_1.expectBoolean)(output.Backfilling),
        IndexArn: (0, smithy_client_1.expectString)(output.IndexArn),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexSizeBytes: (0, smithy_client_1.expectLong)(output.IndexSizeBytes),
        IndexStatus: (0, smithy_client_1.expectString)(output.IndexStatus),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection !== void 0 && output.Projection !== null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0,
        ProvisionedThroughput: output.ProvisionedThroughput !== void 0 && output.ProvisionedThroughput !== null ? deserializeAws_json1_0ProvisionedThroughputDescription(output.ProvisionedThroughput, context) : void 0
      };
    };
    var deserializeAws_json1_0GlobalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0GlobalSecondaryIndexDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0GlobalSecondaryIndexes = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0GlobalSecondaryIndexInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0GlobalSecondaryIndexInfo = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection !== void 0 && output.Projection !== null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0,
        ProvisionedThroughput: output.ProvisionedThroughput !== void 0 && output.ProvisionedThroughput !== null ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context) : void 0
      };
    };
    var deserializeAws_json1_0GlobalTable = (output, context) => {
      return {
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        ReplicationGroup: output.ReplicationGroup !== void 0 && output.ReplicationGroup !== null ? deserializeAws_json1_0ReplicaList(output.ReplicationGroup, context) : void 0
      };
    };
    var deserializeAws_json1_0GlobalTableAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0GlobalTableDescription = (output, context) => {
      return {
        CreationDateTime: output.CreationDateTime !== void 0 && output.CreationDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDateTime))) : void 0,
        GlobalTableArn: (0, smithy_client_1.expectString)(output.GlobalTableArn),
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        GlobalTableStatus: (0, smithy_client_1.expectString)(output.GlobalTableStatus),
        ReplicationGroup: output.ReplicationGroup !== void 0 && output.ReplicationGroup !== null ? deserializeAws_json1_0ReplicaDescriptionList(output.ReplicationGroup, context) : void 0
      };
    };
    var deserializeAws_json1_0GlobalTableList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0GlobalTable(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0GlobalTableNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0IdempotentParameterMismatchException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0IndexNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0InternalServerError = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0InvalidEndpointException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0InvalidExportTimeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0InvalidRestoreTimeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ItemCollectionKeyAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context)
        });
      }, {});
    };
    var deserializeAws_json1_0ItemCollectionMetrics = (output, context) => {
      return {
        ItemCollectionKey: output.ItemCollectionKey !== void 0 && output.ItemCollectionKey !== null ? deserializeAws_json1_0ItemCollectionKeyAttributeMap(output.ItemCollectionKey, context) : void 0,
        SizeEstimateRangeGB: output.SizeEstimateRangeGB !== void 0 && output.SizeEstimateRangeGB !== null ? deserializeAws_json1_0ItemCollectionSizeEstimateRange(output.SizeEstimateRangeGB, context) : void 0
      };
    };
    var deserializeAws_json1_0ItemCollectionMetricsMultiple = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ItemCollectionMetrics(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ItemCollectionMetricsPerTable = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: deserializeAws_json1_0ItemCollectionMetricsMultiple(value, context)
        });
      }, {});
    };
    var deserializeAws_json1_0ItemCollectionSizeEstimateRange = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.limitedParseDouble)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0ItemCollectionSizeLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0AttributeMap(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ItemResponse = (output, context) => {
      return {
        Item: output.Item !== void 0 && output.Item !== null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0
      };
    };
    var deserializeAws_json1_0ItemResponseList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ItemResponse(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0Key = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context)
        });
      }, {});
    };
    var deserializeAws_json1_0KeyList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0Key(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0KeysAndAttributes = (output, context) => {
      return {
        AttributesToGet: output.AttributesToGet !== void 0 && output.AttributesToGet !== null ? deserializeAws_json1_0AttributeNameList(output.AttributesToGet, context) : void 0,
        ConsistentRead: (0, smithy_client_1.expectBoolean)(output.ConsistentRead),
        ExpressionAttributeNames: output.ExpressionAttributeNames !== void 0 && output.ExpressionAttributeNames !== null ? deserializeAws_json1_0ExpressionAttributeNameMap(output.ExpressionAttributeNames, context) : void 0,
        Keys: output.Keys !== void 0 && output.Keys !== null ? deserializeAws_json1_0KeyList(output.Keys, context) : void 0,
        ProjectionExpression: (0, smithy_client_1.expectString)(output.ProjectionExpression)
      };
    };
    var deserializeAws_json1_0KeySchema = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0KeySchemaElement(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0KeySchemaElement = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        KeyType: (0, smithy_client_1.expectString)(output.KeyType)
      };
    };
    var deserializeAws_json1_0KinesisDataStreamDestination = (output, context) => {
      return {
        DestinationStatus: (0, smithy_client_1.expectString)(output.DestinationStatus),
        DestinationStatusDescription: (0, smithy_client_1.expectString)(output.DestinationStatusDescription),
        StreamArn: (0, smithy_client_1.expectString)(output.StreamArn)
      };
    };
    var deserializeAws_json1_0KinesisDataStreamDestinations = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0KinesisDataStreamDestination(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0KinesisStreamingDestinationOutput = (output, context) => {
      return {
        DestinationStatus: (0, smithy_client_1.expectString)(output.DestinationStatus),
        StreamArn: (0, smithy_client_1.expectString)(output.StreamArn),
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0LimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ListAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(entry), context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ListBackupsOutput = (output, context) => {
      return {
        BackupSummaries: output.BackupSummaries !== void 0 && output.BackupSummaries !== null ? deserializeAws_json1_0BackupSummaries(output.BackupSummaries, context) : void 0,
        LastEvaluatedBackupArn: (0, smithy_client_1.expectString)(output.LastEvaluatedBackupArn)
      };
    };
    var deserializeAws_json1_0ListContributorInsightsOutput = (output, context) => {
      return {
        ContributorInsightsSummaries: output.ContributorInsightsSummaries !== void 0 && output.ContributorInsightsSummaries !== null ? deserializeAws_json1_0ContributorInsightsSummaries(output.ContributorInsightsSummaries, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_0ListExportsOutput = (output, context) => {
      return {
        ExportSummaries: output.ExportSummaries !== void 0 && output.ExportSummaries !== null ? deserializeAws_json1_0ExportSummaries(output.ExportSummaries, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_0ListGlobalTablesOutput = (output, context) => {
      return {
        GlobalTables: output.GlobalTables !== void 0 && output.GlobalTables !== null ? deserializeAws_json1_0GlobalTableList(output.GlobalTables, context) : void 0,
        LastEvaluatedGlobalTableName: (0, smithy_client_1.expectString)(output.LastEvaluatedGlobalTableName)
      };
    };
    var deserializeAws_json1_0ListTablesOutput = (output, context) => {
      return {
        LastEvaluatedTableName: (0, smithy_client_1.expectString)(output.LastEvaluatedTableName),
        TableNames: output.TableNames !== void 0 && output.TableNames !== null ? deserializeAws_json1_0TableNameList(output.TableNames, context) : void 0
      };
    };
    var deserializeAws_json1_0ListTagsOfResourceOutput = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Tags: output.Tags !== void 0 && output.Tags !== null ? deserializeAws_json1_0TagList(output.Tags, context) : void 0
      };
    };
    var deserializeAws_json1_0LocalSecondaryIndexDescription = (output, context) => {
      return {
        IndexArn: (0, smithy_client_1.expectString)(output.IndexArn),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexSizeBytes: (0, smithy_client_1.expectLong)(output.IndexSizeBytes),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection !== void 0 && output.Projection !== null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0
      };
    };
    var deserializeAws_json1_0LocalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0LocalSecondaryIndexDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0LocalSecondaryIndexes = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0LocalSecondaryIndexInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0LocalSecondaryIndexInfo = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection !== void 0 && output.Projection !== null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0
      };
    };
    var deserializeAws_json1_0MapAttributeValue = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context)
        });
      }, {});
    };
    var deserializeAws_json1_0NonKeyAttributeNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0NumberSetAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0PartiQLBatchResponse = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0BatchStatementResponse(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0PointInTimeRecoveryDescription = (output, context) => {
      return {
        EarliestRestorableDateTime: output.EarliestRestorableDateTime !== void 0 && output.EarliestRestorableDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EarliestRestorableDateTime))) : void 0,
        LatestRestorableDateTime: output.LatestRestorableDateTime !== void 0 && output.LatestRestorableDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LatestRestorableDateTime))) : void 0,
        PointInTimeRecoveryStatus: (0, smithy_client_1.expectString)(output.PointInTimeRecoveryStatus)
      };
    };
    var deserializeAws_json1_0PointInTimeRecoveryUnavailableException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0Projection = (output, context) => {
      return {
        NonKeyAttributes: output.NonKeyAttributes !== void 0 && output.NonKeyAttributes !== null ? deserializeAws_json1_0NonKeyAttributeNameList(output.NonKeyAttributes, context) : void 0,
        ProjectionType: (0, smithy_client_1.expectString)(output.ProjectionType)
      };
    };
    var deserializeAws_json1_0ProvisionedThroughput = (output, context) => {
      return {
        ReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, smithy_client_1.expectLong)(output.WriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0ProvisionedThroughputDescription = (output, context) => {
      return {
        LastDecreaseDateTime: output.LastDecreaseDateTime !== void 0 && output.LastDecreaseDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastDecreaseDateTime))) : void 0,
        LastIncreaseDateTime: output.LastIncreaseDateTime !== void 0 && output.LastIncreaseDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastIncreaseDateTime))) : void 0,
        NumberOfDecreasesToday: (0, smithy_client_1.expectLong)(output.NumberOfDecreasesToday),
        ReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, smithy_client_1.expectLong)(output.WriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0ProvisionedThroughputExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ProvisionedThroughputOverride = (output, context) => {
      return {
        ReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ReadCapacityUnits)
      };
    };
    var deserializeAws_json1_0PutItemInputAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context)
        });
      }, {});
    };
    var deserializeAws_json1_0PutItemOutput = (output, context) => {
      return {
        Attributes: output.Attributes !== void 0 && output.Attributes !== null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        ItemCollectionMetrics: output.ItemCollectionMetrics !== void 0 && output.ItemCollectionMetrics !== null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : void 0
      };
    };
    var deserializeAws_json1_0PutRequest = (output, context) => {
      return {
        Item: output.Item !== void 0 && output.Item !== null ? deserializeAws_json1_0PutItemInputAttributeMap(output.Item, context) : void 0
      };
    };
    var deserializeAws_json1_0QueryOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        Count: (0, smithy_client_1.expectInt32)(output.Count),
        Items: output.Items !== void 0 && output.Items !== null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
        LastEvaluatedKey: output.LastEvaluatedKey !== void 0 && output.LastEvaluatedKey !== null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : void 0,
        ScannedCount: (0, smithy_client_1.expectInt32)(output.ScannedCount)
      };
    };
    var deserializeAws_json1_0Replica = (output, context) => {
      return {
        RegionName: (0, smithy_client_1.expectString)(output.RegionName)
      };
    };
    var deserializeAws_json1_0ReplicaAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ReplicaAutoScalingDescription = (output, context) => {
      return {
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes !== void 0 && output.GlobalSecondaryIndexes !== null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(output.GlobalSecondaryIndexes, context) : void 0,
        RegionName: (0, smithy_client_1.expectString)(output.RegionName),
        ReplicaProvisionedReadCapacityAutoScalingSettings: output.ReplicaProvisionedReadCapacityAutoScalingSettings !== void 0 && output.ReplicaProvisionedReadCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedReadCapacityAutoScalingSettings, context) : void 0,
        ReplicaProvisionedWriteCapacityAutoScalingSettings: output.ReplicaProvisionedWriteCapacityAutoScalingSettings !== void 0 && output.ReplicaProvisionedWriteCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedWriteCapacityAutoScalingSettings, context) : void 0,
        ReplicaStatus: (0, smithy_client_1.expectString)(output.ReplicaStatus)
      };
    };
    var deserializeAws_json1_0ReplicaAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaAutoScalingDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaDescription = (output, context) => {
      return {
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes !== void 0 && output.GlobalSecondaryIndexes !== null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescriptionList(output.GlobalSecondaryIndexes, context) : void 0,
        KMSMasterKeyId: (0, smithy_client_1.expectString)(output.KMSMasterKeyId),
        ProvisionedThroughputOverride: output.ProvisionedThroughputOverride !== void 0 && output.ProvisionedThroughputOverride !== null ? deserializeAws_json1_0ProvisionedThroughputOverride(output.ProvisionedThroughputOverride, context) : void 0,
        RegionName: (0, smithy_client_1.expectString)(output.RegionName),
        ReplicaInaccessibleDateTime: output.ReplicaInaccessibleDateTime !== void 0 && output.ReplicaInaccessibleDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ReplicaInaccessibleDateTime))) : void 0,
        ReplicaStatus: (0, smithy_client_1.expectString)(output.ReplicaStatus),
        ReplicaStatusDescription: (0, smithy_client_1.expectString)(output.ReplicaStatusDescription),
        ReplicaStatusPercentProgress: (0, smithy_client_1.expectString)(output.ReplicaStatusPercentProgress),
        ReplicaTableClassSummary: output.ReplicaTableClassSummary !== void 0 && output.ReplicaTableClassSummary !== null ? deserializeAws_json1_0TableClassSummary(output.ReplicaTableClassSummary, context) : void 0
      };
    };
    var deserializeAws_json1_0ReplicaDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescription = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexStatus: (0, smithy_client_1.expectString)(output.IndexStatus),
        ProvisionedReadCapacityAutoScalingSettings: output.ProvisionedReadCapacityAutoScalingSettings !== void 0 && output.ProvisionedReadCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedReadCapacityAutoScalingSettings, context) : void 0,
        ProvisionedWriteCapacityAutoScalingSettings: output.ProvisionedWriteCapacityAutoScalingSettings !== void 0 && output.ProvisionedWriteCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedWriteCapacityAutoScalingSettings, context) : void 0
      };
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescription = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        ProvisionedThroughputOverride: output.ProvisionedThroughputOverride !== void 0 && output.ProvisionedThroughputOverride !== null ? deserializeAws_json1_0ProvisionedThroughputOverride(output.ProvisionedThroughputOverride, context) : void 0
      };
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescription = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexStatus: (0, smithy_client_1.expectString)(output.IndexStatus),
        ProvisionedReadCapacityAutoScalingSettings: output.ProvisionedReadCapacityAutoScalingSettings !== void 0 && output.ProvisionedReadCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedReadCapacityAutoScalingSettings, context) : void 0,
        ProvisionedReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ProvisionedReadCapacityUnits),
        ProvisionedWriteCapacityAutoScalingSettings: output.ProvisionedWriteCapacityAutoScalingSettings !== void 0 && output.ProvisionedWriteCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedWriteCapacityAutoScalingSettings, context) : void 0,
        ProvisionedWriteCapacityUnits: (0, smithy_client_1.expectLong)(output.ProvisionedWriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0Replica(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ReplicaSettingsDescription = (output, context) => {
      return {
        RegionName: (0, smithy_client_1.expectString)(output.RegionName),
        ReplicaBillingModeSummary: output.ReplicaBillingModeSummary !== void 0 && output.ReplicaBillingModeSummary !== null ? deserializeAws_json1_0BillingModeSummary(output.ReplicaBillingModeSummary, context) : void 0,
        ReplicaGlobalSecondaryIndexSettings: output.ReplicaGlobalSecondaryIndexSettings !== void 0 && output.ReplicaGlobalSecondaryIndexSettings !== null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescriptionList(output.ReplicaGlobalSecondaryIndexSettings, context) : void 0,
        ReplicaProvisionedReadCapacityAutoScalingSettings: output.ReplicaProvisionedReadCapacityAutoScalingSettings !== void 0 && output.ReplicaProvisionedReadCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedReadCapacityAutoScalingSettings, context) : void 0,
        ReplicaProvisionedReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ReplicaProvisionedReadCapacityUnits),
        ReplicaProvisionedWriteCapacityAutoScalingSettings: output.ReplicaProvisionedWriteCapacityAutoScalingSettings !== void 0 && output.ReplicaProvisionedWriteCapacityAutoScalingSettings !== null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedWriteCapacityAutoScalingSettings, context) : void 0,
        ReplicaProvisionedWriteCapacityUnits: (0, smithy_client_1.expectLong)(output.ReplicaProvisionedWriteCapacityUnits),
        ReplicaStatus: (0, smithy_client_1.expectString)(output.ReplicaStatus),
        ReplicaTableClassSummary: output.ReplicaTableClassSummary !== void 0 && output.ReplicaTableClassSummary !== null ? deserializeAws_json1_0TableClassSummary(output.ReplicaTableClassSummary, context) : void 0
      };
    };
    var deserializeAws_json1_0ReplicaSettingsDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaSettingsDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0RequestLimitExceeded = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ResourceInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ResourceNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0RestoreSummary = (output, context) => {
      return {
        RestoreDateTime: output.RestoreDateTime !== void 0 && output.RestoreDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RestoreDateTime))) : void 0,
        RestoreInProgress: (0, smithy_client_1.expectBoolean)(output.RestoreInProgress),
        SourceBackupArn: (0, smithy_client_1.expectString)(output.SourceBackupArn),
        SourceTableArn: (0, smithy_client_1.expectString)(output.SourceTableArn)
      };
    };
    var deserializeAws_json1_0RestoreTableFromBackupOutput = (output, context) => {
      return {
        TableDescription: output.TableDescription !== void 0 && output.TableDescription !== null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0RestoreTableToPointInTimeOutput = (output, context) => {
      return {
        TableDescription: output.TableDescription !== void 0 && output.TableDescription !== null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0ScanOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        Count: (0, smithy_client_1.expectInt32)(output.Count),
        Items: output.Items !== void 0 && output.Items !== null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
        LastEvaluatedKey: output.LastEvaluatedKey !== void 0 && output.LastEvaluatedKey !== null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : void 0,
        ScannedCount: (0, smithy_client_1.expectInt32)(output.ScannedCount)
      };
    };
    var deserializeAws_json1_0SecondaryIndexesCapacityMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return __spreadProps(__spreadValues({}, acc), {
          [key]: deserializeAws_json1_0Capacity(value, context)
        });
      }, {});
    };
    var deserializeAws_json1_0SourceTableDetails = (output, context) => {
      return {
        BillingMode: (0, smithy_client_1.expectString)(output.BillingMode),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        ProvisionedThroughput: output.ProvisionedThroughput !== void 0 && output.ProvisionedThroughput !== null ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context) : void 0,
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableCreationDateTime: output.TableCreationDateTime !== void 0 && output.TableCreationDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.TableCreationDateTime))) : void 0,
        TableId: (0, smithy_client_1.expectString)(output.TableId),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        TableSizeBytes: (0, smithy_client_1.expectLong)(output.TableSizeBytes)
      };
    };
    var deserializeAws_json1_0SourceTableFeatureDetails = (output, context) => {
      return {
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes !== void 0 && output.GlobalSecondaryIndexes !== null ? deserializeAws_json1_0GlobalSecondaryIndexes(output.GlobalSecondaryIndexes, context) : void 0,
        LocalSecondaryIndexes: output.LocalSecondaryIndexes !== void 0 && output.LocalSecondaryIndexes !== null ? deserializeAws_json1_0LocalSecondaryIndexes(output.LocalSecondaryIndexes, context) : void 0,
        SSEDescription: output.SSEDescription !== void 0 && output.SSEDescription !== null ? deserializeAws_json1_0SSEDescription(output.SSEDescription, context) : void 0,
        StreamDescription: output.StreamDescription !== void 0 && output.StreamDescription !== null ? deserializeAws_json1_0StreamSpecification(output.StreamDescription, context) : void 0,
        TimeToLiveDescription: output.TimeToLiveDescription !== void 0 && output.TimeToLiveDescription !== null ? deserializeAws_json1_0TimeToLiveDescription(output.TimeToLiveDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0SSEDescription = (output, context) => {
      return {
        InaccessibleEncryptionDateTime: output.InaccessibleEncryptionDateTime !== void 0 && output.InaccessibleEncryptionDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.InaccessibleEncryptionDateTime))) : void 0,
        KMSMasterKeyArn: (0, smithy_client_1.expectString)(output.KMSMasterKeyArn),
        SSEType: (0, smithy_client_1.expectString)(output.SSEType),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_0StreamSpecification = (output, context) => {
      return {
        StreamEnabled: (0, smithy_client_1.expectBoolean)(output.StreamEnabled),
        StreamViewType: (0, smithy_client_1.expectString)(output.StreamViewType)
      };
    };
    var deserializeAws_json1_0StringSetAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0TableAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0TableAutoScalingDescription = (output, context) => {
      return {
        Replicas: output.Replicas !== void 0 && output.Replicas !== null ? deserializeAws_json1_0ReplicaAutoScalingDescriptionList(output.Replicas, context) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        TableStatus: (0, smithy_client_1.expectString)(output.TableStatus)
      };
    };
    var deserializeAws_json1_0TableClassSummary = (output, context) => {
      return {
        LastUpdateDateTime: output.LastUpdateDateTime !== void 0 && output.LastUpdateDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateDateTime))) : void 0,
        TableClass: (0, smithy_client_1.expectString)(output.TableClass)
      };
    };
    var deserializeAws_json1_0TableDescription = (output, context) => {
      return {
        ArchivalSummary: output.ArchivalSummary !== void 0 && output.ArchivalSummary !== null ? deserializeAws_json1_0ArchivalSummary(output.ArchivalSummary, context) : void 0,
        AttributeDefinitions: output.AttributeDefinitions !== void 0 && output.AttributeDefinitions !== null ? deserializeAws_json1_0AttributeDefinitions(output.AttributeDefinitions, context) : void 0,
        BillingModeSummary: output.BillingModeSummary !== void 0 && output.BillingModeSummary !== null ? deserializeAws_json1_0BillingModeSummary(output.BillingModeSummary, context) : void 0,
        CreationDateTime: output.CreationDateTime !== void 0 && output.CreationDateTime !== null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDateTime))) : void 0,
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes !== void 0 && output.GlobalSecondaryIndexes !== null ? deserializeAws_json1_0GlobalSecondaryIndexDescriptionList(output.GlobalSecondaryIndexes, context) : void 0,
        GlobalTableVersion: (0, smithy_client_1.expectString)(output.GlobalTableVersion),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema !== void 0 && output.KeySchema !== null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        LatestStreamArn: (0, smithy_client_1.expectString)(output.LatestStreamArn),
        LatestStreamLabel: (0, smithy_client_1.expectString)(output.LatestStreamLabel),
        LocalSecondaryIndexes: output.LocalSecondaryIndexes !== void 0 && output.LocalSecondaryIndexes !== null ? deserializeAws_json1_0LocalSecondaryIndexDescriptionList(output.LocalSecondaryIndexes, context) : void 0,
        ProvisionedThroughput: output.ProvisionedThroughput !== void 0 && output.ProvisionedThroughput !== null ? deserializeAws_json1_0ProvisionedThroughputDescription(output.ProvisionedThroughput, context) : void 0,
        Replicas: output.Replicas !== void 0 && output.Replicas !== null ? deserializeAws_json1_0ReplicaDescriptionList(output.Replicas, context) : void 0,
        RestoreSummary: output.RestoreSummary !== void 0 && output.RestoreSummary !== null ? deserializeAws_json1_0RestoreSummary(output.RestoreSummary, context) : void 0,
        SSEDescription: output.SSEDescription !== void 0 && output.SSEDescription !== null ? deserializeAws_json1_0SSEDescription(output.SSEDescription, context) : void 0,
        StreamSpecification: output.StreamSpecification !== void 0 && output.StreamSpecification !== null ? deserializeAws_json1_0StreamSpecification(output.StreamSpecification, context) : void 0,
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableClassSummary: output.TableClassSummary !== void 0 && output.TableClassSummary !== null ? deserializeAws_json1_0TableClassSummary(output.TableClassSummary, context) : void 0,
        TableId: (0, smithy_client_1.expectString)(output.TableId),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        TableSizeBytes: (0, smithy_client_1.expectLong)(output.TableSizeBytes),
        TableStatus: (0, smithy_client_1.expectString)(output.TableStatus)
      };
    };
    var deserializeAws_json1_0TableInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0TableNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0TableNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0Tag = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_0TagList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0Tag(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0TimeToLiveDescription = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        TimeToLiveStatus: (0, smithy_client_1.expectString)(output.TimeToLiveStatus)
      };
    };
    var deserializeAws_json1_0TimeToLiveSpecification = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled)
      };
    };
    var deserializeAws_json1_0TransactGetItemsOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        Responses: output.Responses !== void 0 && output.Responses !== null ? deserializeAws_json1_0ItemResponseList(output.Responses, context) : void 0
      };
    };
    var deserializeAws_json1_0TransactionCanceledException = (output, context) => {
      return {
        CancellationReasons: output.CancellationReasons !== void 0 && output.CancellationReasons !== null ? deserializeAws_json1_0CancellationReasonList(output.CancellationReasons, context) : void 0,
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0TransactionConflictException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0TransactionInProgressException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0TransactWriteItemsOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        ItemCollectionMetrics: output.ItemCollectionMetrics !== void 0 && output.ItemCollectionMetrics !== null ? deserializeAws_json1_0ItemCollectionMetricsPerTable(output.ItemCollectionMetrics, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateContinuousBackupsOutput = (output, context) => {
      return {
        ContinuousBackupsDescription: output.ContinuousBackupsDescription !== void 0 && output.ContinuousBackupsDescription !== null ? deserializeAws_json1_0ContinuousBackupsDescription(output.ContinuousBackupsDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateContributorInsightsOutput = (output, context) => {
      return {
        ContributorInsightsStatus: (0, smithy_client_1.expectString)(output.ContributorInsightsStatus),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0UpdateGlobalTableOutput = (output, context) => {
      return {
        GlobalTableDescription: output.GlobalTableDescription !== void 0 && output.GlobalTableDescription !== null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateGlobalTableSettingsOutput = (output, context) => {
      return {
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        ReplicaSettings: output.ReplicaSettings !== void 0 && output.ReplicaSettings !== null ? deserializeAws_json1_0ReplicaSettingsDescriptionList(output.ReplicaSettings, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateItemOutput = (output, context) => {
      return {
        Attributes: output.Attributes !== void 0 && output.Attributes !== null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
        ConsumedCapacity: output.ConsumedCapacity !== void 0 && output.ConsumedCapacity !== null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        ItemCollectionMetrics: output.ItemCollectionMetrics !== void 0 && output.ItemCollectionMetrics !== null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateTableOutput = (output, context) => {
      return {
        TableDescription: output.TableDescription !== void 0 && output.TableDescription !== null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateTableReplicaAutoScalingOutput = (output, context) => {
      return {
        TableAutoScalingDescription: output.TableAutoScalingDescription !== void 0 && output.TableAutoScalingDescription !== null ? deserializeAws_json1_0TableAutoScalingDescription(output.TableAutoScalingDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateTimeToLiveOutput = (output, context) => {
      return {
        TimeToLiveSpecification: output.TimeToLiveSpecification !== void 0 && output.TimeToLiveSpecification !== null ? deserializeAws_json1_0TimeToLiveSpecification(output.TimeToLiveSpecification, context) : void 0
      };
    };
    var deserializeAws_json1_0WriteRequest = (output, context) => {
      return {
        DeleteRequest: output.DeleteRequest !== void 0 && output.DeleteRequest !== null ? deserializeAws_json1_0DeleteRequest(output.DeleteRequest, context) : void 0,
        PutRequest: output.PutRequest !== void 0 && output.PutRequest !== null ? deserializeAws_json1_0PutRequest(output.PutRequest, context) : void 0
      };
    };
    var deserializeAws_json1_0WriteRequests = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0WriteRequest(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
      return "";
    };
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js
var require_BatchExecuteStatementCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchExecuteStatementCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchExecuteStatementCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchExecuteStatementCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchExecuteStatementInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchExecuteStatementOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0BatchExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0BatchExecuteStatementCommand)(output, context);
      }
    };
    exports.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js
var require_BatchGetItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchGetItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchGetItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchGetItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchGetItemInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchGetItemOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0BatchGetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0BatchGetItemCommand)(output, context);
      }
    };
    exports.BatchGetItemCommand = BatchGetItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js
var require_BatchWriteItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BatchWriteItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchWriteItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchWriteItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchWriteItemInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchWriteItemOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0BatchWriteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0BatchWriteItemCommand)(output, context);
      }
    };
    exports.BatchWriteItemCommand = BatchWriteItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js
var require_CreateBackupCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateBackupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateBackupInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateBackupOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0CreateBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0CreateBackupCommand)(output, context);
      }
    };
    exports.CreateBackupCommand = CreateBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js
var require_CreateGlobalTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateGlobalTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateGlobalTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateGlobalTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateGlobalTableInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateGlobalTableOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0CreateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0CreateGlobalTableCommand)(output, context);
      }
    };
    exports.CreateGlobalTableCommand = CreateGlobalTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js
var require_CreateTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateTableInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateTableOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0CreateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0CreateTableCommand)(output, context);
      }
    };
    exports.CreateTableCommand = CreateTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js
var require_DeleteBackupCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteBackupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBackupInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteBackupOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DeleteBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DeleteBackupCommand)(output, context);
      }
    };
    exports.DeleteBackupCommand = DeleteBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js
var require_DeleteItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteItemInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteItemOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DeleteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DeleteItemCommand)(output, context);
      }
    };
    exports.DeleteItemCommand = DeleteItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js
var require_DeleteTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeleteTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteTableInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteTableOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DeleteTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DeleteTableCommand)(output, context);
      }
    };
    exports.DeleteTableCommand = DeleteTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js
var require_DescribeBackupCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeBackupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeBackupInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeBackupOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeBackupCommand)(output, context);
      }
    };
    exports.DescribeBackupCommand = DescribeBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js
var require_DescribeContinuousBackupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeContinuousBackupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContinuousBackupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeContinuousBackupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeContinuousBackupsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeContinuousBackupsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeContinuousBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeContinuousBackupsCommand)(output, context);
      }
    };
    exports.DescribeContinuousBackupsCommand = DescribeContinuousBackupsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js
var require_DescribeContributorInsightsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeContributorInsightsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContributorInsightsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeContributorInsightsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeContributorInsightsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeContributorInsightsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeContributorInsightsCommand)(output, context);
      }
    };
    exports.DescribeContributorInsightsCommand = DescribeContributorInsightsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js
var require_DescribeEndpointsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeEndpointsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeEndpointsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeEndpointsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeEndpointsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeEndpointsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeEndpointsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeEndpointsCommand)(output, context);
      }
    };
    exports.DescribeEndpointsCommand = DescribeEndpointsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js
var require_DescribeExportCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeExportCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeExportCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeExportCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeExportInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeExportOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeExportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeExportCommand)(output, context);
      }
    };
    exports.DescribeExportCommand = DescribeExportCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js
var require_DescribeGlobalTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeGlobalTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeGlobalTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeGlobalTableInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeGlobalTableOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeGlobalTableCommand)(output, context);
      }
    };
    exports.DescribeGlobalTableCommand = DescribeGlobalTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js
var require_DescribeGlobalTableSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeGlobalTableSettingsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableSettingsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeGlobalTableSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeGlobalTableSettingsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeGlobalTableSettingsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeGlobalTableSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeGlobalTableSettingsCommand)(output, context);
      }
    };
    exports.DescribeGlobalTableSettingsCommand = DescribeGlobalTableSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js
var require_DescribeKinesisStreamingDestinationCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeKinesisStreamingDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeKinesisStreamingDestinationInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeKinesisStreamingDestinationOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports.DescribeKinesisStreamingDestinationCommand = DescribeKinesisStreamingDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js
var require_DescribeLimitsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeLimitsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeLimitsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeLimitsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeLimitsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeLimitsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeLimitsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeLimitsCommand)(output, context);
      }
    };
    exports.DescribeLimitsCommand = DescribeLimitsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js
var require_DescribeTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeTableInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeTableOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeTableCommand)(output, context);
      }
    };
    exports.DescribeTableCommand = DescribeTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js
var require_DescribeTableReplicaAutoScalingCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeTableReplicaAutoScalingCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableReplicaAutoScalingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTableReplicaAutoScalingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeTableReplicaAutoScalingInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeTableReplicaAutoScalingOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeTableReplicaAutoScalingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand)(output, context);
      }
    };
    exports.DescribeTableReplicaAutoScalingCommand = DescribeTableReplicaAutoScalingCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js
var require_DescribeTimeToLiveCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DescribeTimeToLiveCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTimeToLiveCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTimeToLiveCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeTimeToLiveInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeTimeToLiveOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeTimeToLiveCommand)(output, context);
      }
    };
    exports.DescribeTimeToLiveCommand = DescribeTimeToLiveCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js
var require_DisableKinesisStreamingDestinationCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisableKinesisStreamingDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DisableKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DisableKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DisableKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DisableKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports.DisableKinesisStreamingDestinationCommand = DisableKinesisStreamingDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js
var require_EnableKinesisStreamingDestinationCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnableKinesisStreamingDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var EnableKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "EnableKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0EnableKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0EnableKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports.EnableKinesisStreamingDestinationCommand = EnableKinesisStreamingDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js
var require_ExecuteStatementCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExecuteStatementCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteStatementCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExecuteStatementCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ExecuteStatementInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExecuteStatementOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ExecuteStatementCommand)(output, context);
      }
    };
    exports.ExecuteStatementCommand = ExecuteStatementCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js
var require_ExecuteTransactionCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExecuteTransactionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteTransactionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExecuteTransactionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ExecuteTransactionInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExecuteTransactionOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ExecuteTransactionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ExecuteTransactionCommand)(output, context);
      }
    };
    exports.ExecuteTransactionCommand = ExecuteTransactionCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js
var require_ExportTableToPointInTimeCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExportTableToPointInTimeCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExportTableToPointInTimeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExportTableToPointInTimeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ExportTableToPointInTimeInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExportTableToPointInTimeOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ExportTableToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ExportTableToPointInTimeCommand)(output, context);
      }
    };
    exports.ExportTableToPointInTimeCommand = ExportTableToPointInTimeCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js
var require_GetItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var GetItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "GetItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetItemInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetItemOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0GetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0GetItemCommand)(output, context);
      }
    };
    exports.GetItemCommand = GetItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js
var require_ListBackupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListBackupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListBackupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListBackupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListBackupsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListBackupsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListBackupsCommand)(output, context);
      }
    };
    exports.ListBackupsCommand = ListBackupsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js
var require_ListContributorInsightsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListContributorInsightsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListContributorInsightsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListContributorInsightsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListContributorInsightsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListContributorInsightsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListContributorInsightsCommand)(output, context);
      }
    };
    exports.ListContributorInsightsCommand = ListContributorInsightsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js
var require_ListExportsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListExportsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListExportsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListExportsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListExportsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListExportsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListExportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListExportsCommand)(output, context);
      }
    };
    exports.ListExportsCommand = ListExportsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js
var require_ListGlobalTablesCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListGlobalTablesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListGlobalTablesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListGlobalTablesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListGlobalTablesInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListGlobalTablesOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListGlobalTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListGlobalTablesCommand)(output, context);
      }
    };
    exports.ListGlobalTablesCommand = ListGlobalTablesCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js
var require_ListTablesCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTablesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTablesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListTablesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTablesInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTablesOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListTablesCommand)(output, context);
      }
    };
    exports.ListTablesCommand = ListTablesCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js
var require_ListTagsOfResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListTagsOfResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTagsOfResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListTagsOfResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTagsOfResourceInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTagsOfResourceOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListTagsOfResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListTagsOfResourceCommand)(output, context);
      }
    };
    exports.ListTagsOfResourceCommand = ListTagsOfResourceCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js
var require_PutItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PutItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var PutItemCommand2 = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "PutItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutItemInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutItemOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0PutItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0PutItemCommand)(output, context);
      }
    };
    exports.PutItemCommand = PutItemCommand2;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js
var require_QueryCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var QueryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "QueryCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.QueryInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.QueryOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0QueryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0QueryCommand)(output, context);
      }
    };
    exports.QueryCommand = QueryCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js
var require_RestoreTableFromBackupCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestoreTableFromBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableFromBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "RestoreTableFromBackupCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RestoreTableFromBackupInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RestoreTableFromBackupOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0RestoreTableFromBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0RestoreTableFromBackupCommand)(output, context);
      }
    };
    exports.RestoreTableFromBackupCommand = RestoreTableFromBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js
var require_RestoreTableToPointInTimeCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestoreTableToPointInTimeCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableToPointInTimeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "RestoreTableToPointInTimeCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RestoreTableToPointInTimeInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RestoreTableToPointInTimeOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0RestoreTableToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0RestoreTableToPointInTimeCommand)(output, context);
      }
    };
    exports.RestoreTableToPointInTimeCommand = RestoreTableToPointInTimeCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js
var require_ScanCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScanCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ScanCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ScanCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ScanInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ScanOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ScanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ScanCommand)(output, context);
      }
    };
    exports.ScanCommand = ScanCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TagResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagResourceInput.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0TagResourceCommand)(output, context);
      }
    };
    exports.TagResourceCommand = TagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js
var require_TransactGetItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactGetItemsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactGetItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TransactGetItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TransactGetItemsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.TransactGetItemsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0TransactGetItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0TransactGetItemsCommand)(output, context);
      }
    };
    exports.TransactGetItemsCommand = TransactGetItemsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js
var require_TransactWriteItemsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactWriteItemsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactWriteItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TransactWriteItemsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TransactWriteItemsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.TransactWriteItemsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0TransactWriteItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0TransactWriteItemsCommand)(output, context);
      }
    };
    exports.TransactWriteItemsCommand = TransactWriteItemsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UntagResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UntagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagResourceInput.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UntagResourceCommand)(output, context);
      }
    };
    exports.UntagResourceCommand = UntagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js
var require_UpdateContinuousBackupsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateContinuousBackupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContinuousBackupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateContinuousBackupsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateContinuousBackupsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateContinuousBackupsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateContinuousBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateContinuousBackupsCommand)(output, context);
      }
    };
    exports.UpdateContinuousBackupsCommand = UpdateContinuousBackupsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js
var require_UpdateContributorInsightsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateContributorInsightsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContributorInsightsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateContributorInsightsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateContributorInsightsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateContributorInsightsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateContributorInsightsCommand)(output, context);
      }
    };
    exports.UpdateContributorInsightsCommand = UpdateContributorInsightsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js
var require_UpdateGlobalTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateGlobalTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateGlobalTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateGlobalTableInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateGlobalTableOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateGlobalTableCommand)(output, context);
      }
    };
    exports.UpdateGlobalTableCommand = UpdateGlobalTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js
var require_UpdateGlobalTableSettingsCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateGlobalTableSettingsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableSettingsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateGlobalTableSettingsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateGlobalTableSettingsInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateGlobalTableSettingsOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateGlobalTableSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateGlobalTableSettingsCommand)(output, context);
      }
    };
    exports.UpdateGlobalTableSettingsCommand = UpdateGlobalTableSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js
var require_UpdateItemCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateItemCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateItemInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateItemOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateItemCommand)(output, context);
      }
    };
    exports.UpdateItemCommand = UpdateItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js
var require_UpdateTableCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTableCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateTableInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateTableOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateTableCommand)(output, context);
      }
    };
    exports.UpdateTableCommand = UpdateTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js
var require_UpdateTableReplicaAutoScalingCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateTableReplicaAutoScalingCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableReplicaAutoScalingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTableReplicaAutoScalingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateTableReplicaAutoScalingInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateTableReplicaAutoScalingOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateTableReplicaAutoScalingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand)(output, context);
      }
    };
    exports.UpdateTableReplicaAutoScalingCommand = UpdateTableReplicaAutoScalingCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js
var require_UpdateTimeToLiveCommand = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateTimeToLiveCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTimeToLiveCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTimeToLiveCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateTimeToLiveInput.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateTimeToLiveOutput.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateTimeToLiveCommand)(output, context);
      }
    };
    exports.UpdateTimeToLiveCommand = UpdateTimeToLiveCommand;
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  "node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.booleanSelector = exports.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports.SelectorType || (exports.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports.booleanSelector = booleanSelector;
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  "node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_booleanSelector(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_DUALSTACK_ENDPOINT = exports.CONFIG_USE_DUALSTACK_ENDPOINT = exports.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_FIPS_ENDPOINT = exports.CONFIG_USE_FIPS_ENDPOINT = exports.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  "node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports.normalizeProvider = normalizeProvider;
  }
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  "node_modules/@aws-sdk/util-middleware/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_normalizeProvider(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var resolveCustomEndpointsConfig = (input) => {
      var _a;
      const { endpoint, urlParser } = input;
      return __spreadProps(__spreadValues({}, input), {
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint)
      });
    };
    exports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports.getEndpointFromRegion = getEndpointFromRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return __spreadProps(__spreadValues({}, input), {
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)(__spreadProps(__spreadValues({}, input), { useDualstackEndpoint, useFipsEndpoint })),
        isCustomEndpoint: endpoint ? true : false,
        useDualstackEndpoint
      });
    };
    exports.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = exports.NODE_REGION_CONFIG_OPTIONS = exports.REGION_INI_NAME = exports.REGION_ENV_NAME = void 0;
    exports.REGION_ENV_NAME = "AWS_REGION";
    exports.REGION_INI_NAME = "region";
    exports.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports.isFipsRegion = isFipsRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports.getRealRegion = getRealRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return __spreadProps(__spreadValues({}, input), {
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint === "boolean" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        }
      });
    };
    exports.resolveRegionConfig = resolveRegionConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_config(), exports);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports.getHostnameFromVariants = getHostnameFromVariants;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports.getResolvedHostname = getResolvedHostname;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports.getResolvedPartition = getResolvedPartition;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return __spreadValues(__spreadValues({
        partition,
        signingService,
        hostname
      }, signingRegion && { signingRegion }), ((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
        signingService: regionHash[resolvedRegion].signingService
      });
    };
    exports.getRegionInfo = getRegionInfo;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_PartitionHash(), exports);
    tslib_1.__exportStar(require_RegionHash(), exports);
    tslib_1.__exportStar(require_getRegionInfo(), exports);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  "node_modules/@aws-sdk/config-resolver/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_endpointsConfig(), exports);
    tslib_1.__exportStar(require_regionConfig(), exports);
    tslib_1.__exportStar(require_regionInfo(), exports);
  }
});

// node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  "node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = __spreadProps(__spreadValues({}, request.headers), {
                [CONTENT_LENGTH_HEADER]: String(length)
              });
            } catch (error) {
            }
          }
        }
        return next(__spreadProps(__spreadValues({}, args), {
          request
        }));
      };
    }
    exports.contentLengthMiddleware = contentLengthMiddleware;
    exports.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);
      }
    });
    exports.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js
var require_configurations = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = void 0;
    var ENV_ENDPOINT_DISCOVERY = ["AWS_ENABLE_ENDPOINT_DISCOVERY", "AWS_ENDPOINT_DISCOVERY_ENABLED"];
    var CONFIG_ENDPOINT_DISCOVERY = "endpoint_discovery_enabled";
    var isFalsy = (value) => ["false", "0"].indexOf(value) >= 0;
    exports.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        for (let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++) {
          const envKey = ENV_ENDPOINT_DISCOVERY[i];
          if (envKey in env) {
            const value = env[envKey];
            if (value === "") {
              throw Error(`Environment variable ${envKey} can't be empty of undefined, got "${value}"`);
            }
            return !isFalsy(value);
          }
        }
      },
      configFileSelector: (profile) => {
        if (CONFIG_ENDPOINT_DISCOVERY in profile) {
          const value = profile[CONFIG_ENDPOINT_DISCOVERY];
          if (value === void 0) {
            throw Error(`Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got "${value}"`);
          }
          return !isFalsy(value);
        }
      },
      default: void 0
    };
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js
var require_getCacheKey = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCacheKey = void 0;
    var getCacheKey = async (commandName, config, options) => {
      const { accessKeyId } = await config.credentials();
      const { identifiers } = options;
      return JSON.stringify(__spreadValues(__spreadValues({}, accessKeyId && { accessKeyId }), identifiers && {
        commandName,
        identifiers: Object.entries(identifiers).sort().reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), { [key]: value }), {})
      }));
    };
    exports.getCacheKey = getCacheKey;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js
var require_updateDiscoveredEndpointInCache = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateDiscoveredEndpointInCache = void 0;
    var requestQueue = {};
    var updateDiscoveredEndpointInCache = async (config, options) => new Promise((resolve, reject) => {
      const { endpointCache } = config;
      const { cacheKey, commandName, identifiers } = options;
      const endpoints = endpointCache.get(cacheKey);
      if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
        if (options.isDiscoveredEndpointRequired) {
          if (!requestQueue[cacheKey])
            requestQueue[cacheKey] = [];
          requestQueue[cacheKey].push({ resolve, reject });
        } else {
          resolve();
        }
      } else if (endpoints && endpoints.length > 0) {
        resolve();
      } else {
        const placeholderEndpoints = [{ Address: "", CachePeriodInMinutes: 1 }];
        endpointCache.set(cacheKey, placeholderEndpoints);
        const command = new options.endpointDiscoveryCommandCtor({
          Operation: commandName.slice(0, -7),
          Identifiers: identifiers
        });
        const handler = command.resolveMiddleware(options.clientStack, config, options.options);
        handler(command).then((result) => {
          endpointCache.set(cacheKey, result.output.Endpoints);
          if (requestQueue[cacheKey]) {
            requestQueue[cacheKey].forEach(({ resolve: resolve2 }) => {
              resolve2();
            });
            delete requestQueue[cacheKey];
          }
          resolve();
        }).catch((error) => {
          var _a;
          if (error.name === "InvalidEndpointException" || ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 421) {
            endpointCache.delete(cacheKey);
          }
          const errorToThrow = Object.assign(new Error(`The operation to discover endpoint failed. Please retry, or provide a custom endpoint and disable endpoint discovery to proceed.`), { reason: error });
          if (requestQueue[cacheKey]) {
            requestQueue[cacheKey].forEach(({ reject: reject2 }) => {
              reject2(errorToThrow);
            });
            delete requestQueue[cacheKey];
          }
          if (options.isDiscoveredEndpointRequired) {
            reject(errorToThrow);
          } else {
            endpointCache.set(cacheKey, placeholderEndpoints);
            resolve();
          }
        });
      }
    });
    exports.updateDiscoveredEndpointInCache = updateDiscoveredEndpointInCache;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js
var require_endpointDiscoveryMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.endpointDiscoveryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var getCacheKey_1 = require_getCacheKey();
    var updateDiscoveredEndpointInCache_1 = require_updateDiscoveredEndpointInCache();
    var endpointDiscoveryMiddleware = (config, middlewareConfig) => (next, context) => async (args) => {
      if (config.isCustomEndpoint) {
        if (config.isClientEndpointDiscoveryEnabled) {
          throw new Error(`Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.`);
        }
        return next(args);
      }
      const { endpointDiscoveryCommandCtor } = config;
      const { isDiscoveredEndpointRequired, identifiers } = middlewareConfig;
      const { clientName, commandName } = context;
      const isEndpointDiscoveryEnabled = await config.endpointDiscoveryEnabled();
      const cacheKey = await (0, getCacheKey_1.getCacheKey)(commandName, config, { identifiers });
      if (isDiscoveredEndpointRequired) {
        if (isEndpointDiscoveryEnabled === false) {
          throw new Error(`Endpoint Discovery is disabled but ${commandName} on ${clientName} requires it. Please check your configurations.`);
        }
        await (0, updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(config, __spreadProps(__spreadValues({}, middlewareConfig), {
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor
        }));
      } else if (isEndpointDiscoveryEnabled) {
        (0, updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(config, __spreadProps(__spreadValues({}, middlewareConfig), {
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor
        }));
      }
      const { request } = args;
      if (cacheKey && protocol_http_1.HttpRequest.isInstance(request)) {
        const endpoint = config.endpointCache.getEndpoint(cacheKey);
        if (endpoint) {
          request.hostname = endpoint;
        }
      }
      return next(args);
    };
    exports.endpointDiscoveryMiddleware = endpointDiscoveryMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js
var require_getEndpointDiscoveryPlugin = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEndpointDiscoveryOptionalPlugin = exports.getEndpointDiscoveryRequiredPlugin = exports.getEndpointDiscoveryPlugin = exports.endpointDiscoveryMiddlewareOptions = void 0;
    var endpointDiscoveryMiddleware_1 = require_endpointDiscoveryMiddleware();
    exports.endpointDiscoveryMiddlewareOptions = {
      name: "endpointDiscoveryMiddleware",
      step: "build",
      tags: ["ENDPOINT_DISCOVERY"],
      override: true
    };
    var getEndpointDiscoveryPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, middlewareConfig), exports.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports.getEndpointDiscoveryPlugin = getEndpointDiscoveryPlugin;
    var getEndpointDiscoveryRequiredPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, __spreadProps(__spreadValues({}, middlewareConfig), { isDiscoveredEndpointRequired: true })), exports.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports.getEndpointDiscoveryRequiredPlugin = getEndpointDiscoveryRequiredPlugin;
    var getEndpointDiscoveryOptionalPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, __spreadProps(__spreadValues({}, middlewareConfig), { isDiscoveredEndpointRequired: false })), exports.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports.getEndpointDiscoveryOptionalPlugin = getEndpointDiscoveryOptionalPlugin;
  }
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js
var require_Endpoint = __commonJS({
  "node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/obliterator/iterator.js
var require_iterator = __commonJS({
  "node_modules/obliterator/iterator.js"(exports, module2) {
    function Iterator(next) {
      Object.defineProperty(this, "_next", {
        writable: false,
        enumerable: false,
        value: next
      });
      this.done = false;
    }
    Iterator.prototype.next = function() {
      if (this.done)
        return { done: true };
      var step = this._next();
      if (step.done)
        this.done = true;
      return step;
    };
    if (typeof Symbol !== "undefined")
      Iterator.prototype[Symbol.iterator] = function() {
        return this;
      };
    Iterator.of = function() {
      var args = arguments, l = args.length, i = 0;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        return { done: false, value: args[i++] };
      });
    };
    Iterator.empty = function() {
      var iterator = new Iterator(null);
      iterator.done = true;
      return iterator;
    };
    Iterator.is = function(value) {
      if (value instanceof Iterator)
        return true;
      return typeof value === "object" && value !== null && typeof value.next === "function";
    };
    module2.exports = Iterator;
  }
});

// node_modules/obliterator/foreach.js
var require_foreach = __commonJS({
  "node_modules/obliterator/foreach.js"(exports, module2) {
    var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== "undefined";
    var SYMBOL_SUPPORT = typeof Symbol !== "undefined";
    function forEach(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error("obliterator/forEach: invalid iterable.");
      if (typeof callback !== "function")
        throw new Error("obliterator/forEach: expecting a callback.");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], i);
        return;
      }
      if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === "function") {
        iterator = iterable;
        i = 0;
        while (s = iterator.next(), s.done !== true) {
          callback(s.value, i);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    }
    forEach.forEachWithNullKeys = function(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error("obliterator/forEachWithNullKeys: invalid iterable.");
      if (typeof callback !== "function")
        throw new Error("obliterator/forEachWithNullKeys: expecting a callback.");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], null);
        return;
      }
      if (iterable instanceof Set) {
        iterable.forEach(function(value) {
          callback(value, null);
        });
        return;
      }
      if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === "function") {
        iterator = iterable;
        i = 0;
        while (s = iterator.next(), s.done !== true) {
          callback(s.value, null);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    };
    module2.exports = forEach;
  }
});

// node_modules/mnemonist/utils/typed-arrays.js
var require_typed_arrays = __commonJS({
  "node_modules/mnemonist/utils/typed-arrays.js"(exports) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports.getPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_8BIT_INTEGER)
        return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER)
        return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER)
        return Uint32Array;
      return Float64Array;
    };
    exports.getSignedPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
        return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
        return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
        return Int32Array;
      return Float64Array;
    };
    exports.getNumberType = function(value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128)
            return Int8Array;
          if (value <= 32767 && value >= -32768)
            return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255)
            return Uint8Array;
          if (value <= 65535)
            return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8
    };
    exports.getMinimalRepresentation = function(array, getter) {
      var maxType = null, maxPriority = 0, p, t, v, i, l;
      for (i = 0, l = array.length; i < l; i++) {
        v = getter ? getter(array[i]) : array[i];
        t = exports.getNumberType(v);
        p = TYPE_PRIORITY[t.name];
        if (p > maxPriority) {
          maxPriority = p;
          maxType = t;
        }
      }
      return maxType;
    };
    exports.isTypedArray = function(value) {
      return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
    };
    exports.concat = function() {
      var length = 0, i, o, l;
      for (i = 0, l = arguments.length; i < l; i++)
        length += arguments[i].length;
      var array = new arguments[0].constructor(length);
      for (i = 0, o = 0; i < l; i++) {
        array.set(arguments[i], o);
        o += arguments[i].length;
      }
      return array;
    };
    exports.indices = function(length) {
      var PointerArray = exports.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i = 0; i < length; i++)
        array[i] = i;
      return array;
    };
  }
});

// node_modules/mnemonist/utils/iterables.js
var require_iterables = __commonJS({
  "node_modules/mnemonist/utils/iterables.js"(exports) {
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    function isArrayLike(target) {
      return Array.isArray(target) || typed.isTypedArray(target);
    }
    function guessLength(target) {
      if (typeof target.length === "number")
        return target.length;
      if (typeof target.size === "number")
        return target.size;
      return;
    }
    function toArray(target) {
      var l = guessLength(target);
      var array = typeof l === "number" ? new Array(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i++] = value;
      });
      return array;
    }
    function toArrayWithIndices(target) {
      var l = guessLength(target);
      var IndexArray = typeof l === "number" ? typed.getPointerArray(l) : Array;
      var array = typeof l === "number" ? new Array(l) : [];
      var indices = typeof l === "number" ? new IndexArray(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i] = value;
        indices[i] = i++;
      });
      return [array, indices];
    }
    exports.isArrayLike = isArrayLike;
    exports.guessLength = guessLength;
    exports.toArray = toArray;
    exports.toArrayWithIndices = toArrayWithIndices;
  }
});

// node_modules/mnemonist/lru-cache.js
var require_lru_cache = __commonJS({
  "node_modules/mnemonist/lru-cache.js"(exports, module2) {
    var Iterator = require_iterator();
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    var iterables = require_iterables();
    function LRUCache(Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      this.capacity = capacity;
      if (typeof this.capacity !== "number" || this.capacity <= 0)
        throw new Error("mnemonist/lru-cache: capacity should be positive number.");
      var PointerArray = typed.getPointerArray(capacity);
      this.forward = new PointerArray(capacity);
      this.backward = new PointerArray(capacity);
      this.K = typeof Keys === "function" ? new Keys(capacity) : new Array(capacity);
      this.V = typeof Values === "function" ? new Values(capacity) : new Array(capacity);
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    }
    LRUCache.prototype.clear = function() {
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    };
    LRUCache.prototype.splayOnTop = function(pointer) {
      var oldHead = this.head;
      if (this.head === pointer)
        return this;
      var previous = this.backward[pointer], next = this.forward[pointer];
      if (this.tail === pointer) {
        this.tail = previous;
      } else {
        this.backward[next] = previous;
      }
      this.forward[previous] = next;
      this.backward[oldHead] = pointer;
      this.head = pointer;
      this.forward[pointer] = oldHead;
      return this;
    };
    LRUCache.prototype.set = function(key, value) {
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
    };
    LRUCache.prototype.setpop = function(key, value) {
      var oldValue = null;
      var oldKey = null;
      var pointer = this.items[key];
      if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return { evicted: false, key, value: oldValue };
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
      if (oldKey) {
        return { evicted: true, key: oldKey, value: oldValue };
      } else {
        return null;
      }
    };
    LRUCache.prototype.has = function(key) {
      return key in this.items;
    };
    LRUCache.prototype.get = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      this.splayOnTop(pointer);
      return this.V[pointer];
    };
    LRUCache.prototype.peek = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === "undefined")
        return;
      return this.V[pointer];
    };
    LRUCache.prototype.forEach = function(callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      while (i < l) {
        callback.call(scope, values[pointer], keys[pointer], this);
        pointer = forward[pointer];
        i++;
      }
    };
    LRUCache.prototype.keys = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: key
        };
      });
    };
    LRUCache.prototype.values = function() {
      var i = 0, l = this.size;
      var pointer = this.head, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value
        };
      });
    };
    LRUCache.prototype.entries = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys[pointer], value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: [key, value]
        };
      });
    };
    if (typeof Symbol !== "undefined")
      LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;
    LRUCache.prototype.inspect = function() {
      var proxy = /* @__PURE__ */ new Map();
      var iterator = this.entries(), step;
      while (step = iterator.next(), !step.done)
        proxy.set(step.value[0], step.value[1]);
      Object.defineProperty(proxy, "constructor", {
        value: LRUCache,
        enumerable: false
      });
      return proxy;
    };
    if (typeof Symbol !== "undefined")
      LRUCache.prototype[Symbol.for("nodejs.util.inspect.custom")] = LRUCache.prototype.inspect;
    LRUCache.from = function(iterable, Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== "number")
          throw new Error("mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.");
      } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      var cache = new LRUCache(Keys, Values, capacity);
      forEach(iterable, function(value, key) {
        cache.set(key, value);
      });
      return cache;
    };
    module2.exports = LRUCache;
  }
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js
var require_EndpointCache = __commonJS({
  "node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointCache = void 0;
    var tslib_1 = require_tslib();
    var lru_cache_1 = tslib_1.__importDefault(require_lru_cache());
    var EndpointCache = class {
      constructor(capacity) {
        this.cache = new lru_cache_1.default(capacity);
      }
      getEndpoint(key) {
        const endpointsWithExpiry = this.get(key);
        if (!endpointsWithExpiry || endpointsWithExpiry.length === 0) {
          return void 0;
        }
        const endpoints = endpointsWithExpiry.map((endpoint) => endpoint.Address);
        return endpoints[Math.floor(Math.random() * endpoints.length)];
      }
      get(key) {
        if (!this.has(key)) {
          return;
        }
        const value = this.cache.get(key);
        if (!value) {
          return;
        }
        const now = Date.now();
        const endpointsWithExpiry = value.filter((endpoint) => now < endpoint.Expires);
        if (endpointsWithExpiry.length === 0) {
          this.delete(key);
          return void 0;
        }
        return endpointsWithExpiry;
      }
      set(key, endpoints) {
        const now = Date.now();
        this.cache.set(key, endpoints.map(({ Address, CachePeriodInMinutes }) => ({
          Address,
          Expires: now + CachePeriodInMinutes * 60 * 1e3
        })));
      }
      delete(key) {
        this.cache.set(key, []);
      }
      has(key) {
        if (!this.cache.has(key)) {
          return false;
        }
        const endpoints = this.cache.peek(key);
        if (!endpoints) {
          return false;
        }
        return endpoints.length > 0;
      }
      clear() {
        this.cache.clear();
      }
    };
    exports.EndpointCache = EndpointCache;
  }
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  "node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Endpoint(), exports);
    tslib_1.__exportStar(require_EndpointCache(), exports);
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js
var require_resolveEndpointDiscoveryConfig = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveEndpointDiscoveryConfig = void 0;
    var endpoint_cache_1 = require_dist_cjs9();
    var resolveEndpointDiscoveryConfig = (input, { endpointDiscoveryCommandCtor }) => {
      var _a;
      return __spreadProps(__spreadValues({}, input), {
        endpointDiscoveryCommandCtor,
        endpointCache: new endpoint_cache_1.EndpointCache((_a = input.endpointCacheSize) !== null && _a !== void 0 ? _a : 1e3),
        endpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== void 0 ? () => Promise.resolve(input.endpointDiscoveryEnabled) : input.endpointDiscoveryEnabledProvider,
        isClientEndpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== void 0
      });
    };
    exports.resolveEndpointDiscoveryConfig = resolveEndpointDiscoveryConfig;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  "node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations(), exports);
    tslib_1.__exportStar(require_getEndpointDiscoveryPlugin(), exports);
    tslib_1.__exportStar(require_resolveEndpointDiscoveryConfig(), exports);
  }
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  "node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHostHeaderPlugin = exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs4();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        request.headers["host"] = request.hostname;
      }
      return next(args);
    };
    exports.hostHeaderMiddleware = hostHeaderMiddleware;
    exports.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.hostHeaderMiddleware)(options), exports.hostHeaderMiddlewareOptions);
      }
    });
    exports.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;
      const response = await next(args);
      if (!logger) {
        return response;
      }
      if (typeof logger.info === "function") {
        const _a = response.output, { $metadata } = _a, outputWithoutMetadata = __objRest(_a, ["$metadata"]);
        logger.info({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
      }
      return response;
    };
    exports.loggerMiddleware = loggerMiddleware;
    exports.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.loggerMiddleware)(), exports.loggerMiddlewareOptions);
      }
    });
    exports.getLoggerPlugin = getLoggerPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  "node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_loggerMiddleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {}));
    exports.DEFAULT_MAX_ATTEMPTS = 3;
    exports.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants2 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;
    exports.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  "node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;
    var constants_1 = require_constants2();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports.isTransientError = isTransientError;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs13();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js
var require_constants3 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REQUEST_HEADER = exports.INVOCATION_ID_HEADER = exports.NO_RETRY_INCREMENT = exports.TIMEOUT_RETRY_COST = exports.RETRY_COST = exports.INITIAL_RETRY_TOKENS = exports.THROTTLING_RETRY_DELAY_BASE = exports.MAXIMUM_RETRY_DELAY = exports.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports.DEFAULT_RETRY_DELAY_BASE = 100;
    exports.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports.THROTTLING_RETRY_DELAY_BASE = 500;
    exports.INITIAL_RETRY_TOKENS = 500;
    exports.RETRY_COST = 5;
    exports.TIMEOUT_RETRY_COST = 10;
    exports.NO_RETRY_INCREMENT = 1;
    exports.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports.REQUEST_HEADER = "amz-sdk-request";
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultRetryQuota = void 0;
    var constants_1 = require_constants3();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : constants_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : constants_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultDelayDecider = void 0;
    var constants_1 = require_constants3();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports.defaultDelayDecider = defaultDelayDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs13();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports.defaultRetryDecider = defaultRetryDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var service_error_classification_1 = require_dist_cjs13();
    var uuid_1 = require_dist();
    var config_1 = require_config2();
    var constants_1 = require_constants3();
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(constants_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[constants_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[constants_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delay = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports.StandardRetryStrategy = StandardRetryStrategy;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const _a = options !== null && options !== void 0 ? options : {}, { rateLimiter } = _a, superOptions = __objRest(_a, ["rateLimiter"]);
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var AdaptiveRetryStrategy_1 = require_AdaptiveRetryStrategy();
    var config_1 = require_config2();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    exports.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: config_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : config_1.DEFAULT_MAX_ATTEMPTS);
      return __spreadProps(__spreadValues({}, input), {
        maxAttempts,
        retryStrategy: async () => {
          if (input.retryStrategy) {
            return input.retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === config_1.RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy_1.StandardRetryStrategy(maxAttempts);
        }
      });
    };
    exports.resolveRetryConfig = resolveRetryConfig;
    exports.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports.CONFIG_RETRY_MODE = "retry_mode";
    exports.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],
      default: config_1.DEFAULT_RETRY_MODE
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getOmitRetryHeadersPlugin = exports.omitRetryHeadersMiddlewareOptions = exports.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants3();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[constants_1.INVOCATION_ID_HEADER];
        delete request.headers[constants_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.omitRetryHeadersMiddleware)(), exports.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;
    var retryMiddleware = (options) => (next, context) => async (args) => {
      const retryStrategy = await options.retryStrategy();
      if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
        context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    };
    exports.retryMiddleware = retryMiddleware;
    exports.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);
      }
    });
    exports.getRetryPlugin = getRetryPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js
var require_types = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  "node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports);
    tslib_1.__exportStar(require_config2(), exports);
    tslib_1.__exportStar(require_configurations2(), exports);
    tslib_1.__exportStar(require_delayDecider(), exports);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports);
    tslib_1.__exportStar(require_retryDecider(), exports);
    tslib_1.__exportStar(require_retryMiddleware(), exports);
    tslib_1.__exportStar(require_types(), exports);
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports.ProviderError = ProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports.CredentialsProviderError = CredentialsProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/chain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports.chain = chain;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports.memoize = memoize;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  "node_modules/@aws-sdk/property-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_CredentialsProviderError(), exports);
    tslib_1.__exportStar(require_ProviderError(), exports);
    tslib_1.__exportStar(require_chain(), exports);
    tslib_1.__exportStar(require_fromStatic(), exports);
    tslib_1.__exportStar(require_memoize(), exports);
  }
});

// node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  "node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toHex = exports.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports.toHex = toHex;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants4 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MAX_PRESIGNED_TTL = exports.KEY_TYPE_IDENTIFIER = exports.MAX_CACHE_SIZE = exports.UNSIGNED_PAYLOAD = exports.EVENT_ALGORITHM_IDENTIFIER = exports.ALGORITHM_IDENTIFIER_V4A = exports.ALGORITHM_IDENTIFIER = exports.UNSIGNABLE_PATTERNS = exports.SEC_HEADER_PATTERN = exports.PROXY_HEADER_PATTERN = exports.ALWAYS_UNSIGNABLE_HEADERS = exports.HOST_HEADER = exports.TOKEN_HEADER = exports.SHA256_HEADER = exports.SIGNATURE_HEADER = exports.GENERATED_HEADERS = exports.DATE_HEADER = exports.AMZ_DATE_HEADER = exports.AUTH_HEADER = exports.REGION_SET_PARAM = exports.TOKEN_QUERY_PARAM = exports.SIGNATURE_QUERY_PARAM = exports.EXPIRES_QUERY_PARAM = exports.SIGNED_HEADERS_QUERY_PARAM = exports.AMZ_DATE_QUERY_PARAM = exports.CREDENTIAL_QUERY_PARAM = exports.ALGORITHM_QUERY_PARAM = void 0;
    exports.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports.AUTH_HEADER = "authorization";
    exports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports.DATE_HEADER = "date";
    exports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];
    exports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports.SHA256_HEADER = "x-amz-content-sha256";
    exports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();
    exports.HOST_HEADER = "host";
    exports.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports.PROXY_HEADER_PATTERN = /^proxy-/;
    exports.SEC_HEADER_PATTERN = /^sec-/;
    exports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports.MAX_CACHE_SIZE = 50;
    exports.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs16();
    var constants_1 = require_constants4();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(data);
      return hash.digest();
    };
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalHeaders = void 0;
    var constants_1 = require_constants4();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports.getCanonicalHeaders = getCanonicalHeaders;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports.escapeUriPath = escapeUriPath;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  "node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_escape_uri(), exports);
    tslib_1.__exportStar(require_escape_uri_path(), exports);
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs17();
    var constants_1 = require_constants4();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports.getCanonicalQuery = getCanonicalQuery;
  }
});

// node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  "node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports.isArrayBuffer = isArrayBuffer;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs18();
    var util_hex_encoding_1 = require_dist_cjs16();
    var constants_1 = require_constants4();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(body);
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports.getPayloadHash = getPayloadHash;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports.deleteHeader = deleteHeader;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cloneQuery = exports.cloneRequest = void 0;
    var cloneRequest = (_a) => {
      var _b = _a, { headers, query } = _b, rest = __objRest(_b, ["headers", "query"]);
      return __spreadProps(__spreadValues({}, rest), {
        headers: __spreadValues({}, headers),
        query: query ? (0, exports.cloneQuery)(query) : void 0
      });
    };
    exports.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return __spreadProps(__spreadValues({}, carry), {
        [paramName]: Array.isArray(param) ? [...param] : param
      });
    }, {});
    exports.cloneQuery = cloneQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return __spreadProps(__spreadValues({}, request), {
        headers,
        query
      });
    };
    exports.moveHeadersToQuery = moveHeadersToQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants4();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports.prepareRequest = prepareRequest;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toDate = exports.iso8601 = void 0;
    var iso8601 = (time) => (0, exports.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports.toDate = toDate;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs16();
    var util_middleware_1 = require_dist_cjs6();
    var constants_1 = require_constants4();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(canonicalRequest);
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
    };
    exports.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  "node_modules/@aws-sdk/signature-v4/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareRequest = exports.moveHeadersToQuery = exports.getPayloadHash = exports.getCanonicalQuery = exports.getCanonicalHeaders = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SignatureV4(), exports);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports);
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs15();
    var signature_v4_1 = require_dist_cjs19();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = () => normalizeProvider(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = __spreadProps(__spreadValues({}, input), {
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          });
          const signerConstructor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new signerConstructor(params);
        });
      }
      return __spreadProps(__spreadValues({}, input), {
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      });
    };
    exports.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = normalizeProvider(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return __spreadProps(__spreadValues({}, input), {
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      });
    };
    exports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeProvider = (input) => {
      if (typeof input === "object") {
        const promisified = Promise.resolve(input);
        return () => promisified;
      }
      return input;
    };
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return normalizeProvider(credentials);
    };
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports.isClockSkewed = isClockSkewed;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin = exports.awsAuthMiddlewareOptions = exports.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const signer = await options.signer();
      const output = await next(__spreadProps(__spreadValues({}, args), {
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: context["signing_region"],
          signingService: context["signing_service"]
        })
      })).catch((error) => {
        var _a;
        const serverTime = (_a = error.ServerTime) !== null && _a !== void 0 ? _a : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.awsAuthMiddleware)(options), exports.awsAuthMiddlewareOptions);
      }
    });
    exports.getAwsAuthPlugin = getAwsAuthPlugin;
    exports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  "node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations3(), exports);
    tslib_1.__exportStar(require_middleware(), exports);
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations4 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return __spreadProps(__spreadValues({}, input), {
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      });
    }
    exports.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants5 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UA_ESCAPE_REGEX = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;
    exports.USER_AGENT = "user-agent";
    exports.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports.SPACE = " ";
    exports.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants5();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next(__spreadProps(__spreadValues({}, args), {
        request
      }));
    };
    exports.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version]) => {
      const prefixSeparatorIndex = name.indexOf("/");
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version].filter((item) => item && item.length > 0).map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, "_")).join("/");
    };
    exports.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports.userAgentMiddleware)(config), exports.getUserAgentMiddlewareOptions);
      }
    });
    exports.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  "node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations4(), exports);
    tslib_1.__exportStar(require_user_agent_middleware(), exports);
  }
});

// node_modules/@aws-sdk/client-dynamodb/package.json
var require_package = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-dynamodb",
      description: "AWS SDK for JavaScript Dynamodb Client for Node.js, Browser and React Native",
      version: "3.58.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/client-sts": "3.58.0",
        "@aws-sdk/config-resolver": "3.58.0",
        "@aws-sdk/credential-provider-node": "3.58.0",
        "@aws-sdk/fetch-http-handler": "3.58.0",
        "@aws-sdk/hash-node": "3.55.0",
        "@aws-sdk/invalid-dependency": "3.55.0",
        "@aws-sdk/middleware-content-length": "3.58.0",
        "@aws-sdk/middleware-endpoint-discovery": "3.58.0",
        "@aws-sdk/middleware-host-header": "3.58.0",
        "@aws-sdk/middleware-logger": "3.55.0",
        "@aws-sdk/middleware-retry": "3.58.0",
        "@aws-sdk/middleware-serde": "3.55.0",
        "@aws-sdk/middleware-signing": "3.58.0",
        "@aws-sdk/middleware-stack": "3.55.0",
        "@aws-sdk/middleware-user-agent": "3.58.0",
        "@aws-sdk/node-config-provider": "3.58.0",
        "@aws-sdk/node-http-handler": "3.58.0",
        "@aws-sdk/protocol-http": "3.58.0",
        "@aws-sdk/smithy-client": "3.55.0",
        "@aws-sdk/types": "3.55.0",
        "@aws-sdk/url-parser": "3.55.0",
        "@aws-sdk/util-base64-browser": "3.58.0",
        "@aws-sdk/util-base64-node": "3.55.0",
        "@aws-sdk/util-body-length-browser": "3.55.0",
        "@aws-sdk/util-body-length-node": "3.55.0",
        "@aws-sdk/util-defaults-mode-browser": "3.55.0",
        "@aws-sdk/util-defaults-mode-node": "3.58.0",
        "@aws-sdk/util-user-agent-browser": "3.58.0",
        "@aws-sdk/util-user-agent-node": "3.58.0",
        "@aws-sdk/util-utf8-browser": "3.55.0",
        "@aws-sdk/util-utf8-node": "3.55.0",
        "@aws-sdk/util-waiter": "3.55.0",
        tslib: "^2.3.1",
        uuid: "^8.3.2"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.58.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        "@types/uuid": "^8.3.0",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-dynamodb",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-dynamodb"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    exports.STSServiceException = STSServiceException;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenResponse = exports.GetSessionTokenRequest = exports.GetFederationTokenResponse = exports.FederatedUser = exports.GetFederationTokenRequest = exports.GetCallerIdentityResponse = exports.GetCallerIdentityRequest = exports.GetAccessKeyInfoResponse = exports.GetAccessKeyInfoRequest = exports.InvalidAuthorizationMessageException = exports.DecodeAuthorizationMessageResponse = exports.DecodeAuthorizationMessageRequest = exports.IDPCommunicationErrorException = exports.AssumeRoleWithWebIdentityResponse = exports.AssumeRoleWithWebIdentityRequest = exports.InvalidIdentityTokenException = exports.IDPRejectedClaimException = exports.AssumeRoleWithSAMLResponse = exports.AssumeRoleWithSAMLRequest = exports.RegionDisabledException = exports.PackedPolicyTooLargeException = exports.MalformedPolicyDocumentException = exports.ExpiredTokenException = exports.AssumeRoleResponse = exports.Credentials = exports.AssumeRoleRequest = exports.Tag = exports.PolicyDescriptorType = exports.AssumedRoleUser = void 0;
    var STSServiceException_1 = require_STSServiceException();
    var AssumedRoleUser;
    (function(AssumedRoleUser2) {
      AssumedRoleUser2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumedRoleUser = exports.AssumedRoleUser || (exports.AssumedRoleUser = {}));
    var PolicyDescriptorType;
    (function(PolicyDescriptorType2) {
      PolicyDescriptorType2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(PolicyDescriptorType = exports.PolicyDescriptorType || (exports.PolicyDescriptorType = {}));
    var Tag;
    (function(Tag2) {
      Tag2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Tag = exports.Tag || (exports.Tag = {}));
    var AssumeRoleRequest;
    (function(AssumeRoleRequest2) {
      AssumeRoleRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleRequest = exports.AssumeRoleRequest || (exports.AssumeRoleRequest = {}));
    var Credentials;
    (function(Credentials2) {
      Credentials2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(Credentials = exports.Credentials || (exports.Credentials = {}));
    var AssumeRoleResponse;
    (function(AssumeRoleResponse2) {
      AssumeRoleResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleResponse = exports.AssumeRoleResponse || (exports.AssumeRoleResponse = {}));
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ExpiredTokenException",
          $fault: "client"
        }, opts));
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    exports.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "MalformedPolicyDocumentException",
          $fault: "client"
        }, opts));
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "PackedPolicyTooLargeException",
          $fault: "client"
        }, opts));
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    exports.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "RegionDisabledException",
          $fault: "client"
        }, opts));
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    exports.RegionDisabledException = RegionDisabledException;
    var AssumeRoleWithSAMLRequest;
    (function(AssumeRoleWithSAMLRequest2) {
      AssumeRoleWithSAMLRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithSAMLRequest = exports.AssumeRoleWithSAMLRequest || (exports.AssumeRoleWithSAMLRequest = {}));
    var AssumeRoleWithSAMLResponse;
    (function(AssumeRoleWithSAMLResponse2) {
      AssumeRoleWithSAMLResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithSAMLResponse = exports.AssumeRoleWithSAMLResponse || (exports.AssumeRoleWithSAMLResponse = {}));
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IDPRejectedClaimException",
          $fault: "client"
        }, opts));
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    exports.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidIdentityTokenException",
          $fault: "client"
        }, opts));
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    exports.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var AssumeRoleWithWebIdentityRequest;
    (function(AssumeRoleWithWebIdentityRequest2) {
      AssumeRoleWithWebIdentityRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithWebIdentityRequest = exports.AssumeRoleWithWebIdentityRequest || (exports.AssumeRoleWithWebIdentityRequest = {}));
    var AssumeRoleWithWebIdentityResponse;
    (function(AssumeRoleWithWebIdentityResponse2) {
      AssumeRoleWithWebIdentityResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AssumeRoleWithWebIdentityResponse = exports.AssumeRoleWithWebIdentityResponse || (exports.AssumeRoleWithWebIdentityResponse = {}));
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "IDPCommunicationErrorException",
          $fault: "client"
        }, opts));
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    exports.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var DecodeAuthorizationMessageRequest;
    (function(DecodeAuthorizationMessageRequest2) {
      DecodeAuthorizationMessageRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DecodeAuthorizationMessageRequest = exports.DecodeAuthorizationMessageRequest || (exports.DecodeAuthorizationMessageRequest = {}));
    var DecodeAuthorizationMessageResponse;
    (function(DecodeAuthorizationMessageResponse2) {
      DecodeAuthorizationMessageResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(DecodeAuthorizationMessageResponse = exports.DecodeAuthorizationMessageResponse || (exports.DecodeAuthorizationMessageResponse = {}));
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidAuthorizationMessageException",
          $fault: "client"
        }, opts));
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
      }
    };
    exports.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var GetAccessKeyInfoRequest;
    (function(GetAccessKeyInfoRequest2) {
      GetAccessKeyInfoRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetAccessKeyInfoRequest = exports.GetAccessKeyInfoRequest || (exports.GetAccessKeyInfoRequest = {}));
    var GetAccessKeyInfoResponse;
    (function(GetAccessKeyInfoResponse2) {
      GetAccessKeyInfoResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetAccessKeyInfoResponse = exports.GetAccessKeyInfoResponse || (exports.GetAccessKeyInfoResponse = {}));
    var GetCallerIdentityRequest;
    (function(GetCallerIdentityRequest2) {
      GetCallerIdentityRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetCallerIdentityRequest = exports.GetCallerIdentityRequest || (exports.GetCallerIdentityRequest = {}));
    var GetCallerIdentityResponse;
    (function(GetCallerIdentityResponse2) {
      GetCallerIdentityResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetCallerIdentityResponse = exports.GetCallerIdentityResponse || (exports.GetCallerIdentityResponse = {}));
    var GetFederationTokenRequest;
    (function(GetFederationTokenRequest2) {
      GetFederationTokenRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetFederationTokenRequest = exports.GetFederationTokenRequest || (exports.GetFederationTokenRequest = {}));
    var FederatedUser;
    (function(FederatedUser2) {
      FederatedUser2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(FederatedUser = exports.FederatedUser || (exports.FederatedUser = {}));
    var GetFederationTokenResponse;
    (function(GetFederationTokenResponse2) {
      GetFederationTokenResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetFederationTokenResponse = exports.GetFederationTokenResponse || (exports.GetFederationTokenResponse = {}));
    var GetSessionTokenRequest;
    (function(GetSessionTokenRequest2) {
      GetSessionTokenRequest2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetSessionTokenRequest = exports.GetSessionTokenRequest || (exports.GetSessionTokenRequest = {}));
    var GetSessionTokenResponse;
    (function(GetSessionTokenResponse2) {
      GetSessionTokenResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(GetSessionTokenResponse = exports.GetSessionTokenResponse || (exports.GetSessionTokenResponse = {}));
  }
});

// node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS({
  "node_modules/entities/lib/maps/entities.json"(exports, module2) {
    module2.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
  }
});

// node_modules/entities/lib/maps/legacy.json
var require_legacy = __commonJS({
  "node_modules/entities/lib/maps/legacy.json"(exports, module2) {
    module2.exports = { Aacute: "\xC1", aacute: "\xE1", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", AElig: "\xC6", aelig: "\xE6", Agrave: "\xC0", agrave: "\xE0", amp: "&", AMP: "&", Aring: "\xC5", aring: "\xE5", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", brvbar: "\xA6", Ccedil: "\xC7", ccedil: "\xE7", cedil: "\xB8", cent: "\xA2", copy: "\xA9", COPY: "\xA9", curren: "\xA4", deg: "\xB0", divide: "\xF7", Eacute: "\xC9", eacute: "\xE9", Ecirc: "\xCA", ecirc: "\xEA", Egrave: "\xC8", egrave: "\xE8", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", frac12: "\xBD", frac14: "\xBC", frac34: "\xBE", gt: ">", GT: ">", Iacute: "\xCD", iacute: "\xED", Icirc: "\xCE", icirc: "\xEE", iexcl: "\xA1", Igrave: "\xCC", igrave: "\xEC", iquest: "\xBF", Iuml: "\xCF", iuml: "\xEF", laquo: "\xAB", lt: "<", LT: "<", macr: "\xAF", micro: "\xB5", middot: "\xB7", nbsp: "\xA0", not: "\xAC", Ntilde: "\xD1", ntilde: "\xF1", Oacute: "\xD3", oacute: "\xF3", Ocirc: "\xD4", ocirc: "\xF4", Ograve: "\xD2", ograve: "\xF2", ordf: "\xAA", ordm: "\xBA", Oslash: "\xD8", oslash: "\xF8", Otilde: "\xD5", otilde: "\xF5", Ouml: "\xD6", ouml: "\xF6", para: "\xB6", plusmn: "\xB1", pound: "\xA3", quot: '"', QUOT: '"', raquo: "\xBB", reg: "\xAE", REG: "\xAE", sect: "\xA7", shy: "\xAD", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", szlig: "\xDF", THORN: "\xDE", thorn: "\xFE", times: "\xD7", Uacute: "\xDA", uacute: "\xFA", Ucirc: "\xDB", ucirc: "\xFB", Ugrave: "\xD9", ugrave: "\xF9", uml: "\xA8", Uuml: "\xDC", uuml: "\xFC", Yacute: "\xDD", yacute: "\xFD", yen: "\xA5", yuml: "\xFF" };
  }
});

// node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS({
  "node_modules/entities/lib/maps/xml.json"(exports, module2) {
    module2.exports = { amp: "&", apos: "'", gt: ">", lt: "<", quot: '"' };
  }
});

// node_modules/entities/lib/maps/decode.json
var require_decode = __commonJS({
  "node_modules/entities/lib/maps/decode.json"(exports, module2) {
    module2.exports = { "0": 65533, "128": 8364, "130": 8218, "131": 402, "132": 8222, "133": 8230, "134": 8224, "135": 8225, "136": 710, "137": 8240, "138": 352, "139": 8249, "140": 338, "142": 381, "145": 8216, "146": 8217, "147": 8220, "148": 8221, "149": 8226, "150": 8211, "151": 8212, "152": 732, "153": 8482, "154": 353, "155": 8250, "156": 339, "158": 382, "159": 376 };
  }
});

// node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS({
  "node_modules/entities/lib/decode_codepoint.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var decode_json_1 = __importDefault(require_decode());
    var fromCodePoint = String.fromCodePoint || function(codePoint) {
      var output = "";
      if (codePoint > 65535) {
        codePoint -= 65536;
        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      output += String.fromCharCode(codePoint);
      return output;
    };
    function decodeCodePoint(codePoint) {
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return "\uFFFD";
      }
      if (codePoint in decode_json_1.default) {
        codePoint = decode_json_1.default[codePoint];
      }
      return fromCodePoint(codePoint);
    }
    exports.default = decodeCodePoint;
  }
});

// node_modules/entities/lib/decode.js
var require_decode2 = __commonJS({
  "node_modules/entities/lib/decode.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
    var entities_json_1 = __importDefault(require_entities());
    var legacy_json_1 = __importDefault(require_legacy());
    var xml_json_1 = __importDefault(require_xml());
    var decode_codepoint_1 = __importDefault(require_decode_codepoint());
    var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
    exports.decodeXML = getStrictDecoder(xml_json_1.default);
    exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
    function getStrictDecoder(map) {
      var replace = getReplacer(map);
      return function(str) {
        return String(str).replace(strictEntityRe, replace);
      };
    }
    var sorter = function(a, b) {
      return a < b ? 1 : -1;
    };
    exports.decodeHTML = function() {
      var legacy = Object.keys(legacy_json_1.default).sort(sorter);
      var keys = Object.keys(entities_json_1.default).sort(sorter);
      for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
          keys[i] += ";?";
          j++;
        } else {
          keys[i] += ";";
        }
      }
      var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
      var replace = getReplacer(entities_json_1.default);
      function replacer(str) {
        if (str.substr(-1) !== ";")
          str += ";";
        return replace(str);
      }
      return function(str) {
        return String(str).replace(re, replacer);
      };
    }();
    function getReplacer(map) {
      return function replace(str) {
        if (str.charAt(1) === "#") {
          var secondChar = str.charAt(2);
          if (secondChar === "X" || secondChar === "x") {
            return decode_codepoint_1.default(parseInt(str.substr(3), 16));
          }
          return decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)] || str;
      };
    }
  }
});

// node_modules/entities/lib/encode.js
var require_encode = __commonJS({
  "node_modules/entities/lib/encode.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
    var xml_json_1 = __importDefault(require_xml());
    var inverseXML = getInverseObj(xml_json_1.default);
    var xmlReplacer = getInverseReplacer(inverseXML);
    exports.encodeXML = getASCIIEncoder(inverseXML);
    var entities_json_1 = __importDefault(require_entities());
    var inverseHTML = getInverseObj(entities_json_1.default);
    var htmlReplacer = getInverseReplacer(inverseHTML);
    exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
    exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
    function getInverseObj(obj) {
      return Object.keys(obj).sort().reduce(function(inverse, name) {
        inverse[obj[name]] = "&" + name + ";";
        return inverse;
      }, {});
    }
    function getInverseReplacer(inverse) {
      var single = [];
      var multiple = [];
      for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
        var k = _a[_i];
        if (k.length === 1) {
          single.push("\\" + k);
        } else {
          multiple.push(k);
        }
      }
      single.sort();
      for (var start = 0; start < single.length - 1; start++) {
        var end = start;
        while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
          end += 1;
        }
        var count = 1 + end - start;
        if (count < 3)
          continue;
        single.splice(start, count, single[start] + "-" + single[end]);
      }
      multiple.unshift("[" + single.join("") + "]");
      return new RegExp(multiple.join("|"), "g");
    }
    var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
    var getCodePoint = String.prototype.codePointAt != null ? function(str) {
      return str.codePointAt(0);
    } : function(c) {
      return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
    };
    function singleCharReplacer(c) {
      return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
    }
    function getInverse(inverse, re) {
      return function(data) {
        return data.replace(re, function(name) {
          return inverse[name];
        }).replace(reNonASCII, singleCharReplacer);
      };
    }
    var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
    function escape(data) {
      return data.replace(reEscapeChars, singleCharReplacer);
    }
    exports.escape = escape;
    function escapeUTF8(data) {
      return data.replace(xmlReplacer, singleCharReplacer);
    }
    exports.escapeUTF8 = escapeUTF8;
    function getASCIIEncoder(obj) {
      return function(data) {
        return data.replace(reEscapeChars, function(c) {
          return obj[c] || singleCharReplacer(c);
        });
      };
    }
  }
});

// node_modules/entities/lib/index.js
var require_lib = __commonJS({
  "node_modules/entities/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
    var decode_1 = require_decode2();
    var encode_1 = require_encode();
    function decode(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
    }
    exports.decode = decode;
    function decodeStrict(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
    }
    exports.decodeStrict = decodeStrict;
    function encode(data, level) {
      return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
    }
    exports.encode = encode;
    var encode_2 = require_encode();
    Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function() {
      return encode_2.encodeXML;
    } });
    Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function() {
      return encode_2.encodeNonAsciiHTML;
    } });
    Object.defineProperty(exports, "escape", { enumerable: true, get: function() {
      return encode_2.escape;
    } });
    Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function() {
      return encode_2.escapeUTF8;
    } });
    Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    var decode_2 = require_decode2();
    Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
    Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  "node_modules/fast-xml-parser/src/util.js"(exports) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports.getValue = function(v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports.buildOptions = function(options, defaultOptions, props) {
      var newOptions = {};
      if (!options) {
        return defaultOptions;
      }
      for (let i = 0; i < props.length; i++) {
        if (options[props[i]] !== void 0) {
          newOptions[props[i]] = options[props[i]];
        } else {
          newOptions[props[i]] = defaultOptions[props[i]];
        }
      }
      return newOptions;
    };
    exports.isTagNameInArrayMode = function(tagName, arrayMode, parentTagName) {
      if (arrayMode === false) {
        return false;
      } else if (arrayMode instanceof RegExp) {
        return arrayMode.test(tagName);
      } else if (typeof arrayMode === "function") {
        return !!arrayMode(tagName, parentTagName);
      }
      return arrayMode === "strict";
    };
    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/node2json.js
var require_node2json = __commonJS({
  "node_modules/fast-xml-parser/src/node2json.js"(exports) {
    "use strict";
    var util = require_util();
    var convertToJson = function(node, options, parentTagName) {
      const jObj = {};
      if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {
        return util.isExist(node.val) ? node.val : "";
      }
      if (util.isExist(node.val) && !(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
        const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);
        jObj[options.textNodeName] = asArray ? [node.val] : node.val;
      }
      util.merge(jObj, node.attrsMap, options.arrayMode);
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        const tagName = keys[index];
        if (node.child[tagName] && node.child[tagName].length > 1) {
          jObj[tagName] = [];
          for (let tag in node.child[tagName]) {
            if (node.child[tagName].hasOwnProperty(tag)) {
              jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
            }
          }
        } else {
          const result = convertToJson(node.child[tagName][0], options, tagName);
          const asArray = options.arrayMode === true && typeof result === "object" || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
          jObj[tagName] = asArray ? [result] : result;
        }
      }
      return jObj;
    };
    exports.convertToJson = convertToJson;
  }
});

// node_modules/fast-xml-parser/src/xmlNode.js
var require_xmlNode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlNode.js"(exports, module2) {
    "use strict";
    module2.exports = function(tagname, parent, val) {
      this.tagname = tagname;
      this.parent = parent;
      this.child = {};
      this.attrsMap = {};
      this.val = val;
      this.addChild = function(child) {
        if (Array.isArray(this.child[child.tagname])) {
          this.child[child.tagname].push(child);
        } else {
          this.child[child.tagname] = [child];
        }
      };
    };
  }
});

// node_modules/fast-xml-parser/src/xmlstr2xmlnode.js
var require_xmlstr2xmlnode = __commonJS({
  "node_modules/fast-xml-parser/src/xmlstr2xmlnode.js"(exports) {
    "use strict";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var xmlNode = require_xmlNode();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attrNodeName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      ignoreNameSpace: false,
      allowBooleanAttributes: false,
      parseNodeValue: true,
      parseAttributeValue: false,
      arrayMode: false,
      trimValues: true,
      cdataTagName: false,
      cdataPositionChar: "\\c",
      tagValueProcessor: function(a, tagName) {
        return a;
      },
      attrValueProcessor: function(a, attrName) {
        return a;
      },
      stopNodes: []
    };
    exports.defaultOptions = defaultOptions;
    var props = [
      "attributeNamePrefix",
      "attrNodeName",
      "textNodeName",
      "ignoreAttributes",
      "ignoreNameSpace",
      "allowBooleanAttributes",
      "parseNodeValue",
      "parseAttributeValue",
      "arrayMode",
      "trimValues",
      "cdataTagName",
      "cdataPositionChar",
      "tagValueProcessor",
      "attrValueProcessor",
      "parseTrueNumberOnly",
      "stopNodes"
    ];
    exports.props = props;
    function processTagValue(tagName, val, options) {
      if (val) {
        if (options.trimValues) {
          val = val.trim();
        }
        val = options.tagValueProcessor(val, tagName);
        val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);
      }
      return val;
    }
    function resolveNameSpace(tagname, options) {
      if (options.ignoreNameSpace) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    function parseValue(val, shouldParse, parseTrueNumberOnly) {
      if (shouldParse && typeof val === "string") {
        let parsed;
        if (val.trim() === "" || isNaN(val)) {
          parsed = val === "true" ? true : val === "false" ? false : val;
        } else {
          if (val.indexOf("0x") !== -1) {
            parsed = Number.parseInt(val, 16);
          } else if (val.indexOf(".") !== -1) {
            parsed = Number.parseFloat(val);
            val = val.replace(/\.?0+$/, "");
          } else {
            parsed = Number.parseInt(val, 10);
          }
          if (parseTrueNumberOnly) {
            parsed = String(parsed) === val ? parsed : val;
          }
        }
        return parsed;
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return "";
        }
      }
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])(.*?)\\3)?`, "g");
    function buildAttributesMap(attrStr, options) {
      if (!options.ignoreAttributes && typeof attrStr === "string") {
        attrStr = attrStr.replace(/\r?\n/g, " ");
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = resolveNameSpace(matches[i][1], options);
          if (attrName.length) {
            if (matches[i][4] !== void 0) {
              if (options.trimValues) {
                matches[i][4] = matches[i][4].trim();
              }
              matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
              attrs[options.attributeNamePrefix + attrName] = parseValue(matches[i][4], options.parseAttributeValue, options.parseTrueNumberOnly);
            } else if (options.allowBooleanAttributes) {
              attrs[options.attributeNamePrefix + attrName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (options.attrNodeName) {
          const attrCollection = {};
          attrCollection[options.attrNodeName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var getTraversalObj = function(xmlData, options) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      options = buildOptions(options, defaultOptions, props);
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (currentNode) {
              if (currentNode.val) {
                currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(tagName, textData, options);
              } else {
                currentNode.val = processTagValue(tagName, textData, options);
              }
            }
            if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
              currentNode.child = [];
              if (currentNode.attrsMap == void 0) {
                currentNode.attrsMap = {};
              }
              currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);
            }
            currentNode = currentNode.parent;
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            i = findClosingIndex(xmlData, "?>", i, "Pi Tag is not closed.");
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            i = findClosingIndex(xmlData, "-->", i, "Comment is not closed.");
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "DOCTYPE is not closed.");
            const tagExp = xmlData.substring(i, closeIndex);
            if (tagExp.indexOf("[") >= 0) {
              i = xmlData.indexOf("]>", i) + 1;
            } else {
              i = closeIndex;
            }
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            if (textData) {
              currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
              textData = "";
            }
            if (options.cdataTagName) {
              const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
              currentNode.addChild(childNode);
              currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
              if (tagExp) {
                childNode.val = tagExp;
              }
            } else {
              currentNode.val = (currentNode.val || "") + (tagExp || "");
            }
            i = closeIndex + 2;
          } else {
            const result = closingIndexForOpeningTag(xmlData, i + 1);
            let tagExp = result.data;
            const closeIndex = result.index;
            const separatorIndex = tagExp.indexOf(" ");
            let tagName = tagExp;
            let shouldBuildAttributesMap = true;
            if (separatorIndex !== -1) {
              tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
              tagExp = tagExp.substr(separatorIndex + 1);
            }
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
                shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
              }
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
              }
            }
            if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
              if (tagName[tagName.length - 1] === "/") {
                tagName = tagName.substr(0, tagName.length - 1);
                tagExp = tagName;
              } else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }
              const childNode = new xmlNode(tagName, currentNode, "");
              if (tagName !== tagExp) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
            } else {
              const childNode = new xmlNode(tagName, currentNode);
              if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
                childNode.startIndex = closeIndex;
              }
              if (tagName !== tagExp && shouldBuildAttributesMap) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
              currentNode = childNode;
            }
            textData = "";
            i = closeIndex;
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj;
    };
    function closingIndexForOpeningTag(data, i) {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < data.length; index++) {
        let ch = data[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === ">") {
          return {
            data: tagExp,
            index
          };
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    exports.getTraversalObj = getTraversalObj;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  "node_modules/fast-xml-parser/src/validator.js"(exports) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false
    };
    var props = ["allowBooleanAttributes"];
    exports.validate = function(xmlData, options) {
      options = util.buildOptions(options, defaultOptions, props);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "There is an unnecessary space between tag name and backward slash '</ ..'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, i));
              } else {
                const otg = tags.pop();
                if (tagName !== otg) {
                  return getErrorObject("InvalidTag", "Closing tag '" + otg + "' is expected inplace of '" + tagName + "'.", getLineNumberForPosition(xmlData, i));
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else {
                tags.push(tagName);
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (xmlData[i] === " " || xmlData[i] === "	" || xmlData[i] === "\n" || xmlData[i] === "\r") {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags, null, 4).replace(/\r?\n/g, "") + "' found.", 1);
      }
      return true;
    };
    function readPI(xmlData, i) {
      var start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          var tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
            continue;
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(attrStr, matches[i][0]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(attrStr, matches[i][0]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(attrStr, matches[i][0]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      var lines = xmlData.substring(0, index).split(/\r?\n/);
      return lines.length;
    }
    function getPositionFromMatch(attrStr, match) {
      return attrStr.indexOf(match) + match.length;
    }
  }
});

// node_modules/fast-xml-parser/src/nimndata.js
var require_nimndata = __commonJS({
  "node_modules/fast-xml-parser/src/nimndata.js"(exports) {
    "use strict";
    var char = function(a) {
      return String.fromCharCode(a);
    };
    var chars = {
      nilChar: char(176),
      missingChar: char(201),
      nilPremitive: char(175),
      missingPremitive: char(200),
      emptyChar: char(178),
      emptyValue: char(177),
      boundryChar: char(179),
      objStart: char(198),
      arrStart: char(204),
      arrayEnd: char(185)
    };
    var charsArr = [
      chars.nilChar,
      chars.nilPremitive,
      chars.missingChar,
      chars.missingPremitive,
      chars.boundryChar,
      chars.emptyChar,
      chars.emptyValue,
      chars.arrayEnd,
      chars.objStart,
      chars.arrStart
    ];
    var _e = function(node, e_schema, options) {
      if (typeof e_schema === "string") {
        if (node && node[0] && node[0].val !== void 0) {
          return getValue(node[0].val, e_schema);
        } else {
          return getValue(node, e_schema);
        }
      } else {
        const hasValidData = hasData(node);
        if (hasValidData === true) {
          let str = "";
          if (Array.isArray(e_schema)) {
            str += chars.arrStart;
            const itemSchema = e_schema[0];
            const arr_len = node.length;
            if (typeof itemSchema === "string") {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = getValue(node[arr_i].val, itemSchema);
                str = processValue(str, r);
              }
            } else {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = _e(node[arr_i], itemSchema, options);
                str = processValue(str, r);
              }
            }
            str += chars.arrayEnd;
          } else {
            str += chars.objStart;
            const keys = Object.keys(e_schema);
            if (Array.isArray(node)) {
              node = node[0];
            }
            for (let i in keys) {
              const key = keys[i];
              let r;
              if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
                r = _e(node.attrsMap[key], e_schema[key], options);
              } else if (key === options.textNodeName) {
                r = _e(node.val, e_schema[key], options);
              } else {
                r = _e(node.child[key], e_schema[key], options);
              }
              str = processValue(str, r);
            }
          }
          return str;
        } else {
          return hasValidData;
        }
      }
    };
    var getValue = function(a) {
      switch (a) {
        case void 0:
          return chars.missingPremitive;
        case null:
          return chars.nilPremitive;
        case "":
          return chars.emptyValue;
        default:
          return a;
      }
    };
    var processValue = function(str, r) {
      if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
        str += chars.boundryChar;
      }
      return str + r;
    };
    var isAppChar = function(ch) {
      return charsArr.indexOf(ch) !== -1;
    };
    function hasData(jObj) {
      if (jObj === void 0) {
        return chars.missingChar;
      } else if (jObj === null) {
        return chars.nilChar;
      } else if (jObj.child && Object.keys(jObj.child).length === 0 && (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)) {
        return chars.emptyChar;
      } else {
        return true;
      }
    }
    var x2j = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var convert2nimn = function(node, e_schema, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      return _e(node, e_schema, options);
    };
    exports.convert2nimn = convert2nimn;
  }
});

// node_modules/fast-xml-parser/src/node2json_str.js
var require_node2json_str = __commonJS({
  "node_modules/fast-xml-parser/src/node2json_str.js"(exports) {
    "use strict";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var x2j = require_xmlstr2xmlnode();
    var convertToJsonString = function(node, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      options.indentBy = options.indentBy || "";
      return _cToJsonStr(node, options, 0);
    };
    var _cToJsonStr = function(node, options, level) {
      let jObj = "{";
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        var tagname = keys[index];
        if (node.child[tagname] && node.child[tagname].length > 1) {
          jObj += '"' + tagname + '" : [ ';
          for (var tag in node.child[tagname]) {
            jObj += _cToJsonStr(node.child[tagname][tag], options) + " , ";
          }
          jObj = jObj.substr(0, jObj.length - 1) + " ] ";
        } else {
          jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + " ,";
        }
      }
      util.merge(jObj, node.attrsMap);
      if (util.isEmptyObject(jObj)) {
        return util.isExist(node.val) ? node.val : "";
      } else {
        if (util.isExist(node.val)) {
          if (!(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
            jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
          }
        }
      }
      if (jObj[jObj.length - 1] === ",") {
        jObj = jObj.substr(0, jObj.length - 2);
      }
      return jObj + "}";
    };
    function stringval(v) {
      if (v === true || v === false || !isNaN(v)) {
        return v;
      } else {
        return '"' + v + '"';
      }
    }
    exports.convertToJsonString = convertToJsonString;
  }
});

// node_modules/fast-xml-parser/src/json2xml.js
var require_json2xml = __commonJS({
  "node_modules/fast-xml-parser/src/json2xml.js"(exports, module2) {
    "use strict";
    var buildOptions = require_util().buildOptions;
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attrNodeName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataTagName: false,
      cdataPositionChar: "\\c",
      format: false,
      indentBy: "  ",
      supressEmptyNode: false,
      tagValueProcessor: function(a) {
        return a;
      },
      attrValueProcessor: function(a) {
        return a;
      }
    };
    var props = [
      "attributeNamePrefix",
      "attrNodeName",
      "textNodeName",
      "ignoreAttributes",
      "cdataTagName",
      "cdataPositionChar",
      "format",
      "indentBy",
      "supressEmptyNode",
      "tagValueProcessor",
      "attrValueProcessor"
    ];
    function Parser(options) {
      this.options = buildOptions(options, defaultOptions, props);
      if (this.options.ignoreAttributes || this.options.attrNodeName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      if (this.options.cdataTagName) {
        this.isCDATA = isCDATA;
      } else {
        this.isCDATA = function() {
          return false;
        };
      }
      this.replaceCDATAstr = replaceCDATAstr;
      this.replaceCDATAarr = replaceCDATAarr;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
      if (this.options.supressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
      } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
      }
      this.buildTextValNode = buildTextValNode;
      this.buildObjectNode = buildObjectNode;
    }
    Parser.prototype.parse = function(jObj) {
      return this.j2x(jObj, 0).val;
    };
    Parser.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val = "";
      const keys = Object.keys(jObj);
      const len = keys.length;
      for (let i = 0; i < len; i++) {
        const key = keys[i];
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += " " + attr + '="' + this.options.attrValueProcessor("" + jObj[key]) + '"';
          } else if (this.isCDATA(key)) {
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAstr("", jObj[key]);
            }
          } else {
            if (key === this.options.textNodeName) {
              if (jObj[this.options.cdataTagName]) {
              } else {
                val += this.options.tagValueProcessor("" + jObj[key]);
              }
            } else {
              val += this.buildTextNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          if (this.isCDATA(key)) {
            val += this.indentate(level);
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAarr("", jObj[key]);
            }
          } else {
            const arrLen = jObj[key].length;
            for (let j = 0; j < arrLen; j++) {
              const item = jObj[key][j];
              if (typeof item === "undefined") {
              } else if (item === null) {
                val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
              } else if (typeof item === "object") {
                const result = this.j2x(item, level + 1);
                val += this.buildObjNode(result.val, key, result.attrStr, level);
              } else {
                val += this.buildTextNode(item, key, "", level);
              }
            }
          }
        } else {
          if (this.options.attrNodeName && key === this.options.attrNodeName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += " " + Ks[j] + '="' + this.options.attrValueProcessor("" + jObj[key][Ks[j]]) + '"';
            }
          } else {
            const result = this.j2x(jObj[key], level + 1);
            val += this.buildObjNode(result.val, key, result.attrStr, level);
          }
        }
      }
      return { attrStr, val };
    };
    function replaceCDATAstr(str, cdata) {
      str = this.options.tagValueProcessor("" + str);
      if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata + "]]" + this.tagEndChar;
      } else {
        return str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata + "]]" + this.tagEndChar);
      }
    }
    function replaceCDATAarr(str, cdata) {
      str = this.options.tagValueProcessor("" + str);
      if (this.options.cdataPositionChar === "" || str === "") {
        return str + "<![CDATA[" + cdata.join("]]><![CDATA[") + "]]" + this.tagEndChar;
      } else {
        for (let v in cdata) {
          str = str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata[v] + "]]>");
        }
        return str + this.newLine;
      }
    }
    function buildObjectNode(val, key, attrStr, level) {
      if (attrStr && !val.includes("<")) {
        return this.indentate(level) + "<" + key + attrStr + ">" + val + "</" + key + this.tagEndChar;
      } else {
        return this.indentate(level) + "<" + key + attrStr + this.tagEndChar + val + this.indentate(level) + "</" + key + this.tagEndChar;
      }
    }
    function buildEmptyObjNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildObjectNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function buildTextValNode(val, key, attrStr, level) {
      return this.indentate(level) + "<" + key + attrStr + ">" + this.options.tagValueProcessor(val) + "</" + key + this.tagEndChar;
    }
    function buildEmptyTextNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildTextValNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    function isCDATA(name) {
      return name === this.options.cdataTagName;
    }
    module2.exports = Parser;
  }
});

// node_modules/fast-xml-parser/src/parser.js
var require_parser = __commonJS({
  "node_modules/fast-xml-parser/src/parser.js"(exports) {
    "use strict";
    var nodeToJson = require_node2json();
    var xmlToNodeobj = require_xmlstr2xmlnode();
    var x2xmlnode = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var validator = require_validator();
    exports.parse = function(xmlData, options, validationOption) {
      if (validationOption) {
        if (validationOption === true)
          validationOption = {};
        const result = validator.validate(xmlData, validationOption);
        if (result !== true) {
          throw Error(result.err.msg);
        }
      }
      options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);
      const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);
      return nodeToJson.convertToJson(traversableObj, options);
    };
    exports.convertTonimn = require_nimndata().convert2nimn;
    exports.getTraversalObj = xmlToNodeobj.getTraversalObj;
    exports.convertToJson = nodeToJson.convertToJson;
    exports.convertToJsonString = require_node2json_str().convertToJsonString;
    exports.validate = validator.validate;
    exports.j2xParser = require_json2xml();
    exports.parseToNimn = function(xmlData, schema, options) {
      return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_queryGetSessionTokenCommand = exports.deserializeAws_queryGetFederationTokenCommand = exports.deserializeAws_queryGetCallerIdentityCommand = exports.deserializeAws_queryGetAccessKeyInfoCommand = exports.deserializeAws_queryDecodeAuthorizationMessageCommand = exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports.deserializeAws_queryAssumeRoleWithSAMLCommand = exports.deserializeAws_queryAssumeRoleCommand = exports.serializeAws_queryGetSessionTokenCommand = exports.serializeAws_queryGetFederationTokenCommand = exports.serializeAws_queryGetCallerIdentityCommand = exports.serializeAws_queryGetAccessKeyInfoCommand = exports.serializeAws_queryDecodeAuthorizationMessageCommand = exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports.serializeAws_queryAssumeRoleWithSAMLCommand = exports.serializeAws_queryAssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var entities_1 = require_lib();
    var fast_xml_parser_1 = require_parser();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var serializeAws_queryAssumeRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAssumeRoleRequest(input, context)), {
        Action: "AssumeRole",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;
    var serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAssumeRoleWithSAMLRequest(input, context)), {
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;
    var serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context)), {
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;
    var serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryDecodeAuthorizationMessageRequest(input, context)), {
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;
    var serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetAccessKeyInfoRequest(input, context)), {
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;
    var serializeAws_queryGetCallerIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetCallerIdentityRequest(input, context)), {
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;
    var serializeAws_queryGetFederationTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetFederationTokenRequest(input, context)), {
        Action: "GetFederationToken",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;
    var serializeAws_queryGetSessionTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString(__spreadProps(__spreadValues({}, serializeAws_queryGetSessionTokenRequest(input, context)), {
        Action: "GetSessionToken",
        Version: "2011-06-15"
      }));
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryAssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;
    var deserializeAws_queryAssumeRoleCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;
    var deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaimException":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityTokenException":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;
    var deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPCommunicationErrorException":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaimException":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityTokenException":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;
    var deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;
    var deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;
    var deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;
    var deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLargeException":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryGetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = __spreadValues({
        $metadata: deserializeMetadata(output)
      }, contents);
      return Promise.resolve(response);
    };
    exports.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new STSServiceException_1.STSServiceException({
            name: parsedBody.Error.code || parsedBody.Error.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody.Error);
      }
    };
    var deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, deserialized));
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryAssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName !== void 0 && input.RoleSessionName !== null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys !== void 0 && input.TransitiveTagKeys !== null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId !== void 0 && input.ExternalId !== null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber !== void 0 && input.SerialNumber !== null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode !== void 0 && input.TokenCode !== null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity !== void 0 && input.SourceIdentity !== null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn !== void 0 && input.PrincipalArn !== null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion !== void 0 && input.SAMLAssertion !== null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn !== void 0 && input.RoleArn !== null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName !== void 0 && input.RoleSessionName !== null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken !== void 0 && input.WebIdentityToken !== null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId !== void 0 && input.ProviderId !== null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage !== void 0 && input.EncodedMessage !== null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId !== void 0 && input.AccessKeyId !== null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryGetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryGetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name !== void 0 && input.Name !== null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy !== void 0 && input.Policy !== null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns !== void 0 && input.PolicyArns !== null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags !== void 0 && input.Tags !== null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds !== void 0 && input.DurationSeconds !== null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber !== void 0 && input.SerialNumber !== null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode !== void 0 && input.TokenCode !== null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var serializeAws_querypolicyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn !== void 0 && input.arn !== null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key !== void 0 && input.Key !== null) {
        entries["Key"] = input.Key;
      }
      if (input.Value !== void 0 && input.Value !== null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_querytagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querytagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var deserializeAws_queryAssumedRoleUser = (output, context) => {
      const contents = {
        AssumedRoleId: void 0,
        Arn: void 0
      };
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Subject: void 0,
        SubjectType: void 0,
        Issuer: void 0,
        Audience: void 0,
        NameQualifier: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        SubjectFromWebIdentityToken: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Provider: void 0,
        Audience: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryCredentials = (output, context) => {
      const contents = {
        AccessKeyId: void 0,
        SecretAccessKey: void 0,
        SessionToken: void 0,
        Expiration: void 0
      };
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Expiration"]));
      }
      return contents;
    };
    var deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {
        DecodedMessage: void 0
      };
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    };
    var deserializeAws_queryExpiredTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryFederatedUser = (output, context) => {
      const contents = {
        FederatedUserId: void 0,
        Arn: void 0
      };
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {
      const contents = {
        Account: void 0
      };
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    };
    var deserializeAws_queryGetCallerIdentityResponse = (output, context) => {
      const contents = {
        UserId: void 0,
        Account: void 0,
        Arn: void 0
      };
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetFederationTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        FederatedUser: void 0,
        PackedPolicySize: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = deserializeAws_queryFederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    };
    var deserializeAws_queryGetSessionTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      return contents;
    };
    var deserializeAws_queryIDPCommunicationErrorException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryIDPRejectedClaimException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidIdentityTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryRegionDisabledException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parsedObj = (0, fast_xml_parser_1.parse)(encoded, {
          attributeNamePrefix: "",
          ignoreAttributes: false,
          parseNodeValue: false,
          trimValues: false,
          tagValueProcessor: (val) => val.trim() === "" && val.includes("\n") ? "" : (0, entities_1.decodeHTML)(val)
        });
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
      return "";
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs20();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleCommand)(output, context);
      }
    };
    exports.AssumeRoleCommand = AssumeRoleCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithSAMLCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DecodeAuthorizationMessageCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs20();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetAccessKeyInfoCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs20();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand)(output, context);
      }
    };
    exports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetCallerIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs20();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetCallerIdentityCommand)(output, context);
      }
    };
    exports.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetFederationTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs20();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFederationTokenRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetFederationTokenCommand)(output, context);
      }
    };
    exports.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetSessionTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs20();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSessionTokenRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSessionTokenCommand)(output, context);
      }
    };
    exports.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  "node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs20();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)(__spreadProps(__spreadValues({}, input), {
      stsClientCtor
    }));
    exports.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.58.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.58.0",
        "@aws-sdk/credential-provider-node": "3.58.0",
        "@aws-sdk/fetch-http-handler": "3.58.0",
        "@aws-sdk/hash-node": "3.55.0",
        "@aws-sdk/invalid-dependency": "3.55.0",
        "@aws-sdk/middleware-content-length": "3.58.0",
        "@aws-sdk/middleware-host-header": "3.58.0",
        "@aws-sdk/middleware-logger": "3.55.0",
        "@aws-sdk/middleware-retry": "3.58.0",
        "@aws-sdk/middleware-sdk-sts": "3.58.0",
        "@aws-sdk/middleware-serde": "3.55.0",
        "@aws-sdk/middleware-signing": "3.58.0",
        "@aws-sdk/middleware-stack": "3.55.0",
        "@aws-sdk/middleware-user-agent": "3.58.0",
        "@aws-sdk/node-config-provider": "3.58.0",
        "@aws-sdk/node-http-handler": "3.58.0",
        "@aws-sdk/protocol-http": "3.58.0",
        "@aws-sdk/smithy-client": "3.55.0",
        "@aws-sdk/types": "3.55.0",
        "@aws-sdk/url-parser": "3.55.0",
        "@aws-sdk/util-base64-browser": "3.58.0",
        "@aws-sdk/util-base64-node": "3.55.0",
        "@aws-sdk/util-body-length-browser": "3.55.0",
        "@aws-sdk/util-body-length-node": "3.55.0",
        "@aws-sdk/util-defaults-mode-browser": "3.55.0",
        "@aws-sdk/util-defaults-mode-node": "3.58.0",
        "@aws-sdk/util-user-agent-browser": "3.58.0",
        "@aws-sdk/util-user-agent-node": "3.58.0",
        "@aws-sdk/util-utf8-browser": "3.55.0",
        "@aws-sdk/util-utf8-node": "3.55.0",
        entities: "2.2.0",
        "fast-xml-parser": "3.19.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.58.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor(__spreadValues({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region)
          }, requestHandler ? { requestHandler } : {}));
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor(__spreadValues({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region)
          }, requestHandler ? { requestHandler } : {}));
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider(__spreadValues({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor)
    }, input));
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs15();
    exports.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports.ENV_KEY];
      const secretAccessKey = process.env[exports.ENV_SECRET];
      const sessionToken = process.env[exports.ENV_SESSION];
      const expiry = process.env[exports.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return __spreadValues(__spreadValues({
          accessKeyId,
          secretAccessKey
        }, sessionToken && { sessionToken }), expiry && { expiration: new Date(expiry) });
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromEnv(), exports);
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports.getHomeDir = getHomeDir;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProfileName = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;
    exports.ENV_PROFILE = "AWS_PROFILE";
    exports.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;
    exports.getProfileName = getProfileName;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (ssoStartUrl) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(ssoStartUrl).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (ssoStartUrl) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(ssoStartUrl);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/normalizeConfigFile.js
var require_normalizeConfigFile = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/normalizeConfigFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.normalizeConfigFile = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var normalizeConfigFile = (data) => {
      const map = {};
      for (const key of Object.keys(data)) {
        let matches;
        if (key === "default") {
          map.default = data.default;
        } else if (matches = profileKeyRegex.exec(key)) {
          const [_1, _2, normalizedKey] = matches;
          if (normalizedKey) {
            map[normalizedKey] = data[key];
          }
        }
      }
      return map;
    };
    exports.normalizeConfigFile = normalizeConfigFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0];
        const section = line.match(/^\s*\[([^\[\]]+)]\s*$/);
        if (section) {
          currentSection = section[1];
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
          if (item) {
            map[currentSection] = map[currentSection] || {};
            map[currentSection][item[1]] = item[2];
          }
        }
      }
      return map;
    };
    exports.parseIni = parseIni;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var fileStatusHash = {};
    var slurpFile = (path) => new Promise((resolve, reject) => {
      if (!fileStatusHash[path]) {
        fileStatusHash[path] = { isReading: true, contents: "", requestQueue: [] };
        fileStatusHash[path].requestQueue.push({ resolve, reject });
        readFile(path, "utf8").then((data) => {
          fileStatusHash[path].isReading = false;
          fileStatusHash[path].contents = data;
          const { requestQueue } = fileStatusHash[path];
          while (requestQueue.length) {
            const { resolve: resolve2 } = requestQueue.pop();
            resolve2(data);
          }
        }).catch((err) => {
          fileStatusHash[path].isReading = false;
          const { requestQueue } = fileStatusHash[path];
          while (requestQueue.length) {
            const { reject: reject2 } = requestQueue.pop();
            reject2(err);
          }
        });
      } else if (fileStatusHash[path].isReading) {
        fileStatusHash[path].requestQueue.push({ resolve, reject });
      } else {
        resolve(fileStatusHash[path].contents);
      }
    });
    exports.slurpFile = slurpFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadSharedConfigFiles = exports.ENV_CONFIG_PATH = exports.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var normalizeConfigFile_1 = require_normalizeConfigFile();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    exports.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    exports.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = process.env[exports.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials"), configFilepath = process.env[exports.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config") } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath).then(parseIni_1.parseIni).then(normalizeConfigFile_1.normalizeConfigFile).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return __spreadValues(__spreadValues({}, parsedFiles.configFile), parsedFiles.credentialsFile);
    };
    exports.parseKnownFiles = parseKnownFiles;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types2 = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  "node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_getHomeDir(), exports);
    tslib_1.__exportStar(require_getProfileName(), exports);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports);
    tslib_1.__exportStar(require_parseKnownFiles(), exports);
    tslib_1.__exportStar(require_types2(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs15();
    var buffer_1 = require("buffer");
    var http_1 = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)(__spreadProps(__spreadValues({
          method: "GET"
        }, options), {
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        }));
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports.httpRequest = httpRequest;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromImdsCredentials = exports.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports.fromImdsCredentials = fromImdsCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;
    exports.DEFAULT_TIMEOUT = 1e3;
    exports.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports.providerConfigFromInit = providerConfigFromInit;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports.retry = retry;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs15();
    var url_1 = require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    exports.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = __spreadProps(__spreadValues({}, options.headers), {
          Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN]
        });
      }
      const buffer = await (0, httpRequest_1.httpRequest)(__spreadProps(__spreadValues({}, options), {
        timeout
      }));
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return __spreadProps(__spreadValues({}, parsed), {
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        });
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs15();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs15();
    var shared_ini_file_loader_1 = require_dist_cjs24();
    var fromSharedConfigFiles = (configSelector, _a = {}) => {
      var _b = _a, { preferredFile = "config" } = _b, init = __objRest(_b, ["preferredFile"]);
      return async () => {
        const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
        const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
        const profileFromCredentials = credentialsFile[profile] || {};
        const profileFromConfig = configFile[profile] || {};
        const mergedProfile = preferredFile === "config" ? __spreadValues(__spreadValues({}, profileFromCredentials), profileFromConfig) : __spreadValues(__spreadValues({}, profileFromConfig), profileFromCredentials);
        try {
          const configValue = configSelector(mergedProfile);
          if (configValue === void 0) {
            throw new Error();
          }
          return configValue;
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
        }
      };
    };
    exports.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs15();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs15();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports.loadConfig = loadConfig;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  "node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configLoader(), exports);
  }
});

// node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  "node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports.parseQueryString = parseQueryString;
  }
});

// node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  "node_modules/@aws-sdk/url-parser/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs26();
    var parseUrl = (url) => {
      const { hostname, pathname, port, protocol, search } = new URL(url);
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports.parseUrl = parseUrl;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint2 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;
    exports.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports.EndpointMode || (exports.EndpointMode = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs25();
    var url_parser_1 = require_dist_cjs27();
    var Endpoint_1 = require_Endpoint2();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 15 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return __spreadProps(__spreadValues(__spreadValues({}, credentials), originalExpiration ? { originalExpiration } : {}), {
        expiration: newExpiration
      });
    };
    exports.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports.staticStabilityProvider = staticStabilityProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs15();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), { timeout }));
        } else {
          let token;
          try {
            token = (await getMetadataToken(__spreadProps(__spreadValues({}, endpoint), { timeout }))).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), { timeout }));
          }
          return getCredentials(maxRetries, __spreadProps(__spreadValues({}, endpoint), {
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          }));
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)(__spreadProps(__spreadValues({}, options), {
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    }));
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)(__spreadProps(__spreadValues({}, options), { path: IMDS_PATH }))).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)(__spreadProps(__spreadValues({}, options), {
        path: IMDS_PATH + profile
      }))).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types3 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInstanceMetadataEndpoint = exports.httpRequest = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromContainerMetadata(), exports);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports);
    tslib_1.__exportStar(require_types3(), exports);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs23();
    var credential_provider_imds_1 = require_dist_cjs28();
    var property_provider_1 = require_dist_cjs15();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports.resolveCredentialSource = resolveCredentialSource;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs15();
    var shared_ini_file_loader_1 = require_dist_cjs24();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, __spreadProps(__spreadValues({}, visitedProfiles), {
        [source_profile]: true
      })) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports.isSsoProfile = isSsoProfile;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports.SSOServiceException = SSOServiceException;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutRequest = exports.ListAccountsResponse = exports.ListAccountsRequest = exports.ListAccountRolesResponse = exports.RoleInfo = exports.ListAccountRolesRequest = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.InvalidRequestException = exports.GetRoleCredentialsResponse = exports.RoleCredentials = exports.GetRoleCredentialsRequest = exports.AccountInfo = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException_1 = require_SSOServiceException();
    var AccountInfo;
    (function(AccountInfo2) {
      AccountInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(AccountInfo = exports.AccountInfo || (exports.AccountInfo = {}));
    var GetRoleCredentialsRequest;
    (function(GetRoleCredentialsRequest2) {
      GetRoleCredentialsRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(GetRoleCredentialsRequest = exports.GetRoleCredentialsRequest || (exports.GetRoleCredentialsRequest = {}));
    var RoleCredentials;
    (function(RoleCredentials2) {
      RoleCredentials2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues(__spreadValues({}, obj), obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING }), obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING });
    })(RoleCredentials = exports.RoleCredentials || (exports.RoleCredentials = {}));
    var GetRoleCredentialsResponse;
    (function(GetRoleCredentialsResponse2) {
      GetRoleCredentialsResponse2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.roleCredentials && { roleCredentials: RoleCredentials.filterSensitiveLog(obj.roleCredentials) });
    })(GetRoleCredentialsResponse = exports.GetRoleCredentialsResponse || (exports.GetRoleCredentialsResponse = {}));
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "InvalidRequestException",
          $fault: "client"
        }, opts));
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "ResourceNotFoundException",
          $fault: "client"
        }, opts));
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "TooManyRequestsException",
          $fault: "client"
        }, opts));
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super(__spreadValues({
          name: "UnauthorizedException",
          $fault: "client"
        }, opts));
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports.UnauthorizedException = UnauthorizedException;
    var ListAccountRolesRequest;
    (function(ListAccountRolesRequest2) {
      ListAccountRolesRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(ListAccountRolesRequest = exports.ListAccountRolesRequest || (exports.ListAccountRolesRequest = {}));
    var RoleInfo;
    (function(RoleInfo2) {
      RoleInfo2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(RoleInfo = exports.RoleInfo || (exports.RoleInfo = {}));
    var ListAccountRolesResponse;
    (function(ListAccountRolesResponse2) {
      ListAccountRolesResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListAccountRolesResponse = exports.ListAccountRolesResponse || (exports.ListAccountRolesResponse = {}));
    var ListAccountsRequest;
    (function(ListAccountsRequest2) {
      ListAccountsRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(ListAccountsRequest = exports.ListAccountsRequest || (exports.ListAccountsRequest = {}));
    var ListAccountsResponse;
    (function(ListAccountsResponse2) {
      ListAccountsResponse2.filterSensitiveLog = (obj) => __spreadValues({}, obj);
    })(ListAccountsResponse = exports.ListAccountsResponse || (exports.ListAccountsResponse = {}));
    var LogoutRequest;
    (function(LogoutRequest2) {
      LogoutRequest2.filterSensitiveLog = (obj) => __spreadValues(__spreadValues({}, obj), obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING });
    })(LogoutRequest = exports.LogoutRequest || (exports.LogoutRequest = {}));
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserializeAws_restJson1LogoutCommand = exports.deserializeAws_restJson1ListAccountsCommand = exports.deserializeAws_restJson1ListAccountRolesCommand = exports.deserializeAws_restJson1GetRoleCredentialsCommand = exports.serializeAws_restJson1LogoutCommand = exports.serializeAws_restJson1ListAccountsCommand = exports.serializeAws_restJson1ListAccountRolesCommand = exports.serializeAws_restJson1GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = __spreadValues(__spreadValues({}, input.roleName !== void 0 && { role_name: input.roleName }), input.accountId !== void 0 && { account_id: input.accountId });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = __spreadValues(__spreadValues(__spreadValues({}, input.nextToken !== void 0 && { next_token: input.nextToken }), input.maxResults !== void 0 && { max_result: input.maxResults.toString() }), input.accountId !== void 0 && { account_id: input.accountId });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = __spreadValues(__spreadValues({}, input.nextToken !== void 0 && { next_token: input.nextToken }), input.maxResults !== void 0 && { max_result: input.maxResults.toString() });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = __spreadValues({}, isSerializableHeaderValue(input.accessToken) && { "x-amz-sso_bearer_token": input.accessToken });
      const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        roleCredentials: void 0
      };
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.roleCredentials !== void 0 && data.roleCredentials !== null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        nextToken: void 0,
        roleList: void 0
      };
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.nextToken !== void 0 && data.nextToken !== null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      if (data.roleList !== void 0 && data.roleList !== null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output),
        accountList: void 0,
        nextToken: void 0
      };
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accountList !== void 0 && data.accountList !== null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);
      }
      if (data.nextToken !== void 0 && data.nextToken !== null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = {
        $metadata: deserializeMetadata(output)
      };
      await collectBody(output.body, context);
      return Promise.resolve(contents);
    };
    exports.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = async (output, context) => {
      const parsedOutput = __spreadProps(__spreadValues({}, output), {
        body: await parseBody(output.body, context)
      });
      let response;
      let errorCode = "UnknownError";
      errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          response = new SSOServiceException_1.SSOServiceException({
            name: parsedBody.code || parsedBody.Code || errorCode,
            $fault: "client",
            $metadata: deserializeMetadata(output)
          });
          throw (0, smithy_client_1.decorateServiceException)(response, parsedBody);
      }
    };
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotFoundException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
      const contents = {};
      const data = parsedOutput.body;
      if (data.message !== void 0 && data.message !== null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnauthorizedException(__spreadValues({
        $metadata: deserializeMetadata(parsedOutput)
      }, contents));
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AccountInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        accountName: (0, smithy_client_1.expectString)(output.accountName),
        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress)
      };
    };
    var deserializeAws_restJson1AccountListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AccountInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1RoleCredentials = (output, context) => {
      return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        expiration: (0, smithy_client_1.expectLong)(output.expiration),
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken)
      };
    };
    var deserializeAws_restJson1RoleInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        roleName: (0, smithy_client_1.expectString)(output.roleName)
      };
    };
    var deserializeAws_restJson1RoleListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1RoleInfo(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
      return "";
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GetRoleCredentialsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand)(output, context);
      }
    };
    exports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountRolesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand)(output, context);
      }
    };
    exports.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ListAccountsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequest.filterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponse.filterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand)(output, context);
      }
    };
    exports.ListAccountsCommand = ListAccountsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LogoutCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequest.filterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1LogoutCommand)(output, context);
      }
    };
    exports.LogoutCommand = LogoutCommand;
  }
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  "node_modules/@aws-sdk/client-sso/package.json"(exports, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.58.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "2.0.0",
        "@aws-crypto/sha256-js": "2.0.0",
        "@aws-sdk/config-resolver": "3.58.0",
        "@aws-sdk/fetch-http-handler": "3.58.0",
        "@aws-sdk/hash-node": "3.55.0",
        "@aws-sdk/invalid-dependency": "3.55.0",
        "@aws-sdk/middleware-content-length": "3.58.0",
        "@aws-sdk/middleware-host-header": "3.58.0",
        "@aws-sdk/middleware-logger": "3.55.0",
        "@aws-sdk/middleware-retry": "3.58.0",
        "@aws-sdk/middleware-serde": "3.55.0",
        "@aws-sdk/middleware-stack": "3.55.0",
        "@aws-sdk/middleware-user-agent": "3.58.0",
        "@aws-sdk/node-config-provider": "3.58.0",
        "@aws-sdk/node-http-handler": "3.58.0",
        "@aws-sdk/protocol-http": "3.58.0",
        "@aws-sdk/smithy-client": "3.55.0",
        "@aws-sdk/types": "3.55.0",
        "@aws-sdk/url-parser": "3.55.0",
        "@aws-sdk/util-base64-browser": "3.58.0",
        "@aws-sdk/util-base64-node": "3.55.0",
        "@aws-sdk/util-body-length-browser": "3.55.0",
        "@aws-sdk/util-body-length-node": "3.55.0",
        "@aws-sdk/util-defaults-mode-browser": "3.55.0",
        "@aws-sdk/util-defaults-mode-node": "3.58.0",
        "@aws-sdk/util-user-agent-browser": "3.58.0",
        "@aws-sdk/util-user-agent-node": "3.58.0",
        "@aws-sdk/util-utf8-browser": "3.55.0",
        "@aws-sdk/util-utf8-node": "3.55.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.58.0",
        "@tsconfig/recommended": "1.0.1",
        "@types/node": "^12.7.5",
        concurrently: "7.0.0",
        "downlevel-dts": "0.7.0",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      engines: {
        node: ">=12.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

// node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  "node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromString = exports.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs18();
    var buffer_1 = require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports.fromString = fromString;
  }
});

// node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  "node_modules/@aws-sdk/hash-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs29();
    var buffer_1 = require("buffer");
    var crypto_1 = require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.hash = secret ? (0, crypto_1.createHmac)(algorithmIdentifier, castSourceData(secret)) : (0, crypto_1.createHash)(algorithmIdentifier);
      }
      update(toHash, encoding) {
        this.hash.update(castSourceData(toHash, encoding));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
    };
    exports.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

// node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  "node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs17();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports.buildQueryString = buildQueryString;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants6 = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports.getTransformedHeaders = getTransformedHeaders;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on("socket", (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            }));
          }, timeoutInMs);
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports.setConnectionTimeout = setConnectionTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports.setSocketTimeout = setSocketTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeRequestBody = void 0;
    var stream_1 = require("stream");
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers["Expect"] || request.headers["expect"];
      if (expect === "100-continue") {
        httpRequest.on("continue", () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs31();
    var http_1 = require("http");
    var https_1 = require("https");
    var constants_1 = require_constants6();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        if (typeof options === "function") {
          this.configProvider = async () => {
            return this.resolveDefaultConfig(await options());
          };
        } else {
          this.config = this.resolveDefaultConfig(options);
        }
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config && this.configProvider) {
          this.config = await this.configProvider();
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports.NodeHttpHandler = NodeHttpHandler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs31();
    var http2_1 = require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor({ requestTimeout, sessionTimeout, disableConcurrentStreams } = {}) {
        this.metadata = { handlerProtocol: "h2" };
        this.requestTimeout = requestTimeout;
        this.sessionTimeout = sessionTimeout;
        this.disableConcurrentStreams = disableConcurrentStreams;
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      handle(request, { abortSignal } = {}) {
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ""}`;
          const session = this.getSession(authority, this.disableConcurrentStreams || false);
          const reject = (err) => {
            if (this.disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request(__spreadProps(__spreadValues({}, request.headers), {
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          }));
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (this.disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          const requestTimeout = this.requestTimeout;
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", reject);
          req.on("aborted", () => {
            reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            if (this.disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams)
          return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on("goaway", destroySessionCb);
        newSession.on("error", destroySessionCb);
        newSession.on("frameError", destroySessionCb);
        const sessionTimeout = this.sessionTimeout;
        if (sessionTimeout) {
          newSession.setTimeout(sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));
      }
    };
    exports.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collector = void 0;
    var stream_1 = require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports.Collector = Collector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports.streamCollector = streamCollector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  "node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_node_http_handler(), exports);
    tslib_1.__exportStar(require_node_http2_handler(), exports);
    tslib_1.__exportStar(require_stream_collector(), exports);
  }
});

// node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  "node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toBase64 = exports.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs29();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    function fromBase64(input) {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    exports.fromBase64 = fromBase64;
    function toBase64(input) {
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    }
    exports.toBase64 = toBase64;
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  "node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calculateBodyLength = void 0;
    var fs_1 = require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports.calculateBodyLength = calculateBodyLength;
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  "node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_calculateBodyLength(), exports);
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module2 !== "undefined" && module2.require && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports.isCrtAvailable = isCrtAvailable;
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  "node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs25();
    var os_1 = require("os");
    var process_1 = require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports.defaultUserAgent = defaultUserAgent;
  }
});

// node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  "node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8 = exports.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs29();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js
var require_endpoints = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var regionHash = {
      "ap-northeast-1": {
        variants: [
          {
            hostname: "portal.sso.ap-northeast-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-northeast-1"
      },
      "ap-northeast-2": {
        variants: [
          {
            hostname: "portal.sso.ap-northeast-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-northeast-2"
      },
      "ap-south-1": {
        variants: [
          {
            hostname: "portal.sso.ap-south-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-south-1"
      },
      "ap-southeast-1": {
        variants: [
          {
            hostname: "portal.sso.ap-southeast-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-southeast-1"
      },
      "ap-southeast-2": {
        variants: [
          {
            hostname: "portal.sso.ap-southeast-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ap-southeast-2"
      },
      "ca-central-1": {
        variants: [
          {
            hostname: "portal.sso.ca-central-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "ca-central-1"
      },
      "eu-central-1": {
        variants: [
          {
            hostname: "portal.sso.eu-central-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-central-1"
      },
      "eu-north-1": {
        variants: [
          {
            hostname: "portal.sso.eu-north-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-north-1"
      },
      "eu-west-1": {
        variants: [
          {
            hostname: "portal.sso.eu-west-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-1"
      },
      "eu-west-2": {
        variants: [
          {
            hostname: "portal.sso.eu-west-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-2"
      },
      "eu-west-3": {
        variants: [
          {
            hostname: "portal.sso.eu-west-3.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "eu-west-3"
      },
      "sa-east-1": {
        variants: [
          {
            hostname: "portal.sso.sa-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "sa-east-1"
      },
      "us-east-1": {
        variants: [
          {
            hostname: "portal.sso.us-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-1"
      },
      "us-east-2": {
        variants: [
          {
            hostname: "portal.sso.us-east-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-2"
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "portal.sso.us-gov-east-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-gov-east-1"
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "portal.sso.us-gov-west-1.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-gov-west-1"
      },
      "us-west-2": {
        variants: [
          {
            hostname: "portal.sso.us-west-2.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-west-2"
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["us-gov-east-1", "us-gov-west-1"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "portal.sso.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "portal.sso-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "portal.sso-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "portal.sso.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, __spreadProps(__spreadValues({}, options), {
      signingService: "awsssoportal",
      regionHash,
      partitionHash
    }));
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs27();
    var endpoints_1 = require_endpoints();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2019-06-10",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "SSO",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMDS_REGION_PATH = exports.DEFAULTS_MODE_OPTIONS = exports.ENV_IMDS_DISABLED = exports.AWS_DEFAULT_REGION_ENV = exports.AWS_REGION_ENV = exports.AWS_EXECUTION_ENV = void 0;
    exports.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports.AWS_REGION_ENV = "AWS_REGION";
    exports.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var credential_provider_imds_1 = require_dist_cjs28();
    var node_config_provider_1 = require_dist_cjs25();
    var property_provider_1 = require_dist_cjs15();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)(__spreadProps(__spreadValues({}, endpoint), { path: constants_1.IMDS_REGION_PATH }))).toString();
        } catch (e) {
        }
      }
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  "node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs7();
    var hash_node_1 = require_dist_cjs30();
    var middleware_retry_1 = require_dist_cjs14();
    var node_config_provider_1 = require_dist_cjs25();
    var node_http_handler_1 = require_dist_cjs32();
    var util_base64_node_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs34();
    var util_user_agent_node_1 = require_dist_cjs35();
    var util_utf8_node_1 = require_dist_cjs36();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs37();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: (_d = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _d !== void 0 ? _d : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_e = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _e !== void 0 ? _e : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_f = config === null || config === void 0 ? void 0 : config.region) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_g = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _g !== void 0 ? _g : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_h = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _h !== void 0 ? _h : (0, node_config_provider_1.loadConfig)(__spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        })),
        sha256: (_j = config === null || config === void 0 ? void 0 : config.sha256) !== null && _j !== void 0 ? _j : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_k = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _k !== void 0 ? _k : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_l = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _l !== void 0 ? _l : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _m !== void 0 ? _m : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_o = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _o !== void 0 ? _o : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.toUtf8
      });
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_host_header_1 = require_dist_cjs11();
    var middleware_logger_1 = require_dist_cjs12();
    var middleware_retry_1 = require_dist_cjs14();
    var middleware_user_agent_1 = require_dist_cjs21();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_4);
        super(_config_5);
        this.config = _config_5;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.SSOClient = SSOClient;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.SSO = SSO;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports);
    tslib_1.__exportStar(require_LogoutCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_03(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccountRoles(input, ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        token = page.nextToken;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccounts(input, ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        token = page.nextToken;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateListAccounts = paginateListAccounts;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Interfaces(), exports);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  "node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SSOServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SSO(), exports);
    tslib_1.__exportStar(require_SSOClient(), exports);
    tslib_1.__exportStar(require_commands(), exports);
    tslib_1.__exportStar(require_models(), exports);
    tslib_1.__exportStar(require_pagination(), exports);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs38();
    var property_provider_1 = require_dist_cjs15();
    var shared_ini_file_loader_1 = require_dist_cjs24();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      try {
        token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs15();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports.validateSsoProfile = validateSsoProfile;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs15();
    var shared_ini_file_loader_1 = require_dist_cjs24();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient } = init;
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
        const profile = profiles[profileName];
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient });
      }
    };
    exports.fromSSO = fromSSO;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types4 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromSSO(), exports);
    tslib_1.__exportStar(require_isSsoProfile(), exports);
    tslib_1.__exportStar(require_types4(), exports);
    tslib_1.__exportStar(require_validateSsoProfile(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveSsoCredentials = exports.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs39();
    var credential_provider_sso_2 = require_dist_cjs39();
    Object.defineProperty(exports, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveStaticCredentials = exports.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs15();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports.fromWebToken = fromWebToken;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs15();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      return resolveTokenFile(init);
    };
    exports.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)(__spreadProps(__spreadValues({}, init), {
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      }))();
    };
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromTokenFile(), exports);
    tslib_1.__exportStar(require_fromWebToken(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveWebIdentityCredentials = exports.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs40();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs15();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports.resolveProfileData = resolveProfileData;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs24();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports.fromIni = fromIni;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromIni(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return __spreadValues(__spreadValues({
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey
      }, data.SessionToken && { sessionToken: data.SessionToken }), data.Expiration && { expiration: new Date(data.Expiration) });
    };
    exports.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs15();
    var child_process_1 = require("child_process");
    var util_1 = require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs24();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports.fromProcess = fromProcess;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromProcess(), exports);
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.remoteProvider = exports.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs28();
    var property_provider_1 = require_dist_cjs15();
    exports.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports.remoteProvider = remoteProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs23();
    var credential_provider_ini_1 = require_dist_cjs41();
    var credential_provider_process_1 = require_dist_cjs42();
    var credential_provider_sso_1 = require_dist_cjs39();
    var credential_provider_web_identity_1 = require_dist_cjs40();
    var property_provider_1 = require_dist_cjs15();
    var shared_ini_file_loader_1 = require_dist_cjs24();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports.defaultProvider = defaultProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  "node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_defaultProvider(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js
var require_endpoints2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var regionHash = {
      "aws-global": {
        variants: [
          {
            hostname: "sts.amazonaws.com",
            tags: []
          }
        ],
        signingRegion: "us-east-1"
      },
      "us-east-1": {
        variants: [
          {
            hostname: "sts-fips.us-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-east-2": {
        variants: [
          {
            hostname: "sts-fips.us-east-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "sts.us-gov-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "sts.us-gov-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-1": {
        variants: [
          {
            hostname: "sts-fips.us-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-2": {
        variants: [
          {
            hostname: "sts-fips.us-west-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "aws-global",
          "ca-central-1",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "me-south-1",
          "sa-east-1",
          "us-east-1",
          "us-east-1-fips",
          "us-east-2",
          "us-east-2-fips",
          "us-west-1",
          "us-west-1-fips",
          "us-west-2",
          "us-west-2-fips"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "sts-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["us-gov-east-1", "us-gov-east-1-fips", "us-gov-west-1", "us-gov-west-1-fips"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "sts.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "sts-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "sts.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, __spreadProps(__spreadValues({}, options), {
      signingService: "sts",
      regionHash,
      partitionHash
    }));
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs27();
    var endpoints_1 = require_endpoints2();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2011-06-15",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "STS",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs7();
    var credential_provider_node_1 = require_dist_cjs43();
    var hash_node_1 = require_dist_cjs30();
    var middleware_retry_1 = require_dist_cjs14();
    var node_config_provider_1 = require_dist_cjs25();
    var node_http_handler_1 = require_dist_cjs32();
    var util_base64_node_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs34();
    var util_user_agent_node_1 = require_dist_cjs35();
    var util_utf8_node_1 = require_dist_cjs36();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs37();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : (0, node_config_provider_1.loadConfig)(__spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        })),
        sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.toUtf8
      });
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_host_header_1 = require_dist_cjs11();
    var middleware_logger_1 = require_dist_cjs12();
    var middleware_retry_1 = require_dist_cjs14();
    var middleware_sdk_sts_1 = require_dist_cjs22();
    var middleware_user_agent_1 = require_dist_cjs21();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig2();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_4, { stsClientCtor: STSClient });
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.STSClient = STSClient;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STS = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var STS = class extends STSClient_1.STSClient {
      assumeRole(args, optionsOrCb, cb) {
        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithSAML(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithWebIdentity(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decodeAuthorizationMessage(args, optionsOrCb, cb) {
        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyInfo(args, optionsOrCb, cb) {
        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCallerIdentity(args, optionsOrCb, cb) {
        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFederationToken(args, optionsOrCb, cb) {
        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSessionToken(args, optionsOrCb, cb) {
        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.STS = STS;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getDefaultRoleAssumer = (stsOptions = {}) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, STSClient_1.STSClient);
    exports.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, STSClient_1.STSClient);
    exports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider(__spreadValues({
      roleAssumer: (0, exports.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input)
    }, input));
    exports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models2 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_02(), exports);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  "node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STSServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_STS(), exports);
    tslib_1.__exportStar(require_STSClient(), exports);
    tslib_1.__exportStar(require_commands2(), exports);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports);
    tslib_1.__exportStar(require_models2(), exports);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoints.js
var require_endpoints3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var regionHash = {
      "ca-central-1": {
        variants: [
          {
            hostname: "dynamodb-fips.ca-central-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      local: {
        variants: [
          {
            hostname: "localhost:8000",
            tags: []
          }
        ],
        signingRegion: "us-east-1"
      },
      "us-east-1": {
        variants: [
          {
            hostname: "dynamodb-fips.us-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-east-2": {
        variants: [
          {
            hostname: "dynamodb-fips.us-east-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-east-1": {
        variants: [
          {
            hostname: "dynamodb.us-gov-east-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-gov-west-1": {
        variants: [
          {
            hostname: "dynamodb.us-gov-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-1": {
        variants: [
          {
            hostname: "dynamodb-fips.us-west-1.amazonaws.com",
            tags: ["fips"]
          }
        ]
      },
      "us-west-2": {
        variants: [
          {
            hostname: "dynamodb-fips.us-west-2.amazonaws.com",
            tags: ["fips"]
          }
        ]
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          "af-south-1",
          "ap-east-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-northeast-3",
          "ap-south-1",
          "ap-southeast-1",
          "ap-southeast-2",
          "ap-southeast-3",
          "ca-central-1",
          "ca-central-1-fips",
          "eu-central-1",
          "eu-north-1",
          "eu-south-1",
          "eu-west-1",
          "eu-west-2",
          "eu-west-3",
          "local",
          "me-south-1",
          "sa-east-1",
          "us-east-1",
          "us-east-1-fips",
          "us-east-2",
          "us-east-2-fips",
          "us-west-1",
          "us-west-1-fips",
          "us-west-2",
          "us-west-2-fips"
        ],
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "dynamodb.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "dynamodb-fips.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "dynamodb-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "dynamodb.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-cn": {
        regions: ["cn-north-1", "cn-northwest-1"],
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "dynamodb.{region}.amazonaws.com.cn",
            tags: []
          },
          {
            hostname: "dynamodb-fips.{region}.amazonaws.com.cn",
            tags: ["fips"]
          },
          {
            hostname: "dynamodb-fips.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "dynamodb.{region}.api.amazonwebservices.com.cn",
            tags: ["dualstack"]
          }
        ]
      },
      "aws-iso": {
        regions: ["us-iso-east-1", "us-iso-west-1"],
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "dynamodb.{region}.c2s.ic.gov",
            tags: []
          },
          {
            hostname: "dynamodb-fips.{region}.c2s.ic.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-iso-b": {
        regions: ["us-isob-east-1"],
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "dynamodb.{region}.sc2s.sgov.gov",
            tags: []
          },
          {
            hostname: "dynamodb-fips.{region}.sc2s.sgov.gov",
            tags: ["fips"]
          }
        ]
      },
      "aws-us-gov": {
        regions: ["us-gov-east-1", "us-gov-east-1-fips", "us-gov-west-1", "us-gov-west-1-fips"],
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        variants: [
          {
            hostname: "dynamodb.{region}.amazonaws.com",
            tags: []
          },
          {
            hostname: "dynamodb.{region}.amazonaws.com",
            tags: ["fips"]
          },
          {
            hostname: "dynamodb-fips.{region}.api.aws",
            tags: ["dualstack", "fips"]
          },
          {
            hostname: "dynamodb.{region}.api.aws",
            tags: ["dualstack"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, __spreadProps(__spreadValues({}, options), {
      signingService: "dynamodb",
      regionHash,
      partitionHash
    }));
    exports.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs27();
    var endpoints_1 = require_endpoints3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: "2012-08-10",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : "DynamoDB",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs44();
    var config_resolver_1 = require_dist_cjs7();
    var credential_provider_node_1 = require_dist_cjs43();
    var hash_node_1 = require_dist_cjs30();
    var middleware_endpoint_discovery_1 = require_dist_cjs10();
    var middleware_retry_1 = require_dist_cjs14();
    var node_config_provider_1 = require_dist_cjs25();
    var node_http_handler_1 = require_dist_cjs32();
    var util_base64_node_1 = require_dist_cjs33();
    var util_body_length_node_1 = require_dist_cjs34();
    var util_user_agent_node_1 = require_dist_cjs35();
    var util_utf8_node_1 = require_dist_cjs36();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs37();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return __spreadProps(__spreadValues(__spreadValues({}, clientSharedValues), config), {
        runtime: "node",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        endpointDiscoveryEnabledProvider: (_f = config === null || config === void 0 ? void 0 : config.endpointDiscoveryEnabledProvider) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(middleware_endpoint_discovery_1.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS),
        maxAttempts: (_g = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _g !== void 0 ? _g : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_h = config === null || config === void 0 ? void 0 : config.region) !== null && _h !== void 0 ? _h : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_j = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _j !== void 0 ? _j : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_k = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _k !== void 0 ? _k : (0, node_config_provider_1.loadConfig)(__spreadProps(__spreadValues({}, middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS), {
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        })),
        sha256: (_l = config === null || config === void 0 ? void 0 : config.sha256) !== null && _l !== void 0 ? _l : hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (_m = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _m !== void 0 ? _m : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _o !== void 0 ? _o : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_p = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _p !== void 0 ? _p : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_r = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _r !== void 0 ? _r : util_utf8_node_1.toUtf8
      });
    };
    exports.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js
var require_DynamoDBClient = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynamoDBClient = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_endpoint_discovery_1 = require_dist_cjs10();
    var middleware_host_header_1 = require_dist_cjs11();
    var middleware_logger_1 = require_dist_cjs12();
    var middleware_retry_1 = require_dist_cjs14();
    var middleware_signing_1 = require_dist_cjs20();
    var middleware_user_agent_1 = require_dist_cjs21();
    var smithy_client_1 = require_dist_cjs3();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var runtimeConfig_1 = require_runtimeConfig3();
    var DynamoDBClient2 = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, middleware_endpoint_discovery_1.resolveEndpointDiscoveryConfig)(_config_6, {
          endpointDiscoveryCommandCtor: DescribeEndpointsCommand_1.DescribeEndpointsCommand
        });
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports.DynamoDBClient = DynamoDBClient2;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js
var require_DynamoDB = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynamoDB = void 0;
    var BatchExecuteStatementCommand_1 = require_BatchExecuteStatementCommand();
    var BatchGetItemCommand_1 = require_BatchGetItemCommand();
    var BatchWriteItemCommand_1 = require_BatchWriteItemCommand();
    var CreateBackupCommand_1 = require_CreateBackupCommand();
    var CreateGlobalTableCommand_1 = require_CreateGlobalTableCommand();
    var CreateTableCommand_1 = require_CreateTableCommand();
    var DeleteBackupCommand_1 = require_DeleteBackupCommand();
    var DeleteItemCommand_1 = require_DeleteItemCommand();
    var DeleteTableCommand_1 = require_DeleteTableCommand();
    var DescribeBackupCommand_1 = require_DescribeBackupCommand();
    var DescribeContinuousBackupsCommand_1 = require_DescribeContinuousBackupsCommand();
    var DescribeContributorInsightsCommand_1 = require_DescribeContributorInsightsCommand();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var DescribeExportCommand_1 = require_DescribeExportCommand();
    var DescribeGlobalTableCommand_1 = require_DescribeGlobalTableCommand();
    var DescribeGlobalTableSettingsCommand_1 = require_DescribeGlobalTableSettingsCommand();
    var DescribeKinesisStreamingDestinationCommand_1 = require_DescribeKinesisStreamingDestinationCommand();
    var DescribeLimitsCommand_1 = require_DescribeLimitsCommand();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var DescribeTableReplicaAutoScalingCommand_1 = require_DescribeTableReplicaAutoScalingCommand();
    var DescribeTimeToLiveCommand_1 = require_DescribeTimeToLiveCommand();
    var DisableKinesisStreamingDestinationCommand_1 = require_DisableKinesisStreamingDestinationCommand();
    var EnableKinesisStreamingDestinationCommand_1 = require_EnableKinesisStreamingDestinationCommand();
    var ExecuteStatementCommand_1 = require_ExecuteStatementCommand();
    var ExecuteTransactionCommand_1 = require_ExecuteTransactionCommand();
    var ExportTableToPointInTimeCommand_1 = require_ExportTableToPointInTimeCommand();
    var GetItemCommand_1 = require_GetItemCommand();
    var ListBackupsCommand_1 = require_ListBackupsCommand();
    var ListContributorInsightsCommand_1 = require_ListContributorInsightsCommand();
    var ListExportsCommand_1 = require_ListExportsCommand();
    var ListGlobalTablesCommand_1 = require_ListGlobalTablesCommand();
    var ListTablesCommand_1 = require_ListTablesCommand();
    var ListTagsOfResourceCommand_1 = require_ListTagsOfResourceCommand();
    var PutItemCommand_1 = require_PutItemCommand();
    var QueryCommand_1 = require_QueryCommand();
    var RestoreTableFromBackupCommand_1 = require_RestoreTableFromBackupCommand();
    var RestoreTableToPointInTimeCommand_1 = require_RestoreTableToPointInTimeCommand();
    var ScanCommand_1 = require_ScanCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var TransactGetItemsCommand_1 = require_TransactGetItemsCommand();
    var TransactWriteItemsCommand_1 = require_TransactWriteItemsCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateContinuousBackupsCommand_1 = require_UpdateContinuousBackupsCommand();
    var UpdateContributorInsightsCommand_1 = require_UpdateContributorInsightsCommand();
    var UpdateGlobalTableCommand_1 = require_UpdateGlobalTableCommand();
    var UpdateGlobalTableSettingsCommand_1 = require_UpdateGlobalTableSettingsCommand();
    var UpdateItemCommand_1 = require_UpdateItemCommand();
    var UpdateTableCommand_1 = require_UpdateTableCommand();
    var UpdateTableReplicaAutoScalingCommand_1 = require_UpdateTableReplicaAutoScalingCommand();
    var UpdateTimeToLiveCommand_1 = require_UpdateTimeToLiveCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var DynamoDB = class extends DynamoDBClient_1.DynamoDBClient {
      batchExecuteStatement(args, optionsOrCb, cb) {
        const command = new BatchExecuteStatementCommand_1.BatchExecuteStatementCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGetItem(args, optionsOrCb, cb) {
        const command = new BatchGetItemCommand_1.BatchGetItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchWriteItem(args, optionsOrCb, cb) {
        const command = new BatchWriteItemCommand_1.BatchWriteItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createBackup(args, optionsOrCb, cb) {
        const command = new CreateBackupCommand_1.CreateBackupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createGlobalTable(args, optionsOrCb, cb) {
        const command = new CreateGlobalTableCommand_1.CreateGlobalTableCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createTable(args, optionsOrCb, cb) {
        const command = new CreateTableCommand_1.CreateTableCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBackup(args, optionsOrCb, cb) {
        const command = new DeleteBackupCommand_1.DeleteBackupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteItem(args, optionsOrCb, cb) {
        const command = new DeleteItemCommand_1.DeleteItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteTable(args, optionsOrCb, cb) {
        const command = new DeleteTableCommand_1.DeleteTableCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeBackup(args, optionsOrCb, cb) {
        const command = new DescribeBackupCommand_1.DescribeBackupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeContinuousBackups(args, optionsOrCb, cb) {
        const command = new DescribeContinuousBackupsCommand_1.DescribeContinuousBackupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeContributorInsights(args, optionsOrCb, cb) {
        const command = new DescribeContributorInsightsCommand_1.DescribeContributorInsightsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEndpoints(args, optionsOrCb, cb) {
        const command = new DescribeEndpointsCommand_1.DescribeEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeExport(args, optionsOrCb, cb) {
        const command = new DescribeExportCommand_1.DescribeExportCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeGlobalTable(args, optionsOrCb, cb) {
        const command = new DescribeGlobalTableCommand_1.DescribeGlobalTableCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeGlobalTableSettings(args, optionsOrCb, cb) {
        const command = new DescribeGlobalTableSettingsCommand_1.DescribeGlobalTableSettingsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new DescribeKinesisStreamingDestinationCommand_1.DescribeKinesisStreamingDestinationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeLimits(args, optionsOrCb, cb) {
        const command = new DescribeLimitsCommand_1.DescribeLimitsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeTable(args, optionsOrCb, cb) {
        const command = new DescribeTableCommand_1.DescribeTableCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeTableReplicaAutoScaling(args, optionsOrCb, cb) {
        const command = new DescribeTableReplicaAutoScalingCommand_1.DescribeTableReplicaAutoScalingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeTimeToLive(args, optionsOrCb, cb) {
        const command = new DescribeTimeToLiveCommand_1.DescribeTimeToLiveCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      disableKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new DisableKinesisStreamingDestinationCommand_1.DisableKinesisStreamingDestinationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      enableKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new EnableKinesisStreamingDestinationCommand_1.EnableKinesisStreamingDestinationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeStatement(args, optionsOrCb, cb) {
        const command = new ExecuteStatementCommand_1.ExecuteStatementCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeTransaction(args, optionsOrCb, cb) {
        const command = new ExecuteTransactionCommand_1.ExecuteTransactionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      exportTableToPointInTime(args, optionsOrCb, cb) {
        const command = new ExportTableToPointInTimeCommand_1.ExportTableToPointInTimeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getItem(args, optionsOrCb, cb) {
        const command = new GetItemCommand_1.GetItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listBackups(args, optionsOrCb, cb) {
        const command = new ListBackupsCommand_1.ListBackupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listContributorInsights(args, optionsOrCb, cb) {
        const command = new ListContributorInsightsCommand_1.ListContributorInsightsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listExports(args, optionsOrCb, cb) {
        const command = new ListExportsCommand_1.ListExportsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listGlobalTables(args, optionsOrCb, cb) {
        const command = new ListGlobalTablesCommand_1.ListGlobalTablesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTables(args, optionsOrCb, cb) {
        const command = new ListTablesCommand_1.ListTablesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTagsOfResource(args, optionsOrCb, cb) {
        const command = new ListTagsOfResourceCommand_1.ListTagsOfResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putItem(args, optionsOrCb, cb) {
        const command = new PutItemCommand_1.PutItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      query(args, optionsOrCb, cb) {
        const command = new QueryCommand_1.QueryCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreTableFromBackup(args, optionsOrCb, cb) {
        const command = new RestoreTableFromBackupCommand_1.RestoreTableFromBackupCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreTableToPointInTime(args, optionsOrCb, cb) {
        const command = new RestoreTableToPointInTimeCommand_1.RestoreTableToPointInTimeCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      scan(args, optionsOrCb, cb) {
        const command = new ScanCommand_1.ScanCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagResource(args, optionsOrCb, cb) {
        const command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactGetItems(args, optionsOrCb, cb) {
        const command = new TransactGetItemsCommand_1.TransactGetItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactWriteItems(args, optionsOrCb, cb) {
        const command = new TransactWriteItemsCommand_1.TransactWriteItemsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagResource(args, optionsOrCb, cb) {
        const command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateContinuousBackups(args, optionsOrCb, cb) {
        const command = new UpdateContinuousBackupsCommand_1.UpdateContinuousBackupsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateContributorInsights(args, optionsOrCb, cb) {
        const command = new UpdateContributorInsightsCommand_1.UpdateContributorInsightsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateGlobalTable(args, optionsOrCb, cb) {
        const command = new UpdateGlobalTableCommand_1.UpdateGlobalTableCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateGlobalTableSettings(args, optionsOrCb, cb) {
        const command = new UpdateGlobalTableSettingsCommand_1.UpdateGlobalTableSettingsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateItem(args, optionsOrCb, cb) {
        const command = new UpdateItemCommand_1.UpdateItemCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateTable(args, optionsOrCb, cb) {
        const command = new UpdateTableCommand_1.UpdateTableCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateTableReplicaAutoScaling(args, optionsOrCb, cb) {
        const command = new UpdateTableReplicaAutoScalingCommand_1.UpdateTableReplicaAutoScalingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateTimeToLive(args, optionsOrCb, cb) {
        const command = new UpdateTimeToLiveCommand_1.UpdateTimeToLiveCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports.DynamoDB = DynamoDB;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_BatchExecuteStatementCommand(), exports);
    tslib_1.__exportStar(require_BatchGetItemCommand(), exports);
    tslib_1.__exportStar(require_BatchWriteItemCommand(), exports);
    tslib_1.__exportStar(require_CreateBackupCommand(), exports);
    tslib_1.__exportStar(require_CreateGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_CreateTableCommand(), exports);
    tslib_1.__exportStar(require_DeleteBackupCommand(), exports);
    tslib_1.__exportStar(require_DeleteItemCommand(), exports);
    tslib_1.__exportStar(require_DeleteTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeBackupCommand(), exports);
    tslib_1.__exportStar(require_DescribeContinuousBackupsCommand(), exports);
    tslib_1.__exportStar(require_DescribeContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_DescribeEndpointsCommand(), exports);
    tslib_1.__exportStar(require_DescribeExportCommand(), exports);
    tslib_1.__exportStar(require_DescribeGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeGlobalTableSettingsCommand(), exports);
    tslib_1.__exportStar(require_DescribeKinesisStreamingDestinationCommand(), exports);
    tslib_1.__exportStar(require_DescribeLimitsCommand(), exports);
    tslib_1.__exportStar(require_DescribeTableCommand(), exports);
    tslib_1.__exportStar(require_DescribeTableReplicaAutoScalingCommand(), exports);
    tslib_1.__exportStar(require_DescribeTimeToLiveCommand(), exports);
    tslib_1.__exportStar(require_DisableKinesisStreamingDestinationCommand(), exports);
    tslib_1.__exportStar(require_EnableKinesisStreamingDestinationCommand(), exports);
    tslib_1.__exportStar(require_ExecuteStatementCommand(), exports);
    tslib_1.__exportStar(require_ExecuteTransactionCommand(), exports);
    tslib_1.__exportStar(require_ExportTableToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_GetItemCommand(), exports);
    tslib_1.__exportStar(require_ListBackupsCommand(), exports);
    tslib_1.__exportStar(require_ListContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_ListExportsCommand(), exports);
    tslib_1.__exportStar(require_ListGlobalTablesCommand(), exports);
    tslib_1.__exportStar(require_ListTablesCommand(), exports);
    tslib_1.__exportStar(require_ListTagsOfResourceCommand(), exports);
    tslib_1.__exportStar(require_PutItemCommand(), exports);
    tslib_1.__exportStar(require_QueryCommand(), exports);
    tslib_1.__exportStar(require_RestoreTableFromBackupCommand(), exports);
    tslib_1.__exportStar(require_RestoreTableToPointInTimeCommand(), exports);
    tslib_1.__exportStar(require_ScanCommand(), exports);
    tslib_1.__exportStar(require_TagResourceCommand(), exports);
    tslib_1.__exportStar(require_TransactGetItemsCommand(), exports);
    tslib_1.__exportStar(require_TransactWriteItemsCommand(), exports);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports);
    tslib_1.__exportStar(require_UpdateContinuousBackupsCommand(), exports);
    tslib_1.__exportStar(require_UpdateContributorInsightsCommand(), exports);
    tslib_1.__exportStar(require_UpdateGlobalTableCommand(), exports);
    tslib_1.__exportStar(require_UpdateGlobalTableSettingsCommand(), exports);
    tslib_1.__exportStar(require_UpdateItemCommand(), exports);
    tslib_1.__exportStar(require_UpdateTableCommand(), exports);
    tslib_1.__exportStar(require_UpdateTableReplicaAutoScalingCommand(), exports);
    tslib_1.__exportStar(require_UpdateTimeToLiveCommand(), exports);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js
var require_models3 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_0(), exports);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js
var require_ListContributorInsightsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListContributorInsights = void 0;
    var ListContributorInsightsCommand_1 = require_ListContributorInsightsCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListContributorInsightsCommand_1.ListContributorInsightsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listContributorInsights(input, ...args);
    };
    async function* paginateListContributorInsights(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        token = page.NextToken;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateListContributorInsights = paginateListContributorInsights;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js
var require_ListExportsPaginator = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListExports = void 0;
    var ListExportsCommand_1 = require_ListExportsCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListExportsCommand_1.ListExportsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listExports(input, ...args);
    };
    async function* paginateListExports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        token = page.NextToken;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateListExports = paginateListExports;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js
var require_ListTablesPaginator = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateListTables = void 0;
    var ListTablesCommand_1 = require_ListTablesCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListTablesCommand_1.ListTablesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listTables(input, ...args);
    };
    async function* paginateListTables(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartTableName = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        token = page.LastEvaluatedTableName;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateListTables = paginateListTables;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js
var require_QueryPaginator = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateQuery = void 0;
    var QueryCommand_1 = require_QueryCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new QueryCommand_1.QueryCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.query(input, ...args);
    };
    async function* paginateQuery(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        token = page.LastEvaluatedKey;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateQuery = paginateQuery;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js
var require_ScanPaginator = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.paginateScan = void 0;
    var ScanCommand_1 = require_ScanCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ScanCommand_1.ScanCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.scan(input, ...args);
    };
    async function* paginateScan(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        }
        yield page;
        token = page.LastEvaluatedKey;
        hasNext = !!token;
      }
      return void 0;
    }
    exports.paginateScan = paginateScan;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Interfaces2(), exports);
    tslib_1.__exportStar(require_ListContributorInsightsPaginator(), exports);
    tslib_1.__exportStar(require_ListExportsPaginator(), exports);
    tslib_1.__exportStar(require_ListTablesPaginator(), exports);
    tslib_1.__exportStar(require_QueryPaginator(), exports);
    tslib_1.__exportStar(require_ScanPaginator(), exports);
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports.sleep = sleep;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;
    exports.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports.WaiterState || (exports.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify(__spreadProps(__spreadValues({}, result), {
          reason: "Request was aborted"
        }))}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify(__spreadProps(__spreadValues({}, result), {
          reason: "Waiter has timed out"
        }))}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports.checkExceptions = checkExceptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2 };
        }
        currentAttempt += 1;
      }
    };
    exports.runPolling = runPolling;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate2 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports.validateWaiterOptions = validateWaiterOptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_sleep(), exports);
    tslib_1.__exportStar(require_validate2(), exports);
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils();
    var waiter_1 = require_waiter();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = __spreadValues(__spreadValues({}, waiter_1.waiterServiceDefaults), options);
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports.createWaiter = createWaiter;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  "node_modules/@aws-sdk/util-waiter/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_createWaiter(), exports);
    tslib_1.__exportStar(require_waiter(), exports);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js
var require_waitForTableExists = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilTableExists = exports.waitForTableExists = void 0;
    var util_waiter_1 = require_dist_cjs45();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTableCommand_1.DescribeTableCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Table.TableStatus;
          };
          if (returnComparator() === "ACTIVE") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    };
    exports.waitForTableExists = waitForTableExists;
    var waitUntilTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilTableExists = waitUntilTableExists;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js
var require_waitForTableNotExists = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilTableNotExists = exports.waitForTableNotExists = void 0;
    var util_waiter_1 = require_dist_cjs45();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTableCommand_1.DescribeTableCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
    };
    exports.waitForTableNotExists = waitForTableNotExists;
    var waitUntilTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)(__spreadValues(__spreadValues({}, serviceDefaults), params), input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports.waitUntilTableNotExists = waitUntilTableNotExists;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_waitForTableExists(), exports);
    tslib_1.__exportStar(require_waitForTableNotExists(), exports);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  "node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DynamoDBServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_DynamoDB(), exports);
    tslib_1.__exportStar(require_DynamoDBClient(), exports);
    tslib_1.__exportStar(require_commands3(), exports);
    tslib_1.__exportStar(require_models3(), exports);
    tslib_1.__exportStar(require_pagination2(), exports);
    tslib_1.__exportStar(require_waiters(), exports);
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    Object.defineProperty(exports, "DynamoDBServiceException", { enumerable: true, get: function() {
      return DynamoDBServiceException_1.DynamoDBServiceException;
    } });
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToAttr.js
var require_convertToAttr = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToAttr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToAttr = void 0;
    var convertToAttr = (data, options) => {
      var _a, _b, _c, _d, _e, _f;
      if (data === void 0) {
        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);
      } else if (data === null && typeof data === "object") {
        return convertToNullAttr();
      } else if (Array.isArray(data)) {
        return convertToListAttr(data, options);
      } else if (((_a = data === null || data === void 0 ? void 0 : data.constructor) === null || _a === void 0 ? void 0 : _a.name) === "Set") {
        return convertToSetAttr(data, options);
      } else if (((_b = data === null || data === void 0 ? void 0 : data.constructor) === null || _b === void 0 ? void 0 : _b.name) === "Map") {
        return convertToMapAttrFromIterable(data, options);
      } else if (((_c = data === null || data === void 0 ? void 0 : data.constructor) === null || _c === void 0 ? void 0 : _c.name) === "Object" || !data.constructor && typeof data === "object") {
        return convertToMapAttrFromEnumerableProps(data, options);
      } else if (isBinary(data)) {
        if (data.length === 0 && (options === null || options === void 0 ? void 0 : options.convertEmptyValues)) {
          return convertToNullAttr();
        }
        return convertToBinaryAttr(data);
      } else if (typeof data === "boolean" || ((_d = data === null || data === void 0 ? void 0 : data.constructor) === null || _d === void 0 ? void 0 : _d.name) === "Boolean") {
        return { BOOL: data.valueOf() };
      } else if (typeof data === "number" || ((_e = data === null || data === void 0 ? void 0 : data.constructor) === null || _e === void 0 ? void 0 : _e.name) === "Number") {
        return convertToNumberAttr(data);
      } else if (typeof data === "bigint") {
        return convertToBigIntAttr(data);
      } else if (typeof data === "string" || ((_f = data === null || data === void 0 ? void 0 : data.constructor) === null || _f === void 0 ? void 0 : _f.name) === "String") {
        if (data.length === 0 && (options === null || options === void 0 ? void 0 : options.convertEmptyValues)) {
          return convertToNullAttr();
        }
        return convertToStringAttr(data);
      } else if ((options === null || options === void 0 ? void 0 : options.convertClassInstanceToMap) && typeof data === "object") {
        return convertToMapAttrFromEnumerableProps(data, options);
      }
      throw new Error(`Unsupported type passed: ${data}. Pass options.convertClassInstanceToMap=true to marshall typeof object as map attribute.`);
    };
    exports.convertToAttr = convertToAttr;
    var convertToListAttr = (data, options) => ({
      L: data.filter((item) => !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues) || (options === null || options === void 0 ? void 0 : options.removeUndefinedValues) && item !== void 0).map((item) => (0, exports.convertToAttr)(item, options))
    });
    var convertToSetAttr = (set, options) => {
      const setToOperate = (options === null || options === void 0 ? void 0 : options.removeUndefinedValues) ? new Set([...set].filter((value) => value !== void 0)) : set;
      if (!(options === null || options === void 0 ? void 0 : options.removeUndefinedValues) && setToOperate.has(void 0)) {
        throw new Error(`Pass options.removeUndefinedValues=true to remove undefined values from map/array/set.`);
      }
      if (setToOperate.size === 0) {
        if (options === null || options === void 0 ? void 0 : options.convertEmptyValues) {
          return convertToNullAttr();
        }
        throw new Error(`Pass a non-empty set, or options.convertEmptyValues=true.`);
      }
      const item = setToOperate.values().next().value;
      if (typeof item === "number") {
        return {
          NS: Array.from(setToOperate).map(convertToNumberAttr).map((item2) => item2.N)
        };
      } else if (typeof item === "bigint") {
        return {
          NS: Array.from(setToOperate).map(convertToBigIntAttr).map((item2) => item2.N)
        };
      } else if (typeof item === "string") {
        return {
          SS: Array.from(setToOperate).map(convertToStringAttr).map((item2) => item2.S)
        };
      } else if (isBinary(item)) {
        return {
          BS: Array.from(setToOperate).map(convertToBinaryAttr).map((item2) => item2.B)
        };
      } else {
        throw new Error(`Only Number Set (NS), Binary Set (BS) or String Set (SS) are allowed.`);
      }
    };
    var convertToMapAttrFromIterable = (data, options) => ({
      M: ((data2) => {
        const map = {};
        for (const [key, value] of data2) {
          if (typeof value !== "function" && (value !== void 0 || !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues))) {
            map[key] = (0, exports.convertToAttr)(value, options);
          }
        }
        return map;
      })(data)
    });
    var convertToMapAttrFromEnumerableProps = (data, options) => ({
      M: ((data2) => {
        const map = {};
        for (const key in data2) {
          const value = data2[key];
          if (typeof value !== "function" && (value !== void 0 || !(options === null || options === void 0 ? void 0 : options.removeUndefinedValues))) {
            map[key] = (0, exports.convertToAttr)(value, options);
          }
        }
        return map;
      })(data)
    });
    var convertToNullAttr = () => ({ NULL: true });
    var convertToBinaryAttr = (data) => ({ B: data });
    var convertToStringAttr = (data) => ({ S: data.toString() });
    var convertToBigIntAttr = (data) => ({ N: data.toString() });
    var validateBigIntAndThrow = (errorPrefix) => {
      throw new Error(`${errorPrefix} ${typeof BigInt === "function" ? "Use BigInt." : "Pass string value instead."} `);
    };
    var convertToNumberAttr = (num) => {
      if ([Number.NaN, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY].map((val) => val.toString()).includes(num.toString())) {
        throw new Error(`Special numeric value ${num.toString()} is not allowed`);
      } else if (num > Number.MAX_SAFE_INTEGER) {
        validateBigIntAndThrow(`Number ${num.toString()} is greater than Number.MAX_SAFE_INTEGER.`);
      } else if (num < Number.MIN_SAFE_INTEGER) {
        validateBigIntAndThrow(`Number ${num.toString()} is lesser than Number.MIN_SAFE_INTEGER.`);
      }
      return { N: num.toString() };
    };
    var isBinary = (data) => {
      const binaryTypes = [
        "ArrayBuffer",
        "Blob",
        "Buffer",
        "DataView",
        "File",
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Uint16Array",
        "Int32Array",
        "Uint32Array",
        "Float32Array",
        "Float64Array",
        "BigInt64Array",
        "BigUint64Array"
      ];
      if (data === null || data === void 0 ? void 0 : data.constructor) {
        return binaryTypes.includes(data.constructor.name);
      }
      return false;
    };
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToNative.js
var require_convertToNative = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/convertToNative.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertToNative = void 0;
    var convertToNative = (data, options) => {
      for (const [key, value] of Object.entries(data)) {
        if (value !== void 0) {
          switch (key) {
            case "NULL":
              return null;
            case "BOOL":
              return Boolean(value);
            case "N":
              return convertNumber(value, options);
            case "B":
              return convertBinary(value);
            case "S":
              return convertString(value);
            case "L":
              return convertList(value, options);
            case "M":
              return convertMap(value, options);
            case "NS":
              return new Set(value.map((item) => convertNumber(item, options)));
            case "BS":
              return new Set(value.map(convertBinary));
            case "SS":
              return new Set(value.map(convertString));
            default:
              throw new Error(`Unsupported type passed: ${key}`);
          }
        }
      }
      throw new Error(`No value defined: ${JSON.stringify(data)}`);
    };
    exports.convertToNative = convertToNative;
    var convertNumber = (numString, options) => {
      if (options === null || options === void 0 ? void 0 : options.wrapNumbers) {
        return { value: numString };
      }
      const num = Number(numString);
      const infinityValues = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];
      if ((num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) && !infinityValues.includes(num)) {
        if (typeof BigInt === "function") {
          try {
            return BigInt(numString);
          } catch (error) {
            throw new Error(`${numString} can't be converted to BigInt. Set options.wrapNumbers to get string value.`);
          }
        } else {
          throw new Error(`${numString} is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.`);
        }
      }
      return num;
    };
    var convertString = (stringValue) => stringValue;
    var convertBinary = (binaryValue) => binaryValue;
    var convertList = (list, options) => list.map((item) => (0, exports.convertToNative)(item, options));
    var convertMap = (map, options) => Object.entries(map).reduce((acc, [key, value]) => __spreadProps(__spreadValues({}, acc), {
      [key]: (0, exports.convertToNative)(value, options)
    }), {});
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/marshall.js
var require_marshall = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/marshall.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.marshall = void 0;
    var convertToAttr_1 = require_convertToAttr();
    var marshall2 = (data, options) => (0, convertToAttr_1.convertToAttr)(data, options).M;
    exports.marshall = marshall2;
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/models.js
var require_models4 = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/models.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/unmarshall.js
var require_unmarshall = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/unmarshall.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unmarshall = void 0;
    var convertToNative_1 = require_convertToNative();
    var unmarshall = (data, options) => (0, convertToNative_1.convertToNative)({ M: data }, options);
    exports.unmarshall = unmarshall;
  }
});

// node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  "node_modules/@aws-sdk/util-dynamodb/dist-cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_convertToAttr(), exports);
    tslib_1.__exportStar(require_convertToNative(), exports);
    tslib_1.__exportStar(require_marshall(), exports);
    tslib_1.__exportStar(require_models4(), exports);
    tslib_1.__exportStar(require_unmarshall(), exports);
  }
});

// node_modules/xlsx/dist/cpexcel.js
var require_cpexcel = __commonJS({
  "node_modules/xlsx/dist/cpexcel.js"(exports, module2) {
    var cptable2 = { version: "1.15.0" };
    cptable2[437] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[620] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\u0105\xE7\xEA\xEB\xE8\xEF\xEE\u0107\xC4\u0104\u0118\u0119\u0142\xF4\xF6\u0106\xFB\xF9\u015A\xD6\xDC\xA2\u0141\xA5\u015B\u0192\u0179\u017B\xF3\xD3\u0144\u0143\u017A\u017C\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[737] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u03C5\u03C6\u03C7\u03C8\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03C9\u03AC\u03AD\u03AE\u03CA\u03AF\u03CC\u03CD\u03CB\u03CE\u0386\u0388\u0389\u038A\u038C\u038E\u038F\xB1\u2265\u2264\u03AA\u03AB\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[850] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u0131\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[852] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\u016F\u0107\xE7\u0142\xEB\u0150\u0151\xEE\u0179\xC4\u0106\xC9\u0139\u013A\xF4\xF6\u013D\u013E\u015A\u015B\xD6\xDC\u0164\u0165\u0141\xD7\u010D\xE1\xED\xF3\xFA\u0104\u0105\u017D\u017E\u0118\u0119\xAC\u017A\u010C\u015F\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\u011A\u015E\u2563\u2551\u2557\u255D\u017B\u017C\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0102\u0103\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u0111\u0110\u010E\xCB\u010F\u0147\xCD\xCE\u011B\u2518\u250C\u2588\u2584\u0162\u016E\u2580\xD3\xDF\xD4\u0143\u0144\u0148\u0160\u0161\u0154\xDA\u0155\u0170\xFD\xDD\u0163\xB4\xAD\u02DD\u02DB\u02C7\u02D8\xA7\xF7\xB8\xB0\xA8\u02D9\u0171\u0158\u0159\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[857] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\u0131\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\u0130\xD6\xDC\xF8\xA3\xD8\u015E\u015F\xE1\xED\xF3\xFA\xF1\xD1\u011E\u011F\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xBA\xAA\xCA\xCB\xC8\uFFFD\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\uFFFD\xD7\xDA\xDB\xD9\xEC\xFF\xAF\xB4\xAD\xB1\uFFFD\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[861] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xD0\xF0\xDE\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xFE\xFB\xDD\xFD\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xC1\xCD\xD3\xDA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[865] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xA4\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[866] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\xA4\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[874] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\u2026\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[895] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u010C\xFC\xE9\u010F\xE4\u010E\u0164\u010D\u011B\u011A\u0139\xCD\u013E\u01EA\xC4\xC1\xC9\u017E\u017D\xF4\xF6\xD3\u016F\xDA\xFD\xD6\xDC\u0160\u013D\xDD\u0158\u0165\xE1\xED\xF3\xFA\u0148\u0147\u016E\xD4\u0161\u0159\u0155\u0154\xBC\xA7\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[932] = function() {
      var d = [], e = {}, D = [], j;
      D[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF61\uFF62\uFF63\uFF64\uFF65\uFF66\uFF67\uFF68\uFF69\uFF6A\uFF6B\uFF6C\uFF6D\uFF6E\uFF6F\uFF70\uFF71\uFF72\uFF73\uFF74\uFF75\uFF76\uFF77\uFF78\uFF79\uFF7A\uFF7B\uFF7C\uFF7D\uFF7E\uFF7F\uFF80\uFF81\uFF82\uFF83\uFF84\uFF85\uFF86\uFF87\uFF88\uFF89\uFF8A\uFF8B\uFF8C\uFF8D\uFF8E\uFF8F\uFF90\uFF91\uFF92\uFF93\uFF94\uFF95\uFF96\uFF97\uFF98\uFF99\uFF9A\uFF9B\uFF9C\uFF9D\uFF9E\uFF9F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[0].length; ++j)
        if (D[0][j].charCodeAt(0) !== 65533) {
          e[D[0][j]] = 0 + j;
          d[0 + j] = D[0][j];
        }
      D[129] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3010\u3011\uFF0B\uFF0D\xB1\xD7\uFFFD\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6\uFFFD\uFFFD\uFFFD\uFFFD\u25EF\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[129].length; ++j)
        if (D[129][j].charCodeAt(0) !== 65533) {
          e[D[129][j]] = 33024 + j;
          d[33024 + j] = D[129][j];
        }
      D[130] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[130].length; ++j)
        if (D[130][j].charCodeAt(0) !== 65533) {
          e[D[130][j]] = 33280 + j;
          d[33280 + j] = D[130][j];
        }
      D[131] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\uFFFD\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[131].length; ++j)
        if (D[131][j].charCodeAt(0) !== 65533) {
          e[D[131][j]] = 33536 + j;
          d[33536 + j] = D[131][j];
        }
      D[132] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\uFFFD\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[132].length; ++j)
        if (D[132][j].charCodeAt(0) !== 65533) {
          e[D[132][j]] = 33792 + j;
          d[33792 + j] = D[132][j];
        }
      D[135] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\u246A\u246B\u246C\u246D\u246E\u246F\u2470\u2471\u2472\u2473\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFFD\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u337B\uFFFD\u301D\u301F\u2116\u33CD\u2121\u32A4\u32A5\u32A6\u32A7\u32A8\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[135].length; ++j)
        if (D[135][j].charCodeAt(0) !== 65533) {
          e[D[135][j]] = 34560 + j;
          d[34560 + j] = D[135][j];
        }
      D[136] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[136].length; ++j)
        if (D[136][j].charCodeAt(0) !== 65533) {
          e[D[136][j]] = 34816 + j;
          d[34816 + j] = D[136][j];
        }
      D[137] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186\uFFFD\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[137].length; ++j)
        if (D[137][j].charCodeAt(0) !== 65533) {
          e[D[137][j]] = 35072 + j;
          d[35072 + j] = D[137][j];
        }
      D[138] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B\uFFFD\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[138].length; ++j)
        if (D[138][j].charCodeAt(0) !== 65533) {
          e[D[138][j]] = 35328 + j;
          d[35328 + j] = D[138][j];
        }
      D[139] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551\uFFFD\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[139].length; ++j)
        if (D[139][j].charCodeAt(0) !== 65533) {
          e[D[139][j]] = 35584 + j;
          d[35584 + j] = D[139][j];
        }
      D[140] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8\uFFFD\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[140].length; ++j)
        if (D[140][j].charCodeAt(0) !== 65533) {
          e[D[140][j]] = 35840 + j;
          d[35840 + j] = D[140][j];
        }
      D[141] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D\uFFFD\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[141].length; ++j)
        if (D[141][j].charCodeAt(0) !== 65533) {
          e[D[141][j]] = 36096 + j;
          d[36096 + j] = D[141][j];
        }
      D[142] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62\uFFFD\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[142].length; ++j)
        if (D[142][j].charCodeAt(0) !== 65533) {
          e[D[142][j]] = 36352 + j;
          d[36352 + j] = D[142][j];
        }
      D[143] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3\uFFFD\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[143].length; ++j)
        if (D[143][j].charCodeAt(0) !== 65533) {
          e[D[143][j]] = 36608 + j;
          d[36608 + j] = D[143][j];
        }
      D[144] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8\uFFFD\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[144].length; ++j)
        if (D[144][j].charCodeAt(0) !== 65533) {
          e[D[144][j]] = 36864 + j;
          d[36864 + j] = D[144][j];
        }
      D[145] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB\uFFFD\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[145].length; ++j)
        if (D[145][j].charCodeAt(0) !== 65533) {
          e[D[145][j]] = 37120 + j;
          d[37120 + j] = D[145][j];
        }
      D[146] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4\uFFFD\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[146].length; ++j)
        if (D[146][j].charCodeAt(0) !== 65533) {
          e[D[146][j]] = 37376 + j;
          d[37376 + j] = D[146][j];
        }
      D[147] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC\uFFFD\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[147].length; ++j)
        if (D[147][j].charCodeAt(0) !== 65533) {
          e[D[147][j]] = 37632 + j;
          d[37632 + j] = D[147][j];
        }
      D[148] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885\uFFFD\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[148].length; ++j)
        if (D[148][j].charCodeAt(0) !== 65533) {
          e[D[148][j]] = 37888 + j;
          d[37888 + j] = D[148][j];
        }
      D[149] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577\uFFFD\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[149].length; ++j)
        if (D[149][j].charCodeAt(0) !== 65533) {
          e[D[149][j]] = 38144 + j;
          d[38144 + j] = D[149][j];
        }
      D[150] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6\uFFFD\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[150].length; ++j)
        if (D[150][j].charCodeAt(0) !== 65533) {
          e[D[150][j]] = 38400 + j;
          d[38400 + j] = D[150][j];
        }
      D[151] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32\uFFFD\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[151].length; ++j)
        if (D[151][j].charCodeAt(0) !== 65533) {
          e[D[151][j]] = 38656 + j;
          d[38656 + j] = D[151][j];
        }
      D[152] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[152].length; ++j)
        if (D[152][j].charCodeAt(0) !== 65533) {
          e[D[152][j]] = 38912 + j;
          d[38912 + j] = D[152][j];
        }
      D[153] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED\uFFFD\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[153].length; ++j)
        if (D[153][j].charCodeAt(0) !== 65533) {
          e[D[153][j]] = 39168 + j;
          d[39168 + j] = D[153][j];
        }
      D[154] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638\uFFFD\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[154].length; ++j)
        if (D[154][j].charCodeAt(0) !== 65533) {
          e[D[154][j]] = 39424 + j;
          d[39424 + j] = D[154][j];
        }
      D[155] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80\uFFFD\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[155].length; ++j)
        if (D[155][j].charCodeAt(0) !== 65533) {
          e[D[155][j]] = 39680 + j;
          d[39680 + j] = D[155][j];
        }
      D[156] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060\uFFFD\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[156].length; ++j)
        if (D[156][j].charCodeAt(0) !== 65533) {
          e[D[156][j]] = 39936 + j;
          d[39936 + j] = D[156][j];
        }
      D[157] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B\uFFFD\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[157].length; ++j)
        if (D[157][j].charCodeAt(0) !== 65533) {
          e[D[157][j]] = 40192 + j;
          d[40192 + j] = D[157][j];
        }
      D[158] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E\uFFFD\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[158].length; ++j)
        if (D[158][j].charCodeAt(0) !== 65533) {
          e[D[158][j]] = 40448 + j;
          d[40448 + j] = D[158][j];
        }
      D[159] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF\uFFFD\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[159].length; ++j)
        if (D[159][j].charCodeAt(0) !== 65533) {
          e[D[159][j]] = 40704 + j;
          d[40704 + j] = D[159][j];
        }
      D[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD\uFFFD\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[224].length; ++j)
        if (D[224][j].charCodeAt(0) !== 65533) {
          e[D[224][j]] = 57344 + j;
          d[57344 + j] = D[224][j];
        }
      D[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF\uFFFD\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[225].length; ++j)
        if (D[225][j].charCodeAt(0) !== 65533) {
          e[D[225][j]] = 57600 + j;
          d[57600 + j] = D[225][j];
        }
      D[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0\uFFFD\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[226].length; ++j)
        if (D[226][j].charCodeAt(0) !== 65533) {
          e[D[226][j]] = 57856 + j;
          d[57856 + j] = D[226][j];
        }
      D[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37\uFFFD\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[227].length; ++j)
        if (D[227][j].charCodeAt(0) !== 65533) {
          e[D[227][j]] = 58112 + j;
          d[58112 + j] = D[227][j];
        }
      D[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264\uFFFD\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[228].length; ++j)
        if (D[228][j].charCodeAt(0) !== 65533) {
          e[D[228][j]] = 58368 + j;
          d[58368 + j] = D[228][j];
        }
      D[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC\uFFFD\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[229].length; ++j)
        if (D[229][j].charCodeAt(0) !== 65533) {
          e[D[229][j]] = 58624 + j;
          d[58624 + j] = D[229][j];
        }
      D[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7\uFFFD\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[230].length; ++j)
        if (D[230][j].charCodeAt(0) !== 65533) {
          e[D[230][j]] = 58880 + j;
          d[58880 + j] = D[230][j];
        }
      D[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C\uFFFD\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[231].length; ++j)
        if (D[231][j].charCodeAt(0) !== 65533) {
          e[D[231][j]] = 59136 + j;
          d[59136 + j] = D[231][j];
        }
      D[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599\uFFFD\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[232].length; ++j)
        if (D[232][j].charCodeAt(0) !== 65533) {
          e[D[232][j]] = 59392 + j;
          d[59392 + j] = D[232][j];
        }
      D[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43\uFFFD\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[233].length; ++j)
        if (D[233][j].charCodeAt(0) !== 65533) {
          e[D[233][j]] = 59648 + j;
          d[59648 + j] = D[233][j];
        }
      D[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF\uFFFD\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0\u582F\u69C7\u9059\u7464\u51DC\u7199\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[234].length; ++j)
        if (D[234][j].charCodeAt(0) !== 65533) {
          e[D[234][j]] = 59904 + j;
          d[59904 + j] = D[234][j];
        }
      D[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFFFD\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[237].length; ++j)
        if (D[237][j].charCodeAt(0) !== 65533) {
          e[D[237][j]] = 60672 + j;
          d[60672 + j] = D[237][j];
        }
      D[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\uFFFD\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFE2\uFFE4\uFF07\uFF02\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[238].length; ++j)
        if (D[238][j].charCodeAt(0) !== 65533) {
          e[D[238][j]] = 60928 + j;
          d[60928 + j] = D[238][j];
        }
      D[250] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFE2\uFFE4\uFF07\uFF02\u3231\u2116\u2121\u2235\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\uFFFD\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[250].length; ++j)
        if (D[250][j].charCodeAt(0) !== 65533) {
          e[D[250][j]] = 64e3 + j;
          d[64e3 + j] = D[250][j];
        }
      D[251] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFFFD\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[251].length; ++j)
        if (D[251][j].charCodeAt(0) !== 65533) {
          e[D[251][j]] = 64256 + j;
          d[64256 + j] = D[251][j];
        }
      D[252] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[252].length; ++j)
        if (D[252][j].charCodeAt(0) !== 65533) {
          e[D[252][j]] = 64512 + j;
          d[64512 + j] = D[252][j];
        }
      return { "enc": e, "dec": d };
    }();
    cptable2[936] = function() {
      var d = [], e = {}, D = [], j;
      D[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[0].length; ++j)
        if (D[0][j].charCodeAt(0) !== 65533) {
          e[D[0][j]] = 0 + j;
          d[0 + j] = D[0][j];
        }
      D[129] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E02\u4E04\u4E05\u4E06\u4E0F\u4E12\u4E17\u4E1F\u4E20\u4E21\u4E23\u4E26\u4E29\u4E2E\u4E2F\u4E31\u4E33\u4E35\u4E37\u4E3C\u4E40\u4E41\u4E42\u4E44\u4E46\u4E4A\u4E51\u4E55\u4E57\u4E5A\u4E5B\u4E62\u4E63\u4E64\u4E65\u4E67\u4E68\u4E6A\u4E6B\u4E6C\u4E6D\u4E6E\u4E6F\u4E72\u4E74\u4E75\u4E76\u4E77\u4E78\u4E79\u4E7A\u4E7B\u4E7C\u4E7D\u4E7F\u4E80\u4E81\u4E82\u4E83\u4E84\u4E85\u4E87\u4E8A\uFFFD\u4E90\u4E96\u4E97\u4E99\u4E9C\u4E9D\u4E9E\u4EA3\u4EAA\u4EAF\u4EB0\u4EB1\u4EB4\u4EB6\u4EB7\u4EB8\u4EB9\u4EBC\u4EBD\u4EBE\u4EC8\u4ECC\u4ECF\u4ED0\u4ED2\u4EDA\u4EDB\u4EDC\u4EE0\u4EE2\u4EE6\u4EE7\u4EE9\u4EED\u4EEE\u4EEF\u4EF1\u4EF4\u4EF8\u4EF9\u4EFA\u4EFC\u4EFE\u4F00\u4F02\u4F03\u4F04\u4F05\u4F06\u4F07\u4F08\u4F0B\u4F0C\u4F12\u4F13\u4F14\u4F15\u4F16\u4F1C\u4F1D\u4F21\u4F23\u4F28\u4F29\u4F2C\u4F2D\u4F2E\u4F31\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E\u4F3F\u4F40\u4F41\u4F42\u4F44\u4F45\u4F47\u4F48\u4F49\u4F4A\u4F4B\u4F4C\u4F52\u4F54\u4F56\u4F61\u4F62\u4F66\u4F68\u4F6A\u4F6B\u4F6D\u4F6E\u4F71\u4F72\u4F75\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F80\u4F81\u4F82\u4F85\u4F86\u4F87\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F95\u4F96\u4F98\u4F99\u4F9A\u4F9C\u4F9E\u4F9F\u4FA1\u4FA2\uFFFD".split("");
      for (j = 0; j != D[129].length; ++j)
        if (D[129][j].charCodeAt(0) !== 65533) {
          e[D[129][j]] = 33024 + j;
          d[33024 + j] = D[129][j];
        }
      D[130] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4FA4\u4FAB\u4FAD\u4FB0\u4FB1\u4FB2\u4FB3\u4FB4\u4FB6\u4FB7\u4FB8\u4FB9\u4FBA\u4FBB\u4FBC\u4FBD\u4FBE\u4FC0\u4FC1\u4FC2\u4FC6\u4FC7\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FD2\u4FD3\u4FD4\u4FD5\u4FD6\u4FD9\u4FDB\u4FE0\u4FE2\u4FE4\u4FE5\u4FE7\u4FEB\u4FEC\u4FF0\u4FF2\u4FF4\u4FF5\u4FF6\u4FF7\u4FF9\u4FFB\u4FFC\u4FFD\u4FFF\u5000\u5001\u5002\u5003\u5004\u5005\u5006\u5007\u5008\u5009\u500A\uFFFD\u500B\u500E\u5010\u5011\u5013\u5015\u5016\u5017\u501B\u501D\u501E\u5020\u5022\u5023\u5024\u5027\u502B\u502F\u5030\u5031\u5032\u5033\u5034\u5035\u5036\u5037\u5038\u5039\u503B\u503D\u503F\u5040\u5041\u5042\u5044\u5045\u5046\u5049\u504A\u504B\u504D\u5050\u5051\u5052\u5053\u5054\u5056\u5057\u5058\u5059\u505B\u505D\u505E\u505F\u5060\u5061\u5062\u5063\u5064\u5066\u5067\u5068\u5069\u506A\u506B\u506D\u506E\u506F\u5070\u5071\u5072\u5073\u5074\u5075\u5078\u5079\u507A\u507C\u507D\u5081\u5082\u5083\u5084\u5086\u5087\u5089\u508A\u508B\u508C\u508E\u508F\u5090\u5091\u5092\u5093\u5094\u5095\u5096\u5097\u5098\u5099\u509A\u509B\u509C\u509D\u509E\u509F\u50A0\u50A1\u50A2\u50A4\u50A6\u50AA\u50AB\u50AD\u50AE\u50AF\u50B0\u50B1\u50B3\u50B4\u50B5\u50B6\u50B7\u50B8\u50B9\u50BC\uFFFD".split("");
      for (j = 0; j != D[130].length; ++j)
        if (D[130][j].charCodeAt(0) !== 65533) {
          e[D[130][j]] = 33280 + j;
          d[33280 + j] = D[130][j];
        }
      D[131] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u50BD\u50BE\u50BF\u50C0\u50C1\u50C2\u50C3\u50C4\u50C5\u50C6\u50C7\u50C8\u50C9\u50CA\u50CB\u50CC\u50CD\u50CE\u50D0\u50D1\u50D2\u50D3\u50D4\u50D5\u50D7\u50D8\u50D9\u50DB\u50DC\u50DD\u50DE\u50DF\u50E0\u50E1\u50E2\u50E3\u50E4\u50E5\u50E8\u50E9\u50EA\u50EB\u50EF\u50F0\u50F1\u50F2\u50F4\u50F6\u50F7\u50F8\u50F9\u50FA\u50FC\u50FD\u50FE\u50FF\u5100\u5101\u5102\u5103\u5104\u5105\u5108\uFFFD\u5109\u510A\u510C\u510D\u510E\u510F\u5110\u5111\u5113\u5114\u5115\u5116\u5117\u5118\u5119\u511A\u511B\u511C\u511D\u511E\u511F\u5120\u5122\u5123\u5124\u5125\u5126\u5127\u5128\u5129\u512A\u512B\u512C\u512D\u512E\u512F\u5130\u5131\u5132\u5133\u5134\u5135\u5136\u5137\u5138\u5139\u513A\u513B\u513C\u513D\u513E\u5142\u5147\u514A\u514C\u514E\u514F\u5150\u5152\u5153\u5157\u5158\u5159\u515B\u515D\u515E\u515F\u5160\u5161\u5163\u5164\u5166\u5167\u5169\u516A\u516F\u5172\u517A\u517E\u517F\u5183\u5184\u5186\u5187\u518A\u518B\u518E\u518F\u5190\u5191\u5193\u5194\u5198\u519A\u519D\u519E\u519F\u51A1\u51A3\u51A6\u51A7\u51A8\u51A9\u51AA\u51AD\u51AE\u51B4\u51B8\u51B9\u51BA\u51BE\u51BF\u51C1\u51C2\u51C3\u51C5\u51C8\u51CA\u51CD\u51CE\u51D0\u51D2\u51D3\u51D4\u51D5\u51D6\u51D7\uFFFD".split("");
      for (j = 0; j != D[131].length; ++j)
        if (D[131][j].charCodeAt(0) !== 65533) {
          e[D[131][j]] = 33536 + j;
          d[33536 + j] = D[131][j];
        }
      D[132] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51D8\u51D9\u51DA\u51DC\u51DE\u51DF\u51E2\u51E3\u51E5\u51E6\u51E7\u51E8\u51E9\u51EA\u51EC\u51EE\u51F1\u51F2\u51F4\u51F7\u51FE\u5204\u5205\u5209\u520B\u520C\u520F\u5210\u5213\u5214\u5215\u521C\u521E\u521F\u5221\u5222\u5223\u5225\u5226\u5227\u522A\u522C\u522F\u5231\u5232\u5234\u5235\u523C\u523E\u5244\u5245\u5246\u5247\u5248\u5249\u524B\u524E\u524F\u5252\u5253\u5255\u5257\u5258\uFFFD\u5259\u525A\u525B\u525D\u525F\u5260\u5262\u5263\u5264\u5266\u5268\u526B\u526C\u526D\u526E\u5270\u5271\u5273\u5274\u5275\u5276\u5277\u5278\u5279\u527A\u527B\u527C\u527E\u5280\u5283\u5284\u5285\u5286\u5287\u5289\u528A\u528B\u528C\u528D\u528E\u528F\u5291\u5292\u5294\u5295\u5296\u5297\u5298\u5299\u529A\u529C\u52A4\u52A5\u52A6\u52A7\u52AE\u52AF\u52B0\u52B4\u52B5\u52B6\u52B7\u52B8\u52B9\u52BA\u52BB\u52BC\u52BD\u52C0\u52C1\u52C2\u52C4\u52C5\u52C6\u52C8\u52CA\u52CC\u52CD\u52CE\u52CF\u52D1\u52D3\u52D4\u52D5\u52D7\u52D9\u52DA\u52DB\u52DC\u52DD\u52DE\u52E0\u52E1\u52E2\u52E3\u52E5\u52E6\u52E7\u52E8\u52E9\u52EA\u52EB\u52EC\u52ED\u52EE\u52EF\u52F1\u52F2\u52F3\u52F4\u52F5\u52F6\u52F7\u52F8\u52FB\u52FC\u52FD\u5301\u5302\u5303\u5304\u5307\u5309\u530A\u530B\u530C\u530E\uFFFD".split("");
      for (j = 0; j != D[132].length; ++j)
        if (D[132][j].charCodeAt(0) !== 65533) {
          e[D[132][j]] = 33792 + j;
          d[33792 + j] = D[132][j];
        }
      D[133] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5311\u5312\u5313\u5314\u5318\u531B\u531C\u531E\u531F\u5322\u5324\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u532F\u5330\u5331\u5332\u5333\u5334\u5335\u5336\u5337\u5338\u533C\u533D\u5340\u5342\u5344\u5346\u534B\u534C\u534D\u5350\u5354\u5358\u5359\u535B\u535D\u5365\u5368\u536A\u536C\u536D\u5372\u5376\u5379\u537B\u537C\u537D\u537E\u5380\u5381\u5383\u5387\u5388\u538A\u538E\u538F\uFFFD\u5390\u5391\u5392\u5393\u5394\u5396\u5397\u5399\u539B\u539C\u539E\u53A0\u53A1\u53A4\u53A7\u53AA\u53AB\u53AC\u53AD\u53AF\u53B0\u53B1\u53B2\u53B3\u53B4\u53B5\u53B7\u53B8\u53B9\u53BA\u53BC\u53BD\u53BE\u53C0\u53C3\u53C4\u53C5\u53C6\u53C7\u53CE\u53CF\u53D0\u53D2\u53D3\u53D5\u53DA\u53DC\u53DD\u53DE\u53E1\u53E2\u53E7\u53F4\u53FA\u53FE\u53FF\u5400\u5402\u5405\u5407\u540B\u5414\u5418\u5419\u541A\u541C\u5422\u5424\u5425\u542A\u5430\u5433\u5436\u5437\u543A\u543D\u543F\u5441\u5442\u5444\u5445\u5447\u5449\u544C\u544D\u544E\u544F\u5451\u545A\u545D\u545E\u545F\u5460\u5461\u5463\u5465\u5467\u5469\u546A\u546B\u546C\u546D\u546E\u546F\u5470\u5474\u5479\u547A\u547E\u547F\u5481\u5483\u5485\u5487\u5488\u5489\u548A\u548D\u5491\u5493\u5497\u5498\u549C\u549E\u549F\u54A0\u54A1\uFFFD".split("");
      for (j = 0; j != D[133].length; ++j)
        if (D[133][j].charCodeAt(0) !== 65533) {
          e[D[133][j]] = 34048 + j;
          d[34048 + j] = D[133][j];
        }
      D[134] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54A2\u54A5\u54AE\u54B0\u54B2\u54B5\u54B6\u54B7\u54B9\u54BA\u54BC\u54BE\u54C3\u54C5\u54CA\u54CB\u54D6\u54D8\u54DB\u54E0\u54E1\u54E2\u54E3\u54E4\u54EB\u54EC\u54EF\u54F0\u54F1\u54F4\u54F5\u54F6\u54F7\u54F8\u54F9\u54FB\u54FE\u5500\u5502\u5503\u5504\u5505\u5508\u550A\u550B\u550C\u550D\u550E\u5512\u5513\u5515\u5516\u5517\u5518\u5519\u551A\u551C\u551D\u551E\u551F\u5521\u5525\u5526\uFFFD\u5528\u5529\u552B\u552D\u5532\u5534\u5535\u5536\u5538\u5539\u553A\u553B\u553D\u5540\u5542\u5545\u5547\u5548\u554B\u554C\u554D\u554E\u554F\u5551\u5552\u5553\u5554\u5557\u5558\u5559\u555A\u555B\u555D\u555E\u555F\u5560\u5562\u5563\u5568\u5569\u556B\u556F\u5570\u5571\u5572\u5573\u5574\u5579\u557A\u557D\u557F\u5585\u5586\u558C\u558D\u558E\u5590\u5592\u5593\u5595\u5596\u5597\u559A\u559B\u559E\u55A0\u55A1\u55A2\u55A3\u55A4\u55A5\u55A6\u55A8\u55A9\u55AA\u55AB\u55AC\u55AD\u55AE\u55AF\u55B0\u55B2\u55B4\u55B6\u55B8\u55BA\u55BC\u55BF\u55C0\u55C1\u55C2\u55C3\u55C6\u55C7\u55C8\u55CA\u55CB\u55CE\u55CF\u55D0\u55D5\u55D7\u55D8\u55D9\u55DA\u55DB\u55DE\u55E0\u55E2\u55E7\u55E9\u55ED\u55EE\u55F0\u55F1\u55F4\u55F6\u55F8\u55F9\u55FA\u55FB\u55FC\u55FF\u5602\u5603\u5604\u5605\uFFFD".split("");
      for (j = 0; j != D[134].length; ++j)
        if (D[134][j].charCodeAt(0) !== 65533) {
          e[D[134][j]] = 34304 + j;
          d[34304 + j] = D[134][j];
        }
      D[135] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5606\u5607\u560A\u560B\u560D\u5610\u5611\u5612\u5613\u5614\u5615\u5616\u5617\u5619\u561A\u561C\u561D\u5620\u5621\u5622\u5625\u5626\u5628\u5629\u562A\u562B\u562E\u562F\u5630\u5633\u5635\u5637\u5638\u563A\u563C\u563D\u563E\u5640\u5641\u5642\u5643\u5644\u5645\u5646\u5647\u5648\u5649\u564A\u564B\u564F\u5650\u5651\u5652\u5653\u5655\u5656\u565A\u565B\u565D\u565E\u565F\u5660\u5661\uFFFD\u5663\u5665\u5666\u5667\u566D\u566E\u566F\u5670\u5672\u5673\u5674\u5675\u5677\u5678\u5679\u567A\u567D\u567E\u567F\u5680\u5681\u5682\u5683\u5684\u5687\u5688\u5689\u568A\u568B\u568C\u568D\u5690\u5691\u5692\u5694\u5695\u5696\u5697\u5698\u5699\u569A\u569B\u569C\u569D\u569E\u569F\u56A0\u56A1\u56A2\u56A4\u56A5\u56A6\u56A7\u56A8\u56A9\u56AA\u56AB\u56AC\u56AD\u56AE\u56B0\u56B1\u56B2\u56B3\u56B4\u56B5\u56B6\u56B8\u56B9\u56BA\u56BB\u56BD\u56BE\u56BF\u56C0\u56C1\u56C2\u56C3\u56C4\u56C5\u56C6\u56C7\u56C8\u56C9\u56CB\u56CC\u56CD\u56CE\u56CF\u56D0\u56D1\u56D2\u56D3\u56D5\u56D6\u56D8\u56D9\u56DC\u56E3\u56E5\u56E6\u56E7\u56E8\u56E9\u56EA\u56EC\u56EE\u56EF\u56F2\u56F3\u56F6\u56F7\u56F8\u56FB\u56FC\u5700\u5701\u5702\u5705\u5707\u570B\u570C\u570D\u570E\u570F\u5710\u5711\uFFFD".split("");
      for (j = 0; j != D[135].length; ++j)
        if (D[135][j].charCodeAt(0) !== 65533) {
          e[D[135][j]] = 34560 + j;
          d[34560 + j] = D[135][j];
        }
      D[136] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5712\u5713\u5714\u5715\u5716\u5717\u5718\u5719\u571A\u571B\u571D\u571E\u5720\u5721\u5722\u5724\u5725\u5726\u5727\u572B\u5731\u5732\u5734\u5735\u5736\u5737\u5738\u573C\u573D\u573F\u5741\u5743\u5744\u5745\u5746\u5748\u5749\u574B\u5752\u5753\u5754\u5755\u5756\u5758\u5759\u5762\u5763\u5765\u5767\u576C\u576E\u5770\u5771\u5772\u5774\u5775\u5778\u5779\u577A\u577D\u577E\u577F\u5780\uFFFD\u5781\u5787\u5788\u5789\u578A\u578D\u578E\u578F\u5790\u5791\u5794\u5795\u5796\u5797\u5798\u5799\u579A\u579C\u579D\u579E\u579F\u57A5\u57A8\u57AA\u57AC\u57AF\u57B0\u57B1\u57B3\u57B5\u57B6\u57B7\u57B9\u57BA\u57BB\u57BC\u57BD\u57BE\u57BF\u57C0\u57C1\u57C4\u57C5\u57C6\u57C7\u57C8\u57C9\u57CA\u57CC\u57CD\u57D0\u57D1\u57D3\u57D6\u57D7\u57DB\u57DC\u57DE\u57E1\u57E2\u57E3\u57E5\u57E6\u57E7\u57E8\u57E9\u57EA\u57EB\u57EC\u57EE\u57F0\u57F1\u57F2\u57F3\u57F5\u57F6\u57F7\u57FB\u57FC\u57FE\u57FF\u5801\u5803\u5804\u5805\u5808\u5809\u580A\u580C\u580E\u580F\u5810\u5812\u5813\u5814\u5816\u5817\u5818\u581A\u581B\u581C\u581D\u581F\u5822\u5823\u5825\u5826\u5827\u5828\u5829\u582B\u582C\u582D\u582E\u582F\u5831\u5832\u5833\u5834\u5836\u5837\u5838\u5839\u583A\u583B\u583C\u583D\uFFFD".split("");
      for (j = 0; j != D[136].length; ++j)
        if (D[136][j].charCodeAt(0) !== 65533) {
          e[D[136][j]] = 34816 + j;
          d[34816 + j] = D[136][j];
        }
      D[137] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u583E\u583F\u5840\u5841\u5842\u5843\u5845\u5846\u5847\u5848\u5849\u584A\u584B\u584E\u584F\u5850\u5852\u5853\u5855\u5856\u5857\u5859\u585A\u585B\u585C\u585D\u585F\u5860\u5861\u5862\u5863\u5864\u5866\u5867\u5868\u5869\u586A\u586D\u586E\u586F\u5870\u5871\u5872\u5873\u5874\u5875\u5876\u5877\u5878\u5879\u587A\u587B\u587C\u587D\u587F\u5882\u5884\u5886\u5887\u5888\u588A\u588B\u588C\uFFFD\u588D\u588E\u588F\u5890\u5891\u5894\u5895\u5896\u5897\u5898\u589B\u589C\u589D\u58A0\u58A1\u58A2\u58A3\u58A4\u58A5\u58A6\u58A7\u58AA\u58AB\u58AC\u58AD\u58AE\u58AF\u58B0\u58B1\u58B2\u58B3\u58B4\u58B5\u58B6\u58B7\u58B8\u58B9\u58BA\u58BB\u58BD\u58BE\u58BF\u58C0\u58C2\u58C3\u58C4\u58C6\u58C7\u58C8\u58C9\u58CA\u58CB\u58CC\u58CD\u58CE\u58CF\u58D0\u58D2\u58D3\u58D4\u58D6\u58D7\u58D8\u58D9\u58DA\u58DB\u58DC\u58DD\u58DE\u58DF\u58E0\u58E1\u58E2\u58E3\u58E5\u58E6\u58E7\u58E8\u58E9\u58EA\u58ED\u58EF\u58F1\u58F2\u58F4\u58F5\u58F7\u58F8\u58FA\u58FB\u58FC\u58FD\u58FE\u58FF\u5900\u5901\u5903\u5905\u5906\u5908\u5909\u590A\u590B\u590C\u590E\u5910\u5911\u5912\u5913\u5917\u5918\u591B\u591D\u591E\u5920\u5921\u5922\u5923\u5926\u5928\u592C\u5930\u5932\u5933\u5935\u5936\u593B\uFFFD".split("");
      for (j = 0; j != D[137].length; ++j)
        if (D[137][j].charCodeAt(0) !== 65533) {
          e[D[137][j]] = 35072 + j;
          d[35072 + j] = D[137][j];
        }
      D[138] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u593D\u593E\u593F\u5940\u5943\u5945\u5946\u594A\u594C\u594D\u5950\u5952\u5953\u5959\u595B\u595C\u595D\u595E\u595F\u5961\u5963\u5964\u5966\u5967\u5968\u5969\u596A\u596B\u596C\u596D\u596E\u596F\u5970\u5971\u5972\u5975\u5977\u597A\u597B\u597C\u597E\u597F\u5980\u5985\u5989\u598B\u598C\u598E\u598F\u5990\u5991\u5994\u5995\u5998\u599A\u599B\u599C\u599D\u599F\u59A0\u59A1\u59A2\u59A6\uFFFD\u59A7\u59AC\u59AD\u59B0\u59B1\u59B3\u59B4\u59B5\u59B6\u59B7\u59B8\u59BA\u59BC\u59BD\u59BF\u59C0\u59C1\u59C2\u59C3\u59C4\u59C5\u59C7\u59C8\u59C9\u59CC\u59CD\u59CE\u59CF\u59D5\u59D6\u59D9\u59DB\u59DE\u59DF\u59E0\u59E1\u59E2\u59E4\u59E6\u59E7\u59E9\u59EA\u59EB\u59ED\u59EE\u59EF\u59F0\u59F1\u59F2\u59F3\u59F4\u59F5\u59F6\u59F7\u59F8\u59FA\u59FC\u59FD\u59FE\u5A00\u5A02\u5A0A\u5A0B\u5A0D\u5A0E\u5A0F\u5A10\u5A12\u5A14\u5A15\u5A16\u5A17\u5A19\u5A1A\u5A1B\u5A1D\u5A1E\u5A21\u5A22\u5A24\u5A26\u5A27\u5A28\u5A2A\u5A2B\u5A2C\u5A2D\u5A2E\u5A2F\u5A30\u5A33\u5A35\u5A37\u5A38\u5A39\u5A3A\u5A3B\u5A3D\u5A3E\u5A3F\u5A41\u5A42\u5A43\u5A44\u5A45\u5A47\u5A48\u5A4B\u5A4C\u5A4D\u5A4E\u5A4F\u5A50\u5A51\u5A52\u5A53\u5A54\u5A56\u5A57\u5A58\u5A59\u5A5B\u5A5C\u5A5D\u5A5E\u5A5F\u5A60\uFFFD".split("");
      for (j = 0; j != D[138].length; ++j)
        if (D[138][j].charCodeAt(0) !== 65533) {
          e[D[138][j]] = 35328 + j;
          d[35328 + j] = D[138][j];
        }
      D[139] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A61\u5A63\u5A64\u5A65\u5A66\u5A68\u5A69\u5A6B\u5A6C\u5A6D\u5A6E\u5A6F\u5A70\u5A71\u5A72\u5A73\u5A78\u5A79\u5A7B\u5A7C\u5A7D\u5A7E\u5A80\u5A81\u5A82\u5A83\u5A84\u5A85\u5A86\u5A87\u5A88\u5A89\u5A8A\u5A8B\u5A8C\u5A8D\u5A8E\u5A8F\u5A90\u5A91\u5A93\u5A94\u5A95\u5A96\u5A97\u5A98\u5A99\u5A9C\u5A9D\u5A9E\u5A9F\u5AA0\u5AA1\u5AA2\u5AA3\u5AA4\u5AA5\u5AA6\u5AA7\u5AA8\u5AA9\u5AAB\u5AAC\uFFFD\u5AAD\u5AAE\u5AAF\u5AB0\u5AB1\u5AB4\u5AB6\u5AB7\u5AB9\u5ABA\u5ABB\u5ABC\u5ABD\u5ABF\u5AC0\u5AC3\u5AC4\u5AC5\u5AC6\u5AC7\u5AC8\u5ACA\u5ACB\u5ACD\u5ACE\u5ACF\u5AD0\u5AD1\u5AD3\u5AD5\u5AD7\u5AD9\u5ADA\u5ADB\u5ADD\u5ADE\u5ADF\u5AE2\u5AE4\u5AE5\u5AE7\u5AE8\u5AEA\u5AEC\u5AED\u5AEE\u5AEF\u5AF0\u5AF2\u5AF3\u5AF4\u5AF5\u5AF6\u5AF7\u5AF8\u5AF9\u5AFA\u5AFB\u5AFC\u5AFD\u5AFE\u5AFF\u5B00\u5B01\u5B02\u5B03\u5B04\u5B05\u5B06\u5B07\u5B08\u5B0A\u5B0B\u5B0C\u5B0D\u5B0E\u5B0F\u5B10\u5B11\u5B12\u5B13\u5B14\u5B15\u5B18\u5B19\u5B1A\u5B1B\u5B1C\u5B1D\u5B1E\u5B1F\u5B20\u5B21\u5B22\u5B23\u5B24\u5B25\u5B26\u5B27\u5B28\u5B29\u5B2A\u5B2B\u5B2C\u5B2D\u5B2E\u5B2F\u5B30\u5B31\u5B33\u5B35\u5B36\u5B38\u5B39\u5B3A\u5B3B\u5B3C\u5B3D\u5B3E\u5B3F\u5B41\u5B42\u5B43\u5B44\u5B45\u5B46\u5B47\uFFFD".split("");
      for (j = 0; j != D[139].length; ++j)
        if (D[139][j].charCodeAt(0) !== 65533) {
          e[D[139][j]] = 35584 + j;
          d[35584 + j] = D[139][j];
        }
      D[140] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B48\u5B49\u5B4A\u5B4B\u5B4C\u5B4D\u5B4E\u5B4F\u5B52\u5B56\u5B5E\u5B60\u5B61\u5B67\u5B68\u5B6B\u5B6D\u5B6E\u5B6F\u5B72\u5B74\u5B76\u5B77\u5B78\u5B79\u5B7B\u5B7C\u5B7E\u5B7F\u5B82\u5B86\u5B8A\u5B8D\u5B8E\u5B90\u5B91\u5B92\u5B94\u5B96\u5B9F\u5BA7\u5BA8\u5BA9\u5BAC\u5BAD\u5BAE\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBB\u5BBC\u5BC0\u5BC1\u5BC3\u5BC8\u5BC9\u5BCA\u5BCB\u5BCD\u5BCE\u5BCF\uFFFD\u5BD1\u5BD4\u5BD5\u5BD6\u5BD7\u5BD8\u5BD9\u5BDA\u5BDB\u5BDC\u5BE0\u5BE2\u5BE3\u5BE6\u5BE7\u5BE9\u5BEA\u5BEB\u5BEC\u5BED\u5BEF\u5BF1\u5BF2\u5BF3\u5BF4\u5BF5\u5BF6\u5BF7\u5BFD\u5BFE\u5C00\u5C02\u5C03\u5C05\u5C07\u5C08\u5C0B\u5C0C\u5C0D\u5C0E\u5C10\u5C12\u5C13\u5C17\u5C19\u5C1B\u5C1E\u5C1F\u5C20\u5C21\u5C23\u5C26\u5C28\u5C29\u5C2A\u5C2B\u5C2D\u5C2E\u5C2F\u5C30\u5C32\u5C33\u5C35\u5C36\u5C37\u5C43\u5C44\u5C46\u5C47\u5C4C\u5C4D\u5C52\u5C53\u5C54\u5C56\u5C57\u5C58\u5C5A\u5C5B\u5C5C\u5C5D\u5C5F\u5C62\u5C64\u5C67\u5C68\u5C69\u5C6A\u5C6B\u5C6C\u5C6D\u5C70\u5C72\u5C73\u5C74\u5C75\u5C76\u5C77\u5C78\u5C7B\u5C7C\u5C7D\u5C7E\u5C80\u5C83\u5C84\u5C85\u5C86\u5C87\u5C89\u5C8A\u5C8B\u5C8E\u5C8F\u5C92\u5C93\u5C95\u5C9D\u5C9E\u5C9F\u5CA0\u5CA1\u5CA4\u5CA5\u5CA6\u5CA7\u5CA8\uFFFD".split("");
      for (j = 0; j != D[140].length; ++j)
        if (D[140][j].charCodeAt(0) !== 65533) {
          e[D[140][j]] = 35840 + j;
          d[35840 + j] = D[140][j];
        }
      D[141] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5CAA\u5CAE\u5CAF\u5CB0\u5CB2\u5CB4\u5CB6\u5CB9\u5CBA\u5CBB\u5CBC\u5CBE\u5CC0\u5CC2\u5CC3\u5CC5\u5CC6\u5CC7\u5CC8\u5CC9\u5CCA\u5CCC\u5CCD\u5CCE\u5CCF\u5CD0\u5CD1\u5CD3\u5CD4\u5CD5\u5CD6\u5CD7\u5CD8\u5CDA\u5CDB\u5CDC\u5CDD\u5CDE\u5CDF\u5CE0\u5CE2\u5CE3\u5CE7\u5CE9\u5CEB\u5CEC\u5CEE\u5CEF\u5CF1\u5CF2\u5CF3\u5CF4\u5CF5\u5CF6\u5CF7\u5CF8\u5CF9\u5CFA\u5CFC\u5CFD\u5CFE\u5CFF\u5D00\uFFFD\u5D01\u5D04\u5D05\u5D08\u5D09\u5D0A\u5D0B\u5D0C\u5D0D\u5D0F\u5D10\u5D11\u5D12\u5D13\u5D15\u5D17\u5D18\u5D19\u5D1A\u5D1C\u5D1D\u5D1F\u5D20\u5D21\u5D22\u5D23\u5D25\u5D28\u5D2A\u5D2B\u5D2C\u5D2F\u5D30\u5D31\u5D32\u5D33\u5D35\u5D36\u5D37\u5D38\u5D39\u5D3A\u5D3B\u5D3C\u5D3F\u5D40\u5D41\u5D42\u5D43\u5D44\u5D45\u5D46\u5D48\u5D49\u5D4D\u5D4E\u5D4F\u5D50\u5D51\u5D52\u5D53\u5D54\u5D55\u5D56\u5D57\u5D59\u5D5A\u5D5C\u5D5E\u5D5F\u5D60\u5D61\u5D62\u5D63\u5D64\u5D65\u5D66\u5D67\u5D68\u5D6A\u5D6D\u5D6E\u5D70\u5D71\u5D72\u5D73\u5D75\u5D76\u5D77\u5D78\u5D79\u5D7A\u5D7B\u5D7C\u5D7D\u5D7E\u5D7F\u5D80\u5D81\u5D83\u5D84\u5D85\u5D86\u5D87\u5D88\u5D89\u5D8A\u5D8B\u5D8C\u5D8D\u5D8E\u5D8F\u5D90\u5D91\u5D92\u5D93\u5D94\u5D95\u5D96\u5D97\u5D98\u5D9A\u5D9B\u5D9C\u5D9E\u5D9F\u5DA0\uFFFD".split("");
      for (j = 0; j != D[141].length; ++j)
        if (D[141][j].charCodeAt(0) !== 65533) {
          e[D[141][j]] = 36096 + j;
          d[36096 + j] = D[141][j];
        }
      D[142] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5DA1\u5DA2\u5DA3\u5DA4\u5DA5\u5DA6\u5DA7\u5DA8\u5DA9\u5DAA\u5DAB\u5DAC\u5DAD\u5DAE\u5DAF\u5DB0\u5DB1\u5DB2\u5DB3\u5DB4\u5DB5\u5DB6\u5DB8\u5DB9\u5DBA\u5DBB\u5DBC\u5DBD\u5DBE\u5DBF\u5DC0\u5DC1\u5DC2\u5DC3\u5DC4\u5DC6\u5DC7\u5DC8\u5DC9\u5DCA\u5DCB\u5DCC\u5DCE\u5DCF\u5DD0\u5DD1\u5DD2\u5DD3\u5DD4\u5DD5\u5DD6\u5DD7\u5DD8\u5DD9\u5DDA\u5DDC\u5DDF\u5DE0\u5DE3\u5DE4\u5DEA\u5DEC\u5DED\uFFFD\u5DF0\u5DF5\u5DF6\u5DF8\u5DF9\u5DFA\u5DFB\u5DFC\u5DFF\u5E00\u5E04\u5E07\u5E09\u5E0A\u5E0B\u5E0D\u5E0E\u5E12\u5E13\u5E17\u5E1E\u5E1F\u5E20\u5E21\u5E22\u5E23\u5E24\u5E25\u5E28\u5E29\u5E2A\u5E2B\u5E2C\u5E2F\u5E30\u5E32\u5E33\u5E34\u5E35\u5E36\u5E39\u5E3A\u5E3E\u5E3F\u5E40\u5E41\u5E43\u5E46\u5E47\u5E48\u5E49\u5E4A\u5E4B\u5E4D\u5E4E\u5E4F\u5E50\u5E51\u5E52\u5E53\u5E56\u5E57\u5E58\u5E59\u5E5A\u5E5C\u5E5D\u5E5F\u5E60\u5E63\u5E64\u5E65\u5E66\u5E67\u5E68\u5E69\u5E6A\u5E6B\u5E6C\u5E6D\u5E6E\u5E6F\u5E70\u5E71\u5E75\u5E77\u5E79\u5E7E\u5E81\u5E82\u5E83\u5E85\u5E88\u5E89\u5E8C\u5E8D\u5E8E\u5E92\u5E98\u5E9B\u5E9D\u5EA1\u5EA2\u5EA3\u5EA4\u5EA8\u5EA9\u5EAA\u5EAB\u5EAC\u5EAE\u5EAF\u5EB0\u5EB1\u5EB2\u5EB4\u5EBA\u5EBB\u5EBC\u5EBD\u5EBF\u5EC0\u5EC1\u5EC2\u5EC3\u5EC4\u5EC5\uFFFD".split("");
      for (j = 0; j != D[142].length; ++j)
        if (D[142][j].charCodeAt(0) !== 65533) {
          e[D[142][j]] = 36352 + j;
          d[36352 + j] = D[142][j];
        }
      D[143] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5EC6\u5EC7\u5EC8\u5ECB\u5ECC\u5ECD\u5ECE\u5ECF\u5ED0\u5ED4\u5ED5\u5ED7\u5ED8\u5ED9\u5EDA\u5EDC\u5EDD\u5EDE\u5EDF\u5EE0\u5EE1\u5EE2\u5EE3\u5EE4\u5EE5\u5EE6\u5EE7\u5EE9\u5EEB\u5EEC\u5EED\u5EEE\u5EEF\u5EF0\u5EF1\u5EF2\u5EF3\u5EF5\u5EF8\u5EF9\u5EFB\u5EFC\u5EFD\u5F05\u5F06\u5F07\u5F09\u5F0C\u5F0D\u5F0E\u5F10\u5F12\u5F14\u5F16\u5F19\u5F1A\u5F1C\u5F1D\u5F1E\u5F21\u5F22\u5F23\u5F24\uFFFD\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F32\u5F33\u5F34\u5F35\u5F36\u5F37\u5F38\u5F3B\u5F3D\u5F3E\u5F3F\u5F41\u5F42\u5F43\u5F44\u5F45\u5F46\u5F47\u5F48\u5F49\u5F4A\u5F4B\u5F4C\u5F4D\u5F4E\u5F4F\u5F51\u5F54\u5F59\u5F5A\u5F5B\u5F5C\u5F5E\u5F5F\u5F60\u5F63\u5F65\u5F67\u5F68\u5F6B\u5F6E\u5F6F\u5F72\u5F74\u5F75\u5F76\u5F78\u5F7A\u5F7D\u5F7E\u5F7F\u5F83\u5F86\u5F8D\u5F8E\u5F8F\u5F91\u5F93\u5F94\u5F96\u5F9A\u5F9B\u5F9D\u5F9E\u5F9F\u5FA0\u5FA2\u5FA3\u5FA4\u5FA5\u5FA6\u5FA7\u5FA9\u5FAB\u5FAC\u5FAF\u5FB0\u5FB1\u5FB2\u5FB3\u5FB4\u5FB6\u5FB8\u5FB9\u5FBA\u5FBB\u5FBE\u5FBF\u5FC0\u5FC1\u5FC2\u5FC7\u5FC8\u5FCA\u5FCB\u5FCE\u5FD3\u5FD4\u5FD5\u5FDA\u5FDB\u5FDC\u5FDE\u5FDF\u5FE2\u5FE3\u5FE5\u5FE6\u5FE8\u5FE9\u5FEC\u5FEF\u5FF0\u5FF2\u5FF3\u5FF4\u5FF6\u5FF7\u5FF9\u5FFA\u5FFC\u6007\uFFFD".split("");
      for (j = 0; j != D[143].length; ++j)
        if (D[143][j].charCodeAt(0) !== 65533) {
          e[D[143][j]] = 36608 + j;
          d[36608 + j] = D[143][j];
        }
      D[144] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6008\u6009\u600B\u600C\u6010\u6011\u6013\u6017\u6018\u601A\u601E\u601F\u6022\u6023\u6024\u602C\u602D\u602E\u6030\u6031\u6032\u6033\u6034\u6036\u6037\u6038\u6039\u603A\u603D\u603E\u6040\u6044\u6045\u6046\u6047\u6048\u6049\u604A\u604C\u604E\u604F\u6051\u6053\u6054\u6056\u6057\u6058\u605B\u605C\u605E\u605F\u6060\u6061\u6065\u6066\u606E\u6071\u6072\u6074\u6075\u6077\u607E\u6080\uFFFD\u6081\u6082\u6085\u6086\u6087\u6088\u608A\u608B\u608E\u608F\u6090\u6091\u6093\u6095\u6097\u6098\u6099\u609C\u609E\u60A1\u60A2\u60A4\u60A5\u60A7\u60A9\u60AA\u60AE\u60B0\u60B3\u60B5\u60B6\u60B7\u60B9\u60BA\u60BD\u60BE\u60BF\u60C0\u60C1\u60C2\u60C3\u60C4\u60C7\u60C8\u60C9\u60CC\u60CD\u60CE\u60CF\u60D0\u60D2\u60D3\u60D4\u60D6\u60D7\u60D9\u60DB\u60DE\u60E1\u60E2\u60E3\u60E4\u60E5\u60EA\u60F1\u60F2\u60F5\u60F7\u60F8\u60FB\u60FC\u60FD\u60FE\u60FF\u6102\u6103\u6104\u6105\u6107\u610A\u610B\u610C\u6110\u6111\u6112\u6113\u6114\u6116\u6117\u6118\u6119\u611B\u611C\u611D\u611E\u6121\u6122\u6125\u6128\u6129\u612A\u612C\u612D\u612E\u612F\u6130\u6131\u6132\u6133\u6134\u6135\u6136\u6137\u6138\u6139\u613A\u613B\u613C\u613D\u613E\u6140\u6141\u6142\u6143\u6144\u6145\u6146\uFFFD".split("");
      for (j = 0; j != D[144].length; ++j)
        if (D[144][j].charCodeAt(0) !== 65533) {
          e[D[144][j]] = 36864 + j;
          d[36864 + j] = D[144][j];
        }
      D[145] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6147\u6149\u614B\u614D\u614F\u6150\u6152\u6153\u6154\u6156\u6157\u6158\u6159\u615A\u615B\u615C\u615E\u615F\u6160\u6161\u6163\u6164\u6165\u6166\u6169\u616A\u616B\u616C\u616D\u616E\u616F\u6171\u6172\u6173\u6174\u6176\u6178\u6179\u617A\u617B\u617C\u617D\u617E\u617F\u6180\u6181\u6182\u6183\u6184\u6185\u6186\u6187\u6188\u6189\u618A\u618C\u618D\u618F\u6190\u6191\u6192\u6193\u6195\uFFFD\u6196\u6197\u6198\u6199\u619A\u619B\u619C\u619E\u619F\u61A0\u61A1\u61A2\u61A3\u61A4\u61A5\u61A6\u61AA\u61AB\u61AD\u61AE\u61AF\u61B0\u61B1\u61B2\u61B3\u61B4\u61B5\u61B6\u61B8\u61B9\u61BA\u61BB\u61BC\u61BD\u61BF\u61C0\u61C1\u61C3\u61C4\u61C5\u61C6\u61C7\u61C9\u61CC\u61CD\u61CE\u61CF\u61D0\u61D3\u61D5\u61D6\u61D7\u61D8\u61D9\u61DA\u61DB\u61DC\u61DD\u61DE\u61DF\u61E0\u61E1\u61E2\u61E3\u61E4\u61E5\u61E7\u61E8\u61E9\u61EA\u61EB\u61EC\u61ED\u61EE\u61EF\u61F0\u61F1\u61F2\u61F3\u61F4\u61F6\u61F7\u61F8\u61F9\u61FA\u61FB\u61FC\u61FD\u61FE\u6200\u6201\u6202\u6203\u6204\u6205\u6207\u6209\u6213\u6214\u6219\u621C\u621D\u621E\u6220\u6223\u6226\u6227\u6228\u6229\u622B\u622D\u622F\u6230\u6231\u6232\u6235\u6236\u6238\u6239\u623A\u623B\u623C\u6242\u6244\u6245\u6246\u624A\uFFFD".split("");
      for (j = 0; j != D[145].length; ++j)
        if (D[145][j].charCodeAt(0) !== 65533) {
          e[D[145][j]] = 37120 + j;
          d[37120 + j] = D[145][j];
        }
      D[146] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u624F\u6250\u6255\u6256\u6257\u6259\u625A\u625C\u625D\u625E\u625F\u6260\u6261\u6262\u6264\u6265\u6268\u6271\u6272\u6274\u6275\u6277\u6278\u627A\u627B\u627D\u6281\u6282\u6283\u6285\u6286\u6287\u6288\u628B\u628C\u628D\u628E\u628F\u6290\u6294\u6299\u629C\u629D\u629E\u62A3\u62A6\u62A7\u62A9\u62AA\u62AD\u62AE\u62AF\u62B0\u62B2\u62B3\u62B4\u62B6\u62B7\u62B8\u62BA\u62BE\u62C0\u62C1\uFFFD\u62C3\u62CB\u62CF\u62D1\u62D5\u62DD\u62DE\u62E0\u62E1\u62E4\u62EA\u62EB\u62F0\u62F2\u62F5\u62F8\u62F9\u62FA\u62FB\u6300\u6303\u6304\u6305\u6306\u630A\u630B\u630C\u630D\u630F\u6310\u6312\u6313\u6314\u6315\u6317\u6318\u6319\u631C\u6326\u6327\u6329\u632C\u632D\u632E\u6330\u6331\u6333\u6334\u6335\u6336\u6337\u6338\u633B\u633C\u633E\u633F\u6340\u6341\u6344\u6347\u6348\u634A\u6351\u6352\u6353\u6354\u6356\u6357\u6358\u6359\u635A\u635B\u635C\u635D\u6360\u6364\u6365\u6366\u6368\u636A\u636B\u636C\u636F\u6370\u6372\u6373\u6374\u6375\u6378\u6379\u637C\u637D\u637E\u637F\u6381\u6383\u6384\u6385\u6386\u638B\u638D\u6391\u6393\u6394\u6395\u6397\u6399\u639A\u639B\u639C\u639D\u639E\u639F\u63A1\u63A4\u63A6\u63AB\u63AF\u63B1\u63B2\u63B5\u63B6\u63B9\u63BB\u63BD\u63BF\u63C0\uFFFD".split("");
      for (j = 0; j != D[146].length; ++j)
        if (D[146][j].charCodeAt(0) !== 65533) {
          e[D[146][j]] = 37376 + j;
          d[37376 + j] = D[146][j];
        }
      D[147] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u63C1\u63C2\u63C3\u63C5\u63C7\u63C8\u63CA\u63CB\u63CC\u63D1\u63D3\u63D4\u63D5\u63D7\u63D8\u63D9\u63DA\u63DB\u63DC\u63DD\u63DF\u63E2\u63E4\u63E5\u63E6\u63E7\u63E8\u63EB\u63EC\u63EE\u63EF\u63F0\u63F1\u63F3\u63F5\u63F7\u63F9\u63FA\u63FB\u63FC\u63FE\u6403\u6404\u6406\u6407\u6408\u6409\u640A\u640D\u640E\u6411\u6412\u6415\u6416\u6417\u6418\u6419\u641A\u641D\u641F\u6422\u6423\u6424\uFFFD\u6425\u6427\u6428\u6429\u642B\u642E\u642F\u6430\u6431\u6432\u6433\u6435\u6436\u6437\u6438\u6439\u643B\u643C\u643E\u6440\u6442\u6443\u6449\u644B\u644C\u644D\u644E\u644F\u6450\u6451\u6453\u6455\u6456\u6457\u6459\u645A\u645B\u645C\u645D\u645F\u6460\u6461\u6462\u6463\u6464\u6465\u6466\u6468\u646A\u646B\u646C\u646E\u646F\u6470\u6471\u6472\u6473\u6474\u6475\u6476\u6477\u647B\u647C\u647D\u647E\u647F\u6480\u6481\u6483\u6486\u6488\u6489\u648A\u648B\u648C\u648D\u648E\u648F\u6490\u6493\u6494\u6497\u6498\u649A\u649B\u649C\u649D\u649F\u64A0\u64A1\u64A2\u64A3\u64A5\u64A6\u64A7\u64A8\u64AA\u64AB\u64AF\u64B1\u64B2\u64B3\u64B4\u64B6\u64B9\u64BB\u64BD\u64BE\u64BF\u64C1\u64C3\u64C4\u64C6\u64C7\u64C8\u64C9\u64CA\u64CB\u64CC\u64CF\u64D1\u64D3\u64D4\u64D5\u64D6\u64D9\u64DA\uFFFD".split("");
      for (j = 0; j != D[147].length; ++j)
        if (D[147][j].charCodeAt(0) !== 65533) {
          e[D[147][j]] = 37632 + j;
          d[37632 + j] = D[147][j];
        }
      D[148] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u64DB\u64DC\u64DD\u64DF\u64E0\u64E1\u64E3\u64E5\u64E7\u64E8\u64E9\u64EA\u64EB\u64EC\u64ED\u64EE\u64EF\u64F0\u64F1\u64F2\u64F3\u64F4\u64F5\u64F6\u64F7\u64F8\u64F9\u64FA\u64FB\u64FC\u64FD\u64FE\u64FF\u6501\u6502\u6503\u6504\u6505\u6506\u6507\u6508\u650A\u650B\u650C\u650D\u650E\u650F\u6510\u6511\u6513\u6514\u6515\u6516\u6517\u6519\u651A\u651B\u651C\u651D\u651E\u651F\u6520\u6521\uFFFD\u6522\u6523\u6524\u6526\u6527\u6528\u6529\u652A\u652C\u652D\u6530\u6531\u6532\u6533\u6537\u653A\u653C\u653D\u6540\u6541\u6542\u6543\u6544\u6546\u6547\u654A\u654B\u654D\u654E\u6550\u6552\u6553\u6554\u6557\u6558\u655A\u655C\u655F\u6560\u6561\u6564\u6565\u6567\u6568\u6569\u656A\u656D\u656E\u656F\u6571\u6573\u6575\u6576\u6578\u6579\u657A\u657B\u657C\u657D\u657E\u657F\u6580\u6581\u6582\u6583\u6584\u6585\u6586\u6588\u6589\u658A\u658D\u658E\u658F\u6592\u6594\u6595\u6596\u6598\u659A\u659D\u659E\u65A0\u65A2\u65A3\u65A6\u65A8\u65AA\u65AC\u65AE\u65B1\u65B2\u65B3\u65B4\u65B5\u65B6\u65B7\u65B8\u65BA\u65BB\u65BE\u65BF\u65C0\u65C2\u65C7\u65C8\u65C9\u65CA\u65CD\u65D0\u65D1\u65D3\u65D4\u65D5\u65D8\u65D9\u65DA\u65DB\u65DC\u65DD\u65DE\u65DF\u65E1\u65E3\u65E4\u65EA\u65EB\uFFFD".split("");
      for (j = 0; j != D[148].length; ++j)
        if (D[148][j].charCodeAt(0) !== 65533) {
          e[D[148][j]] = 37888 + j;
          d[37888 + j] = D[148][j];
        }
      D[149] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u65F2\u65F3\u65F4\u65F5\u65F8\u65F9\u65FB\u65FC\u65FD\u65FE\u65FF\u6601\u6604\u6605\u6607\u6608\u6609\u660B\u660D\u6610\u6611\u6612\u6616\u6617\u6618\u661A\u661B\u661C\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6632\u6633\u6637\u6638\u6639\u663A\u663B\u663D\u663F\u6640\u6642\u6644\u6645\u6646\u6647\u6648\u6649\u664A\u664D\u664E\u6650\u6651\u6658\uFFFD\u6659\u665B\u665C\u665D\u665E\u6660\u6662\u6663\u6665\u6667\u6669\u666A\u666B\u666C\u666D\u6671\u6672\u6673\u6675\u6678\u6679\u667B\u667C\u667D\u667F\u6680\u6681\u6683\u6685\u6686\u6688\u6689\u668A\u668B\u668D\u668E\u668F\u6690\u6692\u6693\u6694\u6695\u6698\u6699\u669A\u669B\u669C\u669E\u669F\u66A0\u66A1\u66A2\u66A3\u66A4\u66A5\u66A6\u66A9\u66AA\u66AB\u66AC\u66AD\u66AF\u66B0\u66B1\u66B2\u66B3\u66B5\u66B6\u66B7\u66B8\u66BA\u66BB\u66BC\u66BD\u66BF\u66C0\u66C1\u66C2\u66C3\u66C4\u66C5\u66C6\u66C7\u66C8\u66C9\u66CA\u66CB\u66CC\u66CD\u66CE\u66CF\u66D0\u66D1\u66D2\u66D3\u66D4\u66D5\u66D6\u66D7\u66D8\u66DA\u66DE\u66DF\u66E0\u66E1\u66E2\u66E3\u66E4\u66E5\u66E7\u66E8\u66EA\u66EB\u66EC\u66ED\u66EE\u66EF\u66F1\u66F5\u66F6\u66F8\u66FA\u66FB\u66FD\u6701\u6702\u6703\uFFFD".split("");
      for (j = 0; j != D[149].length; ++j)
        if (D[149][j].charCodeAt(0) !== 65533) {
          e[D[149][j]] = 38144 + j;
          d[38144 + j] = D[149][j];
        }
      D[150] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6704\u6705\u6706\u6707\u670C\u670E\u670F\u6711\u6712\u6713\u6716\u6718\u6719\u671A\u671C\u671E\u6720\u6721\u6722\u6723\u6724\u6725\u6727\u6729\u672E\u6730\u6732\u6733\u6736\u6737\u6738\u6739\u673B\u673C\u673E\u673F\u6741\u6744\u6745\u6747\u674A\u674B\u674D\u6752\u6754\u6755\u6757\u6758\u6759\u675A\u675B\u675D\u6762\u6763\u6764\u6766\u6767\u676B\u676C\u676E\u6771\u6774\u6776\uFFFD\u6778\u6779\u677A\u677B\u677D\u6780\u6782\u6783\u6785\u6786\u6788\u678A\u678C\u678D\u678E\u678F\u6791\u6792\u6793\u6794\u6796\u6799\u679B\u679F\u67A0\u67A1\u67A4\u67A6\u67A9\u67AC\u67AE\u67B1\u67B2\u67B4\u67B9\u67BA\u67BB\u67BC\u67BD\u67BE\u67BF\u67C0\u67C2\u67C5\u67C6\u67C7\u67C8\u67C9\u67CA\u67CB\u67CC\u67CD\u67CE\u67D5\u67D6\u67D7\u67DB\u67DF\u67E1\u67E3\u67E4\u67E6\u67E7\u67E8\u67EA\u67EB\u67ED\u67EE\u67F2\u67F5\u67F6\u67F7\u67F8\u67F9\u67FA\u67FB\u67FC\u67FE\u6801\u6802\u6803\u6804\u6806\u680D\u6810\u6812\u6814\u6815\u6818\u6819\u681A\u681B\u681C\u681E\u681F\u6820\u6822\u6823\u6824\u6825\u6826\u6827\u6828\u682B\u682C\u682D\u682E\u682F\u6830\u6831\u6834\u6835\u6836\u683A\u683B\u683F\u6847\u684B\u684D\u684F\u6852\u6856\u6857\u6858\u6859\u685A\u685B\uFFFD".split("");
      for (j = 0; j != D[150].length; ++j)
        if (D[150][j].charCodeAt(0) !== 65533) {
          e[D[150][j]] = 38400 + j;
          d[38400 + j] = D[150][j];
        }
      D[151] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u685C\u685D\u685E\u685F\u686A\u686C\u686D\u686E\u686F\u6870\u6871\u6872\u6873\u6875\u6878\u6879\u687A\u687B\u687C\u687D\u687E\u687F\u6880\u6882\u6884\u6887\u6888\u6889\u688A\u688B\u688C\u688D\u688E\u6890\u6891\u6892\u6894\u6895\u6896\u6898\u6899\u689A\u689B\u689C\u689D\u689E\u689F\u68A0\u68A1\u68A3\u68A4\u68A5\u68A9\u68AA\u68AB\u68AC\u68AE\u68B1\u68B2\u68B4\u68B6\u68B7\u68B8\uFFFD\u68B9\u68BA\u68BB\u68BC\u68BD\u68BE\u68BF\u68C1\u68C3\u68C4\u68C5\u68C6\u68C7\u68C8\u68CA\u68CC\u68CE\u68CF\u68D0\u68D1\u68D3\u68D4\u68D6\u68D7\u68D9\u68DB\u68DC\u68DD\u68DE\u68DF\u68E1\u68E2\u68E4\u68E5\u68E6\u68E7\u68E8\u68E9\u68EA\u68EB\u68EC\u68ED\u68EF\u68F2\u68F3\u68F4\u68F6\u68F7\u68F8\u68FB\u68FD\u68FE\u68FF\u6900\u6902\u6903\u6904\u6906\u6907\u6908\u6909\u690A\u690C\u690F\u6911\u6913\u6914\u6915\u6916\u6917\u6918\u6919\u691A\u691B\u691C\u691D\u691E\u6921\u6922\u6923\u6925\u6926\u6927\u6928\u6929\u692A\u692B\u692C\u692E\u692F\u6931\u6932\u6933\u6935\u6936\u6937\u6938\u693A\u693B\u693C\u693E\u6940\u6941\u6943\u6944\u6945\u6946\u6947\u6948\u6949\u694A\u694B\u694C\u694D\u694E\u694F\u6950\u6951\u6952\u6953\u6955\u6956\u6958\u6959\u695B\u695C\u695F\uFFFD".split("");
      for (j = 0; j != D[151].length; ++j)
        if (D[151][j].charCodeAt(0) !== 65533) {
          e[D[151][j]] = 38656 + j;
          d[38656 + j] = D[151][j];
        }
      D[152] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6961\u6962\u6964\u6965\u6967\u6968\u6969\u696A\u696C\u696D\u696F\u6970\u6972\u6973\u6974\u6975\u6976\u697A\u697B\u697D\u697E\u697F\u6981\u6983\u6985\u698A\u698B\u698C\u698E\u698F\u6990\u6991\u6992\u6993\u6996\u6997\u6999\u699A\u699D\u699E\u699F\u69A0\u69A1\u69A2\u69A3\u69A4\u69A5\u69A6\u69A9\u69AA\u69AC\u69AE\u69AF\u69B0\u69B2\u69B3\u69B5\u69B6\u69B8\u69B9\u69BA\u69BC\u69BD\uFFFD\u69BE\u69BF\u69C0\u69C2\u69C3\u69C4\u69C5\u69C6\u69C7\u69C8\u69C9\u69CB\u69CD\u69CF\u69D1\u69D2\u69D3\u69D5\u69D6\u69D7\u69D8\u69D9\u69DA\u69DC\u69DD\u69DE\u69E1\u69E2\u69E3\u69E4\u69E5\u69E6\u69E7\u69E8\u69E9\u69EA\u69EB\u69EC\u69EE\u69EF\u69F0\u69F1\u69F3\u69F4\u69F5\u69F6\u69F7\u69F8\u69F9\u69FA\u69FB\u69FC\u69FE\u6A00\u6A01\u6A02\u6A03\u6A04\u6A05\u6A06\u6A07\u6A08\u6A09\u6A0B\u6A0C\u6A0D\u6A0E\u6A0F\u6A10\u6A11\u6A12\u6A13\u6A14\u6A15\u6A16\u6A19\u6A1A\u6A1B\u6A1C\u6A1D\u6A1E\u6A20\u6A22\u6A23\u6A24\u6A25\u6A26\u6A27\u6A29\u6A2B\u6A2C\u6A2D\u6A2E\u6A30\u6A32\u6A33\u6A34\u6A36\u6A37\u6A38\u6A39\u6A3A\u6A3B\u6A3C\u6A3F\u6A40\u6A41\u6A42\u6A43\u6A45\u6A46\u6A48\u6A49\u6A4A\u6A4B\u6A4C\u6A4D\u6A4E\u6A4F\u6A51\u6A52\u6A53\u6A54\u6A55\u6A56\u6A57\u6A5A\uFFFD".split("");
      for (j = 0; j != D[152].length; ++j)
        if (D[152][j].charCodeAt(0) !== 65533) {
          e[D[152][j]] = 38912 + j;
          d[38912 + j] = D[152][j];
        }
      D[153] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A5C\u6A5D\u6A5E\u6A5F\u6A60\u6A62\u6A63\u6A64\u6A66\u6A67\u6A68\u6A69\u6A6A\u6A6B\u6A6C\u6A6D\u6A6E\u6A6F\u6A70\u6A72\u6A73\u6A74\u6A75\u6A76\u6A77\u6A78\u6A7A\u6A7B\u6A7D\u6A7E\u6A7F\u6A81\u6A82\u6A83\u6A85\u6A86\u6A87\u6A88\u6A89\u6A8A\u6A8B\u6A8C\u6A8D\u6A8F\u6A92\u6A93\u6A94\u6A95\u6A96\u6A98\u6A99\u6A9A\u6A9B\u6A9C\u6A9D\u6A9E\u6A9F\u6AA1\u6AA2\u6AA3\u6AA4\u6AA5\u6AA6\uFFFD\u6AA7\u6AA8\u6AAA\u6AAD\u6AAE\u6AAF\u6AB0\u6AB1\u6AB2\u6AB3\u6AB4\u6AB5\u6AB6\u6AB7\u6AB8\u6AB9\u6ABA\u6ABB\u6ABC\u6ABD\u6ABE\u6ABF\u6AC0\u6AC1\u6AC2\u6AC3\u6AC4\u6AC5\u6AC6\u6AC7\u6AC8\u6AC9\u6ACA\u6ACB\u6ACC\u6ACD\u6ACE\u6ACF\u6AD0\u6AD1\u6AD2\u6AD3\u6AD4\u6AD5\u6AD6\u6AD7\u6AD8\u6AD9\u6ADA\u6ADB\u6ADC\u6ADD\u6ADE\u6ADF\u6AE0\u6AE1\u6AE2\u6AE3\u6AE4\u6AE5\u6AE6\u6AE7\u6AE8\u6AE9\u6AEA\u6AEB\u6AEC\u6AED\u6AEE\u6AEF\u6AF0\u6AF1\u6AF2\u6AF3\u6AF4\u6AF5\u6AF6\u6AF7\u6AF8\u6AF9\u6AFA\u6AFB\u6AFC\u6AFD\u6AFE\u6AFF\u6B00\u6B01\u6B02\u6B03\u6B04\u6B05\u6B06\u6B07\u6B08\u6B09\u6B0A\u6B0B\u6B0C\u6B0D\u6B0E\u6B0F\u6B10\u6B11\u6B12\u6B13\u6B14\u6B15\u6B16\u6B17\u6B18\u6B19\u6B1A\u6B1B\u6B1C\u6B1D\u6B1E\u6B1F\u6B25\u6B26\u6B28\u6B29\u6B2A\u6B2B\u6B2C\u6B2D\u6B2E\uFFFD".split("");
      for (j = 0; j != D[153].length; ++j)
        if (D[153][j].charCodeAt(0) !== 65533) {
          e[D[153][j]] = 39168 + j;
          d[39168 + j] = D[153][j];
        }
      D[154] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6B2F\u6B30\u6B31\u6B33\u6B34\u6B35\u6B36\u6B38\u6B3B\u6B3C\u6B3D\u6B3F\u6B40\u6B41\u6B42\u6B44\u6B45\u6B48\u6B4A\u6B4B\u6B4D\u6B4E\u6B4F\u6B50\u6B51\u6B52\u6B53\u6B54\u6B55\u6B56\u6B57\u6B58\u6B5A\u6B5B\u6B5C\u6B5D\u6B5E\u6B5F\u6B60\u6B61\u6B68\u6B69\u6B6B\u6B6C\u6B6D\u6B6E\u6B6F\u6B70\u6B71\u6B72\u6B73\u6B74\u6B75\u6B76\u6B77\u6B78\u6B7A\u6B7D\u6B7E\u6B7F\u6B80\u6B85\u6B88\uFFFD\u6B8C\u6B8E\u6B8F\u6B90\u6B91\u6B94\u6B95\u6B97\u6B98\u6B99\u6B9C\u6B9D\u6B9E\u6B9F\u6BA0\u6BA2\u6BA3\u6BA4\u6BA5\u6BA6\u6BA7\u6BA8\u6BA9\u6BAB\u6BAC\u6BAD\u6BAE\u6BAF\u6BB0\u6BB1\u6BB2\u6BB6\u6BB8\u6BB9\u6BBA\u6BBB\u6BBC\u6BBD\u6BBE\u6BC0\u6BC3\u6BC4\u6BC6\u6BC7\u6BC8\u6BC9\u6BCA\u6BCC\u6BCE\u6BD0\u6BD1\u6BD8\u6BDA\u6BDC\u6BDD\u6BDE\u6BDF\u6BE0\u6BE2\u6BE3\u6BE4\u6BE5\u6BE6\u6BE7\u6BE8\u6BE9\u6BEC\u6BED\u6BEE\u6BF0\u6BF1\u6BF2\u6BF4\u6BF6\u6BF7\u6BF8\u6BFA\u6BFB\u6BFC\u6BFE\u6BFF\u6C00\u6C01\u6C02\u6C03\u6C04\u6C08\u6C09\u6C0A\u6C0B\u6C0C\u6C0E\u6C12\u6C17\u6C1C\u6C1D\u6C1E\u6C20\u6C23\u6C25\u6C2B\u6C2C\u6C2D\u6C31\u6C33\u6C36\u6C37\u6C39\u6C3A\u6C3B\u6C3C\u6C3E\u6C3F\u6C43\u6C44\u6C45\u6C48\u6C4B\u6C4C\u6C4D\u6C4E\u6C4F\u6C51\u6C52\u6C53\u6C56\u6C58\uFFFD".split("");
      for (j = 0; j != D[154].length; ++j)
        if (D[154][j].charCodeAt(0) !== 65533) {
          e[D[154][j]] = 39424 + j;
          d[39424 + j] = D[154][j];
        }
      D[155] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C59\u6C5A\u6C62\u6C63\u6C65\u6C66\u6C67\u6C6B\u6C6C\u6C6D\u6C6E\u6C6F\u6C71\u6C73\u6C75\u6C77\u6C78\u6C7A\u6C7B\u6C7C\u6C7F\u6C80\u6C84\u6C87\u6C8A\u6C8B\u6C8D\u6C8E\u6C91\u6C92\u6C95\u6C96\u6C97\u6C98\u6C9A\u6C9C\u6C9D\u6C9E\u6CA0\u6CA2\u6CA8\u6CAC\u6CAF\u6CB0\u6CB4\u6CB5\u6CB6\u6CB7\u6CBA\u6CC0\u6CC1\u6CC2\u6CC3\u6CC6\u6CC7\u6CC8\u6CCB\u6CCD\u6CCE\u6CCF\u6CD1\u6CD2\u6CD8\uFFFD\u6CD9\u6CDA\u6CDC\u6CDD\u6CDF\u6CE4\u6CE6\u6CE7\u6CE9\u6CEC\u6CED\u6CF2\u6CF4\u6CF9\u6CFF\u6D00\u6D02\u6D03\u6D05\u6D06\u6D08\u6D09\u6D0A\u6D0D\u6D0F\u6D10\u6D11\u6D13\u6D14\u6D15\u6D16\u6D18\u6D1C\u6D1D\u6D1F\u6D20\u6D21\u6D22\u6D23\u6D24\u6D26\u6D28\u6D29\u6D2C\u6D2D\u6D2F\u6D30\u6D34\u6D36\u6D37\u6D38\u6D3A\u6D3F\u6D40\u6D42\u6D44\u6D49\u6D4C\u6D50\u6D55\u6D56\u6D57\u6D58\u6D5B\u6D5D\u6D5F\u6D61\u6D62\u6D64\u6D65\u6D67\u6D68\u6D6B\u6D6C\u6D6D\u6D70\u6D71\u6D72\u6D73\u6D75\u6D76\u6D79\u6D7A\u6D7B\u6D7D\u6D7E\u6D7F\u6D80\u6D81\u6D83\u6D84\u6D86\u6D87\u6D8A\u6D8B\u6D8D\u6D8F\u6D90\u6D92\u6D96\u6D97\u6D98\u6D99\u6D9A\u6D9C\u6DA2\u6DA5\u6DAC\u6DAD\u6DB0\u6DB1\u6DB3\u6DB4\u6DB6\u6DB7\u6DB9\u6DBA\u6DBB\u6DBC\u6DBD\u6DBE\u6DC1\u6DC2\u6DC3\u6DC8\u6DC9\u6DCA\uFFFD".split("");
      for (j = 0; j != D[155].length; ++j)
        if (D[155][j].charCodeAt(0) !== 65533) {
          e[D[155][j]] = 39680 + j;
          d[39680 + j] = D[155][j];
        }
      D[156] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6DCD\u6DCE\u6DCF\u6DD0\u6DD2\u6DD3\u6DD4\u6DD5\u6DD7\u6DDA\u6DDB\u6DDC\u6DDF\u6DE2\u6DE3\u6DE5\u6DE7\u6DE8\u6DE9\u6DEA\u6DED\u6DEF\u6DF0\u6DF2\u6DF4\u6DF5\u6DF6\u6DF8\u6DFA\u6DFD\u6DFE\u6DFF\u6E00\u6E01\u6E02\u6E03\u6E04\u6E06\u6E07\u6E08\u6E09\u6E0B\u6E0F\u6E12\u6E13\u6E15\u6E18\u6E19\u6E1B\u6E1C\u6E1E\u6E1F\u6E22\u6E26\u6E27\u6E28\u6E2A\u6E2C\u6E2E\u6E30\u6E31\u6E33\u6E35\uFFFD\u6E36\u6E37\u6E39\u6E3B\u6E3C\u6E3D\u6E3E\u6E3F\u6E40\u6E41\u6E42\u6E45\u6E46\u6E47\u6E48\u6E49\u6E4A\u6E4B\u6E4C\u6E4F\u6E50\u6E51\u6E52\u6E55\u6E57\u6E59\u6E5A\u6E5C\u6E5D\u6E5E\u6E60\u6E61\u6E62\u6E63\u6E64\u6E65\u6E66\u6E67\u6E68\u6E69\u6E6A\u6E6C\u6E6D\u6E6F\u6E70\u6E71\u6E72\u6E73\u6E74\u6E75\u6E76\u6E77\u6E78\u6E79\u6E7A\u6E7B\u6E7C\u6E7D\u6E80\u6E81\u6E82\u6E84\u6E87\u6E88\u6E8A\u6E8B\u6E8C\u6E8D\u6E8E\u6E91\u6E92\u6E93\u6E94\u6E95\u6E96\u6E97\u6E99\u6E9A\u6E9B\u6E9D\u6E9E\u6EA0\u6EA1\u6EA3\u6EA4\u6EA6\u6EA8\u6EA9\u6EAB\u6EAC\u6EAD\u6EAE\u6EB0\u6EB3\u6EB5\u6EB8\u6EB9\u6EBC\u6EBE\u6EBF\u6EC0\u6EC3\u6EC4\u6EC5\u6EC6\u6EC8\u6EC9\u6ECA\u6ECC\u6ECD\u6ECE\u6ED0\u6ED2\u6ED6\u6ED8\u6ED9\u6EDB\u6EDC\u6EDD\u6EE3\u6EE7\u6EEA\u6EEB\u6EEC\u6EED\u6EEE\u6EEF\uFFFD".split("");
      for (j = 0; j != D[156].length; ++j)
        if (D[156][j].charCodeAt(0) !== 65533) {
          e[D[156][j]] = 39936 + j;
          d[39936 + j] = D[156][j];
        }
      D[157] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6EF0\u6EF1\u6EF2\u6EF3\u6EF5\u6EF6\u6EF7\u6EF8\u6EFA\u6EFB\u6EFC\u6EFD\u6EFE\u6EFF\u6F00\u6F01\u6F03\u6F04\u6F05\u6F07\u6F08\u6F0A\u6F0B\u6F0C\u6F0D\u6F0E\u6F10\u6F11\u6F12\u6F16\u6F17\u6F18\u6F19\u6F1A\u6F1B\u6F1C\u6F1D\u6F1E\u6F1F\u6F21\u6F22\u6F23\u6F25\u6F26\u6F27\u6F28\u6F2C\u6F2E\u6F30\u6F32\u6F34\u6F35\u6F37\u6F38\u6F39\u6F3A\u6F3B\u6F3C\u6F3D\u6F3F\u6F40\u6F41\u6F42\uFFFD\u6F43\u6F44\u6F45\u6F48\u6F49\u6F4A\u6F4C\u6F4E\u6F4F\u6F50\u6F51\u6F52\u6F53\u6F54\u6F55\u6F56\u6F57\u6F59\u6F5A\u6F5B\u6F5D\u6F5F\u6F60\u6F61\u6F63\u6F64\u6F65\u6F67\u6F68\u6F69\u6F6A\u6F6B\u6F6C\u6F6F\u6F70\u6F71\u6F73\u6F75\u6F76\u6F77\u6F79\u6F7B\u6F7D\u6F7E\u6F7F\u6F80\u6F81\u6F82\u6F83\u6F85\u6F86\u6F87\u6F8A\u6F8B\u6F8F\u6F90\u6F91\u6F92\u6F93\u6F94\u6F95\u6F96\u6F97\u6F98\u6F99\u6F9A\u6F9B\u6F9D\u6F9E\u6F9F\u6FA0\u6FA2\u6FA3\u6FA4\u6FA5\u6FA6\u6FA8\u6FA9\u6FAA\u6FAB\u6FAC\u6FAD\u6FAE\u6FAF\u6FB0\u6FB1\u6FB2\u6FB4\u6FB5\u6FB7\u6FB8\u6FBA\u6FBB\u6FBC\u6FBD\u6FBE\u6FBF\u6FC1\u6FC3\u6FC4\u6FC5\u6FC6\u6FC7\u6FC8\u6FCA\u6FCB\u6FCC\u6FCD\u6FCE\u6FCF\u6FD0\u6FD3\u6FD4\u6FD5\u6FD6\u6FD7\u6FD8\u6FD9\u6FDA\u6FDB\u6FDC\u6FDD\u6FDF\u6FE2\u6FE3\u6FE4\u6FE5\uFFFD".split("");
      for (j = 0; j != D[157].length; ++j)
        if (D[157][j].charCodeAt(0) !== 65533) {
          e[D[157][j]] = 40192 + j;
          d[40192 + j] = D[157][j];
        }
      D[158] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FE6\u6FE7\u6FE8\u6FE9\u6FEA\u6FEB\u6FEC\u6FED\u6FF0\u6FF1\u6FF2\u6FF3\u6FF4\u6FF5\u6FF6\u6FF7\u6FF8\u6FF9\u6FFA\u6FFB\u6FFC\u6FFD\u6FFE\u6FFF\u7000\u7001\u7002\u7003\u7004\u7005\u7006\u7007\u7008\u7009\u700A\u700B\u700C\u700D\u700E\u700F\u7010\u7012\u7013\u7014\u7015\u7016\u7017\u7018\u7019\u701C\u701D\u701E\u701F\u7020\u7021\u7022\u7024\u7025\u7026\u7027\u7028\u7029\u702A\uFFFD\u702B\u702C\u702D\u702E\u702F\u7030\u7031\u7032\u7033\u7034\u7036\u7037\u7038\u703A\u703B\u703C\u703D\u703E\u703F\u7040\u7041\u7042\u7043\u7044\u7045\u7046\u7047\u7048\u7049\u704A\u704B\u704D\u704E\u7050\u7051\u7052\u7053\u7054\u7055\u7056\u7057\u7058\u7059\u705A\u705B\u705C\u705D\u705F\u7060\u7061\u7062\u7063\u7064\u7065\u7066\u7067\u7068\u7069\u706A\u706E\u7071\u7072\u7073\u7074\u7077\u7079\u707A\u707B\u707D\u7081\u7082\u7083\u7084\u7086\u7087\u7088\u708B\u708C\u708D\u708F\u7090\u7091\u7093\u7097\u7098\u709A\u709B\u709E\u709F\u70A0\u70A1\u70A2\u70A3\u70A4\u70A5\u70A6\u70A7\u70A8\u70A9\u70AA\u70B0\u70B2\u70B4\u70B5\u70B6\u70BA\u70BE\u70BF\u70C4\u70C5\u70C6\u70C7\u70C9\u70CB\u70CC\u70CD\u70CE\u70CF\u70D0\u70D1\u70D2\u70D3\u70D4\u70D5\u70D6\u70D7\u70DA\uFFFD".split("");
      for (j = 0; j != D[158].length; ++j)
        if (D[158][j].charCodeAt(0) !== 65533) {
          e[D[158][j]] = 40448 + j;
          d[40448 + j] = D[158][j];
        }
      D[159] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u70DC\u70DD\u70DE\u70E0\u70E1\u70E2\u70E3\u70E5\u70EA\u70EE\u70F0\u70F1\u70F2\u70F3\u70F4\u70F5\u70F6\u70F8\u70FA\u70FB\u70FC\u70FE\u70FF\u7100\u7101\u7102\u7103\u7104\u7105\u7106\u7107\u7108\u710B\u710C\u710D\u710E\u710F\u7111\u7112\u7114\u7117\u711B\u711C\u711D\u711E\u711F\u7120\u7121\u7122\u7123\u7124\u7125\u7127\u7128\u7129\u712A\u712B\u712C\u712D\u712E\u7132\u7133\u7134\uFFFD\u7135\u7137\u7138\u7139\u713A\u713B\u713C\u713D\u713E\u713F\u7140\u7141\u7142\u7143\u7144\u7146\u7147\u7148\u7149\u714B\u714D\u714F\u7150\u7151\u7152\u7153\u7154\u7155\u7156\u7157\u7158\u7159\u715A\u715B\u715D\u715F\u7160\u7161\u7162\u7163\u7165\u7169\u716A\u716B\u716C\u716D\u716F\u7170\u7171\u7174\u7175\u7176\u7177\u7179\u717B\u717C\u717E\u717F\u7180\u7181\u7182\u7183\u7185\u7186\u7187\u7188\u7189\u718B\u718C\u718D\u718E\u7190\u7191\u7192\u7193\u7195\u7196\u7197\u719A\u719B\u719C\u719D\u719E\u71A1\u71A2\u71A3\u71A4\u71A5\u71A6\u71A7\u71A9\u71AA\u71AB\u71AD\u71AE\u71AF\u71B0\u71B1\u71B2\u71B4\u71B6\u71B7\u71B8\u71BA\u71BB\u71BC\u71BD\u71BE\u71BF\u71C0\u71C1\u71C2\u71C4\u71C5\u71C6\u71C7\u71C8\u71C9\u71CA\u71CB\u71CC\u71CD\u71CF\u71D0\u71D1\u71D2\u71D3\uFFFD".split("");
      for (j = 0; j != D[159].length; ++j)
        if (D[159][j].charCodeAt(0) !== 65533) {
          e[D[159][j]] = 40704 + j;
          d[40704 + j] = D[159][j];
        }
      D[160] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u71D6\u71D7\u71D8\u71D9\u71DA\u71DB\u71DC\u71DD\u71DE\u71DF\u71E1\u71E2\u71E3\u71E4\u71E6\u71E8\u71E9\u71EA\u71EB\u71EC\u71ED\u71EF\u71F0\u71F1\u71F2\u71F3\u71F4\u71F5\u71F6\u71F7\u71F8\u71FA\u71FB\u71FC\u71FD\u71FE\u71FF\u7200\u7201\u7202\u7203\u7204\u7205\u7207\u7208\u7209\u720A\u720B\u720C\u720D\u720E\u720F\u7210\u7211\u7212\u7213\u7214\u7215\u7216\u7217\u7218\u7219\u721A\uFFFD\u721B\u721C\u721E\u721F\u7220\u7221\u7222\u7223\u7224\u7225\u7226\u7227\u7229\u722B\u722D\u722E\u722F\u7232\u7233\u7234\u723A\u723C\u723E\u7240\u7241\u7242\u7243\u7244\u7245\u7246\u7249\u724A\u724B\u724E\u724F\u7250\u7251\u7253\u7254\u7255\u7257\u7258\u725A\u725C\u725E\u7260\u7263\u7264\u7265\u7268\u726A\u726B\u726C\u726D\u7270\u7271\u7273\u7274\u7276\u7277\u7278\u727B\u727C\u727D\u7282\u7283\u7285\u7286\u7287\u7288\u7289\u728C\u728E\u7290\u7291\u7293\u7294\u7295\u7296\u7297\u7298\u7299\u729A\u729B\u729C\u729D\u729E\u72A0\u72A1\u72A2\u72A3\u72A4\u72A5\u72A6\u72A7\u72A8\u72A9\u72AA\u72AB\u72AE\u72B1\u72B2\u72B3\u72B5\u72BA\u72BB\u72BC\u72BD\u72BE\u72BF\u72C0\u72C5\u72C6\u72C7\u72C9\u72CA\u72CB\u72CC\u72CF\u72D1\u72D3\u72D4\u72D5\u72D6\u72D8\u72DA\u72DB\uFFFD".split("");
      for (j = 0; j != D[160].length; ++j)
        if (D[160][j].charCodeAt(0) !== 65533) {
          e[D[160][j]] = 40960 + j;
          d[40960 + j] = D[160][j];
        }
      D[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\xB7\u02C9\u02C7\xA8\u3003\u3005\u2014\uFF5E\u2016\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013\uFFFD".split("");
      for (j = 0; j != D[161].length; ++j)
        if (D[161][j].charCodeAt(0) !== 65533) {
          e[D[161][j]] = 41216 + j;
          d[41216 + j] = D[161][j];
        }
      D[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2488\u2489\u248A\u248B\u248C\u248D\u248E\u248F\u2490\u2491\u2492\u2493\u2494\u2495\u2496\u2497\u2498\u2499\u249A\u249B\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\u2483\u2484\u2485\u2486\u2487\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\uFFFD\uFFFD\u3220\u3221\u3222\u3223\u3224\u3225\u3226\u3227\u3228\u3229\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u216A\u216B\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[162].length; ++j)
        if (D[162][j].charCodeAt(0) !== 65533) {
          e[D[162][j]] = 41472 + j;
          d[41472 + j] = D[162][j];
        }
      D[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF01\uFF02\uFF03\uFFE5\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFF3C\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD".split("");
      for (j = 0; j != D[163].length; ++j)
        if (D[163][j].charCodeAt(0) !== 65533) {
          e[D[163][j]] = 41728 + j;
          d[41728 + j] = D[163][j];
        }
      D[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[164].length; ++j)
        if (D[164][j].charCodeAt(0) !== 65533) {
          e[D[164][j]] = 41984 + j;
          d[41984 + j] = D[164][j];
        }
      D[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[165].length; ++j)
        if (D[165][j].charCodeAt(0) !== 65533) {
          e[D[165][j]] = 42240 + j;
          d[42240 + j] = D[165][j];
        }
      D[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFE35\uFE36\uFE39\uFE3A\uFE3F\uFE40\uFE3D\uFE3E\uFE41\uFE42\uFE43\uFE44\uFFFD\uFFFD\uFE3B\uFE3C\uFE37\uFE38\uFE31\uFFFD\uFE33\uFE34\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[166].length; ++j)
        if (D[166][j].charCodeAt(0) !== 65533) {
          e[D[166][j]] = 42496 + j;
          d[42496 + j] = D[166][j];
        }
      D[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[167].length; ++j)
        if (D[167][j].charCodeAt(0) !== 65533) {
          e[D[167][j]] = 42752 + j;
          d[42752 + j] = D[167][j];
        }
      D[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u02CA\u02CB\u02D9\u2013\u2015\u2025\u2035\u2105\u2109\u2196\u2197\u2198\u2199\u2215\u221F\u2223\u2252\u2266\u2267\u22BF\u2550\u2551\u2552\u2553\u2554\u2555\u2556\u2557\u2558\u2559\u255A\u255B\u255C\u255D\u255E\u255F\u2560\u2561\u2562\u2563\u2564\u2565\u2566\u2567\u2568\u2569\u256A\u256B\u256C\u256D\u256E\u256F\u2570\u2571\u2572\u2573\u2581\u2582\u2583\u2584\u2585\u2586\u2587\uFFFD\u2588\u2589\u258A\u258B\u258C\u258D\u258E\u258F\u2593\u2594\u2595\u25BC\u25BD\u25E2\u25E3\u25E4\u25E5\u2609\u2295\u3012\u301D\u301E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\u0251\uFFFD\u0144\u0148\uFFFD\u0261\uFFFD\uFFFD\uFFFD\uFFFD\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[168].length; ++j)
        if (D[168][j].charCodeAt(0) !== 65533) {
          e[D[168][j]] = 43008 + j;
          d[43008 + j] = D[168][j];
        }
      D[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3021\u3022\u3023\u3024\u3025\u3026\u3027\u3028\u3029\u32A3\u338E\u338F\u339C\u339D\u339E\u33A1\u33C4\u33CE\u33D1\u33D2\u33D5\uFE30\uFFE2\uFFE4\uFFFD\u2121\u3231\uFFFD\u2010\uFFFD\uFFFD\uFFFD\u30FC\u309B\u309C\u30FD\u30FE\u3006\u309D\u309E\uFE49\uFE4A\uFE4B\uFE4C\uFE4D\uFE4E\uFE4F\uFE50\uFE51\uFE52\uFE54\uFE55\uFE56\uFE57\uFE59\uFE5A\uFE5B\uFE5C\uFE5D\uFE5E\uFE5F\uFE60\uFE61\uFFFD\uFE62\uFE63\uFE64\uFE65\uFE66\uFE68\uFE69\uFE6A\uFE6B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3007\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2501\u2502\u2503\u2504\u2505\u2506\u2507\u2508\u2509\u250A\u250B\u250C\u250D\u250E\u250F\u2510\u2511\u2512\u2513\u2514\u2515\u2516\u2517\u2518\u2519\u251A\u251B\u251C\u251D\u251E\u251F\u2520\u2521\u2522\u2523\u2524\u2525\u2526\u2527\u2528\u2529\u252A\u252B\u252C\u252D\u252E\u252F\u2530\u2531\u2532\u2533\u2534\u2535\u2536\u2537\u2538\u2539\u253A\u253B\u253C\u253D\u253E\u253F\u2540\u2541\u2542\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\u254B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[169].length; ++j)
        if (D[169][j].charCodeAt(0) !== 65533) {
          e[D[169][j]] = 43264 + j;
          d[43264 + j] = D[169][j];
        }
      D[170] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72DC\u72DD\u72DF\u72E2\u72E3\u72E4\u72E5\u72E6\u72E7\u72EA\u72EB\u72F5\u72F6\u72F9\u72FD\u72FE\u72FF\u7300\u7302\u7304\u7305\u7306\u7307\u7308\u7309\u730B\u730C\u730D\u730F\u7310\u7311\u7312\u7314\u7318\u7319\u731A\u731F\u7320\u7323\u7324\u7326\u7327\u7328\u732D\u732F\u7330\u7332\u7333\u7335\u7336\u733A\u733B\u733C\u733D\u7340\u7341\u7342\u7343\u7344\u7345\u7346\u7347\u7348\uFFFD\u7349\u734A\u734B\u734C\u734E\u734F\u7351\u7353\u7354\u7355\u7356\u7358\u7359\u735A\u735B\u735C\u735D\u735E\u735F\u7361\u7362\u7363\u7364\u7365\u7366\u7367\u7368\u7369\u736A\u736B\u736E\u7370\u7371\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[170].length; ++j)
        if (D[170][j].charCodeAt(0) !== 65533) {
          e[D[170][j]] = 43520 + j;
          d[43520 + j] = D[170][j];
        }
      D[171] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7372\u7373\u7374\u7375\u7376\u7377\u7378\u7379\u737A\u737B\u737C\u737D\u737F\u7380\u7381\u7382\u7383\u7385\u7386\u7388\u738A\u738C\u738D\u738F\u7390\u7392\u7393\u7394\u7395\u7397\u7398\u7399\u739A\u739C\u739D\u739E\u73A0\u73A1\u73A3\u73A4\u73A5\u73A6\u73A7\u73A8\u73AA\u73AC\u73AD\u73B1\u73B4\u73B5\u73B6\u73B8\u73B9\u73BC\u73BD\u73BE\u73BF\u73C1\u73C3\u73C4\u73C5\u73C6\u73C7\uFFFD\u73CB\u73CC\u73CE\u73D2\u73D3\u73D4\u73D5\u73D6\u73D7\u73D8\u73DA\u73DB\u73DC\u73DD\u73DF\u73E1\u73E2\u73E3\u73E4\u73E6\u73E8\u73EA\u73EB\u73EC\u73EE\u73EF\u73F0\u73F1\u73F3\u73F4\u73F5\u73F6\u73F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[171].length; ++j)
        if (D[171][j].charCodeAt(0) !== 65533) {
          e[D[171][j]] = 43776 + j;
          d[43776 + j] = D[171][j];
        }
      D[172] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u73F8\u73F9\u73FA\u73FB\u73FC\u73FD\u73FE\u73FF\u7400\u7401\u7402\u7404\u7407\u7408\u740B\u740C\u740D\u740E\u7411\u7412\u7413\u7414\u7415\u7416\u7417\u7418\u7419\u741C\u741D\u741E\u741F\u7420\u7421\u7423\u7424\u7427\u7429\u742B\u742D\u742F\u7431\u7432\u7437\u7438\u7439\u743A\u743B\u743D\u743E\u743F\u7440\u7442\u7443\u7444\u7445\u7446\u7447\u7448\u7449\u744A\u744B\u744C\u744D\uFFFD\u744E\u744F\u7450\u7451\u7452\u7453\u7454\u7456\u7458\u745D\u7460\u7461\u7462\u7463\u7464\u7465\u7466\u7467\u7468\u7469\u746A\u746B\u746C\u746E\u746F\u7471\u7472\u7473\u7474\u7475\u7478\u7479\u747A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[172].length; ++j)
        if (D[172][j].charCodeAt(0) !== 65533) {
          e[D[172][j]] = 44032 + j;
          d[44032 + j] = D[172][j];
        }
      D[173] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u747B\u747C\u747D\u747F\u7482\u7484\u7485\u7486\u7488\u7489\u748A\u748C\u748D\u748F\u7491\u7492\u7493\u7494\u7495\u7496\u7497\u7498\u7499\u749A\u749B\u749D\u749F\u74A0\u74A1\u74A2\u74A3\u74A4\u74A5\u74A6\u74AA\u74AB\u74AC\u74AD\u74AE\u74AF\u74B0\u74B1\u74B2\u74B3\u74B4\u74B5\u74B6\u74B7\u74B8\u74B9\u74BB\u74BC\u74BD\u74BE\u74BF\u74C0\u74C1\u74C2\u74C3\u74C4\u74C5\u74C6\u74C7\uFFFD\u74C8\u74C9\u74CA\u74CB\u74CC\u74CD\u74CE\u74CF\u74D0\u74D1\u74D3\u74D4\u74D5\u74D6\u74D7\u74D8\u74D9\u74DA\u74DB\u74DD\u74DF\u74E1\u74E5\u74E7\u74E8\u74E9\u74EA\u74EB\u74EC\u74ED\u74F0\u74F1\u74F2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[173].length; ++j)
        if (D[173][j].charCodeAt(0) !== 65533) {
          e[D[173][j]] = 44288 + j;
          d[44288 + j] = D[173][j];
        }
      D[174] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74F3\u74F5\u74F8\u74F9\u74FA\u74FB\u74FC\u74FD\u74FE\u7500\u7501\u7502\u7503\u7505\u7506\u7507\u7508\u7509\u750A\u750B\u750C\u750E\u7510\u7512\u7514\u7515\u7516\u7517\u751B\u751D\u751E\u7520\u7521\u7522\u7523\u7524\u7526\u7527\u752A\u752E\u7534\u7536\u7539\u753C\u753D\u753F\u7541\u7542\u7543\u7544\u7546\u7547\u7549\u754A\u754D\u7550\u7551\u7552\u7553\u7555\u7556\u7557\u7558\uFFFD\u755D\u755E\u755F\u7560\u7561\u7562\u7563\u7564\u7567\u7568\u7569\u756B\u756C\u756D\u756E\u756F\u7570\u7571\u7573\u7575\u7576\u7577\u757A\u757B\u757C\u757D\u757E\u7580\u7581\u7582\u7584\u7585\u7587\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[174].length; ++j)
        if (D[174][j].charCodeAt(0) !== 65533) {
          e[D[174][j]] = 44544 + j;
          d[44544 + j] = D[174][j];
        }
      D[175] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7588\u7589\u758A\u758C\u758D\u758E\u7590\u7593\u7595\u7598\u759B\u759C\u759E\u75A2\u75A6\u75A7\u75A8\u75A9\u75AA\u75AD\u75B6\u75B7\u75BA\u75BB\u75BF\u75C0\u75C1\u75C6\u75CB\u75CC\u75CE\u75CF\u75D0\u75D1\u75D3\u75D7\u75D9\u75DA\u75DC\u75DD\u75DF\u75E0\u75E1\u75E5\u75E9\u75EC\u75ED\u75EE\u75EF\u75F2\u75F3\u75F5\u75F6\u75F7\u75F8\u75FA\u75FB\u75FD\u75FE\u7602\u7604\u7606\u7607\uFFFD\u7608\u7609\u760B\u760D\u760E\u760F\u7611\u7612\u7613\u7614\u7616\u761A\u761C\u761D\u761E\u7621\u7623\u7627\u7628\u762C\u762E\u762F\u7631\u7632\u7636\u7637\u7639\u763A\u763B\u763D\u7641\u7642\u7644\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[175].length; ++j)
        if (D[175][j].charCodeAt(0) !== 65533) {
          e[D[175][j]] = 44800 + j;
          d[44800 + j] = D[175][j];
        }
      D[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7645\u7646\u7647\u7648\u7649\u764A\u764B\u764E\u764F\u7650\u7651\u7652\u7653\u7655\u7657\u7658\u7659\u765A\u765B\u765D\u765F\u7660\u7661\u7662\u7664\u7665\u7666\u7667\u7668\u7669\u766A\u766C\u766D\u766E\u7670\u7671\u7672\u7673\u7674\u7675\u7676\u7677\u7679\u767A\u767C\u767F\u7680\u7681\u7683\u7685\u7689\u768A\u768C\u768D\u768F\u7690\u7692\u7694\u7695\u7697\u7698\u769A\u769B\uFFFD\u769C\u769D\u769E\u769F\u76A0\u76A1\u76A2\u76A3\u76A5\u76A6\u76A7\u76A8\u76A9\u76AA\u76AB\u76AC\u76AD\u76AF\u76B0\u76B3\u76B5\u76B6\u76B7\u76B8\u76B9\u76BA\u76BB\u76BC\u76BD\u76BE\u76C0\u76C1\u76C3\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265\uFFFD".split("");
      for (j = 0; j != D[176].length; ++j)
        if (D[176][j].charCodeAt(0) !== 65533) {
          e[D[176][j]] = 45056 + j;
          d[45056 + j] = D[176][j];
        }
      D[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u76C4\u76C7\u76C9\u76CB\u76CC\u76D3\u76D5\u76D9\u76DA\u76DC\u76DD\u76DE\u76E0\u76E1\u76E2\u76E3\u76E4\u76E6\u76E7\u76E8\u76E9\u76EA\u76EB\u76EC\u76ED\u76F0\u76F3\u76F5\u76F6\u76F7\u76FA\u76FB\u76FD\u76FF\u7700\u7702\u7703\u7705\u7706\u770A\u770C\u770E\u770F\u7710\u7711\u7712\u7713\u7714\u7715\u7716\u7717\u7718\u771B\u771C\u771D\u771E\u7721\u7723\u7724\u7725\u7727\u772A\u772B\uFFFD\u772C\u772E\u7730\u7731\u7732\u7733\u7734\u7739\u773B\u773D\u773E\u773F\u7742\u7744\u7745\u7746\u7748\u7749\u774A\u774B\u774C\u774D\u774E\u774F\u7752\u7753\u7754\u7755\u7756\u7757\u7758\u7759\u775C\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3\uFFFD".split("");
      for (j = 0; j != D[177].length; ++j)
        if (D[177][j].charCodeAt(0) !== 65533) {
          e[D[177][j]] = 45312 + j;
          d[45312 + j] = D[177][j];
        }
      D[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u775D\u775E\u775F\u7760\u7764\u7767\u7769\u776A\u776D\u776E\u776F\u7770\u7771\u7772\u7773\u7774\u7775\u7776\u7777\u7778\u777A\u777B\u777C\u7781\u7782\u7783\u7786\u7787\u7788\u7789\u778A\u778B\u778F\u7790\u7793\u7794\u7795\u7796\u7797\u7798\u7799\u779A\u779B\u779C\u779D\u779E\u77A1\u77A3\u77A4\u77A6\u77A8\u77AB\u77AD\u77AE\u77AF\u77B1\u77B2\u77B4\u77B6\u77B7\u77B8\u77B9\u77BA\uFFFD\u77BC\u77BE\u77C0\u77C1\u77C2\u77C3\u77C4\u77C5\u77C6\u77C7\u77C8\u77C9\u77CA\u77CB\u77CC\u77CE\u77CF\u77D0\u77D1\u77D2\u77D3\u77D4\u77D5\u77D6\u77D8\u77D9\u77DA\u77DD\u77DE\u77DF\u77E0\u77E1\u77E4\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316\uFFFD".split("");
      for (j = 0; j != D[178].length; ++j)
        if (D[178][j].charCodeAt(0) !== 65533) {
          e[D[178][j]] = 45568 + j;
          d[45568 + j] = D[178][j];
        }
      D[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77E6\u77E8\u77EA\u77EF\u77F0\u77F1\u77F2\u77F4\u77F5\u77F7\u77F9\u77FA\u77FB\u77FC\u7803\u7804\u7805\u7806\u7807\u7808\u780A\u780B\u780E\u780F\u7810\u7813\u7815\u7819\u781B\u781E\u7820\u7821\u7822\u7824\u7828\u782A\u782B\u782E\u782F\u7831\u7832\u7833\u7835\u7836\u783D\u783F\u7841\u7842\u7843\u7844\u7846\u7848\u7849\u784A\u784B\u784D\u784F\u7851\u7853\u7854\u7858\u7859\u785A\uFFFD\u785B\u785C\u785E\u785F\u7860\u7861\u7862\u7863\u7864\u7865\u7866\u7867\u7868\u7869\u786F\u7870\u7871\u7872\u7873\u7874\u7875\u7876\u7878\u7879\u787A\u787B\u787D\u787E\u787F\u7880\u7881\u7882\u7883\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A\uFFFD".split("");
      for (j = 0; j != D[179].length; ++j)
        if (D[179][j].charCodeAt(0) !== 65533) {
          e[D[179][j]] = 45824 + j;
          d[45824 + j] = D[179][j];
        }
      D[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7884\u7885\u7886\u7888\u788A\u788B\u788F\u7890\u7892\u7894\u7895\u7896\u7899\u789D\u789E\u78A0\u78A2\u78A4\u78A6\u78A8\u78A9\u78AA\u78AB\u78AC\u78AD\u78AE\u78AF\u78B5\u78B6\u78B7\u78B8\u78BA\u78BB\u78BC\u78BD\u78BF\u78C0\u78C2\u78C3\u78C4\u78C6\u78C7\u78C8\u78CC\u78CD\u78CE\u78CF\u78D1\u78D2\u78D3\u78D6\u78D7\u78D8\u78DA\u78DB\u78DC\u78DD\u78DE\u78DF\u78E0\u78E1\u78E2\u78E3\uFFFD\u78E4\u78E5\u78E6\u78E7\u78E9\u78EA\u78EB\u78ED\u78EE\u78EF\u78F0\u78F1\u78F3\u78F5\u78F6\u78F8\u78F9\u78FB\u78FC\u78FD\u78FE\u78FF\u7900\u7902\u7903\u7904\u7906\u7907\u7908\u7909\u790A\u790B\u790C\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E\uFFFD".split("");
      for (j = 0; j != D[180].length; ++j)
        if (D[180][j].charCodeAt(0) !== 65533) {
          e[D[180][j]] = 46080 + j;
          d[46080 + j] = D[180][j];
        }
      D[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u790D\u790E\u790F\u7910\u7911\u7912\u7914\u7915\u7916\u7917\u7918\u7919\u791A\u791B\u791C\u791D\u791F\u7920\u7921\u7922\u7923\u7925\u7926\u7927\u7928\u7929\u792A\u792B\u792C\u792D\u792E\u792F\u7930\u7931\u7932\u7933\u7935\u7936\u7937\u7938\u7939\u793D\u793F\u7942\u7943\u7944\u7945\u7947\u794A\u794B\u794C\u794D\u794E\u794F\u7950\u7951\u7952\u7954\u7955\u7958\u7959\u7961\u7963\uFFFD\u7964\u7966\u7969\u796A\u796B\u796C\u796E\u7970\u7971\u7972\u7973\u7974\u7975\u7976\u7979\u797B\u797C\u797D\u797E\u797F\u7982\u7983\u7986\u7987\u7988\u7989\u798B\u798C\u798D\u798E\u7990\u7991\u7992\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0\uFFFD".split("");
      for (j = 0; j != D[181].length; ++j)
        if (D[181][j].charCodeAt(0) !== 65533) {
          e[D[181][j]] = 46336 + j;
          d[46336 + j] = D[181][j];
        }
      D[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7993\u7994\u7995\u7996\u7997\u7998\u7999\u799B\u799C\u799D\u799E\u799F\u79A0\u79A1\u79A2\u79A3\u79A4\u79A5\u79A6\u79A8\u79A9\u79AA\u79AB\u79AC\u79AD\u79AE\u79AF\u79B0\u79B1\u79B2\u79B4\u79B5\u79B6\u79B7\u79B8\u79BC\u79BF\u79C2\u79C4\u79C5\u79C7\u79C8\u79CA\u79CC\u79CE\u79CF\u79D0\u79D3\u79D4\u79D6\u79D7\u79D9\u79DA\u79DB\u79DC\u79DD\u79DE\u79E0\u79E1\u79E2\u79E5\u79E8\u79EA\uFFFD\u79EC\u79EE\u79F1\u79F2\u79F3\u79F4\u79F5\u79F6\u79F7\u79F9\u79FA\u79FC\u79FE\u79FF\u7A01\u7A04\u7A05\u7A07\u7A08\u7A09\u7A0A\u7A0C\u7A0F\u7A10\u7A11\u7A12\u7A13\u7A15\u7A16\u7A18\u7A19\u7A1B\u7A1C\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C\uFFFD".split("");
      for (j = 0; j != D[182].length; ++j)
        if (D[182][j].charCodeAt(0) !== 65533) {
          e[D[182][j]] = 46592 + j;
          d[46592 + j] = D[182][j];
        }
      D[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A1D\u7A1F\u7A21\u7A22\u7A24\u7A25\u7A26\u7A27\u7A28\u7A29\u7A2A\u7A2B\u7A2C\u7A2D\u7A2E\u7A2F\u7A30\u7A31\u7A32\u7A34\u7A35\u7A36\u7A38\u7A3A\u7A3E\u7A40\u7A41\u7A42\u7A43\u7A44\u7A45\u7A47\u7A48\u7A49\u7A4A\u7A4B\u7A4C\u7A4D\u7A4E\u7A4F\u7A50\u7A52\u7A53\u7A54\u7A55\u7A56\u7A58\u7A59\u7A5A\u7A5B\u7A5C\u7A5D\u7A5E\u7A5F\u7A60\u7A61\u7A62\u7A63\u7A64\u7A65\u7A66\u7A67\u7A68\uFFFD\u7A69\u7A6A\u7A6B\u7A6C\u7A6D\u7A6E\u7A6F\u7A71\u7A72\u7A73\u7A75\u7A7B\u7A7C\u7A7D\u7A7E\u7A82\u7A85\u7A87\u7A89\u7A8A\u7A8B\u7A8C\u7A8E\u7A8F\u7A90\u7A93\u7A94\u7A99\u7A9A\u7A9B\u7A9E\u7AA1\u7AA2\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D\uFFFD".split("");
      for (j = 0; j != D[183].length; ++j)
        if (D[183][j].charCodeAt(0) !== 65533) {
          e[D[183][j]] = 46848 + j;
          d[46848 + j] = D[183][j];
        }
      D[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7AA3\u7AA4\u7AA7\u7AA9\u7AAA\u7AAB\u7AAE\u7AAF\u7AB0\u7AB1\u7AB2\u7AB4\u7AB5\u7AB6\u7AB7\u7AB8\u7AB9\u7ABA\u7ABB\u7ABC\u7ABD\u7ABE\u7AC0\u7AC1\u7AC2\u7AC3\u7AC4\u7AC5\u7AC6\u7AC7\u7AC8\u7AC9\u7ACA\u7ACC\u7ACD\u7ACE\u7ACF\u7AD0\u7AD1\u7AD2\u7AD3\u7AD4\u7AD5\u7AD7\u7AD8\u7ADA\u7ADB\u7ADC\u7ADD\u7AE1\u7AE2\u7AE4\u7AE7\u7AE8\u7AE9\u7AEA\u7AEB\u7AEC\u7AEE\u7AF0\u7AF1\u7AF2\u7AF3\uFFFD\u7AF4\u7AF5\u7AF6\u7AF7\u7AF8\u7AFB\u7AFC\u7AFE\u7B00\u7B01\u7B02\u7B05\u7B07\u7B09\u7B0C\u7B0D\u7B0E\u7B10\u7B12\u7B13\u7B16\u7B17\u7B18\u7B1A\u7B1C\u7B1D\u7B1F\u7B21\u7B22\u7B23\u7B27\u7B29\u7B2D\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9\uFFFD".split("");
      for (j = 0; j != D[184].length; ++j)
        if (D[184][j].charCodeAt(0) !== 65533) {
          e[D[184][j]] = 47104 + j;
          d[47104 + j] = D[184][j];
        }
      D[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7B2F\u7B30\u7B32\u7B34\u7B35\u7B36\u7B37\u7B39\u7B3B\u7B3D\u7B3F\u7B40\u7B41\u7B42\u7B43\u7B44\u7B46\u7B48\u7B4A\u7B4D\u7B4E\u7B53\u7B55\u7B57\u7B59\u7B5C\u7B5E\u7B5F\u7B61\u7B63\u7B64\u7B65\u7B66\u7B67\u7B68\u7B69\u7B6A\u7B6B\u7B6C\u7B6D\u7B6F\u7B70\u7B73\u7B74\u7B76\u7B78\u7B7A\u7B7C\u7B7D\u7B7F\u7B81\u7B82\u7B83\u7B84\u7B86\u7B87\u7B88\u7B89\u7B8A\u7B8B\u7B8C\u7B8E\u7B8F\uFFFD\u7B91\u7B92\u7B93\u7B96\u7B98\u7B99\u7B9A\u7B9B\u7B9E\u7B9F\u7BA0\u7BA3\u7BA4\u7BA5\u7BAE\u7BAF\u7BB0\u7BB2\u7BB3\u7BB5\u7BB6\u7BB7\u7BB9\u7BBA\u7BBB\u7BBC\u7BBD\u7BBE\u7BBF\u7BC0\u7BC2\u7BC3\u7BC4\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8\uFFFD".split("");
      for (j = 0; j != D[185].length; ++j)
        if (D[185][j].charCodeAt(0) !== 65533) {
          e[D[185][j]] = 47360 + j;
          d[47360 + j] = D[185][j];
        }
      D[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7BC5\u7BC8\u7BC9\u7BCA\u7BCB\u7BCD\u7BCE\u7BCF\u7BD0\u7BD2\u7BD4\u7BD5\u7BD6\u7BD7\u7BD8\u7BDB\u7BDC\u7BDE\u7BDF\u7BE0\u7BE2\u7BE3\u7BE4\u7BE7\u7BE8\u7BE9\u7BEB\u7BEC\u7BED\u7BEF\u7BF0\u7BF2\u7BF3\u7BF4\u7BF5\u7BF6\u7BF8\u7BF9\u7BFA\u7BFB\u7BFD\u7BFF\u7C00\u7C01\u7C02\u7C03\u7C04\u7C05\u7C06\u7C08\u7C09\u7C0A\u7C0D\u7C0E\u7C10\u7C11\u7C12\u7C13\u7C14\u7C15\u7C17\u7C18\u7C19\uFFFD\u7C1A\u7C1B\u7C1C\u7C1D\u7C1E\u7C20\u7C21\u7C22\u7C23\u7C24\u7C25\u7C28\u7C29\u7C2B\u7C2C\u7C2D\u7C2E\u7C2F\u7C30\u7C31\u7C32\u7C33\u7C34\u7C35\u7C36\u7C37\u7C39\u7C3A\u7C3B\u7C3C\u7C3D\u7C3E\u7C42\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56\uFFFD".split("");
      for (j = 0; j != D[186].length; ++j)
        if (D[186][j].charCodeAt(0) !== 65533) {
          e[D[186][j]] = 47616 + j;
          d[47616 + j] = D[186][j];
        }
      D[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7C43\u7C44\u7C45\u7C46\u7C47\u7C48\u7C49\u7C4A\u7C4B\u7C4C\u7C4E\u7C4F\u7C50\u7C51\u7C52\u7C53\u7C54\u7C55\u7C56\u7C57\u7C58\u7C59\u7C5A\u7C5B\u7C5C\u7C5D\u7C5E\u7C5F\u7C60\u7C61\u7C62\u7C63\u7C64\u7C65\u7C66\u7C67\u7C68\u7C69\u7C6A\u7C6B\u7C6C\u7C6D\u7C6E\u7C6F\u7C70\u7C71\u7C72\u7C75\u7C76\u7C77\u7C78\u7C79\u7C7A\u7C7E\u7C7F\u7C80\u7C81\u7C82\u7C83\u7C84\u7C85\u7C86\u7C87\uFFFD\u7C88\u7C8A\u7C8B\u7C8C\u7C8D\u7C8E\u7C8F\u7C90\u7C93\u7C94\u7C96\u7C99\u7C9A\u7C9B\u7CA0\u7CA1\u7CA3\u7CA6\u7CA7\u7CA8\u7CA9\u7CAB\u7CAC\u7CAD\u7CAF\u7CB0\u7CB4\u7CB5\u7CB6\u7CB7\u7CB8\u7CBA\u7CBB\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95\uFFFD".split("");
      for (j = 0; j != D[187].length; ++j)
        if (D[187][j].charCodeAt(0) !== 65533) {
          e[D[187][j]] = 47872 + j;
          d[47872 + j] = D[187][j];
        }
      D[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7CBF\u7CC0\u7CC2\u7CC3\u7CC4\u7CC6\u7CC9\u7CCB\u7CCE\u7CCF\u7CD0\u7CD1\u7CD2\u7CD3\u7CD4\u7CD8\u7CDA\u7CDB\u7CDD\u7CDE\u7CE1\u7CE2\u7CE3\u7CE4\u7CE5\u7CE6\u7CE7\u7CE9\u7CEA\u7CEB\u7CEC\u7CED\u7CEE\u7CF0\u7CF1\u7CF2\u7CF3\u7CF4\u7CF5\u7CF6\u7CF7\u7CF9\u7CFA\u7CFC\u7CFD\u7CFE\u7CFF\u7D00\u7D01\u7D02\u7D03\u7D04\u7D05\u7D06\u7D07\u7D08\u7D09\u7D0B\u7D0C\u7D0D\u7D0E\u7D0F\u7D10\uFFFD\u7D11\u7D12\u7D13\u7D14\u7D15\u7D16\u7D17\u7D18\u7D19\u7D1A\u7D1B\u7D1C\u7D1D\u7D1E\u7D1F\u7D21\u7D23\u7D24\u7D25\u7D26\u7D28\u7D29\u7D2A\u7D2C\u7D2D\u7D2E\u7D30\u7D31\u7D32\u7D33\u7D34\u7D35\u7D36\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6\uFFFD".split("");
      for (j = 0; j != D[188].length; ++j)
        if (D[188][j].charCodeAt(0) !== 65533) {
          e[D[188][j]] = 48128 + j;
          d[48128 + j] = D[188][j];
        }
      D[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D37\u7D38\u7D39\u7D3A\u7D3B\u7D3C\u7D3D\u7D3E\u7D3F\u7D40\u7D41\u7D42\u7D43\u7D44\u7D45\u7D46\u7D47\u7D48\u7D49\u7D4A\u7D4B\u7D4C\u7D4D\u7D4E\u7D4F\u7D50\u7D51\u7D52\u7D53\u7D54\u7D55\u7D56\u7D57\u7D58\u7D59\u7D5A\u7D5B\u7D5C\u7D5D\u7D5E\u7D5F\u7D60\u7D61\u7D62\u7D63\u7D64\u7D65\u7D66\u7D67\u7D68\u7D69\u7D6A\u7D6B\u7D6C\u7D6D\u7D6F\u7D70\u7D71\u7D72\u7D73\u7D74\u7D75\u7D76\uFFFD\u7D78\u7D79\u7D7A\u7D7B\u7D7C\u7D7D\u7D7E\u7D7F\u7D80\u7D81\u7D82\u7D83\u7D84\u7D85\u7D86\u7D87\u7D88\u7D89\u7D8A\u7D8B\u7D8C\u7D8D\u7D8E\u7D8F\u7D90\u7D91\u7D92\u7D93\u7D94\u7D95\u7D96\u7D97\u7D98\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78\uFFFD".split("");
      for (j = 0; j != D[189].length; ++j)
        if (D[189][j].charCodeAt(0) !== 65533) {
          e[D[189][j]] = 48384 + j;
          d[48384 + j] = D[189][j];
        }
      D[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D99\u7D9A\u7D9B\u7D9C\u7D9D\u7D9E\u7D9F\u7DA0\u7DA1\u7DA2\u7DA3\u7DA4\u7DA5\u7DA7\u7DA8\u7DA9\u7DAA\u7DAB\u7DAC\u7DAD\u7DAF\u7DB0\u7DB1\u7DB2\u7DB3\u7DB4\u7DB5\u7DB6\u7DB7\u7DB8\u7DB9\u7DBA\u7DBB\u7DBC\u7DBD\u7DBE\u7DBF\u7DC0\u7DC1\u7DC2\u7DC3\u7DC4\u7DC5\u7DC6\u7DC7\u7DC8\u7DC9\u7DCA\u7DCB\u7DCC\u7DCD\u7DCE\u7DCF\u7DD0\u7DD1\u7DD2\u7DD3\u7DD4\u7DD5\u7DD6\u7DD7\u7DD8\u7DD9\uFFFD\u7DDA\u7DDB\u7DDC\u7DDD\u7DDE\u7DDF\u7DE0\u7DE1\u7DE2\u7DE3\u7DE4\u7DE5\u7DE6\u7DE7\u7DE8\u7DE9\u7DEA\u7DEB\u7DEC\u7DED\u7DEE\u7DEF\u7DF0\u7DF1\u7DF2\u7DF3\u7DF4\u7DF5\u7DF6\u7DF7\u7DF8\u7DF9\u7DFA\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB\uFFFD".split("");
      for (j = 0; j != D[190].length; ++j)
        if (D[190][j].charCodeAt(0) !== 65533) {
          e[D[190][j]] = 48640 + j;
          d[48640 + j] = D[190][j];
        }
      D[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7DFB\u7DFC\u7DFD\u7DFE\u7DFF\u7E00\u7E01\u7E02\u7E03\u7E04\u7E05\u7E06\u7E07\u7E08\u7E09\u7E0A\u7E0B\u7E0C\u7E0D\u7E0E\u7E0F\u7E10\u7E11\u7E12\u7E13\u7E14\u7E15\u7E16\u7E17\u7E18\u7E19\u7E1A\u7E1B\u7E1C\u7E1D\u7E1E\u7E1F\u7E20\u7E21\u7E22\u7E23\u7E24\u7E25\u7E26\u7E27\u7E28\u7E29\u7E2A\u7E2B\u7E2C\u7E2D\u7E2E\u7E2F\u7E30\u7E31\u7E32\u7E33\u7E34\u7E35\u7E36\u7E37\u7E38\u7E39\uFFFD\u7E3A\u7E3C\u7E3D\u7E3E\u7E3F\u7E40\u7E42\u7E43\u7E44\u7E45\u7E46\u7E48\u7E49\u7E4A\u7E4B\u7E4C\u7E4D\u7E4E\u7E4F\u7E50\u7E51\u7E52\u7E53\u7E54\u7E55\u7E56\u7E57\u7E58\u7E59\u7E5A\u7E5B\u7E5C\u7E5D\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080\uFFFD".split("");
      for (j = 0; j != D[191].length; ++j)
        if (D[191][j].charCodeAt(0) !== 65533) {
          e[D[191][j]] = 48896 + j;
          d[48896 + j] = D[191][j];
        }
      D[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E5E\u7E5F\u7E60\u7E61\u7E62\u7E63\u7E64\u7E65\u7E66\u7E67\u7E68\u7E69\u7E6A\u7E6B\u7E6C\u7E6D\u7E6E\u7E6F\u7E70\u7E71\u7E72\u7E73\u7E74\u7E75\u7E76\u7E77\u7E78\u7E79\u7E7A\u7E7B\u7E7C\u7E7D\u7E7E\u7E7F\u7E80\u7E81\u7E83\u7E84\u7E85\u7E86\u7E87\u7E88\u7E89\u7E8A\u7E8B\u7E8C\u7E8D\u7E8E\u7E8F\u7E90\u7E91\u7E92\u7E93\u7E94\u7E95\u7E96\u7E97\u7E98\u7E99\u7E9A\u7E9C\u7E9D\u7E9E\uFFFD\u7EAE\u7EB4\u7EBB\u7EBC\u7ED6\u7EE4\u7EEC\u7EF9\u7F0A\u7F10\u7F1E\u7F37\u7F39\u7F3B\u7F3C\u7F3D\u7F3E\u7F3F\u7F40\u7F41\u7F43\u7F46\u7F47\u7F48\u7F49\u7F4A\u7F4B\u7F4C\u7F4D\u7F4E\u7F4F\u7F52\u7F53\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0\uFFFD".split("");
      for (j = 0; j != D[192].length; ++j)
        if (D[192][j].charCodeAt(0) !== 65533) {
          e[D[192][j]] = 49152 + j;
          d[49152 + j] = D[192][j];
        }
      D[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F56\u7F59\u7F5B\u7F5C\u7F5D\u7F5E\u7F60\u7F63\u7F64\u7F65\u7F66\u7F67\u7F6B\u7F6C\u7F6D\u7F6F\u7F70\u7F73\u7F75\u7F76\u7F77\u7F78\u7F7A\u7F7B\u7F7C\u7F7D\u7F7F\u7F80\u7F82\u7F83\u7F84\u7F85\u7F86\u7F87\u7F88\u7F89\u7F8B\u7F8D\u7F8F\u7F90\u7F91\u7F92\u7F93\u7F95\u7F96\u7F97\u7F98\u7F99\u7F9B\u7F9C\u7FA0\u7FA2\u7FA3\u7FA5\u7FA6\u7FA8\u7FA9\u7FAA\u7FAB\u7FAC\u7FAD\u7FAE\u7FB1\uFFFD\u7FB3\u7FB4\u7FB5\u7FB6\u7FB7\u7FBA\u7FBB\u7FBE\u7FC0\u7FC2\u7FC3\u7FC4\u7FC6\u7FC7\u7FC8\u7FC9\u7FCB\u7FCD\u7FCF\u7FD0\u7FD1\u7FD2\u7FD3\u7FD6\u7FD7\u7FD9\u7FDA\u7FDB\u7FDC\u7FDD\u7FDE\u7FE2\u7FE3\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF\uFFFD".split("");
      for (j = 0; j != D[193].length; ++j)
        if (D[193][j].charCodeAt(0) !== 65533) {
          e[D[193][j]] = 49408 + j;
          d[49408 + j] = D[193][j];
        }
      D[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7FE4\u7FE7\u7FE8\u7FEA\u7FEB\u7FEC\u7FED\u7FEF\u7FF2\u7FF4\u7FF5\u7FF6\u7FF7\u7FF8\u7FF9\u7FFA\u7FFD\u7FFE\u7FFF\u8002\u8007\u8008\u8009\u800A\u800E\u800F\u8011\u8013\u801A\u801B\u801D\u801E\u801F\u8021\u8023\u8024\u802B\u802C\u802D\u802E\u802F\u8030\u8032\u8034\u8039\u803A\u803C\u803E\u8040\u8041\u8044\u8045\u8047\u8048\u8049\u804E\u804F\u8050\u8051\u8053\u8055\u8056\u8057\uFFFD\u8059\u805B\u805C\u805D\u805E\u805F\u8060\u8061\u8062\u8063\u8064\u8065\u8066\u8067\u8068\u806B\u806C\u806D\u806E\u806F\u8070\u8072\u8073\u8074\u8075\u8076\u8077\u8078\u8079\u807A\u807B\u807C\u807D\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B\uFFFD".split("");
      for (j = 0; j != D[194].length; ++j)
        if (D[194][j].charCodeAt(0) !== 65533) {
          e[D[194][j]] = 49664 + j;
          d[49664 + j] = D[194][j];
        }
      D[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u807E\u8081\u8082\u8085\u8088\u808A\u808D\u808E\u808F\u8090\u8091\u8092\u8094\u8095\u8097\u8099\u809E\u80A3\u80A6\u80A7\u80A8\u80AC\u80B0\u80B3\u80B5\u80B6\u80B8\u80B9\u80BB\u80C5\u80C7\u80C8\u80C9\u80CA\u80CB\u80CF\u80D0\u80D1\u80D2\u80D3\u80D4\u80D5\u80D8\u80DF\u80E0\u80E2\u80E3\u80E6\u80EE\u80F5\u80F7\u80F9\u80FB\u80FE\u80FF\u8100\u8101\u8103\u8104\u8105\u8107\u8108\u810B\uFFFD\u810C\u8115\u8117\u8119\u811B\u811C\u811D\u811F\u8120\u8121\u8122\u8123\u8124\u8125\u8126\u8127\u8128\u8129\u812A\u812B\u812D\u812E\u8130\u8133\u8134\u8135\u8137\u8139\u813A\u813B\u813C\u813D\u813F\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478\uFFFD".split("");
      for (j = 0; j != D[195].length; ++j)
        if (D[195][j].charCodeAt(0) !== 65533) {
          e[D[195][j]] = 49920 + j;
          d[49920 + j] = D[195][j];
        }
      D[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8140\u8141\u8142\u8143\u8144\u8145\u8147\u8149\u814D\u814E\u814F\u8152\u8156\u8157\u8158\u815B\u815C\u815D\u815E\u815F\u8161\u8162\u8163\u8164\u8166\u8168\u816A\u816B\u816C\u816F\u8172\u8173\u8175\u8176\u8177\u8178\u8181\u8183\u8184\u8185\u8186\u8187\u8189\u818B\u818C\u818D\u818E\u8190\u8192\u8193\u8194\u8195\u8196\u8197\u8199\u819A\u819E\u819F\u81A0\u81A1\u81A2\u81A4\u81A5\uFFFD\u81A7\u81A9\u81AB\u81AC\u81AD\u81AE\u81AF\u81B0\u81B1\u81B2\u81B4\u81B5\u81B6\u81B7\u81B8\u81B9\u81BC\u81BD\u81BE\u81BF\u81C4\u81C5\u81C7\u81C8\u81C9\u81CB\u81CD\u81CE\u81CF\u81D0\u81D1\u81D2\u81D3\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81\uFFFD".split("");
      for (j = 0; j != D[196].length; ++j)
        if (D[196][j].charCodeAt(0) !== 65533) {
          e[D[196][j]] = 50176 + j;
          d[50176 + j] = D[196][j];
        }
      D[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81D4\u81D5\u81D6\u81D7\u81D8\u81D9\u81DA\u81DB\u81DC\u81DD\u81DE\u81DF\u81E0\u81E1\u81E2\u81E4\u81E5\u81E6\u81E8\u81E9\u81EB\u81EE\u81EF\u81F0\u81F1\u81F2\u81F5\u81F6\u81F7\u81F8\u81F9\u81FA\u81FD\u81FF\u8203\u8207\u8208\u8209\u820A\u820B\u820E\u820F\u8211\u8213\u8215\u8216\u8217\u8218\u8219\u821A\u821D\u8220\u8224\u8225\u8226\u8227\u8229\u822E\u8232\u823A\u823C\u823D\u823F\uFFFD\u8240\u8241\u8242\u8243\u8245\u8246\u8248\u824A\u824C\u824D\u824E\u8250\u8251\u8252\u8253\u8254\u8255\u8256\u8257\u8259\u825B\u825C\u825D\u825E\u8260\u8261\u8262\u8263\u8264\u8265\u8266\u8267\u8269\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7\uFFFD".split("");
      for (j = 0; j != D[197].length; ++j)
        if (D[197][j].charCodeAt(0) !== 65533) {
          e[D[197][j]] = 50432 + j;
          d[50432 + j] = D[197][j];
        }
      D[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u826A\u826B\u826C\u826D\u8271\u8275\u8276\u8277\u8278\u827B\u827C\u8280\u8281\u8283\u8285\u8286\u8287\u8289\u828C\u8290\u8293\u8294\u8295\u8296\u829A\u829B\u829E\u82A0\u82A2\u82A3\u82A7\u82B2\u82B5\u82B6\u82BA\u82BB\u82BC\u82BF\u82C0\u82C2\u82C3\u82C5\u82C6\u82C9\u82D0\u82D6\u82D9\u82DA\u82DD\u82E2\u82E7\u82E8\u82E9\u82EA\u82EC\u82ED\u82EE\u82F0\u82F2\u82F3\u82F5\u82F6\u82F8\uFFFD\u82FA\u82FC\u82FD\u82FE\u82FF\u8300\u830A\u830B\u830D\u8310\u8312\u8313\u8316\u8318\u8319\u831D\u831E\u831F\u8320\u8321\u8322\u8323\u8324\u8325\u8326\u8329\u832A\u832E\u8330\u8332\u8337\u833B\u833D\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390\uFFFD".split("");
      for (j = 0; j != D[198].length; ++j)
        if (D[198][j].charCodeAt(0) !== 65533) {
          e[D[198][j]] = 50688 + j;
          d[50688 + j] = D[198][j];
        }
      D[199] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u833E\u833F\u8341\u8342\u8344\u8345\u8348\u834A\u834B\u834C\u834D\u834E\u8353\u8355\u8356\u8357\u8358\u8359\u835D\u8362\u8370\u8371\u8372\u8373\u8374\u8375\u8376\u8379\u837A\u837E\u837F\u8380\u8381\u8382\u8383\u8384\u8387\u8388\u838A\u838B\u838C\u838D\u838F\u8390\u8391\u8394\u8395\u8396\u8397\u8399\u839A\u839D\u839F\u83A1\u83A2\u83A3\u83A4\u83A5\u83A6\u83A7\u83AC\u83AD\u83AE\uFFFD\u83AF\u83B5\u83BB\u83BE\u83BF\u83C2\u83C3\u83C4\u83C6\u83C8\u83C9\u83CB\u83CD\u83CE\u83D0\u83D1\u83D2\u83D3\u83D5\u83D7\u83D9\u83DA\u83DB\u83DE\u83E2\u83E3\u83E4\u83E6\u83E7\u83E8\u83EB\u83EC\u83ED\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20\uFFFD".split("");
      for (j = 0; j != D[199].length; ++j)
        if (D[199][j].charCodeAt(0) !== 65533) {
          e[D[199][j]] = 50944 + j;
          d[50944 + j] = D[199][j];
        }
      D[200] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u83EE\u83EF\u83F3\u83F4\u83F5\u83F6\u83F7\u83FA\u83FB\u83FC\u83FE\u83FF\u8400\u8402\u8405\u8407\u8408\u8409\u840A\u8410\u8412\u8413\u8414\u8415\u8416\u8417\u8419\u841A\u841B\u841E\u841F\u8420\u8421\u8422\u8423\u8429\u842A\u842B\u842C\u842D\u842E\u842F\u8430\u8432\u8433\u8434\u8435\u8436\u8437\u8439\u843A\u843B\u843E\u843F\u8440\u8441\u8442\u8443\u8444\u8445\u8447\u8448\u8449\uFFFD\u844A\u844B\u844C\u844D\u844E\u844F\u8450\u8452\u8453\u8454\u8455\u8456\u8458\u845D\u845E\u845F\u8460\u8462\u8464\u8465\u8466\u8467\u8468\u846A\u846E\u846F\u8470\u8472\u8474\u8477\u8479\u847B\u847C\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1\uFFFD".split("");
      for (j = 0; j != D[200].length; ++j)
        if (D[200][j].charCodeAt(0) !== 65533) {
          e[D[200][j]] = 51200 + j;
          d[51200 + j] = D[200][j];
        }
      D[201] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u847D\u847E\u847F\u8480\u8481\u8483\u8484\u8485\u8486\u848A\u848D\u848F\u8490\u8491\u8492\u8493\u8494\u8495\u8496\u8498\u849A\u849B\u849D\u849E\u849F\u84A0\u84A2\u84A3\u84A4\u84A5\u84A6\u84A7\u84A8\u84A9\u84AA\u84AB\u84AC\u84AD\u84AE\u84B0\u84B1\u84B3\u84B5\u84B6\u84B7\u84BB\u84BC\u84BE\u84C0\u84C2\u84C3\u84C5\u84C6\u84C7\u84C8\u84CB\u84CC\u84CE\u84CF\u84D2\u84D4\u84D5\u84D7\uFFFD\u84D8\u84D9\u84DA\u84DB\u84DC\u84DE\u84E1\u84E2\u84E4\u84E7\u84E8\u84E9\u84EA\u84EB\u84ED\u84EE\u84EF\u84F1\u84F2\u84F3\u84F4\u84F5\u84F6\u84F7\u84F8\u84F9\u84FA\u84FB\u84FD\u84FE\u8500\u8501\u8502\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3\uFFFD".split("");
      for (j = 0; j != D[201].length; ++j)
        if (D[201][j].charCodeAt(0) !== 65533) {
          e[D[201][j]] = 51456 + j;
          d[51456 + j] = D[201][j];
        }
      D[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8503\u8504\u8505\u8506\u8507\u8508\u8509\u850A\u850B\u850D\u850E\u850F\u8510\u8512\u8514\u8515\u8516\u8518\u8519\u851B\u851C\u851D\u851E\u8520\u8522\u8523\u8524\u8525\u8526\u8527\u8528\u8529\u852A\u852D\u852E\u852F\u8530\u8531\u8532\u8533\u8534\u8535\u8536\u853E\u853F\u8540\u8541\u8542\u8544\u8545\u8546\u8547\u854B\u854C\u854D\u854E\u854F\u8550\u8551\u8552\u8553\u8554\u8555\uFFFD\u8557\u8558\u855A\u855B\u855C\u855D\u855F\u8560\u8561\u8562\u8563\u8565\u8566\u8567\u8569\u856A\u856B\u856C\u856D\u856E\u856F\u8570\u8571\u8573\u8575\u8576\u8577\u8578\u857C\u857D\u857F\u8580\u8581\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31\uFFFD".split("");
      for (j = 0; j != D[202].length; ++j)
        if (D[202][j].charCodeAt(0) !== 65533) {
          e[D[202][j]] = 51712 + j;
          d[51712 + j] = D[202][j];
        }
      D[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8582\u8583\u8586\u8588\u8589\u858A\u858B\u858C\u858D\u858E\u8590\u8591\u8592\u8593\u8594\u8595\u8596\u8597\u8598\u8599\u859A\u859D\u859E\u859F\u85A0\u85A1\u85A2\u85A3\u85A5\u85A6\u85A7\u85A9\u85AB\u85AC\u85AD\u85B1\u85B2\u85B3\u85B4\u85B5\u85B6\u85B8\u85BA\u85BB\u85BC\u85BD\u85BE\u85BF\u85C0\u85C2\u85C3\u85C4\u85C5\u85C6\u85C7\u85C8\u85CA\u85CB\u85CC\u85CD\u85CE\u85D1\u85D2\uFFFD\u85D4\u85D6\u85D7\u85D8\u85D9\u85DA\u85DB\u85DD\u85DE\u85DF\u85E0\u85E1\u85E2\u85E3\u85E5\u85E6\u85E7\u85E8\u85EA\u85EB\u85EC\u85ED\u85EE\u85EF\u85F0\u85F1\u85F2\u85F3\u85F4\u85F5\u85F6\u85F7\u85F8\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854\uFFFD".split("");
      for (j = 0; j != D[203].length; ++j)
        if (D[203][j].charCodeAt(0) !== 65533) {
          e[D[203][j]] = 51968 + j;
          d[51968 + j] = D[203][j];
        }
      D[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u85F9\u85FA\u85FC\u85FD\u85FE\u8600\u8601\u8602\u8603\u8604\u8606\u8607\u8608\u8609\u860A\u860B\u860C\u860D\u860E\u860F\u8610\u8612\u8613\u8614\u8615\u8617\u8618\u8619\u861A\u861B\u861C\u861D\u861E\u861F\u8620\u8621\u8622\u8623\u8624\u8625\u8626\u8628\u862A\u862B\u862C\u862D\u862E\u862F\u8630\u8631\u8632\u8633\u8634\u8635\u8636\u8637\u8639\u863A\u863B\u863D\u863E\u863F\u8640\uFFFD\u8641\u8642\u8643\u8644\u8645\u8646\u8647\u8648\u8649\u864A\u864B\u864C\u8652\u8653\u8655\u8656\u8657\u8658\u8659\u865B\u865C\u865D\u865F\u8660\u8661\u8663\u8664\u8665\u8666\u8667\u8668\u8669\u866A\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3\uFFFD".split("");
      for (j = 0; j != D[204].length; ++j)
        if (D[204][j].charCodeAt(0) !== 65533) {
          e[D[204][j]] = 52224 + j;
          d[52224 + j] = D[204][j];
        }
      D[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u866D\u866F\u8670\u8672\u8673\u8674\u8675\u8676\u8677\u8678\u8683\u8684\u8685\u8686\u8687\u8688\u8689\u868E\u868F\u8690\u8691\u8692\u8694\u8696\u8697\u8698\u8699\u869A\u869B\u869E\u869F\u86A0\u86A1\u86A2\u86A5\u86A6\u86AB\u86AD\u86AE\u86B2\u86B3\u86B7\u86B8\u86B9\u86BB\u86BC\u86BD\u86BE\u86BF\u86C1\u86C2\u86C3\u86C5\u86C8\u86CC\u86CD\u86D2\u86D3\u86D5\u86D6\u86D7\u86DA\u86DC\uFFFD\u86DD\u86E0\u86E1\u86E2\u86E3\u86E5\u86E6\u86E7\u86E8\u86EA\u86EB\u86EC\u86EF\u86F5\u86F6\u86F7\u86FA\u86FB\u86FC\u86FD\u86FF\u8701\u8704\u8705\u8706\u870B\u870C\u870E\u870F\u8710\u8711\u8714\u8716\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01\uFFFD".split("");
      for (j = 0; j != D[205].length; ++j)
        if (D[205][j].charCodeAt(0) !== 65533) {
          e[D[205][j]] = 52480 + j;
          d[52480 + j] = D[205][j];
        }
      D[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8719\u871B\u871D\u871F\u8720\u8724\u8726\u8727\u8728\u872A\u872B\u872C\u872D\u872F\u8730\u8732\u8733\u8735\u8736\u8738\u8739\u873A\u873C\u873D\u8740\u8741\u8742\u8743\u8744\u8745\u8746\u874A\u874B\u874D\u874F\u8750\u8751\u8752\u8754\u8755\u8756\u8758\u875A\u875B\u875C\u875D\u875E\u875F\u8761\u8762\u8766\u8767\u8768\u8769\u876A\u876B\u876C\u876D\u876F\u8771\u8772\u8773\u8775\uFFFD\u8777\u8778\u8779\u877A\u877F\u8780\u8781\u8784\u8786\u8787\u8789\u878A\u878C\u878E\u878F\u8790\u8791\u8792\u8794\u8795\u8796\u8798\u8799\u879A\u879B\u879C\u879D\u879E\u87A0\u87A1\u87A2\u87A3\u87A4\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A\uFFFD".split("");
      for (j = 0; j != D[206].length; ++j)
        if (D[206][j].charCodeAt(0) !== 65533) {
          e[D[206][j]] = 52736 + j;
          d[52736 + j] = D[206][j];
        }
      D[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u87A5\u87A6\u87A7\u87A9\u87AA\u87AE\u87B0\u87B1\u87B2\u87B4\u87B6\u87B7\u87B8\u87B9\u87BB\u87BC\u87BE\u87BF\u87C1\u87C2\u87C3\u87C4\u87C5\u87C7\u87C8\u87C9\u87CC\u87CD\u87CE\u87CF\u87D0\u87D4\u87D5\u87D6\u87D7\u87D8\u87D9\u87DA\u87DC\u87DD\u87DE\u87DF\u87E1\u87E2\u87E3\u87E4\u87E6\u87E7\u87E8\u87E9\u87EB\u87EC\u87ED\u87EF\u87F0\u87F1\u87F2\u87F3\u87F4\u87F5\u87F6\u87F7\u87F8\uFFFD\u87FA\u87FB\u87FC\u87FD\u87FF\u8800\u8801\u8802\u8804\u8805\u8806\u8807\u8808\u8809\u880B\u880C\u880D\u880E\u880F\u8810\u8811\u8812\u8814\u8817\u8818\u8819\u881A\u881C\u881D\u881E\u881F\u8820\u8823\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653\uFFFD".split("");
      for (j = 0; j != D[207].length; ++j)
        if (D[207][j].charCodeAt(0) !== 65533) {
          e[D[207][j]] = 52992 + j;
          d[52992 + j] = D[207][j];
        }
      D[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8824\u8825\u8826\u8827\u8828\u8829\u882A\u882B\u882C\u882D\u882E\u882F\u8830\u8831\u8833\u8834\u8835\u8836\u8837\u8838\u883A\u883B\u883D\u883E\u883F\u8841\u8842\u8843\u8846\u8847\u8848\u8849\u884A\u884B\u884E\u884F\u8850\u8851\u8852\u8853\u8855\u8856\u8858\u885A\u885B\u885C\u885D\u885E\u885F\u8860\u8866\u8867\u886A\u886D\u886F\u8871\u8873\u8874\u8875\u8876\u8878\u8879\u887A\uFFFD\u887B\u887C\u8880\u8883\u8886\u8887\u8889\u888A\u888C\u888E\u888F\u8890\u8891\u8893\u8894\u8895\u8897\u8898\u8899\u889A\u889B\u889D\u889E\u889F\u88A0\u88A1\u88A3\u88A5\u88A6\u88A7\u88A8\u88A9\u88AA\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384\uFFFD".split("");
      for (j = 0; j != D[208].length; ++j)
        if (D[208][j].charCodeAt(0) !== 65533) {
          e[D[208][j]] = 53248 + j;
          d[53248 + j] = D[208][j];
        }
      D[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u88AC\u88AE\u88AF\u88B0\u88B2\u88B3\u88B4\u88B5\u88B6\u88B8\u88B9\u88BA\u88BB\u88BD\u88BE\u88BF\u88C0\u88C3\u88C4\u88C7\u88C8\u88CA\u88CB\u88CC\u88CD\u88CF\u88D0\u88D1\u88D3\u88D6\u88D7\u88DA\u88DB\u88DC\u88DD\u88DE\u88E0\u88E1\u88E6\u88E7\u88E9\u88EA\u88EB\u88EC\u88ED\u88EE\u88EF\u88F2\u88F5\u88F6\u88F7\u88FA\u88FB\u88FD\u88FF\u8900\u8901\u8903\u8904\u8905\u8906\u8907\u8908\uFFFD\u8909\u890B\u890C\u890D\u890E\u890F\u8911\u8914\u8915\u8916\u8917\u8918\u891C\u891D\u891E\u891F\u8920\u8922\u8923\u8924\u8926\u8927\u8928\u8929\u892C\u892D\u892E\u892F\u8931\u8932\u8933\u8935\u8937\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476\uFFFD".split("");
      for (j = 0; j != D[209].length; ++j)
        if (D[209][j].charCodeAt(0) !== 65533) {
          e[D[209][j]] = 53504 + j;
          d[53504 + j] = D[209][j];
        }
      D[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8938\u8939\u893A\u893B\u893C\u893D\u893E\u893F\u8940\u8942\u8943\u8945\u8946\u8947\u8948\u8949\u894A\u894B\u894C\u894D\u894E\u894F\u8950\u8951\u8952\u8953\u8954\u8955\u8956\u8957\u8958\u8959\u895A\u895B\u895C\u895D\u8960\u8961\u8962\u8963\u8964\u8965\u8967\u8968\u8969\u896A\u896B\u896C\u896D\u896E\u896F\u8970\u8971\u8972\u8973\u8974\u8975\u8976\u8977\u8978\u8979\u897A\u897C\uFFFD\u897D\u897E\u8980\u8982\u8984\u8985\u8987\u8988\u8989\u898A\u898B\u898C\u898D\u898E\u898F\u8990\u8991\u8992\u8993\u8994\u8995\u8996\u8997\u8998\u8999\u899A\u899B\u899C\u899D\u899E\u899F\u89A0\u89A1\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690\uFFFD".split("");
      for (j = 0; j != D[210].length; ++j)
        if (D[210][j].charCodeAt(0) !== 65533) {
          e[D[210][j]] = 53760 + j;
          d[53760 + j] = D[210][j];
        }
      D[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89A2\u89A3\u89A4\u89A5\u89A6\u89A7\u89A8\u89A9\u89AA\u89AB\u89AC\u89AD\u89AE\u89AF\u89B0\u89B1\u89B2\u89B3\u89B4\u89B5\u89B6\u89B7\u89B8\u89B9\u89BA\u89BB\u89BC\u89BD\u89BE\u89BF\u89C0\u89C3\u89CD\u89D3\u89D4\u89D5\u89D7\u89D8\u89D9\u89DB\u89DD\u89DF\u89E0\u89E1\u89E2\u89E4\u89E7\u89E8\u89E9\u89EA\u89EC\u89ED\u89EE\u89F0\u89F1\u89F2\u89F4\u89F5\u89F6\u89F7\u89F8\u89F9\u89FA\uFFFD\u89FB\u89FC\u89FD\u89FE\u89FF\u8A01\u8A02\u8A03\u8A04\u8A05\u8A06\u8A08\u8A09\u8A0A\u8A0B\u8A0C\u8A0D\u8A0E\u8A0F\u8A10\u8A11\u8A12\u8A13\u8A14\u8A15\u8A16\u8A17\u8A18\u8A19\u8A1A\u8A1B\u8A1C\u8A1D\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89\uFFFD".split("");
      for (j = 0; j != D[211].length; ++j)
        if (D[211][j].charCodeAt(0) !== 65533) {
          e[D[211][j]] = 54016 + j;
          d[54016 + j] = D[211][j];
        }
      D[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A1E\u8A1F\u8A20\u8A21\u8A22\u8A23\u8A24\u8A25\u8A26\u8A27\u8A28\u8A29\u8A2A\u8A2B\u8A2C\u8A2D\u8A2E\u8A2F\u8A30\u8A31\u8A32\u8A33\u8A34\u8A35\u8A36\u8A37\u8A38\u8A39\u8A3A\u8A3B\u8A3C\u8A3D\u8A3F\u8A40\u8A41\u8A42\u8A43\u8A44\u8A45\u8A46\u8A47\u8A49\u8A4A\u8A4B\u8A4C\u8A4D\u8A4E\u8A4F\u8A50\u8A51\u8A52\u8A53\u8A54\u8A55\u8A56\u8A57\u8A58\u8A59\u8A5A\u8A5B\u8A5C\u8A5D\u8A5E\uFFFD\u8A5F\u8A60\u8A61\u8A62\u8A63\u8A64\u8A65\u8A66\u8A67\u8A68\u8A69\u8A6A\u8A6B\u8A6C\u8A6D\u8A6E\u8A6F\u8A70\u8A71\u8A72\u8A73\u8A74\u8A75\u8A76\u8A77\u8A78\u8A7A\u8A7B\u8A7C\u8A7D\u8A7E\u8A7F\u8A80\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67\uFFFD".split("");
      for (j = 0; j != D[212].length; ++j)
        if (D[212][j].charCodeAt(0) !== 65533) {
          e[D[212][j]] = 54272 + j;
          d[54272 + j] = D[212][j];
        }
      D[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A81\u8A82\u8A83\u8A84\u8A85\u8A86\u8A87\u8A88\u8A8B\u8A8C\u8A8D\u8A8E\u8A8F\u8A90\u8A91\u8A92\u8A94\u8A95\u8A96\u8A97\u8A98\u8A99\u8A9A\u8A9B\u8A9C\u8A9D\u8A9E\u8A9F\u8AA0\u8AA1\u8AA2\u8AA3\u8AA4\u8AA5\u8AA6\u8AA7\u8AA8\u8AA9\u8AAA\u8AAB\u8AAC\u8AAD\u8AAE\u8AAF\u8AB0\u8AB1\u8AB2\u8AB3\u8AB4\u8AB5\u8AB6\u8AB7\u8AB8\u8AB9\u8ABA\u8ABB\u8ABC\u8ABD\u8ABE\u8ABF\u8AC0\u8AC1\u8AC2\uFFFD\u8AC3\u8AC4\u8AC5\u8AC6\u8AC7\u8AC8\u8AC9\u8ACA\u8ACB\u8ACC\u8ACD\u8ACE\u8ACF\u8AD0\u8AD1\u8AD2\u8AD3\u8AD4\u8AD5\u8AD6\u8AD7\u8AD8\u8AD9\u8ADA\u8ADB\u8ADC\u8ADD\u8ADE\u8ADF\u8AE0\u8AE1\u8AE2\u8AE3\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F\uFFFD".split("");
      for (j = 0; j != D[213].length; ++j)
        if (D[213][j].charCodeAt(0) !== 65533) {
          e[D[213][j]] = 54528 + j;
          d[54528 + j] = D[213][j];
        }
      D[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AE4\u8AE5\u8AE6\u8AE7\u8AE8\u8AE9\u8AEA\u8AEB\u8AEC\u8AED\u8AEE\u8AEF\u8AF0\u8AF1\u8AF2\u8AF3\u8AF4\u8AF5\u8AF6\u8AF7\u8AF8\u8AF9\u8AFA\u8AFB\u8AFC\u8AFD\u8AFE\u8AFF\u8B00\u8B01\u8B02\u8B03\u8B04\u8B05\u8B06\u8B08\u8B09\u8B0A\u8B0B\u8B0C\u8B0D\u8B0E\u8B0F\u8B10\u8B11\u8B12\u8B13\u8B14\u8B15\u8B16\u8B17\u8B18\u8B19\u8B1A\u8B1B\u8B1C\u8B1D\u8B1E\u8B1F\u8B20\u8B21\u8B22\u8B23\uFFFD\u8B24\u8B25\u8B27\u8B28\u8B29\u8B2A\u8B2B\u8B2C\u8B2D\u8B2E\u8B2F\u8B30\u8B31\u8B32\u8B33\u8B34\u8B35\u8B36\u8B37\u8B38\u8B39\u8B3A\u8B3B\u8B3C\u8B3D\u8B3E\u8B3F\u8B40\u8B41\u8B42\u8B43\u8B44\u8B45\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51\uFFFD".split("");
      for (j = 0; j != D[214].length; ++j)
        if (D[214][j].charCodeAt(0) !== 65533) {
          e[D[214][j]] = 54784 + j;
          d[54784 + j] = D[214][j];
        }
      D[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B46\u8B47\u8B48\u8B49\u8B4A\u8B4B\u8B4C\u8B4D\u8B4E\u8B4F\u8B50\u8B51\u8B52\u8B53\u8B54\u8B55\u8B56\u8B57\u8B58\u8B59\u8B5A\u8B5B\u8B5C\u8B5D\u8B5E\u8B5F\u8B60\u8B61\u8B62\u8B63\u8B64\u8B65\u8B67\u8B68\u8B69\u8B6A\u8B6B\u8B6D\u8B6E\u8B6F\u8B70\u8B71\u8B72\u8B73\u8B74\u8B75\u8B76\u8B77\u8B78\u8B79\u8B7A\u8B7B\u8B7C\u8B7D\u8B7E\u8B7F\u8B80\u8B81\u8B82\u8B83\u8B84\u8B85\u8B86\uFFFD\u8B87\u8B88\u8B89\u8B8A\u8B8B\u8B8C\u8B8D\u8B8E\u8B8F\u8B90\u8B91\u8B92\u8B93\u8B94\u8B95\u8B96\u8B97\u8B98\u8B99\u8B9A\u8B9B\u8B9C\u8B9D\u8B9E\u8B9F\u8BAC\u8BB1\u8BBB\u8BC7\u8BD0\u8BEA\u8C09\u8C1E\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[215].length; ++j)
        if (D[215][j].charCodeAt(0) !== 65533) {
          e[D[215][j]] = 55040 + j;
          d[55040 + j] = D[215][j];
        }
      D[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8C38\u8C39\u8C3A\u8C3B\u8C3C\u8C3D\u8C3E\u8C3F\u8C40\u8C42\u8C43\u8C44\u8C45\u8C48\u8C4A\u8C4B\u8C4D\u8C4E\u8C4F\u8C50\u8C51\u8C52\u8C53\u8C54\u8C56\u8C57\u8C58\u8C59\u8C5B\u8C5C\u8C5D\u8C5E\u8C5F\u8C60\u8C63\u8C64\u8C65\u8C66\u8C67\u8C68\u8C69\u8C6C\u8C6D\u8C6E\u8C6F\u8C70\u8C71\u8C72\u8C74\u8C75\u8C76\u8C77\u8C7B\u8C7C\u8C7D\u8C7E\u8C7F\u8C80\u8C81\u8C83\u8C84\u8C86\u8C87\uFFFD\u8C88\u8C8B\u8C8D\u8C8E\u8C8F\u8C90\u8C91\u8C92\u8C93\u8C95\u8C96\u8C97\u8C99\u8C9A\u8C9B\u8C9C\u8C9D\u8C9E\u8C9F\u8CA0\u8CA1\u8CA2\u8CA3\u8CA4\u8CA5\u8CA6\u8CA7\u8CA8\u8CA9\u8CAA\u8CAB\u8CAC\u8CAD\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D\uFFFD".split("");
      for (j = 0; j != D[216].length; ++j)
        if (D[216][j].charCodeAt(0) !== 65533) {
          e[D[216][j]] = 55296 + j;
          d[55296 + j] = D[216][j];
        }
      D[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8CAE\u8CAF\u8CB0\u8CB1\u8CB2\u8CB3\u8CB4\u8CB5\u8CB6\u8CB7\u8CB8\u8CB9\u8CBA\u8CBB\u8CBC\u8CBD\u8CBE\u8CBF\u8CC0\u8CC1\u8CC2\u8CC3\u8CC4\u8CC5\u8CC6\u8CC7\u8CC8\u8CC9\u8CCA\u8CCB\u8CCC\u8CCD\u8CCE\u8CCF\u8CD0\u8CD1\u8CD2\u8CD3\u8CD4\u8CD5\u8CD6\u8CD7\u8CD8\u8CD9\u8CDA\u8CDB\u8CDC\u8CDD\u8CDE\u8CDF\u8CE0\u8CE1\u8CE2\u8CE3\u8CE4\u8CE5\u8CE6\u8CE7\u8CE8\u8CE9\u8CEA\u8CEB\u8CEC\uFFFD\u8CED\u8CEE\u8CEF\u8CF0\u8CF1\u8CF2\u8CF3\u8CF4\u8CF5\u8CF6\u8CF7\u8CF8\u8CF9\u8CFA\u8CFB\u8CFC\u8CFD\u8CFE\u8CFF\u8D00\u8D01\u8D02\u8D03\u8D04\u8D05\u8D06\u8D07\u8D08\u8D09\u8D0A\u8D0B\u8D0C\u8D0D\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC\uFFFD".split("");
      for (j = 0; j != D[217].length; ++j)
        if (D[217][j].charCodeAt(0) !== 65533) {
          e[D[217][j]] = 55552 + j;
          d[55552 + j] = D[217][j];
        }
      D[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D0E\u8D0F\u8D10\u8D11\u8D12\u8D13\u8D14\u8D15\u8D16\u8D17\u8D18\u8D19\u8D1A\u8D1B\u8D1C\u8D20\u8D51\u8D52\u8D57\u8D5F\u8D65\u8D68\u8D69\u8D6A\u8D6C\u8D6E\u8D6F\u8D71\u8D72\u8D78\u8D79\u8D7A\u8D7B\u8D7C\u8D7D\u8D7E\u8D7F\u8D80\u8D82\u8D83\u8D86\u8D87\u8D88\u8D89\u8D8C\u8D8D\u8D8E\u8D8F\u8D90\u8D92\u8D93\u8D95\u8D96\u8D97\u8D98\u8D99\u8D9A\u8D9B\u8D9C\u8D9D\u8D9E\u8DA0\u8DA1\uFFFD\u8DA2\u8DA4\u8DA5\u8DA6\u8DA7\u8DA8\u8DA9\u8DAA\u8DAB\u8DAC\u8DAD\u8DAE\u8DAF\u8DB0\u8DB2\u8DB6\u8DB7\u8DB9\u8DBB\u8DBD\u8DC0\u8DC1\u8DC2\u8DC5\u8DC7\u8DC8\u8DC9\u8DCA\u8DCD\u8DD0\u8DD2\u8DD3\u8DD4\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA\uFFFD".split("");
      for (j = 0; j != D[218].length; ++j)
        if (D[218][j].charCodeAt(0) !== 65533) {
          e[D[218][j]] = 55808 + j;
          d[55808 + j] = D[218][j];
        }
      D[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8DD5\u8DD8\u8DD9\u8DDC\u8DE0\u8DE1\u8DE2\u8DE5\u8DE6\u8DE7\u8DE9\u8DED\u8DEE\u8DF0\u8DF1\u8DF2\u8DF4\u8DF6\u8DFC\u8DFE\u8DFF\u8E00\u8E01\u8E02\u8E03\u8E04\u8E06\u8E07\u8E08\u8E0B\u8E0D\u8E0E\u8E10\u8E11\u8E12\u8E13\u8E15\u8E16\u8E17\u8E18\u8E19\u8E1A\u8E1B\u8E1C\u8E20\u8E21\u8E24\u8E25\u8E26\u8E27\u8E28\u8E2B\u8E2D\u8E30\u8E32\u8E33\u8E34\u8E36\u8E37\u8E38\u8E3B\u8E3C\u8E3E\uFFFD\u8E3F\u8E43\u8E45\u8E46\u8E4C\u8E4D\u8E4E\u8E4F\u8E50\u8E53\u8E54\u8E55\u8E56\u8E57\u8E58\u8E5A\u8E5B\u8E5C\u8E5D\u8E5E\u8E5F\u8E60\u8E61\u8E62\u8E63\u8E64\u8E65\u8E67\u8E68\u8E6A\u8E6B\u8E6E\u8E71\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD\uFFFD".split("");
      for (j = 0; j != D[219].length; ++j)
        if (D[219][j].charCodeAt(0) !== 65533) {
          e[D[219][j]] = 56064 + j;
          d[56064 + j] = D[219][j];
        }
      D[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E73\u8E75\u8E77\u8E78\u8E79\u8E7A\u8E7B\u8E7D\u8E7E\u8E80\u8E82\u8E83\u8E84\u8E86\u8E88\u8E89\u8E8A\u8E8B\u8E8C\u8E8D\u8E8E\u8E91\u8E92\u8E93\u8E95\u8E96\u8E97\u8E98\u8E99\u8E9A\u8E9B\u8E9D\u8E9F\u8EA0\u8EA1\u8EA2\u8EA3\u8EA4\u8EA5\u8EA6\u8EA7\u8EA8\u8EA9\u8EAA\u8EAD\u8EAE\u8EB0\u8EB1\u8EB3\u8EB4\u8EB5\u8EB6\u8EB7\u8EB8\u8EB9\u8EBB\u8EBC\u8EBD\u8EBE\u8EBF\u8EC0\u8EC1\u8EC2\uFFFD\u8EC3\u8EC4\u8EC5\u8EC6\u8EC7\u8EC8\u8EC9\u8ECA\u8ECB\u8ECC\u8ECD\u8ECF\u8ED0\u8ED1\u8ED2\u8ED3\u8ED4\u8ED5\u8ED6\u8ED7\u8ED8\u8ED9\u8EDA\u8EDB\u8EDC\u8EDD\u8EDE\u8EDF\u8EE0\u8EE1\u8EE2\u8EE3\u8EE4\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365\uFFFD".split("");
      for (j = 0; j != D[220].length; ++j)
        if (D[220][j].charCodeAt(0) !== 65533) {
          e[D[220][j]] = 56320 + j;
          d[56320 + j] = D[220][j];
        }
      D[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8EE5\u8EE6\u8EE7\u8EE8\u8EE9\u8EEA\u8EEB\u8EEC\u8EED\u8EEE\u8EEF\u8EF0\u8EF1\u8EF2\u8EF3\u8EF4\u8EF5\u8EF6\u8EF7\u8EF8\u8EF9\u8EFA\u8EFB\u8EFC\u8EFD\u8EFE\u8EFF\u8F00\u8F01\u8F02\u8F03\u8F04\u8F05\u8F06\u8F07\u8F08\u8F09\u8F0A\u8F0B\u8F0C\u8F0D\u8F0E\u8F0F\u8F10\u8F11\u8F12\u8F13\u8F14\u8F15\u8F16\u8F17\u8F18\u8F19\u8F1A\u8F1B\u8F1C\u8F1D\u8F1E\u8F1F\u8F20\u8F21\u8F22\u8F23\uFFFD\u8F24\u8F25\u8F26\u8F27\u8F28\u8F29\u8F2A\u8F2B\u8F2C\u8F2D\u8F2E\u8F2F\u8F30\u8F31\u8F32\u8F33\u8F34\u8F35\u8F36\u8F37\u8F38\u8F39\u8F3A\u8F3B\u8F3C\u8F3D\u8F3E\u8F3F\u8F40\u8F41\u8F42\u8F43\u8F44\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A\uFFFD".split("");
      for (j = 0; j != D[221].length; ++j)
        if (D[221][j].charCodeAt(0) !== 65533) {
          e[D[221][j]] = 56576 + j;
          d[56576 + j] = D[221][j];
        }
      D[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F45\u8F46\u8F47\u8F48\u8F49\u8F4A\u8F4B\u8F4C\u8F4D\u8F4E\u8F4F\u8F50\u8F51\u8F52\u8F53\u8F54\u8F55\u8F56\u8F57\u8F58\u8F59\u8F5A\u8F5B\u8F5C\u8F5D\u8F5E\u8F5F\u8F60\u8F61\u8F62\u8F63\u8F64\u8F65\u8F6A\u8F80\u8F8C\u8F92\u8F9D\u8FA0\u8FA1\u8FA2\u8FA4\u8FA5\u8FA6\u8FA7\u8FAA\u8FAC\u8FAD\u8FAE\u8FAF\u8FB2\u8FB3\u8FB4\u8FB5\u8FB7\u8FB8\u8FBA\u8FBB\u8FBC\u8FBF\u8FC0\u8FC3\u8FC6\uFFFD\u8FC9\u8FCA\u8FCB\u8FCC\u8FCD\u8FCF\u8FD2\u8FD6\u8FD7\u8FDA\u8FE0\u8FE1\u8FE3\u8FE7\u8FEC\u8FEF\u8FF1\u8FF2\u8FF4\u8FF5\u8FF6\u8FFA\u8FFB\u8FFC\u8FFE\u8FFF\u9007\u9008\u900C\u900E\u9013\u9015\u9018\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496\uFFFD".split("");
      for (j = 0; j != D[222].length; ++j)
        if (D[222][j].charCodeAt(0) !== 65533) {
          e[D[222][j]] = 56832 + j;
          d[56832 + j] = D[222][j];
        }
      D[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9019\u901C\u9023\u9024\u9025\u9027\u9028\u9029\u902A\u902B\u902C\u9030\u9031\u9032\u9033\u9034\u9037\u9039\u903A\u903D\u903F\u9040\u9043\u9045\u9046\u9048\u9049\u904A\u904B\u904C\u904E\u9054\u9055\u9056\u9059\u905A\u905C\u905D\u905E\u905F\u9060\u9061\u9064\u9066\u9067\u9069\u906A\u906B\u906C\u906F\u9070\u9071\u9072\u9073\u9076\u9077\u9078\u9079\u907A\u907B\u907C\u907E\u9081\uFFFD\u9084\u9085\u9086\u9087\u9089\u908A\u908C\u908D\u908E\u908F\u9090\u9092\u9094\u9096\u9098\u909A\u909C\u909E\u909F\u90A0\u90A4\u90A5\u90A7\u90A8\u90A9\u90AB\u90AD\u90B2\u90B7\u90BC\u90BD\u90BF\u90C0\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C\uFFFD".split("");
      for (j = 0; j != D[223].length; ++j)
        if (D[223][j].charCodeAt(0) !== 65533) {
          e[D[223][j]] = 57088 + j;
          d[57088 + j] = D[223][j];
        }
      D[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90C2\u90C3\u90C6\u90C8\u90C9\u90CB\u90CC\u90CD\u90D2\u90D4\u90D5\u90D6\u90D8\u90D9\u90DA\u90DE\u90DF\u90E0\u90E3\u90E4\u90E5\u90E9\u90EA\u90EC\u90EE\u90F0\u90F1\u90F2\u90F3\u90F5\u90F6\u90F7\u90F9\u90FA\u90FB\u90FC\u90FF\u9100\u9101\u9103\u9105\u9106\u9107\u9108\u9109\u910A\u910B\u910C\u910D\u910E\u910F\u9110\u9111\u9112\u9113\u9114\u9115\u9116\u9117\u9118\u911A\u911B\u911C\uFFFD\u911D\u911F\u9120\u9121\u9124\u9125\u9126\u9127\u9128\u9129\u912A\u912B\u912C\u912D\u912E\u9130\u9132\u9133\u9134\u9135\u9136\u9137\u9138\u913A\u913B\u913C\u913D\u913E\u913F\u9140\u9141\u9142\u9144\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C\uFFFD".split("");
      for (j = 0; j != D[224].length; ++j)
        if (D[224][j].charCodeAt(0) !== 65533) {
          e[D[224][j]] = 57344 + j;
          d[57344 + j] = D[224][j];
        }
      D[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9145\u9147\u9148\u9151\u9153\u9154\u9155\u9156\u9158\u9159\u915B\u915C\u915F\u9160\u9166\u9167\u9168\u916B\u916D\u9173\u917A\u917B\u917C\u9180\u9181\u9182\u9183\u9184\u9186\u9188\u918A\u918E\u918F\u9193\u9194\u9195\u9196\u9197\u9198\u9199\u919C\u919D\u919E\u919F\u91A0\u91A1\u91A4\u91A5\u91A6\u91A7\u91A8\u91A9\u91AB\u91AC\u91B0\u91B1\u91B2\u91B3\u91B6\u91B7\u91B8\u91B9\u91BB\uFFFD\u91BC\u91BD\u91BE\u91BF\u91C0\u91C1\u91C2\u91C3\u91C4\u91C5\u91C6\u91C8\u91CB\u91D0\u91D2\u91D3\u91D4\u91D5\u91D6\u91D7\u91D8\u91D9\u91DA\u91DB\u91DD\u91DE\u91DF\u91E0\u91E1\u91E2\u91E3\u91E4\u91E5\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA\uFFFD".split("");
      for (j = 0; j != D[225].length; ++j)
        if (D[225][j].charCodeAt(0) !== 65533) {
          e[D[225][j]] = 57600 + j;
          d[57600 + j] = D[225][j];
        }
      D[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u91E6\u91E7\u91E8\u91E9\u91EA\u91EB\u91EC\u91ED\u91EE\u91EF\u91F0\u91F1\u91F2\u91F3\u91F4\u91F5\u91F6\u91F7\u91F8\u91F9\u91FA\u91FB\u91FC\u91FD\u91FE\u91FF\u9200\u9201\u9202\u9203\u9204\u9205\u9206\u9207\u9208\u9209\u920A\u920B\u920C\u920D\u920E\u920F\u9210\u9211\u9212\u9213\u9214\u9215\u9216\u9217\u9218\u9219\u921A\u921B\u921C\u921D\u921E\u921F\u9220\u9221\u9222\u9223\u9224\uFFFD\u9225\u9226\u9227\u9228\u9229\u922A\u922B\u922C\u922D\u922E\u922F\u9230\u9231\u9232\u9233\u9234\u9235\u9236\u9237\u9238\u9239\u923A\u923B\u923C\u923D\u923E\u923F\u9240\u9241\u9242\u9243\u9244\u9245\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967\u9968\u9969\u996A\u996B\u996C\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042\uFFFD".split("");
      for (j = 0; j != D[226].length; ++j)
        if (D[226][j].charCodeAt(0) !== 65533) {
          e[D[226][j]] = 57856 + j;
          d[57856 + j] = D[226][j];
        }
      D[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9246\u9247\u9248\u9249\u924A\u924B\u924C\u924D\u924E\u924F\u9250\u9251\u9252\u9253\u9254\u9255\u9256\u9257\u9258\u9259\u925A\u925B\u925C\u925D\u925E\u925F\u9260\u9261\u9262\u9263\u9264\u9265\u9266\u9267\u9268\u9269\u926A\u926B\u926C\u926D\u926E\u926F\u9270\u9271\u9272\u9273\u9275\u9276\u9277\u9278\u9279\u927A\u927B\u927C\u927D\u927E\u927F\u9280\u9281\u9282\u9283\u9284\u9285\uFFFD\u9286\u9287\u9288\u9289\u928A\u928B\u928C\u928D\u928F\u9290\u9291\u9292\u9293\u9294\u9295\u9296\u9297\u9298\u9299\u929A\u929B\u929C\u929D\u929E\u929F\u92A0\u92A1\u92A2\u92A3\u92A4\u92A5\u92A6\u92A7\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE\uFFFD".split("");
      for (j = 0; j != D[227].length; ++j)
        if (D[227][j].charCodeAt(0) !== 65533) {
          e[D[227][j]] = 58112 + j;
          d[58112 + j] = D[227][j];
        }
      D[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92A8\u92A9\u92AA\u92AB\u92AC\u92AD\u92AF\u92B0\u92B1\u92B2\u92B3\u92B4\u92B5\u92B6\u92B7\u92B8\u92B9\u92BA\u92BB\u92BC\u92BD\u92BE\u92BF\u92C0\u92C1\u92C2\u92C3\u92C4\u92C5\u92C6\u92C7\u92C9\u92CA\u92CB\u92CC\u92CD\u92CE\u92CF\u92D0\u92D1\u92D2\u92D3\u92D4\u92D5\u92D6\u92D7\u92D8\u92D9\u92DA\u92DB\u92DC\u92DD\u92DE\u92DF\u92E0\u92E1\u92E2\u92E3\u92E4\u92E5\u92E6\u92E7\u92E8\uFFFD\u92E9\u92EA\u92EB\u92EC\u92ED\u92EE\u92EF\u92F0\u92F1\u92F2\u92F3\u92F4\u92F5\u92F6\u92F7\u92F8\u92F9\u92FA\u92FB\u92FC\u92FD\u92FE\u92FF\u9300\u9301\u9302\u9303\u9304\u9305\u9306\u9307\u9308\u9309\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1\uFFFD".split("");
      for (j = 0; j != D[228].length; ++j)
        if (D[228][j].charCodeAt(0) !== 65533) {
          e[D[228][j]] = 58368 + j;
          d[58368 + j] = D[228][j];
        }
      D[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u930A\u930B\u930C\u930D\u930E\u930F\u9310\u9311\u9312\u9313\u9314\u9315\u9316\u9317\u9318\u9319\u931A\u931B\u931C\u931D\u931E\u931F\u9320\u9321\u9322\u9323\u9324\u9325\u9326\u9327\u9328\u9329\u932A\u932B\u932C\u932D\u932E\u932F\u9330\u9331\u9332\u9333\u9334\u9335\u9336\u9337\u9338\u9339\u933A\u933B\u933C\u933D\u933F\u9340\u9341\u9342\u9343\u9344\u9345\u9346\u9347\u9348\u9349\uFFFD\u934A\u934B\u934C\u934D\u934E\u934F\u9350\u9351\u9352\u9353\u9354\u9355\u9356\u9357\u9358\u9359\u935A\u935B\u935C\u935D\u935E\u935F\u9360\u9361\u9362\u9363\u9364\u9365\u9366\u9367\u9368\u9369\u936B\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3\uFFFD".split("");
      for (j = 0; j != D[229].length; ++j)
        if (D[229][j].charCodeAt(0) !== 65533) {
          e[D[229][j]] = 58624 + j;
          d[58624 + j] = D[229][j];
        }
      D[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u936C\u936D\u936E\u936F\u9370\u9371\u9372\u9373\u9374\u9375\u9376\u9377\u9378\u9379\u937A\u937B\u937C\u937D\u937E\u937F\u9380\u9381\u9382\u9383\u9384\u9385\u9386\u9387\u9388\u9389\u938A\u938B\u938C\u938D\u938E\u9390\u9391\u9392\u9393\u9394\u9395\u9396\u9397\u9398\u9399\u939A\u939B\u939C\u939D\u939E\u939F\u93A0\u93A1\u93A2\u93A3\u93A4\u93A5\u93A6\u93A7\u93A8\u93A9\u93AA\u93AB\uFFFD\u93AC\u93AD\u93AE\u93AF\u93B0\u93B1\u93B2\u93B3\u93B4\u93B5\u93B6\u93B7\u93B8\u93B9\u93BA\u93BB\u93BC\u93BD\u93BE\u93BF\u93C0\u93C1\u93C2\u93C3\u93C4\u93C5\u93C6\u93C7\u93C8\u93C9\u93CB\u93CC\u93CD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9\uFFFD".split("");
      for (j = 0; j != D[230].length; ++j)
        if (D[230][j].charCodeAt(0) !== 65533) {
          e[D[230][j]] = 58880 + j;
          d[58880 + j] = D[230][j];
        }
      D[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93CE\u93CF\u93D0\u93D1\u93D2\u93D3\u93D4\u93D5\u93D7\u93D8\u93D9\u93DA\u93DB\u93DC\u93DD\u93DE\u93DF\u93E0\u93E1\u93E2\u93E3\u93E4\u93E5\u93E6\u93E7\u93E8\u93E9\u93EA\u93EB\u93EC\u93ED\u93EE\u93EF\u93F0\u93F1\u93F2\u93F3\u93F4\u93F5\u93F6\u93F7\u93F8\u93F9\u93FA\u93FB\u93FC\u93FD\u93FE\u93FF\u9400\u9401\u9402\u9403\u9404\u9405\u9406\u9407\u9408\u9409\u940A\u940B\u940C\u940D\uFFFD\u940E\u940F\u9410\u9411\u9412\u9413\u9414\u9415\u9416\u9417\u9418\u9419\u941A\u941B\u941C\u941D\u941E\u941F\u9420\u9421\u9422\u9423\u9424\u9425\u9426\u9427\u9428\u9429\u942A\u942B\u942C\u942D\u942E\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21\u7F22\u7F23\u7F24\u7F25\u7F26\u7F27\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F\u7F30\u7F31\u7F32\u7F33\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C\uFFFD".split("");
      for (j = 0; j != D[231].length; ++j)
        if (D[231][j].charCodeAt(0) !== 65533) {
          e[D[231][j]] = 59136 + j;
          d[59136 + j] = D[231][j];
        }
      D[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u942F\u9430\u9431\u9432\u9433\u9434\u9435\u9436\u9437\u9438\u9439\u943A\u943B\u943C\u943D\u943F\u9440\u9441\u9442\u9443\u9444\u9445\u9446\u9447\u9448\u9449\u944A\u944B\u944C\u944D\u944E\u944F\u9450\u9451\u9452\u9453\u9454\u9455\u9456\u9457\u9458\u9459\u945A\u945B\u945C\u945D\u945E\u945F\u9460\u9461\u9462\u9463\u9464\u9465\u9466\u9467\u9468\u9469\u946A\u946C\u946D\u946E\u946F\uFFFD\u9470\u9471\u9472\u9473\u9474\u9475\u9476\u9477\u9478\u9479\u947A\u947B\u947C\u947D\u947E\u947F\u9480\u9481\u9482\u9483\u9484\u9491\u9496\u9498\u94C7\u94CF\u94D3\u94D4\u94DA\u94E6\u94FB\u951C\u9520\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9\uFFFD".split("");
      for (j = 0; j != D[232].length; ++j)
        if (D[232][j].charCodeAt(0) !== 65533) {
          e[D[232][j]] = 59392 + j;
          d[59392 + j] = D[232][j];
        }
      D[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9527\u9533\u953D\u9543\u9548\u954B\u9555\u955A\u9560\u956E\u9574\u9575\u9577\u9578\u9579\u957A\u957B\u957C\u957D\u957E\u9580\u9581\u9582\u9583\u9584\u9585\u9586\u9587\u9588\u9589\u958A\u958B\u958C\u958D\u958E\u958F\u9590\u9591\u9592\u9593\u9594\u9595\u9596\u9597\u9598\u9599\u959A\u959B\u959C\u959D\u959E\u959F\u95A0\u95A1\u95A2\u95A3\u95A4\u95A5\u95A6\u95A7\u95A8\u95A9\u95AA\uFFFD\u95AB\u95AC\u95AD\u95AE\u95AF\u95B0\u95B1\u95B2\u95B3\u95B4\u95B5\u95B6\u95B7\u95B8\u95B9\u95BA\u95BB\u95BC\u95BD\u95BE\u95BF\u95C0\u95C1\u95C2\u95C3\u95C4\u95C5\u95C6\u95C7\u95C8\u95C9\u95CA\u95CB\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B\uFFFD".split("");
      for (j = 0; j != D[233].length; ++j)
        if (D[233][j].charCodeAt(0) !== 65533) {
          e[D[233][j]] = 59648 + j;
          d[59648 + j] = D[233][j];
        }
      D[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u95CC\u95CD\u95CE\u95CF\u95D0\u95D1\u95D2\u95D3\u95D4\u95D5\u95D6\u95D7\u95D8\u95D9\u95DA\u95DB\u95DC\u95DD\u95DE\u95DF\u95E0\u95E1\u95E2\u95E3\u95E4\u95E5\u95E6\u95E7\u95EC\u95FF\u9607\u9613\u9618\u961B\u961E\u9620\u9623\u9624\u9625\u9626\u9627\u9628\u9629\u962B\u962C\u962D\u962F\u9630\u9637\u9638\u9639\u963A\u963E\u9641\u9643\u964A\u964E\u964F\u9651\u9652\u9653\u9656\u9657\uFFFD\u9658\u9659\u965A\u965C\u965D\u965E\u9660\u9663\u9665\u9666\u966B\u966D\u966E\u966F\u9670\u9671\u9673\u9678\u9679\u967A\u967B\u967C\u967D\u967E\u967F\u9680\u9681\u9682\u9683\u9684\u9687\u9689\u968A\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0\uFFFD".split("");
      for (j = 0; j != D[234].length; ++j)
        if (D[234][j].charCodeAt(0) !== 65533) {
          e[D[234][j]] = 59904 + j;
          d[59904 + j] = D[234][j];
        }
      D[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u968C\u968E\u9691\u9692\u9693\u9695\u9696\u969A\u969B\u969D\u969E\u969F\u96A0\u96A1\u96A2\u96A3\u96A4\u96A5\u96A6\u96A8\u96A9\u96AA\u96AB\u96AC\u96AD\u96AE\u96AF\u96B1\u96B2\u96B4\u96B5\u96B7\u96B8\u96BA\u96BB\u96BF\u96C2\u96C3\u96C8\u96CA\u96CB\u96D0\u96D1\u96D3\u96D4\u96D6\u96D7\u96D8\u96D9\u96DA\u96DB\u96DC\u96DD\u96DE\u96DF\u96E1\u96E2\u96E3\u96E4\u96E5\u96E6\u96E7\u96EB\uFFFD\u96EC\u96ED\u96EE\u96F0\u96F1\u96F2\u96F4\u96F5\u96F8\u96FA\u96FB\u96FC\u96FD\u96FF\u9702\u9703\u9705\u970A\u970B\u970C\u9710\u9711\u9712\u9714\u9715\u9717\u9718\u9719\u971A\u971B\u971D\u971F\u9720\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB\uFFFD".split("");
      for (j = 0; j != D[235].length; ++j)
        if (D[235][j].charCodeAt(0) !== 65533) {
          e[D[235][j]] = 60160 + j;
          d[60160 + j] = D[235][j];
        }
      D[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9721\u9722\u9723\u9724\u9725\u9726\u9727\u9728\u9729\u972B\u972C\u972E\u972F\u9731\u9733\u9734\u9735\u9736\u9737\u973A\u973B\u973C\u973D\u973F\u9740\u9741\u9742\u9743\u9744\u9745\u9746\u9747\u9748\u9749\u974A\u974B\u974C\u974D\u974E\u974F\u9750\u9751\u9754\u9755\u9757\u9758\u975A\u975C\u975D\u975F\u9763\u9764\u9766\u9767\u9768\u976A\u976B\u976C\u976D\u976E\u976F\u9770\u9771\uFFFD\u9772\u9775\u9777\u9778\u9779\u977A\u977B\u977D\u977E\u977F\u9780\u9781\u9782\u9783\u9784\u9786\u9787\u9788\u9789\u978A\u978C\u978E\u978F\u9790\u9793\u9795\u9796\u9797\u9799\u979A\u979B\u979C\u979D\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0\uFFFD".split("");
      for (j = 0; j != D[236].length; ++j)
        if (D[236][j].charCodeAt(0) !== 65533) {
          e[D[236][j]] = 60416 + j;
          d[60416 + j] = D[236][j];
        }
      D[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u979E\u979F\u97A1\u97A2\u97A4\u97A5\u97A6\u97A7\u97A8\u97A9\u97AA\u97AC\u97AE\u97B0\u97B1\u97B3\u97B5\u97B6\u97B7\u97B8\u97B9\u97BA\u97BB\u97BC\u97BD\u97BE\u97BF\u97C0\u97C1\u97C2\u97C3\u97C4\u97C5\u97C6\u97C7\u97C8\u97C9\u97CA\u97CB\u97CC\u97CD\u97CE\u97CF\u97D0\u97D1\u97D2\u97D3\u97D4\u97D5\u97D6\u97D7\u97D8\u97D9\u97DA\u97DB\u97DC\u97DD\u97DE\u97DF\u97E0\u97E1\u97E2\u97E3\uFFFD\u97E4\u97E5\u97E8\u97EE\u97EF\u97F0\u97F1\u97F2\u97F4\u97F7\u97F8\u97F9\u97FA\u97FB\u97FC\u97FD\u97FE\u97FF\u9800\u9801\u9802\u9803\u9804\u9805\u9806\u9807\u9808\u9809\u980A\u980B\u980C\u980D\u980E\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768\uFFFD".split("");
      for (j = 0; j != D[237].length; ++j)
        if (D[237][j].charCodeAt(0) !== 65533) {
          e[D[237][j]] = 60672 + j;
          d[60672 + j] = D[237][j];
        }
      D[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u980F\u9810\u9811\u9812\u9813\u9814\u9815\u9816\u9817\u9818\u9819\u981A\u981B\u981C\u981D\u981E\u981F\u9820\u9821\u9822\u9823\u9824\u9825\u9826\u9827\u9828\u9829\u982A\u982B\u982C\u982D\u982E\u982F\u9830\u9831\u9832\u9833\u9834\u9835\u9836\u9837\u9838\u9839\u983A\u983B\u983C\u983D\u983E\u983F\u9840\u9841\u9842\u9843\u9844\u9845\u9846\u9847\u9848\u9849\u984A\u984B\u984C\u984D\uFFFD\u984E\u984F\u9850\u9851\u9852\u9853\u9854\u9855\u9856\u9857\u9858\u9859\u985A\u985B\u985C\u985D\u985E\u985F\u9860\u9861\u9862\u9863\u9864\u9865\u9866\u9867\u9868\u9869\u986A\u986B\u986C\u986D\u986E\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6\u94B7\u94B8\u94B9\u94BA\u94BC\u94BD\u94BF\u94C4\u94C8\u94C9\u94CA\u94CB\u94CC\u94CD\u94CE\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA\uFFFD".split("");
      for (j = 0; j != D[238].length; ++j)
        if (D[238][j].charCodeAt(0) !== 65533) {
          e[D[238][j]] = 60928 + j;
          d[60928 + j] = D[238][j];
        }
      D[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u986F\u9870\u9871\u9872\u9873\u9874\u988B\u988E\u9892\u9895\u9899\u98A3\u98A8\u98A9\u98AA\u98AB\u98AC\u98AD\u98AE\u98AF\u98B0\u98B1\u98B2\u98B3\u98B4\u98B5\u98B6\u98B7\u98B8\u98B9\u98BA\u98BB\u98BC\u98BD\u98BE\u98BF\u98C0\u98C1\u98C2\u98C3\u98C4\u98C5\u98C6\u98C7\u98C8\u98C9\u98CA\u98CB\u98CC\u98CD\u98CF\u98D0\u98D4\u98D6\u98D7\u98DB\u98DC\u98DD\u98E0\u98E1\u98E2\u98E3\u98E4\uFFFD\u98E5\u98E6\u98E9\u98EA\u98EB\u98EC\u98ED\u98EE\u98EF\u98F0\u98F1\u98F2\u98F3\u98F4\u98F5\u98F6\u98F7\u98F8\u98F9\u98FA\u98FB\u98FC\u98FD\u98FE\u98FF\u9900\u9901\u9902\u9903\u9904\u9905\u9906\u9907\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512\u9513\u9514\u9515\u9516\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564\u9565\u9566\u9567\u9568\u9569\u956A\u956B\u956C\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14\uFFFD".split("");
      for (j = 0; j != D[239].length; ++j)
        if (D[239][j].charCodeAt(0) !== 65533) {
          e[D[239][j]] = 61184 + j;
          d[61184 + j] = D[239][j];
        }
      D[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9908\u9909\u990A\u990B\u990C\u990E\u990F\u9911\u9912\u9913\u9914\u9915\u9916\u9917\u9918\u9919\u991A\u991B\u991C\u991D\u991E\u991F\u9920\u9921\u9922\u9923\u9924\u9925\u9926\u9927\u9928\u9929\u992A\u992B\u992C\u992D\u992F\u9930\u9931\u9932\u9933\u9934\u9935\u9936\u9937\u9938\u9939\u993A\u993B\u993C\u993D\u993E\u993F\u9940\u9941\u9942\u9943\u9944\u9945\u9946\u9947\u9948\u9949\uFFFD\u994A\u994B\u994C\u994D\u994E\u994F\u9950\u9951\u9952\u9953\u9956\u9957\u9958\u9959\u995A\u995B\u995C\u995D\u995E\u995F\u9960\u9961\u9962\u9964\u9966\u9973\u9978\u9979\u997B\u997E\u9982\u9983\u9989\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28\u9E29\u9E2A\u9E2B\u9E2C\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66\u9E67\u9E68\u9E69\u9E6A\u9E6B\u9E6C\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619\uFFFD".split("");
      for (j = 0; j != D[240].length; ++j)
        if (D[240][j].charCodeAt(0) !== 65533) {
          e[D[240][j]] = 61440 + j;
          d[61440 + j] = D[240][j];
        }
      D[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u998C\u998E\u999A\u999B\u999C\u999D\u999E\u999F\u99A0\u99A1\u99A2\u99A3\u99A4\u99A6\u99A7\u99A9\u99AA\u99AB\u99AC\u99AD\u99AE\u99AF\u99B0\u99B1\u99B2\u99B3\u99B4\u99B5\u99B6\u99B7\u99B8\u99B9\u99BA\u99BB\u99BC\u99BD\u99BE\u99BF\u99C0\u99C1\u99C2\u99C3\u99C4\u99C5\u99C6\u99C7\u99C8\u99C9\u99CA\u99CB\u99CC\u99CD\u99CE\u99CF\u99D0\u99D1\u99D2\u99D3\u99D4\u99D5\u99D6\u99D7\u99D8\uFFFD\u99D9\u99DA\u99DB\u99DC\u99DD\u99DE\u99DF\u99E0\u99E1\u99E2\u99E3\u99E4\u99E5\u99E6\u99E7\u99E8\u99E9\u99EA\u99EB\u99EC\u99ED\u99EE\u99EF\u99F0\u99F1\u99F2\u99F3\u99F4\u99F5\u99F6\u99F7\u99F8\u99F9\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883\uFFFD".split("");
      for (j = 0; j != D[241].length; ++j)
        if (D[241][j].charCodeAt(0) !== 65533) {
          e[D[241][j]] = 61696 + j;
          d[61696 + j] = D[241][j];
        }
      D[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u99FA\u99FB\u99FC\u99FD\u99FE\u99FF\u9A00\u9A01\u9A02\u9A03\u9A04\u9A05\u9A06\u9A07\u9A08\u9A09\u9A0A\u9A0B\u9A0C\u9A0D\u9A0E\u9A0F\u9A10\u9A11\u9A12\u9A13\u9A14\u9A15\u9A16\u9A17\u9A18\u9A19\u9A1A\u9A1B\u9A1C\u9A1D\u9A1E\u9A1F\u9A20\u9A21\u9A22\u9A23\u9A24\u9A25\u9A26\u9A27\u9A28\u9A29\u9A2A\u9A2B\u9A2C\u9A2D\u9A2E\u9A2F\u9A30\u9A31\u9A32\u9A33\u9A34\u9A35\u9A36\u9A37\u9A38\uFFFD\u9A39\u9A3A\u9A3B\u9A3C\u9A3D\u9A3E\u9A3F\u9A40\u9A41\u9A42\u9A43\u9A44\u9A45\u9A46\u9A47\u9A48\u9A49\u9A4A\u9A4B\u9A4C\u9A4D\u9A4E\u9A4F\u9A50\u9A51\u9A52\u9A53\u9A54\u9A55\u9A56\u9A57\u9A58\u9A59\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2\uFFFD".split("");
      for (j = 0; j != D[242].length; ++j)
        if (D[242][j].charCodeAt(0) !== 65533) {
          e[D[242][j]] = 61952 + j;
          d[61952 + j] = D[242][j];
        }
      D[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A5A\u9A5B\u9A5C\u9A5D\u9A5E\u9A5F\u9A60\u9A61\u9A62\u9A63\u9A64\u9A65\u9A66\u9A67\u9A68\u9A69\u9A6A\u9A6B\u9A72\u9A83\u9A89\u9A8D\u9A8E\u9A94\u9A95\u9A99\u9AA6\u9AA9\u9AAA\u9AAB\u9AAC\u9AAD\u9AAE\u9AAF\u9AB2\u9AB3\u9AB4\u9AB5\u9AB9\u9ABB\u9ABD\u9ABE\u9ABF\u9AC3\u9AC4\u9AC6\u9AC7\u9AC8\u9AC9\u9ACA\u9ACD\u9ACE\u9ACF\u9AD0\u9AD2\u9AD4\u9AD5\u9AD6\u9AD7\u9AD9\u9ADA\u9ADB\u9ADC\uFFFD\u9ADD\u9ADE\u9AE0\u9AE2\u9AE3\u9AE4\u9AE5\u9AE7\u9AE8\u9AE9\u9AEA\u9AEC\u9AEE\u9AF0\u9AF1\u9AF2\u9AF3\u9AF4\u9AF5\u9AF6\u9AF7\u9AF8\u9AFA\u9AFC\u9AFD\u9AFE\u9AFF\u9B00\u9B01\u9B02\u9B04\u9B05\u9B06\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B\uFFFD".split("");
      for (j = 0; j != D[243].length; ++j)
        if (D[243][j].charCodeAt(0) !== 65533) {
          e[D[243][j]] = 62208 + j;
          d[62208 + j] = D[243][j];
        }
      D[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B07\u9B09\u9B0A\u9B0B\u9B0C\u9B0D\u9B0E\u9B10\u9B11\u9B12\u9B14\u9B15\u9B16\u9B17\u9B18\u9B19\u9B1A\u9B1B\u9B1C\u9B1D\u9B1E\u9B20\u9B21\u9B22\u9B24\u9B25\u9B26\u9B27\u9B28\u9B29\u9B2A\u9B2B\u9B2C\u9B2D\u9B2E\u9B30\u9B31\u9B33\u9B34\u9B35\u9B36\u9B37\u9B38\u9B39\u9B3A\u9B3D\u9B3E\u9B3F\u9B40\u9B46\u9B4A\u9B4B\u9B4C\u9B4E\u9B50\u9B52\u9B53\u9B55\u9B56\u9B57\u9B58\u9B59\u9B5A\uFFFD\u9B5B\u9B5C\u9B5D\u9B5E\u9B5F\u9B60\u9B61\u9B62\u9B63\u9B64\u9B65\u9B66\u9B67\u9B68\u9B69\u9B6A\u9B6B\u9B6C\u9B6D\u9B6E\u9B6F\u9B70\u9B71\u9B72\u9B73\u9B74\u9B75\u9B76\u9B77\u9B78\u9B79\u9B7A\u9B7B\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164\uFFFD".split("");
      for (j = 0; j != D[244].length; ++j)
        if (D[244][j].charCodeAt(0) !== 65533) {
          e[D[244][j]] = 62464 + j;
          d[62464 + j] = D[244][j];
        }
      D[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B7C\u9B7D\u9B7E\u9B7F\u9B80\u9B81\u9B82\u9B83\u9B84\u9B85\u9B86\u9B87\u9B88\u9B89\u9B8A\u9B8B\u9B8C\u9B8D\u9B8E\u9B8F\u9B90\u9B91\u9B92\u9B93\u9B94\u9B95\u9B96\u9B97\u9B98\u9B99\u9B9A\u9B9B\u9B9C\u9B9D\u9B9E\u9B9F\u9BA0\u9BA1\u9BA2\u9BA3\u9BA4\u9BA5\u9BA6\u9BA7\u9BA8\u9BA9\u9BAA\u9BAB\u9BAC\u9BAD\u9BAE\u9BAF\u9BB0\u9BB1\u9BB2\u9BB3\u9BB4\u9BB5\u9BB6\u9BB7\u9BB8\u9BB9\u9BBA\uFFFD\u9BBB\u9BBC\u9BBD\u9BBE\u9BBF\u9BC0\u9BC1\u9BC2\u9BC3\u9BC4\u9BC5\u9BC6\u9BC7\u9BC8\u9BC9\u9BCA\u9BCB\u9BCC\u9BCD\u9BCE\u9BCF\u9BD0\u9BD1\u9BD2\u9BD3\u9BD4\u9BD5\u9BD6\u9BD7\u9BD8\u9BD9\u9BDA\u9BDB\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC\uFFFD".split("");
      for (j = 0; j != D[245].length; ++j)
        if (D[245][j].charCodeAt(0) !== 65533) {
          e[D[245][j]] = 62720 + j;
          d[62720 + j] = D[245][j];
        }
      D[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9BDC\u9BDD\u9BDE\u9BDF\u9BE0\u9BE1\u9BE2\u9BE3\u9BE4\u9BE5\u9BE6\u9BE7\u9BE8\u9BE9\u9BEA\u9BEB\u9BEC\u9BED\u9BEE\u9BEF\u9BF0\u9BF1\u9BF2\u9BF3\u9BF4\u9BF5\u9BF6\u9BF7\u9BF8\u9BF9\u9BFA\u9BFB\u9BFC\u9BFD\u9BFE\u9BFF\u9C00\u9C01\u9C02\u9C03\u9C04\u9C05\u9C06\u9C07\u9C08\u9C09\u9C0A\u9C0B\u9C0C\u9C0D\u9C0E\u9C0F\u9C10\u9C11\u9C12\u9C13\u9C14\u9C15\u9C16\u9C17\u9C18\u9C19\u9C1A\uFFFD\u9C1B\u9C1C\u9C1D\u9C1E\u9C1F\u9C20\u9C21\u9C22\u9C23\u9C24\u9C25\u9C26\u9C27\u9C28\u9C29\u9C2A\u9C2B\u9C2C\u9C2D\u9C2E\u9C2F\u9C30\u9C31\u9C32\u9C33\u9C34\u9C35\u9C36\u9C37\u9C38\u9C39\u9C3A\u9C3B\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85\u9F86\u9F87\u9F88\u9F89\u9F8A\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E\u9C9F\u9CA0\u9CA1\u9CA2\u9CA3\u9CA5\u9CA6\u9CA7\u9CA8\u9CA9\u9CAB\u9CAD\u9CAE\u9CB0\u9CB1\u9CB2\u9CB3\u9CB4\u9CB5\u9CB6\u9CB7\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB\uFFFD".split("");
      for (j = 0; j != D[246].length; ++j)
        if (D[246][j].charCodeAt(0) !== 65533) {
          e[D[246][j]] = 62976 + j;
          d[62976 + j] = D[246][j];
        }
      D[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9C3C\u9C3D\u9C3E\u9C3F\u9C40\u9C41\u9C42\u9C43\u9C44\u9C45\u9C46\u9C47\u9C48\u9C49\u9C4A\u9C4B\u9C4C\u9C4D\u9C4E\u9C4F\u9C50\u9C51\u9C52\u9C53\u9C54\u9C55\u9C56\u9C57\u9C58\u9C59\u9C5A\u9C5B\u9C5C\u9C5D\u9C5E\u9C5F\u9C60\u9C61\u9C62\u9C63\u9C64\u9C65\u9C66\u9C67\u9C68\u9C69\u9C6A\u9C6B\u9C6C\u9C6D\u9C6E\u9C6F\u9C70\u9C71\u9C72\u9C73\u9C74\u9C75\u9C76\u9C77\u9C78\u9C79\u9C7A\uFFFD\u9C7B\u9C7D\u9C7E\u9C80\u9C83\u9C84\u9C89\u9C8A\u9C8C\u9C8F\u9C93\u9C96\u9C97\u9C98\u9C99\u9C9D\u9CAA\u9CAC\u9CAF\u9CB9\u9CBE\u9CBF\u9CC0\u9CC1\u9CC2\u9CC8\u9CC9\u9CD1\u9CD2\u9CDA\u9CDB\u9CE0\u9CE1\u9CCC\u9CCD\u9CCE\u9CCF\u9CD0\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44\uFFFD".split("");
      for (j = 0; j != D[247].length; ++j)
        if (D[247][j].charCodeAt(0) !== 65533) {
          e[D[247][j]] = 63232 + j;
          d[63232 + j] = D[247][j];
        }
      D[248] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9CE3\u9CE4\u9CE5\u9CE6\u9CE7\u9CE8\u9CE9\u9CEA\u9CEB\u9CEC\u9CED\u9CEE\u9CEF\u9CF0\u9CF1\u9CF2\u9CF3\u9CF4\u9CF5\u9CF6\u9CF7\u9CF8\u9CF9\u9CFA\u9CFB\u9CFC\u9CFD\u9CFE\u9CFF\u9D00\u9D01\u9D02\u9D03\u9D04\u9D05\u9D06\u9D07\u9D08\u9D09\u9D0A\u9D0B\u9D0C\u9D0D\u9D0E\u9D0F\u9D10\u9D11\u9D12\u9D13\u9D14\u9D15\u9D16\u9D17\u9D18\u9D19\u9D1A\u9D1B\u9D1C\u9D1D\u9D1E\u9D1F\u9D20\u9D21\uFFFD\u9D22\u9D23\u9D24\u9D25\u9D26\u9D27\u9D28\u9D29\u9D2A\u9D2B\u9D2C\u9D2D\u9D2E\u9D2F\u9D30\u9D31\u9D32\u9D33\u9D34\u9D35\u9D36\u9D37\u9D38\u9D39\u9D3A\u9D3B\u9D3C\u9D3D\u9D3E\u9D3F\u9D40\u9D41\u9D42\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[248].length; ++j)
        if (D[248][j].charCodeAt(0) !== 65533) {
          e[D[248][j]] = 63488 + j;
          d[63488 + j] = D[248][j];
        }
      D[249] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D43\u9D44\u9D45\u9D46\u9D47\u9D48\u9D49\u9D4A\u9D4B\u9D4C\u9D4D\u9D4E\u9D4F\u9D50\u9D51\u9D52\u9D53\u9D54\u9D55\u9D56\u9D57\u9D58\u9D59\u9D5A\u9D5B\u9D5C\u9D5D\u9D5E\u9D5F\u9D60\u9D61\u9D62\u9D63\u9D64\u9D65\u9D66\u9D67\u9D68\u9D69\u9D6A\u9D6B\u9D6C\u9D6D\u9D6E\u9D6F\u9D70\u9D71\u9D72\u9D73\u9D74\u9D75\u9D76\u9D77\u9D78\u9D79\u9D7A\u9D7B\u9D7C\u9D7D\u9D7E\u9D7F\u9D80\u9D81\uFFFD\u9D82\u9D83\u9D84\u9D85\u9D86\u9D87\u9D88\u9D89\u9D8A\u9D8B\u9D8C\u9D8D\u9D8E\u9D8F\u9D90\u9D91\u9D92\u9D93\u9D94\u9D95\u9D96\u9D97\u9D98\u9D99\u9D9A\u9D9B\u9D9C\u9D9D\u9D9E\u9D9F\u9DA0\u9DA1\u9DA2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[249].length; ++j)
        if (D[249][j].charCodeAt(0) !== 65533) {
          e[D[249][j]] = 63744 + j;
          d[63744 + j] = D[249][j];
        }
      D[250] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9DA3\u9DA4\u9DA5\u9DA6\u9DA7\u9DA8\u9DA9\u9DAA\u9DAB\u9DAC\u9DAD\u9DAE\u9DAF\u9DB0\u9DB1\u9DB2\u9DB3\u9DB4\u9DB5\u9DB6\u9DB7\u9DB8\u9DB9\u9DBA\u9DBB\u9DBC\u9DBD\u9DBE\u9DBF\u9DC0\u9DC1\u9DC2\u9DC3\u9DC4\u9DC5\u9DC6\u9DC7\u9DC8\u9DC9\u9DCA\u9DCB\u9DCC\u9DCD\u9DCE\u9DCF\u9DD0\u9DD1\u9DD2\u9DD3\u9DD4\u9DD5\u9DD6\u9DD7\u9DD8\u9DD9\u9DDA\u9DDB\u9DDC\u9DDD\u9DDE\u9DDF\u9DE0\u9DE1\uFFFD\u9DE2\u9DE3\u9DE4\u9DE5\u9DE6\u9DE7\u9DE8\u9DE9\u9DEA\u9DEB\u9DEC\u9DED\u9DEE\u9DEF\u9DF0\u9DF1\u9DF2\u9DF3\u9DF4\u9DF5\u9DF6\u9DF7\u9DF8\u9DF9\u9DFA\u9DFB\u9DFC\u9DFD\u9DFE\u9DFF\u9E00\u9E01\u9E02\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[250].length; ++j)
        if (D[250][j].charCodeAt(0) !== 65533) {
          e[D[250][j]] = 64e3 + j;
          d[64e3 + j] = D[250][j];
        }
      D[251] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9E03\u9E04\u9E05\u9E06\u9E07\u9E08\u9E09\u9E0A\u9E0B\u9E0C\u9E0D\u9E0E\u9E0F\u9E10\u9E11\u9E12\u9E13\u9E14\u9E15\u9E16\u9E17\u9E18\u9E19\u9E1A\u9E1B\u9E1C\u9E1D\u9E1E\u9E24\u9E27\u9E2E\u9E30\u9E34\u9E3B\u9E3C\u9E40\u9E4D\u9E50\u9E52\u9E53\u9E54\u9E56\u9E59\u9E5D\u9E5F\u9E60\u9E61\u9E62\u9E65\u9E6E\u9E6F\u9E72\u9E74\u9E75\u9E76\u9E77\u9E78\u9E79\u9E7A\u9E7B\u9E7C\u9E7D\u9E80\uFFFD\u9E81\u9E83\u9E84\u9E85\u9E86\u9E89\u9E8A\u9E8C\u9E8D\u9E8E\u9E8F\u9E90\u9E91\u9E94\u9E95\u9E96\u9E97\u9E98\u9E99\u9E9A\u9E9B\u9E9C\u9E9E\u9EA0\u9EA1\u9EA2\u9EA3\u9EA4\u9EA5\u9EA7\u9EA8\u9EA9\u9EAA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[251].length; ++j)
        if (D[251][j].charCodeAt(0) !== 65533) {
          e[D[251][j]] = 64256 + j;
          d[64256 + j] = D[251][j];
        }
      D[252] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9EAB\u9EAC\u9EAD\u9EAE\u9EAF\u9EB0\u9EB1\u9EB2\u9EB3\u9EB5\u9EB6\u9EB7\u9EB9\u9EBA\u9EBC\u9EBF\u9EC0\u9EC1\u9EC2\u9EC3\u9EC5\u9EC6\u9EC7\u9EC8\u9ECA\u9ECB\u9ECC\u9ED0\u9ED2\u9ED3\u9ED5\u9ED6\u9ED7\u9ED9\u9EDA\u9EDE\u9EE1\u9EE3\u9EE4\u9EE6\u9EE8\u9EEB\u9EEC\u9EED\u9EEE\u9EF0\u9EF1\u9EF2\u9EF3\u9EF4\u9EF5\u9EF6\u9EF7\u9EF8\u9EFA\u9EFD\u9EFF\u9F00\u9F01\u9F02\u9F03\u9F04\u9F05\uFFFD\u9F06\u9F07\u9F08\u9F09\u9F0A\u9F0C\u9F0F\u9F11\u9F12\u9F14\u9F15\u9F16\u9F18\u9F1A\u9F1B\u9F1C\u9F1D\u9F1E\u9F1F\u9F21\u9F23\u9F24\u9F25\u9F26\u9F27\u9F28\u9F29\u9F2A\u9F2B\u9F2D\u9F2E\u9F30\u9F31\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[252].length; ++j)
        if (D[252][j].charCodeAt(0) !== 65533) {
          e[D[252][j]] = 64512 + j;
          d[64512 + j] = D[252][j];
        }
      D[253] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F32\u9F33\u9F34\u9F35\u9F36\u9F38\u9F3A\u9F3C\u9F3F\u9F40\u9F41\u9F42\u9F43\u9F45\u9F46\u9F47\u9F48\u9F49\u9F4A\u9F4B\u9F4C\u9F4D\u9F4E\u9F4F\u9F52\u9F53\u9F54\u9F55\u9F56\u9F57\u9F58\u9F59\u9F5A\u9F5B\u9F5C\u9F5D\u9F5E\u9F5F\u9F60\u9F61\u9F62\u9F63\u9F64\u9F65\u9F66\u9F67\u9F68\u9F69\u9F6A\u9F6B\u9F6C\u9F6D\u9F6E\u9F6F\u9F70\u9F71\u9F72\u9F73\u9F74\u9F75\u9F76\u9F77\u9F78\uFFFD\u9F79\u9F7A\u9F7B\u9F7C\u9F7D\u9F7E\u9F81\u9F82\u9F8D\u9F8E\u9F8F\u9F90\u9F91\u9F92\u9F93\u9F94\u9F95\u9F96\u9F97\u9F98\u9F9C\u9F9D\u9F9E\u9FA1\u9FA2\u9FA3\u9FA4\u9FA5\uF92C\uF979\uF995\uF9E7\uF9F1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[253].length; ++j)
        if (D[253][j].charCodeAt(0) !== 65533) {
          e[D[253][j]] = 64768 + j;
          d[64768 + j] = D[253][j];
        }
      D[254] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFA0C\uFA0D\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA18\uFA1F\uFA20\uFA21\uFA23\uFA24\uFA27\uFA28\uFA29\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[254].length; ++j)
        if (D[254][j].charCodeAt(0) !== 65533) {
          e[D[254][j]] = 65024 + j;
          d[65024 + j] = D[254][j];
        }
      return { "enc": e, "dec": d };
    }();
    cptable2[949] = function() {
      var d = [], e = {}, D = [], j;
      D[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[0].length; ++j)
        if (D[0][j].charCodeAt(0) !== 65533) {
          e[D[0][j]] = 0 + j;
          d[0 + j] = D[0][j];
        }
      D[129] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC02\uAC03\uAC05\uAC06\uAC0B\uAC0C\uAC0D\uAC0E\uAC0F\uAC18\uAC1E\uAC1F\uAC21\uAC22\uAC23\uAC25\uAC26\uAC27\uAC28\uAC29\uAC2A\uAC2B\uAC2E\uAC32\uAC33\uAC34\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC35\uAC36\uAC37\uAC3A\uAC3B\uAC3D\uAC3E\uAC3F\uAC41\uAC42\uAC43\uAC44\uAC45\uAC46\uAC47\uAC48\uAC49\uAC4A\uAC4C\uAC4E\uAC4F\uAC50\uAC51\uAC52\uAC53\uAC55\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC56\uAC57\uAC59\uAC5A\uAC5B\uAC5D\uAC5E\uAC5F\uAC60\uAC61\uAC62\uAC63\uAC64\uAC65\uAC66\uAC67\uAC68\uAC69\uAC6A\uAC6B\uAC6C\uAC6D\uAC6E\uAC6F\uAC72\uAC73\uAC75\uAC76\uAC79\uAC7B\uAC7C\uAC7D\uAC7E\uAC7F\uAC82\uAC87\uAC88\uAC8D\uAC8E\uAC8F\uAC91\uAC92\uAC93\uAC95\uAC96\uAC97\uAC98\uAC99\uAC9A\uAC9B\uAC9E\uACA2\uACA3\uACA4\uACA5\uACA6\uACA7\uACAB\uACAD\uACAE\uACB1\uACB2\uACB3\uACB4\uACB5\uACB6\uACB7\uACBA\uACBE\uACBF\uACC0\uACC2\uACC3\uACC5\uACC6\uACC7\uACC9\uACCA\uACCB\uACCD\uACCE\uACCF\uACD0\uACD1\uACD2\uACD3\uACD4\uACD6\uACD8\uACD9\uACDA\uACDB\uACDC\uACDD\uACDE\uACDF\uACE2\uACE3\uACE5\uACE6\uACE9\uACEB\uACED\uACEE\uACF2\uACF4\uACF7\uACF8\uACF9\uACFA\uACFB\uACFE\uACFF\uAD01\uAD02\uAD03\uAD05\uAD07\uAD08\uAD09\uAD0A\uAD0B\uAD0E\uAD10\uAD12\uAD13\uFFFD".split("");
      for (j = 0; j != D[129].length; ++j)
        if (D[129][j].charCodeAt(0) !== 65533) {
          e[D[129][j]] = 33024 + j;
          d[33024 + j] = D[129][j];
        }
      D[130] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD14\uAD15\uAD16\uAD17\uAD19\uAD1A\uAD1B\uAD1D\uAD1E\uAD1F\uAD21\uAD22\uAD23\uAD24\uAD25\uAD26\uAD27\uAD28\uAD2A\uAD2B\uAD2E\uAD2F\uAD30\uAD31\uAD32\uAD33\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD36\uAD37\uAD39\uAD3A\uAD3B\uAD3D\uAD3E\uAD3F\uAD40\uAD41\uAD42\uAD43\uAD46\uAD48\uAD4A\uAD4B\uAD4C\uAD4D\uAD4E\uAD4F\uAD51\uAD52\uAD53\uAD55\uAD56\uAD57\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD59\uAD5A\uAD5B\uAD5C\uAD5D\uAD5E\uAD5F\uAD60\uAD62\uAD64\uAD65\uAD66\uAD67\uAD68\uAD69\uAD6A\uAD6B\uAD6E\uAD6F\uAD71\uAD72\uAD77\uAD78\uAD79\uAD7A\uAD7E\uAD80\uAD83\uAD84\uAD85\uAD86\uAD87\uAD8A\uAD8B\uAD8D\uAD8E\uAD8F\uAD91\uAD92\uAD93\uAD94\uAD95\uAD96\uAD97\uAD98\uAD99\uAD9A\uAD9B\uAD9E\uAD9F\uADA0\uADA1\uADA2\uADA3\uADA5\uADA6\uADA7\uADA8\uADA9\uADAA\uADAB\uADAC\uADAD\uADAE\uADAF\uADB0\uADB1\uADB2\uADB3\uADB4\uADB5\uADB6\uADB8\uADB9\uADBA\uADBB\uADBC\uADBD\uADBE\uADBF\uADC2\uADC3\uADC5\uADC6\uADC7\uADC9\uADCA\uADCB\uADCC\uADCD\uADCE\uADCF\uADD2\uADD4\uADD5\uADD6\uADD7\uADD8\uADD9\uADDA\uADDB\uADDD\uADDE\uADDF\uADE1\uADE2\uADE3\uADE5\uADE6\uADE7\uADE8\uADE9\uADEA\uADEB\uADEC\uADED\uADEE\uADEF\uADF0\uADF1\uADF2\uADF3\uADF4\uADF5\uADF6\uADF7\uFFFD".split("");
      for (j = 0; j != D[130].length; ++j)
        if (D[130][j].charCodeAt(0) !== 65533) {
          e[D[130][j]] = 33280 + j;
          d[33280 + j] = D[130][j];
        }
      D[131] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uADFA\uADFB\uADFD\uADFE\uAE02\uAE03\uAE04\uAE05\uAE06\uAE07\uAE0A\uAE0C\uAE0E\uAE0F\uAE10\uAE11\uAE12\uAE13\uAE15\uAE16\uAE17\uAE18\uAE19\uAE1A\uAE1B\uAE1C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAE1D\uAE1E\uAE1F\uAE20\uAE21\uAE22\uAE23\uAE24\uAE25\uAE26\uAE27\uAE28\uAE29\uAE2A\uAE2B\uAE2C\uAE2D\uAE2E\uAE2F\uAE32\uAE33\uAE35\uAE36\uAE39\uAE3B\uAE3C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAE3D\uAE3E\uAE3F\uAE42\uAE44\uAE47\uAE48\uAE49\uAE4B\uAE4F\uAE51\uAE52\uAE53\uAE55\uAE57\uAE58\uAE59\uAE5A\uAE5B\uAE5E\uAE62\uAE63\uAE64\uAE66\uAE67\uAE6A\uAE6B\uAE6D\uAE6E\uAE6F\uAE71\uAE72\uAE73\uAE74\uAE75\uAE76\uAE77\uAE7A\uAE7E\uAE7F\uAE80\uAE81\uAE82\uAE83\uAE86\uAE87\uAE88\uAE89\uAE8A\uAE8B\uAE8D\uAE8E\uAE8F\uAE90\uAE91\uAE92\uAE93\uAE94\uAE95\uAE96\uAE97\uAE98\uAE99\uAE9A\uAE9B\uAE9C\uAE9D\uAE9E\uAE9F\uAEA0\uAEA1\uAEA2\uAEA3\uAEA4\uAEA5\uAEA6\uAEA7\uAEA8\uAEA9\uAEAA\uAEAB\uAEAC\uAEAD\uAEAE\uAEAF\uAEB0\uAEB1\uAEB2\uAEB3\uAEB4\uAEB5\uAEB6\uAEB7\uAEB8\uAEB9\uAEBA\uAEBB\uAEBF\uAEC1\uAEC2\uAEC3\uAEC5\uAEC6\uAEC7\uAEC8\uAEC9\uAECA\uAECB\uAECE\uAED2\uAED3\uAED4\uAED5\uAED6\uAED7\uAEDA\uAEDB\uAEDD\uAEDE\uAEDF\uAEE0\uAEE1\uAEE2\uAEE3\uAEE4\uAEE5\uFFFD".split("");
      for (j = 0; j != D[131].length; ++j)
        if (D[131][j].charCodeAt(0) !== 65533) {
          e[D[131][j]] = 33536 + j;
          d[33536 + j] = D[131][j];
        }
      D[132] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAEE6\uAEE7\uAEE9\uAEEA\uAEEC\uAEEE\uAEEF\uAEF0\uAEF1\uAEF2\uAEF3\uAEF5\uAEF6\uAEF7\uAEF9\uAEFA\uAEFB\uAEFD\uAEFE\uAEFF\uAF00\uAF01\uAF02\uAF03\uAF04\uAF05\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAF06\uAF09\uAF0A\uAF0B\uAF0C\uAF0E\uAF0F\uAF11\uAF12\uAF13\uAF14\uAF15\uAF16\uAF17\uAF18\uAF19\uAF1A\uAF1B\uAF1C\uAF1D\uAF1E\uAF1F\uAF20\uAF21\uAF22\uAF23\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAF24\uAF25\uAF26\uAF27\uAF28\uAF29\uAF2A\uAF2B\uAF2E\uAF2F\uAF31\uAF33\uAF35\uAF36\uAF37\uAF38\uAF39\uAF3A\uAF3B\uAF3E\uAF40\uAF44\uAF45\uAF46\uAF47\uAF4A\uAF4B\uAF4C\uAF4D\uAF4E\uAF4F\uAF51\uAF52\uAF53\uAF54\uAF55\uAF56\uAF57\uAF58\uAF59\uAF5A\uAF5B\uAF5E\uAF5F\uAF60\uAF61\uAF62\uAF63\uAF66\uAF67\uAF68\uAF69\uAF6A\uAF6B\uAF6C\uAF6D\uAF6E\uAF6F\uAF70\uAF71\uAF72\uAF73\uAF74\uAF75\uAF76\uAF77\uAF78\uAF7A\uAF7B\uAF7C\uAF7D\uAF7E\uAF7F\uAF81\uAF82\uAF83\uAF85\uAF86\uAF87\uAF89\uAF8A\uAF8B\uAF8C\uAF8D\uAF8E\uAF8F\uAF92\uAF93\uAF94\uAF96\uAF97\uAF98\uAF99\uAF9A\uAF9B\uAF9D\uAF9E\uAF9F\uAFA0\uAFA1\uAFA2\uAFA3\uAFA4\uAFA5\uAFA6\uAFA7\uAFA8\uAFA9\uAFAA\uAFAB\uAFAC\uAFAD\uAFAE\uAFAF\uAFB0\uAFB1\uAFB2\uAFB3\uAFB4\uAFB5\uAFB6\uAFB7\uAFBA\uAFBB\uAFBD\uAFBE\uFFFD".split("");
      for (j = 0; j != D[132].length; ++j)
        if (D[132][j].charCodeAt(0) !== 65533) {
          e[D[132][j]] = 33792 + j;
          d[33792 + j] = D[132][j];
        }
      D[133] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAFBF\uAFC1\uAFC2\uAFC3\uAFC4\uAFC5\uAFC6\uAFCA\uAFCC\uAFCF\uAFD0\uAFD1\uAFD2\uAFD3\uAFD5\uAFD6\uAFD7\uAFD8\uAFD9\uAFDA\uAFDB\uAFDD\uAFDE\uAFDF\uAFE0\uAFE1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAFE2\uAFE3\uAFE4\uAFE5\uAFE6\uAFE7\uAFEA\uAFEB\uAFEC\uAFED\uAFEE\uAFEF\uAFF2\uAFF3\uAFF5\uAFF6\uAFF7\uAFF9\uAFFA\uAFFB\uAFFC\uAFFD\uAFFE\uAFFF\uB002\uB003\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB005\uB006\uB007\uB008\uB009\uB00A\uB00B\uB00D\uB00E\uB00F\uB011\uB012\uB013\uB015\uB016\uB017\uB018\uB019\uB01A\uB01B\uB01E\uB01F\uB020\uB021\uB022\uB023\uB024\uB025\uB026\uB027\uB029\uB02A\uB02B\uB02C\uB02D\uB02E\uB02F\uB030\uB031\uB032\uB033\uB034\uB035\uB036\uB037\uB038\uB039\uB03A\uB03B\uB03C\uB03D\uB03E\uB03F\uB040\uB041\uB042\uB043\uB046\uB047\uB049\uB04B\uB04D\uB04F\uB050\uB051\uB052\uB056\uB058\uB05A\uB05B\uB05C\uB05E\uB05F\uB060\uB061\uB062\uB063\uB064\uB065\uB066\uB067\uB068\uB069\uB06A\uB06B\uB06C\uB06D\uB06E\uB06F\uB070\uB071\uB072\uB073\uB074\uB075\uB076\uB077\uB078\uB079\uB07A\uB07B\uB07E\uB07F\uB081\uB082\uB083\uB085\uB086\uB087\uB088\uB089\uB08A\uB08B\uB08E\uB090\uB092\uB093\uB094\uB095\uB096\uB097\uB09B\uB09D\uB09E\uB0A3\uB0A4\uFFFD".split("");
      for (j = 0; j != D[133].length; ++j)
        if (D[133][j].charCodeAt(0) !== 65533) {
          e[D[133][j]] = 34048 + j;
          d[34048 + j] = D[133][j];
        }
      D[134] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0A5\uB0A6\uB0A7\uB0AA\uB0B0\uB0B2\uB0B6\uB0B7\uB0B9\uB0BA\uB0BB\uB0BD\uB0BE\uB0BF\uB0C0\uB0C1\uB0C2\uB0C3\uB0C6\uB0CA\uB0CB\uB0CC\uB0CD\uB0CE\uB0CF\uB0D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0D3\uB0D5\uB0D6\uB0D7\uB0D9\uB0DA\uB0DB\uB0DC\uB0DD\uB0DE\uB0DF\uB0E1\uB0E2\uB0E3\uB0E4\uB0E6\uB0E7\uB0E8\uB0E9\uB0EA\uB0EB\uB0EC\uB0ED\uB0EE\uB0EF\uB0F0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0F1\uB0F2\uB0F3\uB0F4\uB0F5\uB0F6\uB0F7\uB0F8\uB0F9\uB0FA\uB0FB\uB0FC\uB0FD\uB0FE\uB0FF\uB100\uB101\uB102\uB103\uB104\uB105\uB106\uB107\uB10A\uB10D\uB10E\uB10F\uB111\uB114\uB115\uB116\uB117\uB11A\uB11E\uB11F\uB120\uB121\uB122\uB126\uB127\uB129\uB12A\uB12B\uB12D\uB12E\uB12F\uB130\uB131\uB132\uB133\uB136\uB13A\uB13B\uB13C\uB13D\uB13E\uB13F\uB142\uB143\uB145\uB146\uB147\uB149\uB14A\uB14B\uB14C\uB14D\uB14E\uB14F\uB152\uB153\uB156\uB157\uB159\uB15A\uB15B\uB15D\uB15E\uB15F\uB161\uB162\uB163\uB164\uB165\uB166\uB167\uB168\uB169\uB16A\uB16B\uB16C\uB16D\uB16E\uB16F\uB170\uB171\uB172\uB173\uB174\uB175\uB176\uB177\uB17A\uB17B\uB17D\uB17E\uB17F\uB181\uB183\uB184\uB185\uB186\uB187\uB18A\uB18C\uB18E\uB18F\uB190\uB191\uB195\uB196\uB197\uB199\uB19A\uB19B\uB19D\uFFFD".split("");
      for (j = 0; j != D[134].length; ++j)
        if (D[134][j].charCodeAt(0) !== 65533) {
          e[D[134][j]] = 34304 + j;
          d[34304 + j] = D[134][j];
        }
      D[135] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB19E\uB19F\uB1A0\uB1A1\uB1A2\uB1A3\uB1A4\uB1A5\uB1A6\uB1A7\uB1A9\uB1AA\uB1AB\uB1AC\uB1AD\uB1AE\uB1AF\uB1B0\uB1B1\uB1B2\uB1B3\uB1B4\uB1B5\uB1B6\uB1B7\uB1B8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB1B9\uB1BA\uB1BB\uB1BC\uB1BD\uB1BE\uB1BF\uB1C0\uB1C1\uB1C2\uB1C3\uB1C4\uB1C5\uB1C6\uB1C7\uB1C8\uB1C9\uB1CA\uB1CB\uB1CD\uB1CE\uB1CF\uB1D1\uB1D2\uB1D3\uB1D5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB1D6\uB1D7\uB1D8\uB1D9\uB1DA\uB1DB\uB1DE\uB1E0\uB1E1\uB1E2\uB1E3\uB1E4\uB1E5\uB1E6\uB1E7\uB1EA\uB1EB\uB1ED\uB1EE\uB1EF\uB1F1\uB1F2\uB1F3\uB1F4\uB1F5\uB1F6\uB1F7\uB1F8\uB1FA\uB1FC\uB1FE\uB1FF\uB200\uB201\uB202\uB203\uB206\uB207\uB209\uB20A\uB20D\uB20E\uB20F\uB210\uB211\uB212\uB213\uB216\uB218\uB21A\uB21B\uB21C\uB21D\uB21E\uB21F\uB221\uB222\uB223\uB224\uB225\uB226\uB227\uB228\uB229\uB22A\uB22B\uB22C\uB22D\uB22E\uB22F\uB230\uB231\uB232\uB233\uB235\uB236\uB237\uB238\uB239\uB23A\uB23B\uB23D\uB23E\uB23F\uB240\uB241\uB242\uB243\uB244\uB245\uB246\uB247\uB248\uB249\uB24A\uB24B\uB24C\uB24D\uB24E\uB24F\uB250\uB251\uB252\uB253\uB254\uB255\uB256\uB257\uB259\uB25A\uB25B\uB25D\uB25E\uB25F\uB261\uB262\uB263\uB264\uB265\uB266\uB267\uB26A\uB26B\uB26C\uB26D\uB26E\uFFFD".split("");
      for (j = 0; j != D[135].length; ++j)
        if (D[135][j].charCodeAt(0) !== 65533) {
          e[D[135][j]] = 34560 + j;
          d[34560 + j] = D[135][j];
        }
      D[136] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB26F\uB270\uB271\uB272\uB273\uB276\uB277\uB278\uB279\uB27A\uB27B\uB27D\uB27E\uB27F\uB280\uB281\uB282\uB283\uB286\uB287\uB288\uB28A\uB28B\uB28C\uB28D\uB28E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB28F\uB292\uB293\uB295\uB296\uB297\uB29B\uB29C\uB29D\uB29E\uB29F\uB2A2\uB2A4\uB2A7\uB2A8\uB2A9\uB2AB\uB2AD\uB2AE\uB2AF\uB2B1\uB2B2\uB2B3\uB2B5\uB2B6\uB2B7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB2B8\uB2B9\uB2BA\uB2BB\uB2BC\uB2BD\uB2BE\uB2BF\uB2C0\uB2C1\uB2C2\uB2C3\uB2C4\uB2C5\uB2C6\uB2C7\uB2CA\uB2CB\uB2CD\uB2CE\uB2CF\uB2D1\uB2D3\uB2D4\uB2D5\uB2D6\uB2D7\uB2DA\uB2DC\uB2DE\uB2DF\uB2E0\uB2E1\uB2E3\uB2E7\uB2E9\uB2EA\uB2F0\uB2F1\uB2F2\uB2F6\uB2FC\uB2FD\uB2FE\uB302\uB303\uB305\uB306\uB307\uB309\uB30A\uB30B\uB30C\uB30D\uB30E\uB30F\uB312\uB316\uB317\uB318\uB319\uB31A\uB31B\uB31D\uB31E\uB31F\uB320\uB321\uB322\uB323\uB324\uB325\uB326\uB327\uB328\uB329\uB32A\uB32B\uB32C\uB32D\uB32E\uB32F\uB330\uB331\uB332\uB333\uB334\uB335\uB336\uB337\uB338\uB339\uB33A\uB33B\uB33C\uB33D\uB33E\uB33F\uB340\uB341\uB342\uB343\uB344\uB345\uB346\uB347\uB348\uB349\uB34A\uB34B\uB34C\uB34D\uB34E\uB34F\uB350\uB351\uB352\uB353\uB357\uB359\uB35A\uB35D\uB360\uB361\uB362\uB363\uFFFD".split("");
      for (j = 0; j != D[136].length; ++j)
        if (D[136][j].charCodeAt(0) !== 65533) {
          e[D[136][j]] = 34816 + j;
          d[34816 + j] = D[136][j];
        }
      D[137] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB366\uB368\uB36A\uB36C\uB36D\uB36F\uB372\uB373\uB375\uB376\uB377\uB379\uB37A\uB37B\uB37C\uB37D\uB37E\uB37F\uB382\uB386\uB387\uB388\uB389\uB38A\uB38B\uB38D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB38E\uB38F\uB391\uB392\uB393\uB395\uB396\uB397\uB398\uB399\uB39A\uB39B\uB39C\uB39D\uB39E\uB39F\uB3A2\uB3A3\uB3A4\uB3A5\uB3A6\uB3A7\uB3A9\uB3AA\uB3AB\uB3AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB3AE\uB3AF\uB3B0\uB3B1\uB3B2\uB3B3\uB3B4\uB3B5\uB3B6\uB3B7\uB3B8\uB3B9\uB3BA\uB3BB\uB3BC\uB3BD\uB3BE\uB3BF\uB3C0\uB3C1\uB3C2\uB3C3\uB3C6\uB3C7\uB3C9\uB3CA\uB3CD\uB3CF\uB3D1\uB3D2\uB3D3\uB3D6\uB3D8\uB3DA\uB3DC\uB3DE\uB3DF\uB3E1\uB3E2\uB3E3\uB3E5\uB3E6\uB3E7\uB3E9\uB3EA\uB3EB\uB3EC\uB3ED\uB3EE\uB3EF\uB3F0\uB3F1\uB3F2\uB3F3\uB3F4\uB3F5\uB3F6\uB3F7\uB3F8\uB3F9\uB3FA\uB3FB\uB3FD\uB3FE\uB3FF\uB400\uB401\uB402\uB403\uB404\uB405\uB406\uB407\uB408\uB409\uB40A\uB40B\uB40C\uB40D\uB40E\uB40F\uB411\uB412\uB413\uB414\uB415\uB416\uB417\uB419\uB41A\uB41B\uB41D\uB41E\uB41F\uB421\uB422\uB423\uB424\uB425\uB426\uB427\uB42A\uB42C\uB42D\uB42E\uB42F\uB430\uB431\uB432\uB433\uB435\uB436\uB437\uB438\uB439\uB43A\uB43B\uB43C\uB43D\uB43E\uB43F\uB440\uB441\uB442\uB443\uB444\uFFFD".split("");
      for (j = 0; j != D[137].length; ++j)
        if (D[137][j].charCodeAt(0) !== 65533) {
          e[D[137][j]] = 35072 + j;
          d[35072 + j] = D[137][j];
        }
      D[138] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB445\uB446\uB447\uB448\uB449\uB44A\uB44B\uB44C\uB44D\uB44E\uB44F\uB452\uB453\uB455\uB456\uB457\uB459\uB45A\uB45B\uB45C\uB45D\uB45E\uB45F\uB462\uB464\uB466\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB467\uB468\uB469\uB46A\uB46B\uB46D\uB46E\uB46F\uB470\uB471\uB472\uB473\uB474\uB475\uB476\uB477\uB478\uB479\uB47A\uB47B\uB47C\uB47D\uB47E\uB47F\uB481\uB482\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB483\uB484\uB485\uB486\uB487\uB489\uB48A\uB48B\uB48C\uB48D\uB48E\uB48F\uB490\uB491\uB492\uB493\uB494\uB495\uB496\uB497\uB498\uB499\uB49A\uB49B\uB49C\uB49E\uB49F\uB4A0\uB4A1\uB4A2\uB4A3\uB4A5\uB4A6\uB4A7\uB4A9\uB4AA\uB4AB\uB4AD\uB4AE\uB4AF\uB4B0\uB4B1\uB4B2\uB4B3\uB4B4\uB4B6\uB4B8\uB4BA\uB4BB\uB4BC\uB4BD\uB4BE\uB4BF\uB4C1\uB4C2\uB4C3\uB4C5\uB4C6\uB4C7\uB4C9\uB4CA\uB4CB\uB4CC\uB4CD\uB4CE\uB4CF\uB4D1\uB4D2\uB4D3\uB4D4\uB4D6\uB4D7\uB4D8\uB4D9\uB4DA\uB4DB\uB4DE\uB4DF\uB4E1\uB4E2\uB4E5\uB4E7\uB4E8\uB4E9\uB4EA\uB4EB\uB4EE\uB4F0\uB4F2\uB4F3\uB4F4\uB4F5\uB4F6\uB4F7\uB4F9\uB4FA\uB4FB\uB4FC\uB4FD\uB4FE\uB4FF\uB500\uB501\uB502\uB503\uB504\uB505\uB506\uB507\uB508\uB509\uB50A\uB50B\uB50C\uB50D\uB50E\uB50F\uB510\uB511\uB512\uB513\uB516\uB517\uB519\uB51A\uB51D\uFFFD".split("");
      for (j = 0; j != D[138].length; ++j)
        if (D[138][j].charCodeAt(0) !== 65533) {
          e[D[138][j]] = 35328 + j;
          d[35328 + j] = D[138][j];
        }
      D[139] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB51E\uB51F\uB520\uB521\uB522\uB523\uB526\uB52B\uB52C\uB52D\uB52E\uB52F\uB532\uB533\uB535\uB536\uB537\uB539\uB53A\uB53B\uB53C\uB53D\uB53E\uB53F\uB542\uB546\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB547\uB548\uB549\uB54A\uB54E\uB54F\uB551\uB552\uB553\uB555\uB556\uB557\uB558\uB559\uB55A\uB55B\uB55E\uB562\uB563\uB564\uB565\uB566\uB567\uB568\uB569\uB56A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB56B\uB56C\uB56D\uB56E\uB56F\uB570\uB571\uB572\uB573\uB574\uB575\uB576\uB577\uB578\uB579\uB57A\uB57B\uB57C\uB57D\uB57E\uB57F\uB580\uB581\uB582\uB583\uB584\uB585\uB586\uB587\uB588\uB589\uB58A\uB58B\uB58C\uB58D\uB58E\uB58F\uB590\uB591\uB592\uB593\uB594\uB595\uB596\uB597\uB598\uB599\uB59A\uB59B\uB59C\uB59D\uB59E\uB59F\uB5A2\uB5A3\uB5A5\uB5A6\uB5A7\uB5A9\uB5AC\uB5AD\uB5AE\uB5AF\uB5B2\uB5B6\uB5B7\uB5B8\uB5B9\uB5BA\uB5BE\uB5BF\uB5C1\uB5C2\uB5C3\uB5C5\uB5C6\uB5C7\uB5C8\uB5C9\uB5CA\uB5CB\uB5CE\uB5D2\uB5D3\uB5D4\uB5D5\uB5D6\uB5D7\uB5D9\uB5DA\uB5DB\uB5DC\uB5DD\uB5DE\uB5DF\uB5E0\uB5E1\uB5E2\uB5E3\uB5E4\uB5E5\uB5E6\uB5E7\uB5E8\uB5E9\uB5EA\uB5EB\uB5ED\uB5EE\uB5EF\uB5F0\uB5F1\uB5F2\uB5F3\uB5F4\uB5F5\uB5F6\uB5F7\uB5F8\uB5F9\uB5FA\uB5FB\uB5FC\uB5FD\uB5FE\uB5FF\uFFFD".split("");
      for (j = 0; j != D[139].length; ++j)
        if (D[139][j].charCodeAt(0) !== 65533) {
          e[D[139][j]] = 35584 + j;
          d[35584 + j] = D[139][j];
        }
      D[140] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB600\uB601\uB602\uB603\uB604\uB605\uB606\uB607\uB608\uB609\uB60A\uB60B\uB60C\uB60D\uB60E\uB60F\uB612\uB613\uB615\uB616\uB617\uB619\uB61A\uB61B\uB61C\uB61D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB61E\uB61F\uB620\uB621\uB622\uB623\uB624\uB626\uB627\uB628\uB629\uB62A\uB62B\uB62D\uB62E\uB62F\uB630\uB631\uB632\uB633\uB635\uB636\uB637\uB638\uB639\uB63A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB63B\uB63C\uB63D\uB63E\uB63F\uB640\uB641\uB642\uB643\uB644\uB645\uB646\uB647\uB649\uB64A\uB64B\uB64C\uB64D\uB64E\uB64F\uB650\uB651\uB652\uB653\uB654\uB655\uB656\uB657\uB658\uB659\uB65A\uB65B\uB65C\uB65D\uB65E\uB65F\uB660\uB661\uB662\uB663\uB665\uB666\uB667\uB669\uB66A\uB66B\uB66C\uB66D\uB66E\uB66F\uB670\uB671\uB672\uB673\uB674\uB675\uB676\uB677\uB678\uB679\uB67A\uB67B\uB67C\uB67D\uB67E\uB67F\uB680\uB681\uB682\uB683\uB684\uB685\uB686\uB687\uB688\uB689\uB68A\uB68B\uB68C\uB68D\uB68E\uB68F\uB690\uB691\uB692\uB693\uB694\uB695\uB696\uB697\uB698\uB699\uB69A\uB69B\uB69E\uB69F\uB6A1\uB6A2\uB6A3\uB6A5\uB6A6\uB6A7\uB6A8\uB6A9\uB6AA\uB6AD\uB6AE\uB6AF\uB6B0\uB6B2\uB6B3\uB6B4\uB6B5\uB6B6\uB6B7\uB6B8\uB6B9\uB6BA\uB6BB\uB6BC\uB6BD\uB6BE\uB6BF\uB6C0\uB6C1\uB6C2\uFFFD".split("");
      for (j = 0; j != D[140].length; ++j)
        if (D[140][j].charCodeAt(0) !== 65533) {
          e[D[140][j]] = 35840 + j;
          d[35840 + j] = D[140][j];
        }
      D[141] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6C3\uB6C4\uB6C5\uB6C6\uB6C7\uB6C8\uB6C9\uB6CA\uB6CB\uB6CC\uB6CD\uB6CE\uB6CF\uB6D0\uB6D1\uB6D2\uB6D3\uB6D5\uB6D6\uB6D7\uB6D8\uB6D9\uB6DA\uB6DB\uB6DC\uB6DD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6DE\uB6DF\uB6E0\uB6E1\uB6E2\uB6E3\uB6E4\uB6E5\uB6E6\uB6E7\uB6E8\uB6E9\uB6EA\uB6EB\uB6EC\uB6ED\uB6EE\uB6EF\uB6F1\uB6F2\uB6F3\uB6F5\uB6F6\uB6F7\uB6F9\uB6FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6FB\uB6FC\uB6FD\uB6FE\uB6FF\uB702\uB703\uB704\uB706\uB707\uB708\uB709\uB70A\uB70B\uB70C\uB70D\uB70E\uB70F\uB710\uB711\uB712\uB713\uB714\uB715\uB716\uB717\uB718\uB719\uB71A\uB71B\uB71C\uB71D\uB71E\uB71F\uB720\uB721\uB722\uB723\uB724\uB725\uB726\uB727\uB72A\uB72B\uB72D\uB72E\uB731\uB732\uB733\uB734\uB735\uB736\uB737\uB73A\uB73C\uB73D\uB73E\uB73F\uB740\uB741\uB742\uB743\uB745\uB746\uB747\uB749\uB74A\uB74B\uB74D\uB74E\uB74F\uB750\uB751\uB752\uB753\uB756\uB757\uB758\uB759\uB75A\uB75B\uB75C\uB75D\uB75E\uB75F\uB761\uB762\uB763\uB765\uB766\uB767\uB769\uB76A\uB76B\uB76C\uB76D\uB76E\uB76F\uB772\uB774\uB776\uB777\uB778\uB779\uB77A\uB77B\uB77E\uB77F\uB781\uB782\uB783\uB785\uB786\uB787\uB788\uB789\uB78A\uB78B\uB78E\uB793\uB794\uB795\uB79A\uB79B\uB79D\uB79E\uFFFD".split("");
      for (j = 0; j != D[141].length; ++j)
        if (D[141][j].charCodeAt(0) !== 65533) {
          e[D[141][j]] = 36096 + j;
          d[36096 + j] = D[141][j];
        }
      D[142] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB79F\uB7A1\uB7A2\uB7A3\uB7A4\uB7A5\uB7A6\uB7A7\uB7AA\uB7AE\uB7AF\uB7B0\uB7B1\uB7B2\uB7B3\uB7B6\uB7B7\uB7B9\uB7BA\uB7BB\uB7BC\uB7BD\uB7BE\uB7BF\uB7C0\uB7C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB7C2\uB7C3\uB7C4\uB7C5\uB7C6\uB7C8\uB7CA\uB7CB\uB7CC\uB7CD\uB7CE\uB7CF\uB7D0\uB7D1\uB7D2\uB7D3\uB7D4\uB7D5\uB7D6\uB7D7\uB7D8\uB7D9\uB7DA\uB7DB\uB7DC\uB7DD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB7DE\uB7DF\uB7E0\uB7E1\uB7E2\uB7E3\uB7E4\uB7E5\uB7E6\uB7E7\uB7E8\uB7E9\uB7EA\uB7EB\uB7EE\uB7EF\uB7F1\uB7F2\uB7F3\uB7F5\uB7F6\uB7F7\uB7F8\uB7F9\uB7FA\uB7FB\uB7FE\uB802\uB803\uB804\uB805\uB806\uB80A\uB80B\uB80D\uB80E\uB80F\uB811\uB812\uB813\uB814\uB815\uB816\uB817\uB81A\uB81C\uB81E\uB81F\uB820\uB821\uB822\uB823\uB826\uB827\uB829\uB82A\uB82B\uB82D\uB82E\uB82F\uB830\uB831\uB832\uB833\uB836\uB83A\uB83B\uB83C\uB83D\uB83E\uB83F\uB841\uB842\uB843\uB845\uB846\uB847\uB848\uB849\uB84A\uB84B\uB84C\uB84D\uB84E\uB84F\uB850\uB852\uB854\uB855\uB856\uB857\uB858\uB859\uB85A\uB85B\uB85E\uB85F\uB861\uB862\uB863\uB865\uB866\uB867\uB868\uB869\uB86A\uB86B\uB86E\uB870\uB872\uB873\uB874\uB875\uB876\uB877\uB879\uB87A\uB87B\uB87D\uB87E\uB87F\uB880\uB881\uB882\uB883\uB884\uFFFD".split("");
      for (j = 0; j != D[142].length; ++j)
        if (D[142][j].charCodeAt(0) !== 65533) {
          e[D[142][j]] = 36352 + j;
          d[36352 + j] = D[142][j];
        }
      D[143] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB885\uB886\uB887\uB888\uB889\uB88A\uB88B\uB88C\uB88E\uB88F\uB890\uB891\uB892\uB893\uB894\uB895\uB896\uB897\uB898\uB899\uB89A\uB89B\uB89C\uB89D\uB89E\uB89F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB8A0\uB8A1\uB8A2\uB8A3\uB8A4\uB8A5\uB8A6\uB8A7\uB8A9\uB8AA\uB8AB\uB8AC\uB8AD\uB8AE\uB8AF\uB8B1\uB8B2\uB8B3\uB8B5\uB8B6\uB8B7\uB8B9\uB8BA\uB8BB\uB8BC\uB8BD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB8BE\uB8BF\uB8C2\uB8C4\uB8C6\uB8C7\uB8C8\uB8C9\uB8CA\uB8CB\uB8CD\uB8CE\uB8CF\uB8D1\uB8D2\uB8D3\uB8D5\uB8D6\uB8D7\uB8D8\uB8D9\uB8DA\uB8DB\uB8DC\uB8DE\uB8E0\uB8E2\uB8E3\uB8E4\uB8E5\uB8E6\uB8E7\uB8EA\uB8EB\uB8ED\uB8EE\uB8EF\uB8F1\uB8F2\uB8F3\uB8F4\uB8F5\uB8F6\uB8F7\uB8FA\uB8FC\uB8FE\uB8FF\uB900\uB901\uB902\uB903\uB905\uB906\uB907\uB908\uB909\uB90A\uB90B\uB90C\uB90D\uB90E\uB90F\uB910\uB911\uB912\uB913\uB914\uB915\uB916\uB917\uB919\uB91A\uB91B\uB91C\uB91D\uB91E\uB91F\uB921\uB922\uB923\uB924\uB925\uB926\uB927\uB928\uB929\uB92A\uB92B\uB92C\uB92D\uB92E\uB92F\uB930\uB931\uB932\uB933\uB934\uB935\uB936\uB937\uB938\uB939\uB93A\uB93B\uB93E\uB93F\uB941\uB942\uB943\uB945\uB946\uB947\uB948\uB949\uB94A\uB94B\uB94D\uB94E\uB950\uB952\uB953\uB954\uB955\uB956\uB957\uFFFD".split("");
      for (j = 0; j != D[143].length; ++j)
        if (D[143][j].charCodeAt(0) !== 65533) {
          e[D[143][j]] = 36608 + j;
          d[36608 + j] = D[143][j];
        }
      D[144] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB95A\uB95B\uB95D\uB95E\uB95F\uB961\uB962\uB963\uB964\uB965\uB966\uB967\uB96A\uB96C\uB96E\uB96F\uB970\uB971\uB972\uB973\uB976\uB977\uB979\uB97A\uB97B\uB97D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB97E\uB97F\uB980\uB981\uB982\uB983\uB986\uB988\uB98B\uB98C\uB98F\uB990\uB991\uB992\uB993\uB994\uB995\uB996\uB997\uB998\uB999\uB99A\uB99B\uB99C\uB99D\uB99E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB99F\uB9A0\uB9A1\uB9A2\uB9A3\uB9A4\uB9A5\uB9A6\uB9A7\uB9A8\uB9A9\uB9AA\uB9AB\uB9AE\uB9AF\uB9B1\uB9B2\uB9B3\uB9B5\uB9B6\uB9B7\uB9B8\uB9B9\uB9BA\uB9BB\uB9BE\uB9C0\uB9C2\uB9C3\uB9C4\uB9C5\uB9C6\uB9C7\uB9CA\uB9CB\uB9CD\uB9D3\uB9D4\uB9D5\uB9D6\uB9D7\uB9DA\uB9DC\uB9DF\uB9E0\uB9E2\uB9E6\uB9E7\uB9E9\uB9EA\uB9EB\uB9ED\uB9EE\uB9EF\uB9F0\uB9F1\uB9F2\uB9F3\uB9F6\uB9FB\uB9FC\uB9FD\uB9FE\uB9FF\uBA02\uBA03\uBA04\uBA05\uBA06\uBA07\uBA09\uBA0A\uBA0B\uBA0C\uBA0D\uBA0E\uBA0F\uBA10\uBA11\uBA12\uBA13\uBA14\uBA16\uBA17\uBA18\uBA19\uBA1A\uBA1B\uBA1C\uBA1D\uBA1E\uBA1F\uBA20\uBA21\uBA22\uBA23\uBA24\uBA25\uBA26\uBA27\uBA28\uBA29\uBA2A\uBA2B\uBA2C\uBA2D\uBA2E\uBA2F\uBA30\uBA31\uBA32\uBA33\uBA34\uBA35\uBA36\uBA37\uBA3A\uBA3B\uBA3D\uBA3E\uBA3F\uBA41\uBA43\uBA44\uBA45\uBA46\uFFFD".split("");
      for (j = 0; j != D[144].length; ++j)
        if (D[144][j].charCodeAt(0) !== 65533) {
          e[D[144][j]] = 36864 + j;
          d[36864 + j] = D[144][j];
        }
      D[145] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA47\uBA4A\uBA4C\uBA4F\uBA50\uBA51\uBA52\uBA56\uBA57\uBA59\uBA5A\uBA5B\uBA5D\uBA5E\uBA5F\uBA60\uBA61\uBA62\uBA63\uBA66\uBA6A\uBA6B\uBA6C\uBA6D\uBA6E\uBA6F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA72\uBA73\uBA75\uBA76\uBA77\uBA79\uBA7A\uBA7B\uBA7C\uBA7D\uBA7E\uBA7F\uBA80\uBA81\uBA82\uBA86\uBA88\uBA89\uBA8A\uBA8B\uBA8D\uBA8E\uBA8F\uBA90\uBA91\uBA92\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA93\uBA94\uBA95\uBA96\uBA97\uBA98\uBA99\uBA9A\uBA9B\uBA9C\uBA9D\uBA9E\uBA9F\uBAA0\uBAA1\uBAA2\uBAA3\uBAA4\uBAA5\uBAA6\uBAA7\uBAAA\uBAAD\uBAAE\uBAAF\uBAB1\uBAB3\uBAB4\uBAB5\uBAB6\uBAB7\uBABA\uBABC\uBABE\uBABF\uBAC0\uBAC1\uBAC2\uBAC3\uBAC5\uBAC6\uBAC7\uBAC9\uBACA\uBACB\uBACC\uBACD\uBACE\uBACF\uBAD0\uBAD1\uBAD2\uBAD3\uBAD4\uBAD5\uBAD6\uBAD7\uBADA\uBADB\uBADC\uBADD\uBADE\uBADF\uBAE0\uBAE1\uBAE2\uBAE3\uBAE4\uBAE5\uBAE6\uBAE7\uBAE8\uBAE9\uBAEA\uBAEB\uBAEC\uBAED\uBAEE\uBAEF\uBAF0\uBAF1\uBAF2\uBAF3\uBAF4\uBAF5\uBAF6\uBAF7\uBAF8\uBAF9\uBAFA\uBAFB\uBAFD\uBAFE\uBAFF\uBB01\uBB02\uBB03\uBB05\uBB06\uBB07\uBB08\uBB09\uBB0A\uBB0B\uBB0C\uBB0E\uBB10\uBB12\uBB13\uBB14\uBB15\uBB16\uBB17\uBB19\uBB1A\uBB1B\uBB1D\uBB1E\uBB1F\uBB21\uBB22\uBB23\uBB24\uBB25\uBB26\uBB27\uFFFD".split("");
      for (j = 0; j != D[145].length; ++j)
        if (D[145][j].charCodeAt(0) !== 65533) {
          e[D[145][j]] = 37120 + j;
          d[37120 + j] = D[145][j];
        }
      D[146] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB28\uBB2A\uBB2C\uBB2D\uBB2E\uBB2F\uBB30\uBB31\uBB32\uBB33\uBB37\uBB39\uBB3A\uBB3F\uBB40\uBB41\uBB42\uBB43\uBB46\uBB48\uBB4A\uBB4B\uBB4C\uBB4E\uBB51\uBB52\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB53\uBB55\uBB56\uBB57\uBB59\uBB5A\uBB5B\uBB5C\uBB5D\uBB5E\uBB5F\uBB60\uBB62\uBB64\uBB65\uBB66\uBB67\uBB68\uBB69\uBB6A\uBB6B\uBB6D\uBB6E\uBB6F\uBB70\uBB71\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB72\uBB73\uBB74\uBB75\uBB76\uBB77\uBB78\uBB79\uBB7A\uBB7B\uBB7C\uBB7D\uBB7E\uBB7F\uBB80\uBB81\uBB82\uBB83\uBB84\uBB85\uBB86\uBB87\uBB89\uBB8A\uBB8B\uBB8D\uBB8E\uBB8F\uBB91\uBB92\uBB93\uBB94\uBB95\uBB96\uBB97\uBB98\uBB99\uBB9A\uBB9B\uBB9C\uBB9D\uBB9E\uBB9F\uBBA0\uBBA1\uBBA2\uBBA3\uBBA5\uBBA6\uBBA7\uBBA9\uBBAA\uBBAB\uBBAD\uBBAE\uBBAF\uBBB0\uBBB1\uBBB2\uBBB3\uBBB5\uBBB6\uBBB8\uBBB9\uBBBA\uBBBB\uBBBC\uBBBD\uBBBE\uBBBF\uBBC1\uBBC2\uBBC3\uBBC5\uBBC6\uBBC7\uBBC9\uBBCA\uBBCB\uBBCC\uBBCD\uBBCE\uBBCF\uBBD1\uBBD2\uBBD4\uBBD5\uBBD6\uBBD7\uBBD8\uBBD9\uBBDA\uBBDB\uBBDC\uBBDD\uBBDE\uBBDF\uBBE0\uBBE1\uBBE2\uBBE3\uBBE4\uBBE5\uBBE6\uBBE7\uBBE8\uBBE9\uBBEA\uBBEB\uBBEC\uBBED\uBBEE\uBBEF\uBBF0\uBBF1\uBBF2\uBBF3\uBBF4\uBBF5\uBBF6\uBBF7\uBBFA\uBBFB\uBBFD\uBBFE\uBC01\uFFFD".split("");
      for (j = 0; j != D[146].length; ++j)
        if (D[146][j].charCodeAt(0) !== 65533) {
          e[D[146][j]] = 37376 + j;
          d[37376 + j] = D[146][j];
        }
      D[147] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC03\uBC04\uBC05\uBC06\uBC07\uBC0A\uBC0E\uBC10\uBC12\uBC13\uBC19\uBC1A\uBC20\uBC21\uBC22\uBC23\uBC26\uBC28\uBC2A\uBC2B\uBC2C\uBC2E\uBC2F\uBC32\uBC33\uBC35\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC36\uBC37\uBC39\uBC3A\uBC3B\uBC3C\uBC3D\uBC3E\uBC3F\uBC42\uBC46\uBC47\uBC48\uBC4A\uBC4B\uBC4E\uBC4F\uBC51\uBC52\uBC53\uBC54\uBC55\uBC56\uBC57\uBC58\uBC59\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC5A\uBC5B\uBC5C\uBC5E\uBC5F\uBC60\uBC61\uBC62\uBC63\uBC64\uBC65\uBC66\uBC67\uBC68\uBC69\uBC6A\uBC6B\uBC6C\uBC6D\uBC6E\uBC6F\uBC70\uBC71\uBC72\uBC73\uBC74\uBC75\uBC76\uBC77\uBC78\uBC79\uBC7A\uBC7B\uBC7C\uBC7D\uBC7E\uBC7F\uBC80\uBC81\uBC82\uBC83\uBC86\uBC87\uBC89\uBC8A\uBC8D\uBC8F\uBC90\uBC91\uBC92\uBC93\uBC96\uBC98\uBC9B\uBC9C\uBC9D\uBC9E\uBC9F\uBCA2\uBCA3\uBCA5\uBCA6\uBCA9\uBCAA\uBCAB\uBCAC\uBCAD\uBCAE\uBCAF\uBCB2\uBCB6\uBCB7\uBCB8\uBCB9\uBCBA\uBCBB\uBCBE\uBCBF\uBCC1\uBCC2\uBCC3\uBCC5\uBCC6\uBCC7\uBCC8\uBCC9\uBCCA\uBCCB\uBCCC\uBCCE\uBCD2\uBCD3\uBCD4\uBCD6\uBCD7\uBCD9\uBCDA\uBCDB\uBCDD\uBCDE\uBCDF\uBCE0\uBCE1\uBCE2\uBCE3\uBCE4\uBCE5\uBCE6\uBCE7\uBCE8\uBCE9\uBCEA\uBCEB\uBCEC\uBCED\uBCEE\uBCEF\uBCF0\uBCF1\uBCF2\uBCF3\uBCF7\uBCF9\uBCFA\uBCFB\uBCFD\uFFFD".split("");
      for (j = 0; j != D[147].length; ++j)
        if (D[147][j].charCodeAt(0) !== 65533) {
          e[D[147][j]] = 37632 + j;
          d[37632 + j] = D[147][j];
        }
      D[148] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBCFE\uBCFF\uBD00\uBD01\uBD02\uBD03\uBD06\uBD08\uBD0A\uBD0B\uBD0C\uBD0D\uBD0E\uBD0F\uBD11\uBD12\uBD13\uBD15\uBD16\uBD17\uBD18\uBD19\uBD1A\uBD1B\uBD1C\uBD1D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBD1E\uBD1F\uBD20\uBD21\uBD22\uBD23\uBD25\uBD26\uBD27\uBD28\uBD29\uBD2A\uBD2B\uBD2D\uBD2E\uBD2F\uBD30\uBD31\uBD32\uBD33\uBD34\uBD35\uBD36\uBD37\uBD38\uBD39\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBD3A\uBD3B\uBD3C\uBD3D\uBD3E\uBD3F\uBD41\uBD42\uBD43\uBD44\uBD45\uBD46\uBD47\uBD4A\uBD4B\uBD4D\uBD4E\uBD4F\uBD51\uBD52\uBD53\uBD54\uBD55\uBD56\uBD57\uBD5A\uBD5B\uBD5C\uBD5D\uBD5E\uBD5F\uBD60\uBD61\uBD62\uBD63\uBD65\uBD66\uBD67\uBD69\uBD6A\uBD6B\uBD6C\uBD6D\uBD6E\uBD6F\uBD70\uBD71\uBD72\uBD73\uBD74\uBD75\uBD76\uBD77\uBD78\uBD79\uBD7A\uBD7B\uBD7C\uBD7D\uBD7E\uBD7F\uBD82\uBD83\uBD85\uBD86\uBD8B\uBD8C\uBD8D\uBD8E\uBD8F\uBD92\uBD94\uBD96\uBD97\uBD98\uBD9B\uBD9D\uBD9E\uBD9F\uBDA0\uBDA1\uBDA2\uBDA3\uBDA5\uBDA6\uBDA7\uBDA8\uBDA9\uBDAA\uBDAB\uBDAC\uBDAD\uBDAE\uBDAF\uBDB1\uBDB2\uBDB3\uBDB4\uBDB5\uBDB6\uBDB7\uBDB9\uBDBA\uBDBB\uBDBC\uBDBD\uBDBE\uBDBF\uBDC0\uBDC1\uBDC2\uBDC3\uBDC4\uBDC5\uBDC6\uBDC7\uBDC8\uBDC9\uBDCA\uBDCB\uBDCC\uBDCD\uBDCE\uBDCF\uBDD0\uBDD1\uFFFD".split("");
      for (j = 0; j != D[148].length; ++j)
        if (D[148][j].charCodeAt(0) !== 65533) {
          e[D[148][j]] = 37888 + j;
          d[37888 + j] = D[148][j];
        }
      D[149] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBDD2\uBDD3\uBDD6\uBDD7\uBDD9\uBDDA\uBDDB\uBDDD\uBDDE\uBDDF\uBDE0\uBDE1\uBDE2\uBDE3\uBDE4\uBDE5\uBDE6\uBDE7\uBDE8\uBDEA\uBDEB\uBDEC\uBDED\uBDEE\uBDEF\uBDF1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBDF2\uBDF3\uBDF5\uBDF6\uBDF7\uBDF9\uBDFA\uBDFB\uBDFC\uBDFD\uBDFE\uBDFF\uBE01\uBE02\uBE04\uBE06\uBE07\uBE08\uBE09\uBE0A\uBE0B\uBE0E\uBE0F\uBE11\uBE12\uBE13\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBE15\uBE16\uBE17\uBE18\uBE19\uBE1A\uBE1B\uBE1E\uBE20\uBE21\uBE22\uBE23\uBE24\uBE25\uBE26\uBE27\uBE28\uBE29\uBE2A\uBE2B\uBE2C\uBE2D\uBE2E\uBE2F\uBE30\uBE31\uBE32\uBE33\uBE34\uBE35\uBE36\uBE37\uBE38\uBE39\uBE3A\uBE3B\uBE3C\uBE3D\uBE3E\uBE3F\uBE40\uBE41\uBE42\uBE43\uBE46\uBE47\uBE49\uBE4A\uBE4B\uBE4D\uBE4F\uBE50\uBE51\uBE52\uBE53\uBE56\uBE58\uBE5C\uBE5D\uBE5E\uBE5F\uBE62\uBE63\uBE65\uBE66\uBE67\uBE69\uBE6B\uBE6C\uBE6D\uBE6E\uBE6F\uBE72\uBE76\uBE77\uBE78\uBE79\uBE7A\uBE7E\uBE7F\uBE81\uBE82\uBE83\uBE85\uBE86\uBE87\uBE88\uBE89\uBE8A\uBE8B\uBE8E\uBE92\uBE93\uBE94\uBE95\uBE96\uBE97\uBE9A\uBE9B\uBE9C\uBE9D\uBE9E\uBE9F\uBEA0\uBEA1\uBEA2\uBEA3\uBEA4\uBEA5\uBEA6\uBEA7\uBEA9\uBEAA\uBEAB\uBEAC\uBEAD\uBEAE\uBEAF\uBEB0\uBEB1\uBEB2\uBEB3\uBEB4\uBEB5\uBEB6\uBEB7\uFFFD".split("");
      for (j = 0; j != D[149].length; ++j)
        if (D[149][j].charCodeAt(0) !== 65533) {
          e[D[149][j]] = 38144 + j;
          d[38144 + j] = D[149][j];
        }
      D[150] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBEB8\uBEB9\uBEBA\uBEBB\uBEBC\uBEBD\uBEBE\uBEBF\uBEC0\uBEC1\uBEC2\uBEC3\uBEC4\uBEC5\uBEC6\uBEC7\uBEC8\uBEC9\uBECA\uBECB\uBECC\uBECD\uBECE\uBECF\uBED2\uBED3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBED5\uBED6\uBED9\uBEDA\uBEDB\uBEDC\uBEDD\uBEDE\uBEDF\uBEE1\uBEE2\uBEE6\uBEE7\uBEE8\uBEE9\uBEEA\uBEEB\uBEED\uBEEE\uBEEF\uBEF0\uBEF1\uBEF2\uBEF3\uBEF4\uBEF5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBEF6\uBEF7\uBEF8\uBEF9\uBEFA\uBEFB\uBEFC\uBEFD\uBEFE\uBEFF\uBF00\uBF02\uBF03\uBF04\uBF05\uBF06\uBF07\uBF0A\uBF0B\uBF0C\uBF0D\uBF0E\uBF0F\uBF10\uBF11\uBF12\uBF13\uBF14\uBF15\uBF16\uBF17\uBF1A\uBF1E\uBF1F\uBF20\uBF21\uBF22\uBF23\uBF24\uBF25\uBF26\uBF27\uBF28\uBF29\uBF2A\uBF2B\uBF2C\uBF2D\uBF2E\uBF2F\uBF30\uBF31\uBF32\uBF33\uBF34\uBF35\uBF36\uBF37\uBF38\uBF39\uBF3A\uBF3B\uBF3C\uBF3D\uBF3E\uBF3F\uBF42\uBF43\uBF45\uBF46\uBF47\uBF49\uBF4A\uBF4B\uBF4C\uBF4D\uBF4E\uBF4F\uBF52\uBF53\uBF54\uBF56\uBF57\uBF58\uBF59\uBF5A\uBF5B\uBF5C\uBF5D\uBF5E\uBF5F\uBF60\uBF61\uBF62\uBF63\uBF64\uBF65\uBF66\uBF67\uBF68\uBF69\uBF6A\uBF6B\uBF6C\uBF6D\uBF6E\uBF6F\uBF70\uBF71\uBF72\uBF73\uBF74\uBF75\uBF76\uBF77\uBF78\uBF79\uBF7A\uBF7B\uBF7C\uBF7D\uBF7E\uBF7F\uBF80\uBF81\uBF82\uFFFD".split("");
      for (j = 0; j != D[150].length; ++j)
        if (D[150][j].charCodeAt(0) !== 65533) {
          e[D[150][j]] = 38400 + j;
          d[38400 + j] = D[150][j];
        }
      D[151] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBF83\uBF84\uBF85\uBF86\uBF87\uBF88\uBF89\uBF8A\uBF8B\uBF8C\uBF8D\uBF8E\uBF8F\uBF90\uBF91\uBF92\uBF93\uBF95\uBF96\uBF97\uBF98\uBF99\uBF9A\uBF9B\uBF9C\uBF9D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBF9E\uBF9F\uBFA0\uBFA1\uBFA2\uBFA3\uBFA4\uBFA5\uBFA6\uBFA7\uBFA8\uBFA9\uBFAA\uBFAB\uBFAC\uBFAD\uBFAE\uBFAF\uBFB1\uBFB2\uBFB3\uBFB4\uBFB5\uBFB6\uBFB7\uBFB8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBFB9\uBFBA\uBFBB\uBFBC\uBFBD\uBFBE\uBFBF\uBFC0\uBFC1\uBFC2\uBFC3\uBFC4\uBFC6\uBFC7\uBFC8\uBFC9\uBFCA\uBFCB\uBFCE\uBFCF\uBFD1\uBFD2\uBFD3\uBFD5\uBFD6\uBFD7\uBFD8\uBFD9\uBFDA\uBFDB\uBFDD\uBFDE\uBFE0\uBFE2\uBFE3\uBFE4\uBFE5\uBFE6\uBFE7\uBFE8\uBFE9\uBFEA\uBFEB\uBFEC\uBFED\uBFEE\uBFEF\uBFF0\uBFF1\uBFF2\uBFF3\uBFF4\uBFF5\uBFF6\uBFF7\uBFF8\uBFF9\uBFFA\uBFFB\uBFFC\uBFFD\uBFFE\uBFFF\uC000\uC001\uC002\uC003\uC004\uC005\uC006\uC007\uC008\uC009\uC00A\uC00B\uC00C\uC00D\uC00E\uC00F\uC010\uC011\uC012\uC013\uC014\uC015\uC016\uC017\uC018\uC019\uC01A\uC01B\uC01C\uC01D\uC01E\uC01F\uC020\uC021\uC022\uC023\uC024\uC025\uC026\uC027\uC028\uC029\uC02A\uC02B\uC02C\uC02D\uC02E\uC02F\uC030\uC031\uC032\uC033\uC034\uC035\uC036\uC037\uC038\uC039\uC03A\uC03B\uC03D\uC03E\uC03F\uFFFD".split("");
      for (j = 0; j != D[151].length; ++j)
        if (D[151][j].charCodeAt(0) !== 65533) {
          e[D[151][j]] = 38656 + j;
          d[38656 + j] = D[151][j];
        }
      D[152] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC040\uC041\uC042\uC043\uC044\uC045\uC046\uC047\uC048\uC049\uC04A\uC04B\uC04C\uC04D\uC04E\uC04F\uC050\uC052\uC053\uC054\uC055\uC056\uC057\uC059\uC05A\uC05B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC05D\uC05E\uC05F\uC061\uC062\uC063\uC064\uC065\uC066\uC067\uC06A\uC06B\uC06C\uC06D\uC06E\uC06F\uC070\uC071\uC072\uC073\uC074\uC075\uC076\uC077\uC078\uC079\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC07A\uC07B\uC07C\uC07D\uC07E\uC07F\uC080\uC081\uC082\uC083\uC084\uC085\uC086\uC087\uC088\uC089\uC08A\uC08B\uC08C\uC08D\uC08E\uC08F\uC092\uC093\uC095\uC096\uC097\uC099\uC09A\uC09B\uC09C\uC09D\uC09E\uC09F\uC0A2\uC0A4\uC0A6\uC0A7\uC0A8\uC0A9\uC0AA\uC0AB\uC0AE\uC0B1\uC0B2\uC0B7\uC0B8\uC0B9\uC0BA\uC0BB\uC0BE\uC0C2\uC0C3\uC0C4\uC0C6\uC0C7\uC0CA\uC0CB\uC0CD\uC0CE\uC0CF\uC0D1\uC0D2\uC0D3\uC0D4\uC0D5\uC0D6\uC0D7\uC0DA\uC0DE\uC0DF\uC0E0\uC0E1\uC0E2\uC0E3\uC0E6\uC0E7\uC0E9\uC0EA\uC0EB\uC0ED\uC0EE\uC0EF\uC0F0\uC0F1\uC0F2\uC0F3\uC0F6\uC0F8\uC0FA\uC0FB\uC0FC\uC0FD\uC0FE\uC0FF\uC101\uC102\uC103\uC105\uC106\uC107\uC109\uC10A\uC10B\uC10C\uC10D\uC10E\uC10F\uC111\uC112\uC113\uC114\uC116\uC117\uC118\uC119\uC11A\uC11B\uC121\uC122\uC125\uC128\uC129\uC12A\uC12B\uC12E\uFFFD".split("");
      for (j = 0; j != D[152].length; ++j)
        if (D[152][j].charCodeAt(0) !== 65533) {
          e[D[152][j]] = 38912 + j;
          d[38912 + j] = D[152][j];
        }
      D[153] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC132\uC133\uC134\uC135\uC137\uC13A\uC13B\uC13D\uC13E\uC13F\uC141\uC142\uC143\uC144\uC145\uC146\uC147\uC14A\uC14E\uC14F\uC150\uC151\uC152\uC153\uC156\uC157\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC159\uC15A\uC15B\uC15D\uC15E\uC15F\uC160\uC161\uC162\uC163\uC166\uC16A\uC16B\uC16C\uC16D\uC16E\uC16F\uC171\uC172\uC173\uC175\uC176\uC177\uC179\uC17A\uC17B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC17C\uC17D\uC17E\uC17F\uC180\uC181\uC182\uC183\uC184\uC186\uC187\uC188\uC189\uC18A\uC18B\uC18F\uC191\uC192\uC193\uC195\uC197\uC198\uC199\uC19A\uC19B\uC19E\uC1A0\uC1A2\uC1A3\uC1A4\uC1A6\uC1A7\uC1AA\uC1AB\uC1AD\uC1AE\uC1AF\uC1B1\uC1B2\uC1B3\uC1B4\uC1B5\uC1B6\uC1B7\uC1B8\uC1B9\uC1BA\uC1BB\uC1BC\uC1BE\uC1BF\uC1C0\uC1C1\uC1C2\uC1C3\uC1C5\uC1C6\uC1C7\uC1C9\uC1CA\uC1CB\uC1CD\uC1CE\uC1CF\uC1D0\uC1D1\uC1D2\uC1D3\uC1D5\uC1D6\uC1D9\uC1DA\uC1DB\uC1DC\uC1DD\uC1DE\uC1DF\uC1E1\uC1E2\uC1E3\uC1E5\uC1E6\uC1E7\uC1E9\uC1EA\uC1EB\uC1EC\uC1ED\uC1EE\uC1EF\uC1F2\uC1F4\uC1F5\uC1F6\uC1F7\uC1F8\uC1F9\uC1FA\uC1FB\uC1FE\uC1FF\uC201\uC202\uC203\uC205\uC206\uC207\uC208\uC209\uC20A\uC20B\uC20E\uC210\uC212\uC213\uC214\uC215\uC216\uC217\uC21A\uC21B\uC21D\uC21E\uC221\uC222\uC223\uFFFD".split("");
      for (j = 0; j != D[153].length; ++j)
        if (D[153][j].charCodeAt(0) !== 65533) {
          e[D[153][j]] = 39168 + j;
          d[39168 + j] = D[153][j];
        }
      D[154] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC224\uC225\uC226\uC227\uC22A\uC22C\uC22E\uC230\uC233\uC235\uC236\uC237\uC238\uC239\uC23A\uC23B\uC23C\uC23D\uC23E\uC23F\uC240\uC241\uC242\uC243\uC244\uC245\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC246\uC247\uC249\uC24A\uC24B\uC24C\uC24D\uC24E\uC24F\uC252\uC253\uC255\uC256\uC257\uC259\uC25A\uC25B\uC25C\uC25D\uC25E\uC25F\uC261\uC262\uC263\uC264\uC266\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC267\uC268\uC269\uC26A\uC26B\uC26E\uC26F\uC271\uC272\uC273\uC275\uC276\uC277\uC278\uC279\uC27A\uC27B\uC27E\uC280\uC282\uC283\uC284\uC285\uC286\uC287\uC28A\uC28B\uC28C\uC28D\uC28E\uC28F\uC291\uC292\uC293\uC294\uC295\uC296\uC297\uC299\uC29A\uC29C\uC29E\uC29F\uC2A0\uC2A1\uC2A2\uC2A3\uC2A6\uC2A7\uC2A9\uC2AA\uC2AB\uC2AE\uC2AF\uC2B0\uC2B1\uC2B2\uC2B3\uC2B6\uC2B8\uC2BA\uC2BB\uC2BC\uC2BD\uC2BE\uC2BF\uC2C0\uC2C1\uC2C2\uC2C3\uC2C4\uC2C5\uC2C6\uC2C7\uC2C8\uC2C9\uC2CA\uC2CB\uC2CC\uC2CD\uC2CE\uC2CF\uC2D0\uC2D1\uC2D2\uC2D3\uC2D4\uC2D5\uC2D6\uC2D7\uC2D8\uC2D9\uC2DA\uC2DB\uC2DE\uC2DF\uC2E1\uC2E2\uC2E5\uC2E6\uC2E7\uC2E8\uC2E9\uC2EA\uC2EE\uC2F0\uC2F2\uC2F3\uC2F4\uC2F5\uC2F7\uC2FA\uC2FD\uC2FE\uC2FF\uC301\uC302\uC303\uC304\uC305\uC306\uC307\uC30A\uC30B\uC30E\uC30F\uFFFD".split("");
      for (j = 0; j != D[154].length; ++j)
        if (D[154][j].charCodeAt(0) !== 65533) {
          e[D[154][j]] = 39424 + j;
          d[39424 + j] = D[154][j];
        }
      D[155] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC310\uC311\uC312\uC316\uC317\uC319\uC31A\uC31B\uC31D\uC31E\uC31F\uC320\uC321\uC322\uC323\uC326\uC327\uC32A\uC32B\uC32C\uC32D\uC32E\uC32F\uC330\uC331\uC332\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC333\uC334\uC335\uC336\uC337\uC338\uC339\uC33A\uC33B\uC33C\uC33D\uC33E\uC33F\uC340\uC341\uC342\uC343\uC344\uC346\uC347\uC348\uC349\uC34A\uC34B\uC34C\uC34D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC34E\uC34F\uC350\uC351\uC352\uC353\uC354\uC355\uC356\uC357\uC358\uC359\uC35A\uC35B\uC35C\uC35D\uC35E\uC35F\uC360\uC361\uC362\uC363\uC364\uC365\uC366\uC367\uC36A\uC36B\uC36D\uC36E\uC36F\uC371\uC373\uC374\uC375\uC376\uC377\uC37A\uC37B\uC37E\uC37F\uC380\uC381\uC382\uC383\uC385\uC386\uC387\uC389\uC38A\uC38B\uC38D\uC38E\uC38F\uC390\uC391\uC392\uC393\uC394\uC395\uC396\uC397\uC398\uC399\uC39A\uC39B\uC39C\uC39D\uC39E\uC39F\uC3A0\uC3A1\uC3A2\uC3A3\uC3A4\uC3A5\uC3A6\uC3A7\uC3A8\uC3A9\uC3AA\uC3AB\uC3AC\uC3AD\uC3AE\uC3AF\uC3B0\uC3B1\uC3B2\uC3B3\uC3B4\uC3B5\uC3B6\uC3B7\uC3B8\uC3B9\uC3BA\uC3BB\uC3BC\uC3BD\uC3BE\uC3BF\uC3C1\uC3C2\uC3C3\uC3C4\uC3C5\uC3C6\uC3C7\uC3C8\uC3C9\uC3CA\uC3CB\uC3CC\uC3CD\uC3CE\uC3CF\uC3D0\uC3D1\uC3D2\uC3D3\uC3D4\uC3D5\uC3D6\uC3D7\uC3DA\uFFFD".split("");
      for (j = 0; j != D[155].length; ++j)
        if (D[155][j].charCodeAt(0) !== 65533) {
          e[D[155][j]] = 39680 + j;
          d[39680 + j] = D[155][j];
        }
      D[156] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC3DB\uC3DD\uC3DE\uC3E1\uC3E3\uC3E4\uC3E5\uC3E6\uC3E7\uC3EA\uC3EB\uC3EC\uC3EE\uC3EF\uC3F0\uC3F1\uC3F2\uC3F3\uC3F6\uC3F7\uC3F9\uC3FA\uC3FB\uC3FC\uC3FD\uC3FE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC3FF\uC400\uC401\uC402\uC403\uC404\uC405\uC406\uC407\uC409\uC40A\uC40B\uC40C\uC40D\uC40E\uC40F\uC411\uC412\uC413\uC414\uC415\uC416\uC417\uC418\uC419\uC41A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC41B\uC41C\uC41D\uC41E\uC41F\uC420\uC421\uC422\uC423\uC425\uC426\uC427\uC428\uC429\uC42A\uC42B\uC42D\uC42E\uC42F\uC431\uC432\uC433\uC435\uC436\uC437\uC438\uC439\uC43A\uC43B\uC43E\uC43F\uC440\uC441\uC442\uC443\uC444\uC445\uC446\uC447\uC449\uC44A\uC44B\uC44C\uC44D\uC44E\uC44F\uC450\uC451\uC452\uC453\uC454\uC455\uC456\uC457\uC458\uC459\uC45A\uC45B\uC45C\uC45D\uC45E\uC45F\uC460\uC461\uC462\uC463\uC466\uC467\uC469\uC46A\uC46B\uC46D\uC46E\uC46F\uC470\uC471\uC472\uC473\uC476\uC477\uC478\uC47A\uC47B\uC47C\uC47D\uC47E\uC47F\uC481\uC482\uC483\uC484\uC485\uC486\uC487\uC488\uC489\uC48A\uC48B\uC48C\uC48D\uC48E\uC48F\uC490\uC491\uC492\uC493\uC495\uC496\uC497\uC498\uC499\uC49A\uC49B\uC49D\uC49E\uC49F\uC4A0\uC4A1\uC4A2\uC4A3\uC4A4\uC4A5\uC4A6\uC4A7\uC4A8\uC4A9\uFFFD".split("");
      for (j = 0; j != D[156].length; ++j)
        if (D[156][j].charCodeAt(0) !== 65533) {
          e[D[156][j]] = 39936 + j;
          d[39936 + j] = D[156][j];
        }
      D[157] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4AA\uC4AB\uC4AC\uC4AD\uC4AE\uC4AF\uC4B0\uC4B1\uC4B2\uC4B3\uC4B4\uC4B5\uC4B6\uC4B7\uC4B9\uC4BA\uC4BB\uC4BD\uC4BE\uC4BF\uC4C0\uC4C1\uC4C2\uC4C3\uC4C4\uC4C5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4C6\uC4C7\uC4C8\uC4C9\uC4CA\uC4CB\uC4CC\uC4CD\uC4CE\uC4CF\uC4D0\uC4D1\uC4D2\uC4D3\uC4D4\uC4D5\uC4D6\uC4D7\uC4D8\uC4D9\uC4DA\uC4DB\uC4DC\uC4DD\uC4DE\uC4DF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4E0\uC4E1\uC4E2\uC4E3\uC4E4\uC4E5\uC4E6\uC4E7\uC4E8\uC4EA\uC4EB\uC4EC\uC4ED\uC4EE\uC4EF\uC4F2\uC4F3\uC4F5\uC4F6\uC4F7\uC4F9\uC4FB\uC4FC\uC4FD\uC4FE\uC502\uC503\uC504\uC505\uC506\uC507\uC508\uC509\uC50A\uC50B\uC50D\uC50E\uC50F\uC511\uC512\uC513\uC515\uC516\uC517\uC518\uC519\uC51A\uC51B\uC51D\uC51E\uC51F\uC520\uC521\uC522\uC523\uC524\uC525\uC526\uC527\uC52A\uC52B\uC52D\uC52E\uC52F\uC531\uC532\uC533\uC534\uC535\uC536\uC537\uC53A\uC53C\uC53E\uC53F\uC540\uC541\uC542\uC543\uC546\uC547\uC54B\uC54F\uC550\uC551\uC552\uC556\uC55A\uC55B\uC55C\uC55F\uC562\uC563\uC565\uC566\uC567\uC569\uC56A\uC56B\uC56C\uC56D\uC56E\uC56F\uC572\uC576\uC577\uC578\uC579\uC57A\uC57B\uC57E\uC57F\uC581\uC582\uC583\uC585\uC586\uC588\uC589\uC58A\uC58B\uC58E\uC590\uC592\uC593\uC594\uFFFD".split("");
      for (j = 0; j != D[157].length; ++j)
        if (D[157][j].charCodeAt(0) !== 65533) {
          e[D[157][j]] = 40192 + j;
          d[40192 + j] = D[157][j];
        }
      D[158] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC596\uC599\uC59A\uC59B\uC59D\uC59E\uC59F\uC5A1\uC5A2\uC5A3\uC5A4\uC5A5\uC5A6\uC5A7\uC5A8\uC5AA\uC5AB\uC5AC\uC5AD\uC5AE\uC5AF\uC5B0\uC5B1\uC5B2\uC5B3\uC5B6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC5B7\uC5BA\uC5BF\uC5C0\uC5C1\uC5C2\uC5C3\uC5CB\uC5CD\uC5CF\uC5D2\uC5D3\uC5D5\uC5D6\uC5D7\uC5D9\uC5DA\uC5DB\uC5DC\uC5DD\uC5DE\uC5DF\uC5E2\uC5E4\uC5E6\uC5E7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC5E8\uC5E9\uC5EA\uC5EB\uC5EF\uC5F1\uC5F2\uC5F3\uC5F5\uC5F8\uC5F9\uC5FA\uC5FB\uC602\uC603\uC604\uC609\uC60A\uC60B\uC60D\uC60E\uC60F\uC611\uC612\uC613\uC614\uC615\uC616\uC617\uC61A\uC61D\uC61E\uC61F\uC620\uC621\uC622\uC623\uC626\uC627\uC629\uC62A\uC62B\uC62F\uC631\uC632\uC636\uC638\uC63A\uC63C\uC63D\uC63E\uC63F\uC642\uC643\uC645\uC646\uC647\uC649\uC64A\uC64B\uC64C\uC64D\uC64E\uC64F\uC652\uC656\uC657\uC658\uC659\uC65A\uC65B\uC65E\uC65F\uC661\uC662\uC663\uC664\uC665\uC666\uC667\uC668\uC669\uC66A\uC66B\uC66D\uC66E\uC670\uC672\uC673\uC674\uC675\uC676\uC677\uC67A\uC67B\uC67D\uC67E\uC67F\uC681\uC682\uC683\uC684\uC685\uC686\uC687\uC68A\uC68C\uC68E\uC68F\uC690\uC691\uC692\uC693\uC696\uC697\uC699\uC69A\uC69B\uC69D\uC69E\uC69F\uC6A0\uC6A1\uC6A2\uC6A3\uC6A6\uFFFD".split("");
      for (j = 0; j != D[158].length; ++j)
        if (D[158][j].charCodeAt(0) !== 65533) {
          e[D[158][j]] = 40448 + j;
          d[40448 + j] = D[158][j];
        }
      D[159] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6A8\uC6AA\uC6AB\uC6AC\uC6AD\uC6AE\uC6AF\uC6B2\uC6B3\uC6B5\uC6B6\uC6B7\uC6BB\uC6BC\uC6BD\uC6BE\uC6BF\uC6C2\uC6C4\uC6C6\uC6C7\uC6C8\uC6C9\uC6CA\uC6CB\uC6CE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6CF\uC6D1\uC6D2\uC6D3\uC6D5\uC6D6\uC6D7\uC6D8\uC6D9\uC6DA\uC6DB\uC6DE\uC6DF\uC6E2\uC6E3\uC6E4\uC6E5\uC6E6\uC6E7\uC6EA\uC6EB\uC6ED\uC6EE\uC6EF\uC6F1\uC6F2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6F3\uC6F4\uC6F5\uC6F6\uC6F7\uC6FA\uC6FB\uC6FC\uC6FE\uC6FF\uC700\uC701\uC702\uC703\uC706\uC707\uC709\uC70A\uC70B\uC70D\uC70E\uC70F\uC710\uC711\uC712\uC713\uC716\uC718\uC71A\uC71B\uC71C\uC71D\uC71E\uC71F\uC722\uC723\uC725\uC726\uC727\uC729\uC72A\uC72B\uC72C\uC72D\uC72E\uC72F\uC732\uC734\uC736\uC738\uC739\uC73A\uC73B\uC73E\uC73F\uC741\uC742\uC743\uC745\uC746\uC747\uC748\uC749\uC74B\uC74E\uC750\uC759\uC75A\uC75B\uC75D\uC75E\uC75F\uC761\uC762\uC763\uC764\uC765\uC766\uC767\uC769\uC76A\uC76C\uC76D\uC76E\uC76F\uC770\uC771\uC772\uC773\uC776\uC777\uC779\uC77A\uC77B\uC77F\uC780\uC781\uC782\uC786\uC78B\uC78C\uC78D\uC78F\uC792\uC793\uC795\uC799\uC79B\uC79C\uC79D\uC79E\uC79F\uC7A2\uC7A7\uC7A8\uC7A9\uC7AA\uC7AB\uC7AE\uC7AF\uC7B1\uC7B2\uC7B3\uC7B5\uC7B6\uC7B7\uFFFD".split("");
      for (j = 0; j != D[159].length; ++j)
        if (D[159][j].charCodeAt(0) !== 65533) {
          e[D[159][j]] = 40704 + j;
          d[40704 + j] = D[159][j];
        }
      D[160] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7B8\uC7B9\uC7BA\uC7BB\uC7BE\uC7C2\uC7C3\uC7C4\uC7C5\uC7C6\uC7C7\uC7CA\uC7CB\uC7CD\uC7CF\uC7D1\uC7D2\uC7D3\uC7D4\uC7D5\uC7D6\uC7D7\uC7D9\uC7DA\uC7DB\uC7DC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7DE\uC7DF\uC7E0\uC7E1\uC7E2\uC7E3\uC7E5\uC7E6\uC7E7\uC7E9\uC7EA\uC7EB\uC7ED\uC7EE\uC7EF\uC7F0\uC7F1\uC7F2\uC7F3\uC7F4\uC7F5\uC7F6\uC7F7\uC7F8\uC7F9\uC7FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7FB\uC7FC\uC7FD\uC7FE\uC7FF\uC802\uC803\uC805\uC806\uC807\uC809\uC80B\uC80C\uC80D\uC80E\uC80F\uC812\uC814\uC817\uC818\uC819\uC81A\uC81B\uC81E\uC81F\uC821\uC822\uC823\uC825\uC826\uC827\uC828\uC829\uC82A\uC82B\uC82E\uC830\uC832\uC833\uC834\uC835\uC836\uC837\uC839\uC83A\uC83B\uC83D\uC83E\uC83F\uC841\uC842\uC843\uC844\uC845\uC846\uC847\uC84A\uC84B\uC84E\uC84F\uC850\uC851\uC852\uC853\uC855\uC856\uC857\uC858\uC859\uC85A\uC85B\uC85C\uC85D\uC85E\uC85F\uC860\uC861\uC862\uC863\uC864\uC865\uC866\uC867\uC868\uC869\uC86A\uC86B\uC86C\uC86D\uC86E\uC86F\uC872\uC873\uC875\uC876\uC877\uC879\uC87B\uC87C\uC87D\uC87E\uC87F\uC882\uC884\uC888\uC889\uC88A\uC88E\uC88F\uC890\uC891\uC892\uC893\uC895\uC896\uC897\uC898\uC899\uC89A\uC89B\uC89C\uC89E\uC8A0\uC8A2\uC8A3\uC8A4\uFFFD".split("");
      for (j = 0; j != D[160].length; ++j)
        if (D[160][j].charCodeAt(0) !== 65533) {
          e[D[160][j]] = 40960 + j;
          d[40960 + j] = D[160][j];
        }
      D[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8A5\uC8A6\uC8A7\uC8A9\uC8AA\uC8AB\uC8AC\uC8AD\uC8AE\uC8AF\uC8B0\uC8B1\uC8B2\uC8B3\uC8B4\uC8B5\uC8B6\uC8B7\uC8B8\uC8B9\uC8BA\uC8BB\uC8BE\uC8BF\uC8C0\uC8C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8C2\uC8C3\uC8C5\uC8C6\uC8C7\uC8C9\uC8CA\uC8CB\uC8CD\uC8CE\uC8CF\uC8D0\uC8D1\uC8D2\uC8D3\uC8D6\uC8D8\uC8DA\uC8DB\uC8DC\uC8DD\uC8DE\uC8DF\uC8E2\uC8E3\uC8E5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8E6\uC8E7\uC8E8\uC8E9\uC8EA\uC8EB\uC8EC\uC8ED\uC8EE\uC8EF\uC8F0\uC8F1\uC8F2\uC8F3\uC8F4\uC8F6\uC8F7\uC8F8\uC8F9\uC8FA\uC8FB\uC8FE\uC8FF\uC901\uC902\uC903\uC907\uC908\uC909\uC90A\uC90B\uC90E\u3000\u3001\u3002\xB7\u2025\u2026\xA8\u3003\xAD\u2015\u2225\uFF3C\u223C\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3010\u3011\xB1\xD7\xF7\u2260\u2264\u2265\u221E\u2234\xB0\u2032\u2033\u2103\u212B\uFFE0\uFFE1\uFFE5\u2642\u2640\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\xA7\u203B\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u2192\u2190\u2191\u2193\u2194\u3013\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\u2227\u2228\uFFE2\uFFFD".split("");
      for (j = 0; j != D[161].length; ++j)
        if (D[161][j].charCodeAt(0) !== 65533) {
          e[D[161][j]] = 41216 + j;
          d[41216 + j] = D[161][j];
        }
      D[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC910\uC912\uC913\uC914\uC915\uC916\uC917\uC919\uC91A\uC91B\uC91C\uC91D\uC91E\uC91F\uC920\uC921\uC922\uC923\uC924\uC925\uC926\uC927\uC928\uC929\uC92A\uC92B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC92D\uC92E\uC92F\uC930\uC931\uC932\uC933\uC935\uC936\uC937\uC938\uC939\uC93A\uC93B\uC93C\uC93D\uC93E\uC93F\uC940\uC941\uC942\uC943\uC944\uC945\uC946\uC947\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC948\uC949\uC94A\uC94B\uC94C\uC94D\uC94E\uC94F\uC952\uC953\uC955\uC956\uC957\uC959\uC95A\uC95B\uC95C\uC95D\uC95E\uC95F\uC962\uC964\uC965\uC966\uC967\uC968\uC969\uC96A\uC96B\uC96D\uC96E\uC96F\u21D2\u21D4\u2200\u2203\xB4\uFF5E\u02C7\u02D8\u02DD\u02DA\u02D9\xB8\u02DB\xA1\xBF\u02D0\u222E\u2211\u220F\xA4\u2109\u2030\u25C1\u25C0\u25B7\u25B6\u2664\u2660\u2661\u2665\u2667\u2663\u2299\u25C8\u25A3\u25D0\u25D1\u2592\u25A4\u25A5\u25A8\u25A7\u25A6\u25A9\u2668\u260F\u260E\u261C\u261E\xB6\u2020\u2021\u2195\u2197\u2199\u2196\u2198\u266D\u2669\u266A\u266C\u327F\u321C\u2116\u33C7\u2122\u33C2\u33D8\u2121\u20AC\xAE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[162].length; ++j)
        if (D[162][j].charCodeAt(0) !== 65533) {
          e[D[162][j]] = 41472 + j;
          d[41472 + j] = D[162][j];
        }
      D[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC971\uC972\uC973\uC975\uC976\uC977\uC978\uC979\uC97A\uC97B\uC97D\uC97E\uC97F\uC980\uC981\uC982\uC983\uC984\uC985\uC986\uC987\uC98A\uC98B\uC98D\uC98E\uC98F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC991\uC992\uC993\uC994\uC995\uC996\uC997\uC99A\uC99C\uC99E\uC99F\uC9A0\uC9A1\uC9A2\uC9A3\uC9A4\uC9A5\uC9A6\uC9A7\uC9A8\uC9A9\uC9AA\uC9AB\uC9AC\uC9AD\uC9AE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC9AF\uC9B0\uC9B1\uC9B2\uC9B3\uC9B4\uC9B5\uC9B6\uC9B7\uC9B8\uC9B9\uC9BA\uC9BB\uC9BC\uC9BD\uC9BE\uC9BF\uC9C2\uC9C3\uC9C5\uC9C6\uC9C9\uC9CB\uC9CC\uC9CD\uC9CE\uC9CF\uC9D2\uC9D4\uC9D7\uC9D8\uC9DB\uFF01\uFF02\uFF03\uFF04\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFFE6\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD".split("");
      for (j = 0; j != D[163].length; ++j)
        if (D[163][j].charCodeAt(0) !== 65533) {
          e[D[163][j]] = 41728 + j;
          d[41728 + j] = D[163][j];
        }
      D[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC9DE\uC9DF\uC9E1\uC9E3\uC9E5\uC9E6\uC9E8\uC9E9\uC9EA\uC9EB\uC9EE\uC9F2\uC9F3\uC9F4\uC9F5\uC9F6\uC9F7\uC9FA\uC9FB\uC9FD\uC9FE\uC9FF\uCA01\uCA02\uCA03\uCA04\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA05\uCA06\uCA07\uCA0A\uCA0E\uCA0F\uCA10\uCA11\uCA12\uCA13\uCA15\uCA16\uCA17\uCA19\uCA1A\uCA1B\uCA1C\uCA1D\uCA1E\uCA1F\uCA20\uCA21\uCA22\uCA23\uCA24\uCA25\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA26\uCA27\uCA28\uCA2A\uCA2B\uCA2C\uCA2D\uCA2E\uCA2F\uCA30\uCA31\uCA32\uCA33\uCA34\uCA35\uCA36\uCA37\uCA38\uCA39\uCA3A\uCA3B\uCA3C\uCA3D\uCA3E\uCA3F\uCA40\uCA41\uCA42\uCA43\uCA44\uCA45\uCA46\u3131\u3132\u3133\u3134\u3135\u3136\u3137\u3138\u3139\u313A\u313B\u313C\u313D\u313E\u313F\u3140\u3141\u3142\u3143\u3144\u3145\u3146\u3147\u3148\u3149\u314A\u314B\u314C\u314D\u314E\u314F\u3150\u3151\u3152\u3153\u3154\u3155\u3156\u3157\u3158\u3159\u315A\u315B\u315C\u315D\u315E\u315F\u3160\u3161\u3162\u3163\u3164\u3165\u3166\u3167\u3168\u3169\u316A\u316B\u316C\u316D\u316E\u316F\u3170\u3171\u3172\u3173\u3174\u3175\u3176\u3177\u3178\u3179\u317A\u317B\u317C\u317D\u317E\u317F\u3180\u3181\u3182\u3183\u3184\u3185\u3186\u3187\u3188\u3189\u318A\u318B\u318C\u318D\u318E\uFFFD".split("");
      for (j = 0; j != D[164].length; ++j)
        if (D[164][j].charCodeAt(0) !== 65533) {
          e[D[164][j]] = 41984 + j;
          d[41984 + j] = D[164][j];
        }
      D[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA47\uCA48\uCA49\uCA4A\uCA4B\uCA4E\uCA4F\uCA51\uCA52\uCA53\uCA55\uCA56\uCA57\uCA58\uCA59\uCA5A\uCA5B\uCA5E\uCA62\uCA63\uCA64\uCA65\uCA66\uCA67\uCA69\uCA6A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA6B\uCA6C\uCA6D\uCA6E\uCA6F\uCA70\uCA71\uCA72\uCA73\uCA74\uCA75\uCA76\uCA77\uCA78\uCA79\uCA7A\uCA7B\uCA7C\uCA7E\uCA7F\uCA80\uCA81\uCA82\uCA83\uCA85\uCA86\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA87\uCA88\uCA89\uCA8A\uCA8B\uCA8C\uCA8D\uCA8E\uCA8F\uCA90\uCA91\uCA92\uCA93\uCA94\uCA95\uCA96\uCA97\uCA99\uCA9A\uCA9B\uCA9C\uCA9D\uCA9E\uCA9F\uCAA0\uCAA1\uCAA2\uCAA3\uCAA4\uCAA5\uCAA6\uCAA7\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[165].length; ++j)
        if (D[165][j].charCodeAt(0) !== 65533) {
          e[D[165][j]] = 42240 + j;
          d[42240 + j] = D[165][j];
        }
      D[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAA8\uCAA9\uCAAA\uCAAB\uCAAC\uCAAD\uCAAE\uCAAF\uCAB0\uCAB1\uCAB2\uCAB3\uCAB4\uCAB5\uCAB6\uCAB7\uCAB8\uCAB9\uCABA\uCABB\uCABE\uCABF\uCAC1\uCAC2\uCAC3\uCAC5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAC6\uCAC7\uCAC8\uCAC9\uCACA\uCACB\uCACE\uCAD0\uCAD2\uCAD4\uCAD5\uCAD6\uCAD7\uCADA\uCADB\uCADC\uCADD\uCADE\uCADF\uCAE1\uCAE2\uCAE3\uCAE4\uCAE5\uCAE6\uCAE7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAE8\uCAE9\uCAEA\uCAEB\uCAED\uCAEE\uCAEF\uCAF0\uCAF1\uCAF2\uCAF3\uCAF5\uCAF6\uCAF7\uCAF8\uCAF9\uCAFA\uCAFB\uCAFC\uCAFD\uCAFE\uCAFF\uCB00\uCB01\uCB02\uCB03\uCB04\uCB05\uCB06\uCB07\uCB09\uCB0A\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\u2512\u2511\u251A\u2519\u2516\u2515\u250E\u250D\u251E\u251F\u2521\u2522\u2526\u2527\u2529\u252A\u252D\u252E\u2531\u2532\u2535\u2536\u2539\u253A\u253D\u253E\u2540\u2541\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[166].length; ++j)
        if (D[166][j].charCodeAt(0) !== 65533) {
          e[D[166][j]] = 42496 + j;
          d[42496 + j] = D[166][j];
        }
      D[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB0B\uCB0C\uCB0D\uCB0E\uCB0F\uCB11\uCB12\uCB13\uCB15\uCB16\uCB17\uCB19\uCB1A\uCB1B\uCB1C\uCB1D\uCB1E\uCB1F\uCB22\uCB23\uCB24\uCB25\uCB26\uCB27\uCB28\uCB29\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB2A\uCB2B\uCB2C\uCB2D\uCB2E\uCB2F\uCB30\uCB31\uCB32\uCB33\uCB34\uCB35\uCB36\uCB37\uCB38\uCB39\uCB3A\uCB3B\uCB3C\uCB3D\uCB3E\uCB3F\uCB40\uCB42\uCB43\uCB44\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB45\uCB46\uCB47\uCB4A\uCB4B\uCB4D\uCB4E\uCB4F\uCB51\uCB52\uCB53\uCB54\uCB55\uCB56\uCB57\uCB5A\uCB5B\uCB5C\uCB5E\uCB5F\uCB60\uCB61\uCB62\uCB63\uCB65\uCB66\uCB67\uCB68\uCB69\uCB6A\uCB6B\uCB6C\u3395\u3396\u3397\u2113\u3398\u33C4\u33A3\u33A4\u33A5\u33A6\u3399\u339A\u339B\u339C\u339D\u339E\u339F\u33A0\u33A1\u33A2\u33CA\u338D\u338E\u338F\u33CF\u3388\u3389\u33C8\u33A7\u33A8\u33B0\u33B1\u33B2\u33B3\u33B4\u33B5\u33B6\u33B7\u33B8\u33B9\u3380\u3381\u3382\u3383\u3384\u33BA\u33BB\u33BC\u33BD\u33BE\u33BF\u3390\u3391\u3392\u3393\u3394\u2126\u33C0\u33C1\u338A\u338B\u338C\u33D6\u33C5\u33AD\u33AE\u33AF\u33DB\u33A9\u33AA\u33AB\u33AC\u33DD\u33D0\u33D3\u33C3\u33C9\u33DC\u33C6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[167].length; ++j)
        if (D[167][j].charCodeAt(0) !== 65533) {
          e[D[167][j]] = 42752 + j;
          d[42752 + j] = D[167][j];
        }
      D[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB6D\uCB6E\uCB6F\uCB70\uCB71\uCB72\uCB73\uCB74\uCB75\uCB76\uCB77\uCB7A\uCB7B\uCB7C\uCB7D\uCB7E\uCB7F\uCB80\uCB81\uCB82\uCB83\uCB84\uCB85\uCB86\uCB87\uCB88\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB89\uCB8A\uCB8B\uCB8C\uCB8D\uCB8E\uCB8F\uCB90\uCB91\uCB92\uCB93\uCB94\uCB95\uCB96\uCB97\uCB98\uCB99\uCB9A\uCB9B\uCB9D\uCB9E\uCB9F\uCBA0\uCBA1\uCBA2\uCBA3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBA4\uCBA5\uCBA6\uCBA7\uCBA8\uCBA9\uCBAA\uCBAB\uCBAC\uCBAD\uCBAE\uCBAF\uCBB0\uCBB1\uCBB2\uCBB3\uCBB4\uCBB5\uCBB6\uCBB7\uCBB9\uCBBA\uCBBB\uCBBC\uCBBD\uCBBE\uCBBF\uCBC0\uCBC1\uCBC2\uCBC3\uCBC4\xC6\xD0\xAA\u0126\uFFFD\u0132\uFFFD\u013F\u0141\xD8\u0152\xBA\xDE\u0166\u014A\uFFFD\u3260\u3261\u3262\u3263\u3264\u3265\u3266\u3267\u3268\u3269\u326A\u326B\u326C\u326D\u326E\u326F\u3270\u3271\u3272\u3273\u3274\u3275\u3276\u3277\u3278\u3279\u327A\u327B\u24D0\u24D1\u24D2\u24D3\u24D4\u24D5\u24D6\u24D7\u24D8\u24D9\u24DA\u24DB\u24DC\u24DD\u24DE\u24DF\u24E0\u24E1\u24E2\u24E3\u24E4\u24E5\u24E6\u24E7\u24E8\u24E9\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\u246A\u246B\u246C\u246D\u246E\xBD\u2153\u2154\xBC\xBE\u215B\u215C\u215D\u215E\uFFFD".split("");
      for (j = 0; j != D[168].length; ++j)
        if (D[168][j].charCodeAt(0) !== 65533) {
          e[D[168][j]] = 43008 + j;
          d[43008 + j] = D[168][j];
        }
      D[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBC5\uCBC6\uCBC7\uCBC8\uCBC9\uCBCA\uCBCB\uCBCC\uCBCD\uCBCE\uCBCF\uCBD0\uCBD1\uCBD2\uCBD3\uCBD5\uCBD6\uCBD7\uCBD8\uCBD9\uCBDA\uCBDB\uCBDC\uCBDD\uCBDE\uCBDF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBE0\uCBE1\uCBE2\uCBE3\uCBE5\uCBE6\uCBE8\uCBEA\uCBEB\uCBEC\uCBED\uCBEE\uCBEF\uCBF0\uCBF1\uCBF2\uCBF3\uCBF4\uCBF5\uCBF6\uCBF7\uCBF8\uCBF9\uCBFA\uCBFB\uCBFC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBFD\uCBFE\uCBFF\uCC00\uCC01\uCC02\uCC03\uCC04\uCC05\uCC06\uCC07\uCC08\uCC09\uCC0A\uCC0B\uCC0E\uCC0F\uCC11\uCC12\uCC13\uCC15\uCC16\uCC17\uCC18\uCC19\uCC1A\uCC1B\uCC1E\uCC1F\uCC20\uCC23\uCC24\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0140\u0142\xF8\u0153\xDF\xFE\u0167\u014B\u0149\u3200\u3201\u3202\u3203\u3204\u3205\u3206\u3207\u3208\u3209\u320A\u320B\u320C\u320D\u320E\u320F\u3210\u3211\u3212\u3213\u3214\u3215\u3216\u3217\u3218\u3219\u321A\u321B\u249C\u249D\u249E\u249F\u24A0\u24A1\u24A2\u24A3\u24A4\u24A5\u24A6\u24A7\u24A8\u24A9\u24AA\u24AB\u24AC\u24AD\u24AE\u24AF\u24B0\u24B1\u24B2\u24B3\u24B4\u24B5\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\xB9\xB2\xB3\u2074\u207F\u2081\u2082\u2083\u2084\uFFFD".split("");
      for (j = 0; j != D[169].length; ++j)
        if (D[169][j].charCodeAt(0) !== 65533) {
          e[D[169][j]] = 43264 + j;
          d[43264 + j] = D[169][j];
        }
      D[170] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC25\uCC26\uCC2A\uCC2B\uCC2D\uCC2F\uCC31\uCC32\uCC33\uCC34\uCC35\uCC36\uCC37\uCC3A\uCC3F\uCC40\uCC41\uCC42\uCC43\uCC46\uCC47\uCC49\uCC4A\uCC4B\uCC4D\uCC4E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC4F\uCC50\uCC51\uCC52\uCC53\uCC56\uCC5A\uCC5B\uCC5C\uCC5D\uCC5E\uCC5F\uCC61\uCC62\uCC63\uCC65\uCC67\uCC69\uCC6A\uCC6B\uCC6C\uCC6D\uCC6E\uCC6F\uCC71\uCC72\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC73\uCC74\uCC76\uCC77\uCC78\uCC79\uCC7A\uCC7B\uCC7C\uCC7D\uCC7E\uCC7F\uCC80\uCC81\uCC82\uCC83\uCC84\uCC85\uCC86\uCC87\uCC88\uCC89\uCC8A\uCC8B\uCC8C\uCC8D\uCC8E\uCC8F\uCC90\uCC91\uCC92\uCC93\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[170].length; ++j)
        if (D[170][j].charCodeAt(0) !== 65533) {
          e[D[170][j]] = 43520 + j;
          d[43520 + j] = D[170][j];
        }
      D[171] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC94\uCC95\uCC96\uCC97\uCC9A\uCC9B\uCC9D\uCC9E\uCC9F\uCCA1\uCCA2\uCCA3\uCCA4\uCCA5\uCCA6\uCCA7\uCCAA\uCCAE\uCCAF\uCCB0\uCCB1\uCCB2\uCCB3\uCCB6\uCCB7\uCCB9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCBA\uCCBB\uCCBD\uCCBE\uCCBF\uCCC0\uCCC1\uCCC2\uCCC3\uCCC6\uCCC8\uCCCA\uCCCB\uCCCC\uCCCD\uCCCE\uCCCF\uCCD1\uCCD2\uCCD3\uCCD5\uCCD6\uCCD7\uCCD8\uCCD9\uCCDA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCDB\uCCDC\uCCDD\uCCDE\uCCDF\uCCE0\uCCE1\uCCE2\uCCE3\uCCE5\uCCE6\uCCE7\uCCE8\uCCE9\uCCEA\uCCEB\uCCED\uCCEE\uCCEF\uCCF1\uCCF2\uCCF3\uCCF4\uCCF5\uCCF6\uCCF7\uCCF8\uCCF9\uCCFA\uCCFB\uCCFC\uCCFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[171].length; ++j)
        if (D[171][j].charCodeAt(0) !== 65533) {
          e[D[171][j]] = 43776 + j;
          d[43776 + j] = D[171][j];
        }
      D[172] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCFE\uCCFF\uCD00\uCD02\uCD03\uCD04\uCD05\uCD06\uCD07\uCD0A\uCD0B\uCD0D\uCD0E\uCD0F\uCD11\uCD12\uCD13\uCD14\uCD15\uCD16\uCD17\uCD1A\uCD1C\uCD1E\uCD1F\uCD20\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD21\uCD22\uCD23\uCD25\uCD26\uCD27\uCD29\uCD2A\uCD2B\uCD2D\uCD2E\uCD2F\uCD30\uCD31\uCD32\uCD33\uCD34\uCD35\uCD36\uCD37\uCD38\uCD3A\uCD3B\uCD3C\uCD3D\uCD3E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD3F\uCD40\uCD41\uCD42\uCD43\uCD44\uCD45\uCD46\uCD47\uCD48\uCD49\uCD4A\uCD4B\uCD4C\uCD4D\uCD4E\uCD4F\uCD50\uCD51\uCD52\uCD53\uCD54\uCD55\uCD56\uCD57\uCD58\uCD59\uCD5A\uCD5B\uCD5D\uCD5E\uCD5F\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[172].length; ++j)
        if (D[172][j].charCodeAt(0) !== 65533) {
          e[D[172][j]] = 44032 + j;
          d[44032 + j] = D[172][j];
        }
      D[173] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD61\uCD62\uCD63\uCD65\uCD66\uCD67\uCD68\uCD69\uCD6A\uCD6B\uCD6E\uCD70\uCD72\uCD73\uCD74\uCD75\uCD76\uCD77\uCD79\uCD7A\uCD7B\uCD7C\uCD7D\uCD7E\uCD7F\uCD80\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD81\uCD82\uCD83\uCD84\uCD85\uCD86\uCD87\uCD89\uCD8A\uCD8B\uCD8C\uCD8D\uCD8E\uCD8F\uCD90\uCD91\uCD92\uCD93\uCD96\uCD97\uCD99\uCD9A\uCD9B\uCD9D\uCD9E\uCD9F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDA0\uCDA1\uCDA2\uCDA3\uCDA6\uCDA8\uCDAA\uCDAB\uCDAC\uCDAD\uCDAE\uCDAF\uCDB1\uCDB2\uCDB3\uCDB4\uCDB5\uCDB6\uCDB7\uCDB8\uCDB9\uCDBA\uCDBB\uCDBC\uCDBD\uCDBE\uCDBF\uCDC0\uCDC1\uCDC2\uCDC3\uCDC5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[173].length; ++j)
        if (D[173][j].charCodeAt(0) !== 65533) {
          e[D[173][j]] = 44288 + j;
          d[44288 + j] = D[173][j];
        }
      D[174] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDC6\uCDC7\uCDC8\uCDC9\uCDCA\uCDCB\uCDCD\uCDCE\uCDCF\uCDD1\uCDD2\uCDD3\uCDD4\uCDD5\uCDD6\uCDD7\uCDD8\uCDD9\uCDDA\uCDDB\uCDDC\uCDDD\uCDDE\uCDDF\uCDE0\uCDE1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDE2\uCDE3\uCDE4\uCDE5\uCDE6\uCDE7\uCDE9\uCDEA\uCDEB\uCDED\uCDEE\uCDEF\uCDF1\uCDF2\uCDF3\uCDF4\uCDF5\uCDF6\uCDF7\uCDFA\uCDFC\uCDFE\uCDFF\uCE00\uCE01\uCE02\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE03\uCE05\uCE06\uCE07\uCE09\uCE0A\uCE0B\uCE0D\uCE0E\uCE0F\uCE10\uCE11\uCE12\uCE13\uCE15\uCE16\uCE17\uCE18\uCE1A\uCE1B\uCE1C\uCE1D\uCE1E\uCE1F\uCE22\uCE23\uCE25\uCE26\uCE27\uCE29\uCE2A\uCE2B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[174].length; ++j)
        if (D[174][j].charCodeAt(0) !== 65533) {
          e[D[174][j]] = 44544 + j;
          d[44544 + j] = D[174][j];
        }
      D[175] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE2C\uCE2D\uCE2E\uCE2F\uCE32\uCE34\uCE36\uCE37\uCE38\uCE39\uCE3A\uCE3B\uCE3C\uCE3D\uCE3E\uCE3F\uCE40\uCE41\uCE42\uCE43\uCE44\uCE45\uCE46\uCE47\uCE48\uCE49\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE4A\uCE4B\uCE4C\uCE4D\uCE4E\uCE4F\uCE50\uCE51\uCE52\uCE53\uCE54\uCE55\uCE56\uCE57\uCE5A\uCE5B\uCE5D\uCE5E\uCE62\uCE63\uCE64\uCE65\uCE66\uCE67\uCE6A\uCE6C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE6E\uCE6F\uCE70\uCE71\uCE72\uCE73\uCE76\uCE77\uCE79\uCE7A\uCE7B\uCE7D\uCE7E\uCE7F\uCE80\uCE81\uCE82\uCE83\uCE86\uCE88\uCE8A\uCE8B\uCE8C\uCE8D\uCE8E\uCE8F\uCE92\uCE93\uCE95\uCE96\uCE97\uCE99\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[175].length; ++j)
        if (D[175][j].charCodeAt(0) !== 65533) {
          e[D[175][j]] = 44800 + j;
          d[44800 + j] = D[175][j];
        }
      D[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE9A\uCE9B\uCE9C\uCE9D\uCE9E\uCE9F\uCEA2\uCEA6\uCEA7\uCEA8\uCEA9\uCEAA\uCEAB\uCEAE\uCEAF\uCEB0\uCEB1\uCEB2\uCEB3\uCEB4\uCEB5\uCEB6\uCEB7\uCEB8\uCEB9\uCEBA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCEBB\uCEBC\uCEBD\uCEBE\uCEBF\uCEC0\uCEC2\uCEC3\uCEC4\uCEC5\uCEC6\uCEC7\uCEC8\uCEC9\uCECA\uCECB\uCECC\uCECD\uCECE\uCECF\uCED0\uCED1\uCED2\uCED3\uCED4\uCED5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCED6\uCED7\uCED8\uCED9\uCEDA\uCEDB\uCEDC\uCEDD\uCEDE\uCEDF\uCEE0\uCEE1\uCEE2\uCEE3\uCEE6\uCEE7\uCEE9\uCEEA\uCEED\uCEEE\uCEEF\uCEF0\uCEF1\uCEF2\uCEF3\uCEF6\uCEFA\uCEFB\uCEFC\uCEFD\uCEFE\uCEFF\uAC00\uAC01\uAC04\uAC07\uAC08\uAC09\uAC0A\uAC10\uAC11\uAC12\uAC13\uAC14\uAC15\uAC16\uAC17\uAC19\uAC1A\uAC1B\uAC1C\uAC1D\uAC20\uAC24\uAC2C\uAC2D\uAC2F\uAC30\uAC31\uAC38\uAC39\uAC3C\uAC40\uAC4B\uAC4D\uAC54\uAC58\uAC5C\uAC70\uAC71\uAC74\uAC77\uAC78\uAC7A\uAC80\uAC81\uAC83\uAC84\uAC85\uAC86\uAC89\uAC8A\uAC8B\uAC8C\uAC90\uAC94\uAC9C\uAC9D\uAC9F\uACA0\uACA1\uACA8\uACA9\uACAA\uACAC\uACAF\uACB0\uACB8\uACB9\uACBB\uACBC\uACBD\uACC1\uACC4\uACC8\uACCC\uACD5\uACD7\uACE0\uACE1\uACE4\uACE7\uACE8\uACEA\uACEC\uACEF\uACF0\uACF1\uACF3\uACF5\uACF6\uACFC\uACFD\uAD00\uAD04\uAD06\uFFFD".split("");
      for (j = 0; j != D[176].length; ++j)
        if (D[176][j].charCodeAt(0) !== 65533) {
          e[D[176][j]] = 45056 + j;
          d[45056 + j] = D[176][j];
        }
      D[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF02\uCF03\uCF05\uCF06\uCF07\uCF09\uCF0A\uCF0B\uCF0C\uCF0D\uCF0E\uCF0F\uCF12\uCF14\uCF16\uCF17\uCF18\uCF19\uCF1A\uCF1B\uCF1D\uCF1E\uCF1F\uCF21\uCF22\uCF23\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF25\uCF26\uCF27\uCF28\uCF29\uCF2A\uCF2B\uCF2E\uCF32\uCF33\uCF34\uCF35\uCF36\uCF37\uCF39\uCF3A\uCF3B\uCF3C\uCF3D\uCF3E\uCF3F\uCF40\uCF41\uCF42\uCF43\uCF44\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF45\uCF46\uCF47\uCF48\uCF49\uCF4A\uCF4B\uCF4C\uCF4D\uCF4E\uCF4F\uCF50\uCF51\uCF52\uCF53\uCF56\uCF57\uCF59\uCF5A\uCF5B\uCF5D\uCF5E\uCF5F\uCF60\uCF61\uCF62\uCF63\uCF66\uCF68\uCF6A\uCF6B\uCF6C\uAD0C\uAD0D\uAD0F\uAD11\uAD18\uAD1C\uAD20\uAD29\uAD2C\uAD2D\uAD34\uAD35\uAD38\uAD3C\uAD44\uAD45\uAD47\uAD49\uAD50\uAD54\uAD58\uAD61\uAD63\uAD6C\uAD6D\uAD70\uAD73\uAD74\uAD75\uAD76\uAD7B\uAD7C\uAD7D\uAD7F\uAD81\uAD82\uAD88\uAD89\uAD8C\uAD90\uAD9C\uAD9D\uADA4\uADB7\uADC0\uADC1\uADC4\uADC8\uADD0\uADD1\uADD3\uADDC\uADE0\uADE4\uADF8\uADF9\uADFC\uADFF\uAE00\uAE01\uAE08\uAE09\uAE0B\uAE0D\uAE14\uAE30\uAE31\uAE34\uAE37\uAE38\uAE3A\uAE40\uAE41\uAE43\uAE45\uAE46\uAE4A\uAE4C\uAE4D\uAE4E\uAE50\uAE54\uAE56\uAE5C\uAE5D\uAE5F\uAE60\uAE61\uAE65\uAE68\uAE69\uAE6C\uAE70\uAE78\uFFFD".split("");
      for (j = 0; j != D[177].length; ++j)
        if (D[177][j].charCodeAt(0) !== 65533) {
          e[D[177][j]] = 45312 + j;
          d[45312 + j] = D[177][j];
        }
      D[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF6D\uCF6E\uCF6F\uCF72\uCF73\uCF75\uCF76\uCF77\uCF79\uCF7A\uCF7B\uCF7C\uCF7D\uCF7E\uCF7F\uCF81\uCF82\uCF83\uCF84\uCF86\uCF87\uCF88\uCF89\uCF8A\uCF8B\uCF8D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF8E\uCF8F\uCF90\uCF91\uCF92\uCF93\uCF94\uCF95\uCF96\uCF97\uCF98\uCF99\uCF9A\uCF9B\uCF9C\uCF9D\uCF9E\uCF9F\uCFA0\uCFA2\uCFA3\uCFA4\uCFA5\uCFA6\uCFA7\uCFA9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFAA\uCFAB\uCFAC\uCFAD\uCFAE\uCFAF\uCFB1\uCFB2\uCFB3\uCFB4\uCFB5\uCFB6\uCFB7\uCFB8\uCFB9\uCFBA\uCFBB\uCFBC\uCFBD\uCFBE\uCFBF\uCFC0\uCFC1\uCFC2\uCFC3\uCFC5\uCFC6\uCFC7\uCFC8\uCFC9\uCFCA\uCFCB\uAE79\uAE7B\uAE7C\uAE7D\uAE84\uAE85\uAE8C\uAEBC\uAEBD\uAEBE\uAEC0\uAEC4\uAECC\uAECD\uAECF\uAED0\uAED1\uAED8\uAED9\uAEDC\uAEE8\uAEEB\uAEED\uAEF4\uAEF8\uAEFC\uAF07\uAF08\uAF0D\uAF10\uAF2C\uAF2D\uAF30\uAF32\uAF34\uAF3C\uAF3D\uAF3F\uAF41\uAF42\uAF43\uAF48\uAF49\uAF50\uAF5C\uAF5D\uAF64\uAF65\uAF79\uAF80\uAF84\uAF88\uAF90\uAF91\uAF95\uAF9C\uAFB8\uAFB9\uAFBC\uAFC0\uAFC7\uAFC8\uAFC9\uAFCB\uAFCD\uAFCE\uAFD4\uAFDC\uAFE8\uAFE9\uAFF0\uAFF1\uAFF4\uAFF8\uB000\uB001\uB004\uB00C\uB010\uB014\uB01C\uB01D\uB028\uB044\uB045\uB048\uB04A\uB04C\uB04E\uB053\uB054\uB055\uB057\uB059\uFFFD".split("");
      for (j = 0; j != D[178].length; ++j)
        if (D[178][j].charCodeAt(0) !== 65533) {
          e[D[178][j]] = 45568 + j;
          d[45568 + j] = D[178][j];
        }
      D[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFCC\uCFCD\uCFCE\uCFCF\uCFD0\uCFD1\uCFD2\uCFD3\uCFD4\uCFD5\uCFD6\uCFD7\uCFD8\uCFD9\uCFDA\uCFDB\uCFDC\uCFDD\uCFDE\uCFDF\uCFE2\uCFE3\uCFE5\uCFE6\uCFE7\uCFE9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFEA\uCFEB\uCFEC\uCFED\uCFEE\uCFEF\uCFF2\uCFF4\uCFF6\uCFF7\uCFF8\uCFF9\uCFFA\uCFFB\uCFFD\uCFFE\uCFFF\uD001\uD002\uD003\uD005\uD006\uD007\uD008\uD009\uD00A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD00B\uD00C\uD00D\uD00E\uD00F\uD010\uD012\uD013\uD014\uD015\uD016\uD017\uD019\uD01A\uD01B\uD01C\uD01D\uD01E\uD01F\uD020\uD021\uD022\uD023\uD024\uD025\uD026\uD027\uD028\uD029\uD02A\uD02B\uD02C\uB05D\uB07C\uB07D\uB080\uB084\uB08C\uB08D\uB08F\uB091\uB098\uB099\uB09A\uB09C\uB09F\uB0A0\uB0A1\uB0A2\uB0A8\uB0A9\uB0AB\uB0AC\uB0AD\uB0AE\uB0AF\uB0B1\uB0B3\uB0B4\uB0B5\uB0B8\uB0BC\uB0C4\uB0C5\uB0C7\uB0C8\uB0C9\uB0D0\uB0D1\uB0D4\uB0D8\uB0E0\uB0E5\uB108\uB109\uB10B\uB10C\uB110\uB112\uB113\uB118\uB119\uB11B\uB11C\uB11D\uB123\uB124\uB125\uB128\uB12C\uB134\uB135\uB137\uB138\uB139\uB140\uB141\uB144\uB148\uB150\uB151\uB154\uB155\uB158\uB15C\uB160\uB178\uB179\uB17C\uB180\uB182\uB188\uB189\uB18B\uB18D\uB192\uB193\uB194\uB198\uB19C\uB1A8\uB1CC\uB1D0\uB1D4\uB1DC\uB1DD\uFFFD".split("");
      for (j = 0; j != D[179].length; ++j)
        if (D[179][j].charCodeAt(0) !== 65533) {
          e[D[179][j]] = 45824 + j;
          d[45824 + j] = D[179][j];
        }
      D[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD02E\uD02F\uD030\uD031\uD032\uD033\uD036\uD037\uD039\uD03A\uD03B\uD03D\uD03E\uD03F\uD040\uD041\uD042\uD043\uD046\uD048\uD04A\uD04B\uD04C\uD04D\uD04E\uD04F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD051\uD052\uD053\uD055\uD056\uD057\uD059\uD05A\uD05B\uD05C\uD05D\uD05E\uD05F\uD061\uD062\uD063\uD064\uD065\uD066\uD067\uD068\uD069\uD06A\uD06B\uD06E\uD06F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD071\uD072\uD073\uD075\uD076\uD077\uD078\uD079\uD07A\uD07B\uD07E\uD07F\uD080\uD082\uD083\uD084\uD085\uD086\uD087\uD088\uD089\uD08A\uD08B\uD08C\uD08D\uD08E\uD08F\uD090\uD091\uD092\uD093\uD094\uB1DF\uB1E8\uB1E9\uB1EC\uB1F0\uB1F9\uB1FB\uB1FD\uB204\uB205\uB208\uB20B\uB20C\uB214\uB215\uB217\uB219\uB220\uB234\uB23C\uB258\uB25C\uB260\uB268\uB269\uB274\uB275\uB27C\uB284\uB285\uB289\uB290\uB291\uB294\uB298\uB299\uB29A\uB2A0\uB2A1\uB2A3\uB2A5\uB2A6\uB2AA\uB2AC\uB2B0\uB2B4\uB2C8\uB2C9\uB2CC\uB2D0\uB2D2\uB2D8\uB2D9\uB2DB\uB2DD\uB2E2\uB2E4\uB2E5\uB2E6\uB2E8\uB2EB\uB2EC\uB2ED\uB2EE\uB2EF\uB2F3\uB2F4\uB2F5\uB2F7\uB2F8\uB2F9\uB2FA\uB2FB\uB2FF\uB300\uB301\uB304\uB308\uB310\uB311\uB313\uB314\uB315\uB31C\uB354\uB355\uB356\uB358\uB35B\uB35C\uB35E\uB35F\uB364\uB365\uFFFD".split("");
      for (j = 0; j != D[180].length; ++j)
        if (D[180][j].charCodeAt(0) !== 65533) {
          e[D[180][j]] = 46080 + j;
          d[46080 + j] = D[180][j];
        }
      D[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD095\uD096\uD097\uD098\uD099\uD09A\uD09B\uD09C\uD09D\uD09E\uD09F\uD0A0\uD0A1\uD0A2\uD0A3\uD0A6\uD0A7\uD0A9\uD0AA\uD0AB\uD0AD\uD0AE\uD0AF\uD0B0\uD0B1\uD0B2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD0B3\uD0B6\uD0B8\uD0BA\uD0BB\uD0BC\uD0BD\uD0BE\uD0BF\uD0C2\uD0C3\uD0C5\uD0C6\uD0C7\uD0CA\uD0CB\uD0CC\uD0CD\uD0CE\uD0CF\uD0D2\uD0D6\uD0D7\uD0D8\uD0D9\uD0DA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD0DB\uD0DE\uD0DF\uD0E1\uD0E2\uD0E3\uD0E5\uD0E6\uD0E7\uD0E8\uD0E9\uD0EA\uD0EB\uD0EE\uD0F2\uD0F3\uD0F4\uD0F5\uD0F6\uD0F7\uD0F9\uD0FA\uD0FB\uD0FC\uD0FD\uD0FE\uD0FF\uD100\uD101\uD102\uD103\uD104\uB367\uB369\uB36B\uB36E\uB370\uB371\uB374\uB378\uB380\uB381\uB383\uB384\uB385\uB38C\uB390\uB394\uB3A0\uB3A1\uB3A8\uB3AC\uB3C4\uB3C5\uB3C8\uB3CB\uB3CC\uB3CE\uB3D0\uB3D4\uB3D5\uB3D7\uB3D9\uB3DB\uB3DD\uB3E0\uB3E4\uB3E8\uB3FC\uB410\uB418\uB41C\uB420\uB428\uB429\uB42B\uB434\uB450\uB451\uB454\uB458\uB460\uB461\uB463\uB465\uB46C\uB480\uB488\uB49D\uB4A4\uB4A8\uB4AC\uB4B5\uB4B7\uB4B9\uB4C0\uB4C4\uB4C8\uB4D0\uB4D5\uB4DC\uB4DD\uB4E0\uB4E3\uB4E4\uB4E6\uB4EC\uB4ED\uB4EF\uB4F1\uB4F8\uB514\uB515\uB518\uB51B\uB51C\uB524\uB525\uB527\uB528\uB529\uB52A\uB530\uB531\uB534\uB538\uFFFD".split("");
      for (j = 0; j != D[181].length; ++j)
        if (D[181][j].charCodeAt(0) !== 65533) {
          e[D[181][j]] = 46336 + j;
          d[46336 + j] = D[181][j];
        }
      D[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD105\uD106\uD107\uD108\uD109\uD10A\uD10B\uD10C\uD10E\uD10F\uD110\uD111\uD112\uD113\uD114\uD115\uD116\uD117\uD118\uD119\uD11A\uD11B\uD11C\uD11D\uD11E\uD11F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD120\uD121\uD122\uD123\uD124\uD125\uD126\uD127\uD128\uD129\uD12A\uD12B\uD12C\uD12D\uD12E\uD12F\uD132\uD133\uD135\uD136\uD137\uD139\uD13B\uD13C\uD13D\uD13E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD13F\uD142\uD146\uD147\uD148\uD149\uD14A\uD14B\uD14E\uD14F\uD151\uD152\uD153\uD155\uD156\uD157\uD158\uD159\uD15A\uD15B\uD15E\uD160\uD162\uD163\uD164\uD165\uD166\uD167\uD169\uD16A\uD16B\uD16D\uB540\uB541\uB543\uB544\uB545\uB54B\uB54C\uB54D\uB550\uB554\uB55C\uB55D\uB55F\uB560\uB561\uB5A0\uB5A1\uB5A4\uB5A8\uB5AA\uB5AB\uB5B0\uB5B1\uB5B3\uB5B4\uB5B5\uB5BB\uB5BC\uB5BD\uB5C0\uB5C4\uB5CC\uB5CD\uB5CF\uB5D0\uB5D1\uB5D8\uB5EC\uB610\uB611\uB614\uB618\uB625\uB62C\uB634\uB648\uB664\uB668\uB69C\uB69D\uB6A0\uB6A4\uB6AB\uB6AC\uB6B1\uB6D4\uB6F0\uB6F4\uB6F8\uB700\uB701\uB705\uB728\uB729\uB72C\uB72F\uB730\uB738\uB739\uB73B\uB744\uB748\uB74C\uB754\uB755\uB760\uB764\uB768\uB770\uB771\uB773\uB775\uB77C\uB77D\uB780\uB784\uB78C\uB78D\uB78F\uB790\uB791\uB792\uB796\uB797\uFFFD".split("");
      for (j = 0; j != D[182].length; ++j)
        if (D[182][j].charCodeAt(0) !== 65533) {
          e[D[182][j]] = 46592 + j;
          d[46592 + j] = D[182][j];
        }
      D[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD16E\uD16F\uD170\uD171\uD172\uD173\uD174\uD175\uD176\uD177\uD178\uD179\uD17A\uD17B\uD17D\uD17E\uD17F\uD180\uD181\uD182\uD183\uD185\uD186\uD187\uD189\uD18A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD18B\uD18C\uD18D\uD18E\uD18F\uD190\uD191\uD192\uD193\uD194\uD195\uD196\uD197\uD198\uD199\uD19A\uD19B\uD19C\uD19D\uD19E\uD19F\uD1A2\uD1A3\uD1A5\uD1A6\uD1A7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1A9\uD1AA\uD1AB\uD1AC\uD1AD\uD1AE\uD1AF\uD1B2\uD1B4\uD1B6\uD1B7\uD1B8\uD1B9\uD1BB\uD1BD\uD1BE\uD1BF\uD1C1\uD1C2\uD1C3\uD1C4\uD1C5\uD1C6\uD1C7\uD1C8\uD1C9\uD1CA\uD1CB\uD1CC\uD1CD\uD1CE\uD1CF\uB798\uB799\uB79C\uB7A0\uB7A8\uB7A9\uB7AB\uB7AC\uB7AD\uB7B4\uB7B5\uB7B8\uB7C7\uB7C9\uB7EC\uB7ED\uB7F0\uB7F4\uB7FC\uB7FD\uB7FF\uB800\uB801\uB807\uB808\uB809\uB80C\uB810\uB818\uB819\uB81B\uB81D\uB824\uB825\uB828\uB82C\uB834\uB835\uB837\uB838\uB839\uB840\uB844\uB851\uB853\uB85C\uB85D\uB860\uB864\uB86C\uB86D\uB86F\uB871\uB878\uB87C\uB88D\uB8A8\uB8B0\uB8B4\uB8B8\uB8C0\uB8C1\uB8C3\uB8C5\uB8CC\uB8D0\uB8D4\uB8DD\uB8DF\uB8E1\uB8E8\uB8E9\uB8EC\uB8F0\uB8F8\uB8F9\uB8FB\uB8FD\uB904\uB918\uB920\uB93C\uB93D\uB940\uB944\uB94C\uB94F\uB951\uB958\uB959\uB95C\uB960\uB968\uB969\uFFFD".split("");
      for (j = 0; j != D[183].length; ++j)
        if (D[183][j].charCodeAt(0) !== 65533) {
          e[D[183][j]] = 46848 + j;
          d[46848 + j] = D[183][j];
        }
      D[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1D0\uD1D1\uD1D2\uD1D3\uD1D4\uD1D5\uD1D6\uD1D7\uD1D9\uD1DA\uD1DB\uD1DC\uD1DD\uD1DE\uD1DF\uD1E0\uD1E1\uD1E2\uD1E3\uD1E4\uD1E5\uD1E6\uD1E7\uD1E8\uD1E9\uD1EA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1EB\uD1EC\uD1ED\uD1EE\uD1EF\uD1F0\uD1F1\uD1F2\uD1F3\uD1F5\uD1F6\uD1F7\uD1F9\uD1FA\uD1FB\uD1FC\uD1FD\uD1FE\uD1FF\uD200\uD201\uD202\uD203\uD204\uD205\uD206\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD208\uD20A\uD20B\uD20C\uD20D\uD20E\uD20F\uD211\uD212\uD213\uD214\uD215\uD216\uD217\uD218\uD219\uD21A\uD21B\uD21C\uD21D\uD21E\uD21F\uD220\uD221\uD222\uD223\uD224\uD225\uD226\uD227\uD228\uD229\uB96B\uB96D\uB974\uB975\uB978\uB97C\uB984\uB985\uB987\uB989\uB98A\uB98D\uB98E\uB9AC\uB9AD\uB9B0\uB9B4\uB9BC\uB9BD\uB9BF\uB9C1\uB9C8\uB9C9\uB9CC\uB9CE\uB9CF\uB9D0\uB9D1\uB9D2\uB9D8\uB9D9\uB9DB\uB9DD\uB9DE\uB9E1\uB9E3\uB9E4\uB9E5\uB9E8\uB9EC\uB9F4\uB9F5\uB9F7\uB9F8\uB9F9\uB9FA\uBA00\uBA01\uBA08\uBA15\uBA38\uBA39\uBA3C\uBA40\uBA42\uBA48\uBA49\uBA4B\uBA4D\uBA4E\uBA53\uBA54\uBA55\uBA58\uBA5C\uBA64\uBA65\uBA67\uBA68\uBA69\uBA70\uBA71\uBA74\uBA78\uBA83\uBA84\uBA85\uBA87\uBA8C\uBAA8\uBAA9\uBAAB\uBAAC\uBAB0\uBAB2\uBAB8\uBAB9\uBABB\uBABD\uBAC4\uBAC8\uBAD8\uBAD9\uBAFC\uFFFD".split("");
      for (j = 0; j != D[184].length; ++j)
        if (D[184][j].charCodeAt(0) !== 65533) {
          e[D[184][j]] = 47104 + j;
          d[47104 + j] = D[184][j];
        }
      D[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD22A\uD22B\uD22E\uD22F\uD231\uD232\uD233\uD235\uD236\uD237\uD238\uD239\uD23A\uD23B\uD23E\uD240\uD242\uD243\uD244\uD245\uD246\uD247\uD249\uD24A\uD24B\uD24C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD24D\uD24E\uD24F\uD250\uD251\uD252\uD253\uD254\uD255\uD256\uD257\uD258\uD259\uD25A\uD25B\uD25D\uD25E\uD25F\uD260\uD261\uD262\uD263\uD265\uD266\uD267\uD268\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD269\uD26A\uD26B\uD26C\uD26D\uD26E\uD26F\uD270\uD271\uD272\uD273\uD274\uD275\uD276\uD277\uD278\uD279\uD27A\uD27B\uD27C\uD27D\uD27E\uD27F\uD282\uD283\uD285\uD286\uD287\uD289\uD28A\uD28B\uD28C\uBB00\uBB04\uBB0D\uBB0F\uBB11\uBB18\uBB1C\uBB20\uBB29\uBB2B\uBB34\uBB35\uBB36\uBB38\uBB3B\uBB3C\uBB3D\uBB3E\uBB44\uBB45\uBB47\uBB49\uBB4D\uBB4F\uBB50\uBB54\uBB58\uBB61\uBB63\uBB6C\uBB88\uBB8C\uBB90\uBBA4\uBBA8\uBBAC\uBBB4\uBBB7\uBBC0\uBBC4\uBBC8\uBBD0\uBBD3\uBBF8\uBBF9\uBBFC\uBBFF\uBC00\uBC02\uBC08\uBC09\uBC0B\uBC0C\uBC0D\uBC0F\uBC11\uBC14\uBC15\uBC16\uBC17\uBC18\uBC1B\uBC1C\uBC1D\uBC1E\uBC1F\uBC24\uBC25\uBC27\uBC29\uBC2D\uBC30\uBC31\uBC34\uBC38\uBC40\uBC41\uBC43\uBC44\uBC45\uBC49\uBC4C\uBC4D\uBC50\uBC5D\uBC84\uBC85\uBC88\uBC8B\uBC8C\uBC8E\uBC94\uBC95\uBC97\uFFFD".split("");
      for (j = 0; j != D[185].length; ++j)
        if (D[185][j].charCodeAt(0) !== 65533) {
          e[D[185][j]] = 47360 + j;
          d[47360 + j] = D[185][j];
        }
      D[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD28D\uD28E\uD28F\uD292\uD293\uD294\uD296\uD297\uD298\uD299\uD29A\uD29B\uD29D\uD29E\uD29F\uD2A1\uD2A2\uD2A3\uD2A5\uD2A6\uD2A7\uD2A8\uD2A9\uD2AA\uD2AB\uD2AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2AE\uD2AF\uD2B0\uD2B2\uD2B3\uD2B4\uD2B5\uD2B6\uD2B7\uD2BA\uD2BB\uD2BD\uD2BE\uD2C1\uD2C3\uD2C4\uD2C5\uD2C6\uD2C7\uD2CA\uD2CC\uD2CD\uD2CE\uD2CF\uD2D0\uD2D1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2D2\uD2D3\uD2D5\uD2D6\uD2D7\uD2D9\uD2DA\uD2DB\uD2DD\uD2DE\uD2DF\uD2E0\uD2E1\uD2E2\uD2E3\uD2E6\uD2E7\uD2E8\uD2E9\uD2EA\uD2EB\uD2EC\uD2ED\uD2EE\uD2EF\uD2F2\uD2F3\uD2F5\uD2F6\uD2F7\uD2F9\uD2FA\uBC99\uBC9A\uBCA0\uBCA1\uBCA4\uBCA7\uBCA8\uBCB0\uBCB1\uBCB3\uBCB4\uBCB5\uBCBC\uBCBD\uBCC0\uBCC4\uBCCD\uBCCF\uBCD0\uBCD1\uBCD5\uBCD8\uBCDC\uBCF4\uBCF5\uBCF6\uBCF8\uBCFC\uBD04\uBD05\uBD07\uBD09\uBD10\uBD14\uBD24\uBD2C\uBD40\uBD48\uBD49\uBD4C\uBD50\uBD58\uBD59\uBD64\uBD68\uBD80\uBD81\uBD84\uBD87\uBD88\uBD89\uBD8A\uBD90\uBD91\uBD93\uBD95\uBD99\uBD9A\uBD9C\uBDA4\uBDB0\uBDB8\uBDD4\uBDD5\uBDD8\uBDDC\uBDE9\uBDF0\uBDF4\uBDF8\uBE00\uBE03\uBE05\uBE0C\uBE0D\uBE10\uBE14\uBE1C\uBE1D\uBE1F\uBE44\uBE45\uBE48\uBE4C\uBE4E\uBE54\uBE55\uBE57\uBE59\uBE5A\uBE5B\uBE60\uBE61\uBE64\uFFFD".split("");
      for (j = 0; j != D[186].length; ++j)
        if (D[186][j].charCodeAt(0) !== 65533) {
          e[D[186][j]] = 47616 + j;
          d[47616 + j] = D[186][j];
        }
      D[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2FB\uD2FC\uD2FD\uD2FE\uD2FF\uD302\uD304\uD306\uD307\uD308\uD309\uD30A\uD30B\uD30F\uD311\uD312\uD313\uD315\uD317\uD318\uD319\uD31A\uD31B\uD31E\uD322\uD323\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD324\uD326\uD327\uD32A\uD32B\uD32D\uD32E\uD32F\uD331\uD332\uD333\uD334\uD335\uD336\uD337\uD33A\uD33E\uD33F\uD340\uD341\uD342\uD343\uD346\uD347\uD348\uD349\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD34A\uD34B\uD34C\uD34D\uD34E\uD34F\uD350\uD351\uD352\uD353\uD354\uD355\uD356\uD357\uD358\uD359\uD35A\uD35B\uD35C\uD35D\uD35E\uD35F\uD360\uD361\uD362\uD363\uD364\uD365\uD366\uD367\uD368\uD369\uBE68\uBE6A\uBE70\uBE71\uBE73\uBE74\uBE75\uBE7B\uBE7C\uBE7D\uBE80\uBE84\uBE8C\uBE8D\uBE8F\uBE90\uBE91\uBE98\uBE99\uBEA8\uBED0\uBED1\uBED4\uBED7\uBED8\uBEE0\uBEE3\uBEE4\uBEE5\uBEEC\uBF01\uBF08\uBF09\uBF18\uBF19\uBF1B\uBF1C\uBF1D\uBF40\uBF41\uBF44\uBF48\uBF50\uBF51\uBF55\uBF94\uBFB0\uBFC5\uBFCC\uBFCD\uBFD0\uBFD4\uBFDC\uBFDF\uBFE1\uC03C\uC051\uC058\uC05C\uC060\uC068\uC069\uC090\uC091\uC094\uC098\uC0A0\uC0A1\uC0A3\uC0A5\uC0AC\uC0AD\uC0AF\uC0B0\uC0B3\uC0B4\uC0B5\uC0B6\uC0BC\uC0BD\uC0BF\uC0C0\uC0C1\uC0C5\uC0C8\uC0C9\uC0CC\uC0D0\uC0D8\uC0D9\uC0DB\uC0DC\uC0DD\uC0E4\uFFFD".split("");
      for (j = 0; j != D[187].length; ++j)
        if (D[187][j].charCodeAt(0) !== 65533) {
          e[D[187][j]] = 47872 + j;
          d[47872 + j] = D[187][j];
        }
      D[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD36A\uD36B\uD36C\uD36D\uD36E\uD36F\uD370\uD371\uD372\uD373\uD374\uD375\uD376\uD377\uD378\uD379\uD37A\uD37B\uD37E\uD37F\uD381\uD382\uD383\uD385\uD386\uD387\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD388\uD389\uD38A\uD38B\uD38E\uD392\uD393\uD394\uD395\uD396\uD397\uD39A\uD39B\uD39D\uD39E\uD39F\uD3A1\uD3A2\uD3A3\uD3A4\uD3A5\uD3A6\uD3A7\uD3AA\uD3AC\uD3AE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3AF\uD3B0\uD3B1\uD3B2\uD3B3\uD3B5\uD3B6\uD3B7\uD3B9\uD3BA\uD3BB\uD3BD\uD3BE\uD3BF\uD3C0\uD3C1\uD3C2\uD3C3\uD3C6\uD3C7\uD3CA\uD3CB\uD3CC\uD3CD\uD3CE\uD3CF\uD3D1\uD3D2\uD3D3\uD3D4\uD3D5\uD3D6\uC0E5\uC0E8\uC0EC\uC0F4\uC0F5\uC0F7\uC0F9\uC100\uC104\uC108\uC110\uC115\uC11C\uC11D\uC11E\uC11F\uC120\uC123\uC124\uC126\uC127\uC12C\uC12D\uC12F\uC130\uC131\uC136\uC138\uC139\uC13C\uC140\uC148\uC149\uC14B\uC14C\uC14D\uC154\uC155\uC158\uC15C\uC164\uC165\uC167\uC168\uC169\uC170\uC174\uC178\uC185\uC18C\uC18D\uC18E\uC190\uC194\uC196\uC19C\uC19D\uC19F\uC1A1\uC1A5\uC1A8\uC1A9\uC1AC\uC1B0\uC1BD\uC1C4\uC1C8\uC1CC\uC1D4\uC1D7\uC1D8\uC1E0\uC1E4\uC1E8\uC1F0\uC1F1\uC1F3\uC1FC\uC1FD\uC200\uC204\uC20C\uC20D\uC20F\uC211\uC218\uC219\uC21C\uC21F\uC220\uC228\uC229\uC22B\uC22D\uFFFD".split("");
      for (j = 0; j != D[188].length; ++j)
        if (D[188][j].charCodeAt(0) !== 65533) {
          e[D[188][j]] = 48128 + j;
          d[48128 + j] = D[188][j];
        }
      D[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3D7\uD3D9\uD3DA\uD3DB\uD3DC\uD3DD\uD3DE\uD3DF\uD3E0\uD3E2\uD3E4\uD3E5\uD3E6\uD3E7\uD3E8\uD3E9\uD3EA\uD3EB\uD3EE\uD3EF\uD3F1\uD3F2\uD3F3\uD3F5\uD3F6\uD3F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3F8\uD3F9\uD3FA\uD3FB\uD3FE\uD400\uD402\uD403\uD404\uD405\uD406\uD407\uD409\uD40A\uD40B\uD40C\uD40D\uD40E\uD40F\uD410\uD411\uD412\uD413\uD414\uD415\uD416\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD417\uD418\uD419\uD41A\uD41B\uD41C\uD41E\uD41F\uD420\uD421\uD422\uD423\uD424\uD425\uD426\uD427\uD428\uD429\uD42A\uD42B\uD42C\uD42D\uD42E\uD42F\uD430\uD431\uD432\uD433\uD434\uD435\uD436\uD437\uC22F\uC231\uC232\uC234\uC248\uC250\uC251\uC254\uC258\uC260\uC265\uC26C\uC26D\uC270\uC274\uC27C\uC27D\uC27F\uC281\uC288\uC289\uC290\uC298\uC29B\uC29D\uC2A4\uC2A5\uC2A8\uC2AC\uC2AD\uC2B4\uC2B5\uC2B7\uC2B9\uC2DC\uC2DD\uC2E0\uC2E3\uC2E4\uC2EB\uC2EC\uC2ED\uC2EF\uC2F1\uC2F6\uC2F8\uC2F9\uC2FB\uC2FC\uC300\uC308\uC309\uC30C\uC30D\uC313\uC314\uC315\uC318\uC31C\uC324\uC325\uC328\uC329\uC345\uC368\uC369\uC36C\uC370\uC372\uC378\uC379\uC37C\uC37D\uC384\uC388\uC38C\uC3C0\uC3D8\uC3D9\uC3DC\uC3DF\uC3E0\uC3E2\uC3E8\uC3E9\uC3ED\uC3F4\uC3F5\uC3F8\uC408\uC410\uC424\uC42C\uC430\uFFFD".split("");
      for (j = 0; j != D[189].length; ++j)
        if (D[189][j].charCodeAt(0) !== 65533) {
          e[D[189][j]] = 48384 + j;
          d[48384 + j] = D[189][j];
        }
      D[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD438\uD439\uD43A\uD43B\uD43C\uD43D\uD43E\uD43F\uD441\uD442\uD443\uD445\uD446\uD447\uD448\uD449\uD44A\uD44B\uD44C\uD44D\uD44E\uD44F\uD450\uD451\uD452\uD453\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD454\uD455\uD456\uD457\uD458\uD459\uD45A\uD45B\uD45D\uD45E\uD45F\uD461\uD462\uD463\uD465\uD466\uD467\uD468\uD469\uD46A\uD46B\uD46C\uD46E\uD470\uD471\uD472\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD473\uD474\uD475\uD476\uD477\uD47A\uD47B\uD47D\uD47E\uD481\uD483\uD484\uD485\uD486\uD487\uD48A\uD48C\uD48E\uD48F\uD490\uD491\uD492\uD493\uD495\uD496\uD497\uD498\uD499\uD49A\uD49B\uD49C\uD49D\uC434\uC43C\uC43D\uC448\uC464\uC465\uC468\uC46C\uC474\uC475\uC479\uC480\uC494\uC49C\uC4B8\uC4BC\uC4E9\uC4F0\uC4F1\uC4F4\uC4F8\uC4FA\uC4FF\uC500\uC501\uC50C\uC510\uC514\uC51C\uC528\uC529\uC52C\uC530\uC538\uC539\uC53B\uC53D\uC544\uC545\uC548\uC549\uC54A\uC54C\uC54D\uC54E\uC553\uC554\uC555\uC557\uC558\uC559\uC55D\uC55E\uC560\uC561\uC564\uC568\uC570\uC571\uC573\uC574\uC575\uC57C\uC57D\uC580\uC584\uC587\uC58C\uC58D\uC58F\uC591\uC595\uC597\uC598\uC59C\uC5A0\uC5A9\uC5B4\uC5B5\uC5B8\uC5B9\uC5BB\uC5BC\uC5BD\uC5BE\uC5C4\uC5C5\uC5C6\uC5C7\uC5C8\uC5C9\uC5CA\uC5CC\uC5CE\uFFFD".split("");
      for (j = 0; j != D[190].length; ++j)
        if (D[190][j].charCodeAt(0) !== 65533) {
          e[D[190][j]] = 48640 + j;
          d[48640 + j] = D[190][j];
        }
      D[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD49E\uD49F\uD4A0\uD4A1\uD4A2\uD4A3\uD4A4\uD4A5\uD4A6\uD4A7\uD4A8\uD4AA\uD4AB\uD4AC\uD4AD\uD4AE\uD4AF\uD4B0\uD4B1\uD4B2\uD4B3\uD4B4\uD4B5\uD4B6\uD4B7\uD4B8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4B9\uD4BA\uD4BB\uD4BC\uD4BD\uD4BE\uD4BF\uD4C0\uD4C1\uD4C2\uD4C3\uD4C4\uD4C5\uD4C6\uD4C7\uD4C8\uD4C9\uD4CA\uD4CB\uD4CD\uD4CE\uD4CF\uD4D1\uD4D2\uD4D3\uD4D5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4D6\uD4D7\uD4D8\uD4D9\uD4DA\uD4DB\uD4DD\uD4DE\uD4E0\uD4E1\uD4E2\uD4E3\uD4E4\uD4E5\uD4E6\uD4E7\uD4E9\uD4EA\uD4EB\uD4ED\uD4EE\uD4EF\uD4F1\uD4F2\uD4F3\uD4F4\uD4F5\uD4F6\uD4F7\uD4F9\uD4FA\uD4FC\uC5D0\uC5D1\uC5D4\uC5D8\uC5E0\uC5E1\uC5E3\uC5E5\uC5EC\uC5ED\uC5EE\uC5F0\uC5F4\uC5F6\uC5F7\uC5FC\uC5FD\uC5FE\uC5FF\uC600\uC601\uC605\uC606\uC607\uC608\uC60C\uC610\uC618\uC619\uC61B\uC61C\uC624\uC625\uC628\uC62C\uC62D\uC62E\uC630\uC633\uC634\uC635\uC637\uC639\uC63B\uC640\uC641\uC644\uC648\uC650\uC651\uC653\uC654\uC655\uC65C\uC65D\uC660\uC66C\uC66F\uC671\uC678\uC679\uC67C\uC680\uC688\uC689\uC68B\uC68D\uC694\uC695\uC698\uC69C\uC6A4\uC6A5\uC6A7\uC6A9\uC6B0\uC6B1\uC6B4\uC6B8\uC6B9\uC6BA\uC6C0\uC6C1\uC6C3\uC6C5\uC6CC\uC6CD\uC6D0\uC6D4\uC6DC\uC6DD\uC6E0\uC6E1\uC6E8\uFFFD".split("");
      for (j = 0; j != D[191].length; ++j)
        if (D[191][j].charCodeAt(0) !== 65533) {
          e[D[191][j]] = 48896 + j;
          d[48896 + j] = D[191][j];
        }
      D[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4FE\uD4FF\uD500\uD501\uD502\uD503\uD505\uD506\uD507\uD509\uD50A\uD50B\uD50D\uD50E\uD50F\uD510\uD511\uD512\uD513\uD516\uD518\uD519\uD51A\uD51B\uD51C\uD51D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD51E\uD51F\uD520\uD521\uD522\uD523\uD524\uD525\uD526\uD527\uD528\uD529\uD52A\uD52B\uD52C\uD52D\uD52E\uD52F\uD530\uD531\uD532\uD533\uD534\uD535\uD536\uD537\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD538\uD539\uD53A\uD53B\uD53E\uD53F\uD541\uD542\uD543\uD545\uD546\uD547\uD548\uD549\uD54A\uD54B\uD54E\uD550\uD552\uD553\uD554\uD555\uD556\uD557\uD55A\uD55B\uD55D\uD55E\uD55F\uD561\uD562\uD563\uC6E9\uC6EC\uC6F0\uC6F8\uC6F9\uC6FD\uC704\uC705\uC708\uC70C\uC714\uC715\uC717\uC719\uC720\uC721\uC724\uC728\uC730\uC731\uC733\uC735\uC737\uC73C\uC73D\uC740\uC744\uC74A\uC74C\uC74D\uC74F\uC751\uC752\uC753\uC754\uC755\uC756\uC757\uC758\uC75C\uC760\uC768\uC76B\uC774\uC775\uC778\uC77C\uC77D\uC77E\uC783\uC784\uC785\uC787\uC788\uC789\uC78A\uC78E\uC790\uC791\uC794\uC796\uC797\uC798\uC79A\uC7A0\uC7A1\uC7A3\uC7A4\uC7A5\uC7A6\uC7AC\uC7AD\uC7B0\uC7B4\uC7BC\uC7BD\uC7BF\uC7C0\uC7C1\uC7C8\uC7C9\uC7CC\uC7CE\uC7D0\uC7D8\uC7DD\uC7E4\uC7E8\uC7EC\uC800\uC801\uC804\uC808\uC80A\uFFFD".split("");
      for (j = 0; j != D[192].length; ++j)
        if (D[192][j].charCodeAt(0) !== 65533) {
          e[D[192][j]] = 49152 + j;
          d[49152 + j] = D[192][j];
        }
      D[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD564\uD566\uD567\uD56A\uD56C\uD56E\uD56F\uD570\uD571\uD572\uD573\uD576\uD577\uD579\uD57A\uD57B\uD57D\uD57E\uD57F\uD580\uD581\uD582\uD583\uD586\uD58A\uD58B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD58C\uD58D\uD58E\uD58F\uD591\uD592\uD593\uD594\uD595\uD596\uD597\uD598\uD599\uD59A\uD59B\uD59C\uD59D\uD59E\uD59F\uD5A0\uD5A1\uD5A2\uD5A3\uD5A4\uD5A6\uD5A7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5A8\uD5A9\uD5AA\uD5AB\uD5AC\uD5AD\uD5AE\uD5AF\uD5B0\uD5B1\uD5B2\uD5B3\uD5B4\uD5B5\uD5B6\uD5B7\uD5B8\uD5B9\uD5BA\uD5BB\uD5BC\uD5BD\uD5BE\uD5BF\uD5C0\uD5C1\uD5C2\uD5C3\uD5C4\uD5C5\uD5C6\uD5C7\uC810\uC811\uC813\uC815\uC816\uC81C\uC81D\uC820\uC824\uC82C\uC82D\uC82F\uC831\uC838\uC83C\uC840\uC848\uC849\uC84C\uC84D\uC854\uC870\uC871\uC874\uC878\uC87A\uC880\uC881\uC883\uC885\uC886\uC887\uC88B\uC88C\uC88D\uC894\uC89D\uC89F\uC8A1\uC8A8\uC8BC\uC8BD\uC8C4\uC8C8\uC8CC\uC8D4\uC8D5\uC8D7\uC8D9\uC8E0\uC8E1\uC8E4\uC8F5\uC8FC\uC8FD\uC900\uC904\uC905\uC906\uC90C\uC90D\uC90F\uC911\uC918\uC92C\uC934\uC950\uC951\uC954\uC958\uC960\uC961\uC963\uC96C\uC970\uC974\uC97C\uC988\uC989\uC98C\uC990\uC998\uC999\uC99B\uC99D\uC9C0\uC9C1\uC9C4\uC9C7\uC9C8\uC9CA\uC9D0\uC9D1\uC9D3\uFFFD".split("");
      for (j = 0; j != D[193].length; ++j)
        if (D[193][j].charCodeAt(0) !== 65533) {
          e[D[193][j]] = 49408 + j;
          d[49408 + j] = D[193][j];
        }
      D[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5CA\uD5CB\uD5CD\uD5CE\uD5CF\uD5D1\uD5D3\uD5D4\uD5D5\uD5D6\uD5D7\uD5DA\uD5DC\uD5DE\uD5DF\uD5E0\uD5E1\uD5E2\uD5E3\uD5E6\uD5E7\uD5E9\uD5EA\uD5EB\uD5ED\uD5EE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5EF\uD5F0\uD5F1\uD5F2\uD5F3\uD5F6\uD5F8\uD5FA\uD5FB\uD5FC\uD5FD\uD5FE\uD5FF\uD602\uD603\uD605\uD606\uD607\uD609\uD60A\uD60B\uD60C\uD60D\uD60E\uD60F\uD612\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD616\uD617\uD618\uD619\uD61A\uD61B\uD61D\uD61E\uD61F\uD621\uD622\uD623\uD625\uD626\uD627\uD628\uD629\uD62A\uD62B\uD62C\uD62E\uD62F\uD630\uD631\uD632\uD633\uD634\uD635\uD636\uD637\uD63A\uD63B\uC9D5\uC9D6\uC9D9\uC9DA\uC9DC\uC9DD\uC9E0\uC9E2\uC9E4\uC9E7\uC9EC\uC9ED\uC9EF\uC9F0\uC9F1\uC9F8\uC9F9\uC9FC\uCA00\uCA08\uCA09\uCA0B\uCA0C\uCA0D\uCA14\uCA18\uCA29\uCA4C\uCA4D\uCA50\uCA54\uCA5C\uCA5D\uCA5F\uCA60\uCA61\uCA68\uCA7D\uCA84\uCA98\uCABC\uCABD\uCAC0\uCAC4\uCACC\uCACD\uCACF\uCAD1\uCAD3\uCAD8\uCAD9\uCAE0\uCAEC\uCAF4\uCB08\uCB10\uCB14\uCB18\uCB20\uCB21\uCB41\uCB48\uCB49\uCB4C\uCB50\uCB58\uCB59\uCB5D\uCB64\uCB78\uCB79\uCB9C\uCBB8\uCBD4\uCBE4\uCBE7\uCBE9\uCC0C\uCC0D\uCC10\uCC14\uCC1C\uCC1D\uCC21\uCC22\uCC27\uCC28\uCC29\uCC2C\uCC2E\uCC30\uCC38\uCC39\uCC3B\uFFFD".split("");
      for (j = 0; j != D[194].length; ++j)
        if (D[194][j].charCodeAt(0) !== 65533) {
          e[D[194][j]] = 49664 + j;
          d[49664 + j] = D[194][j];
        }
      D[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD63D\uD63E\uD63F\uD641\uD642\uD643\uD644\uD646\uD647\uD64A\uD64C\uD64E\uD64F\uD650\uD652\uD653\uD656\uD657\uD659\uD65A\uD65B\uD65D\uD65E\uD65F\uD660\uD661\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD662\uD663\uD664\uD665\uD666\uD668\uD66A\uD66B\uD66C\uD66D\uD66E\uD66F\uD672\uD673\uD675\uD676\uD677\uD678\uD679\uD67A\uD67B\uD67C\uD67D\uD67E\uD67F\uD680\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD681\uD682\uD684\uD686\uD687\uD688\uD689\uD68A\uD68B\uD68E\uD68F\uD691\uD692\uD693\uD695\uD696\uD697\uD698\uD699\uD69A\uD69B\uD69C\uD69E\uD6A0\uD6A2\uD6A3\uD6A4\uD6A5\uD6A6\uD6A7\uD6A9\uD6AA\uCC3C\uCC3D\uCC3E\uCC44\uCC45\uCC48\uCC4C\uCC54\uCC55\uCC57\uCC58\uCC59\uCC60\uCC64\uCC66\uCC68\uCC70\uCC75\uCC98\uCC99\uCC9C\uCCA0\uCCA8\uCCA9\uCCAB\uCCAC\uCCAD\uCCB4\uCCB5\uCCB8\uCCBC\uCCC4\uCCC5\uCCC7\uCCC9\uCCD0\uCCD4\uCCE4\uCCEC\uCCF0\uCD01\uCD08\uCD09\uCD0C\uCD10\uCD18\uCD19\uCD1B\uCD1D\uCD24\uCD28\uCD2C\uCD39\uCD5C\uCD60\uCD64\uCD6C\uCD6D\uCD6F\uCD71\uCD78\uCD88\uCD94\uCD95\uCD98\uCD9C\uCDA4\uCDA5\uCDA7\uCDA9\uCDB0\uCDC4\uCDCC\uCDD0\uCDE8\uCDEC\uCDF0\uCDF8\uCDF9\uCDFB\uCDFD\uCE04\uCE08\uCE0C\uCE14\uCE19\uCE20\uCE21\uCE24\uCE28\uCE30\uCE31\uCE33\uCE35\uFFFD".split("");
      for (j = 0; j != D[195].length; ++j)
        if (D[195][j].charCodeAt(0) !== 65533) {
          e[D[195][j]] = 49920 + j;
          d[49920 + j] = D[195][j];
        }
      D[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6AB\uD6AD\uD6AE\uD6AF\uD6B1\uD6B2\uD6B3\uD6B4\uD6B5\uD6B6\uD6B7\uD6B8\uD6BA\uD6BC\uD6BD\uD6BE\uD6BF\uD6C0\uD6C1\uD6C2\uD6C3\uD6C6\uD6C7\uD6C9\uD6CA\uD6CB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6CD\uD6CE\uD6CF\uD6D0\uD6D2\uD6D3\uD6D5\uD6D6\uD6D8\uD6DA\uD6DB\uD6DC\uD6DD\uD6DE\uD6DF\uD6E1\uD6E2\uD6E3\uD6E5\uD6E6\uD6E7\uD6E9\uD6EA\uD6EB\uD6EC\uD6ED\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6EE\uD6EF\uD6F1\uD6F2\uD6F3\uD6F4\uD6F6\uD6F7\uD6F8\uD6F9\uD6FA\uD6FB\uD6FE\uD6FF\uD701\uD702\uD703\uD705\uD706\uD707\uD708\uD709\uD70A\uD70B\uD70C\uD70D\uD70E\uD70F\uD710\uD712\uD713\uD714\uCE58\uCE59\uCE5C\uCE5F\uCE60\uCE61\uCE68\uCE69\uCE6B\uCE6D\uCE74\uCE75\uCE78\uCE7C\uCE84\uCE85\uCE87\uCE89\uCE90\uCE91\uCE94\uCE98\uCEA0\uCEA1\uCEA3\uCEA4\uCEA5\uCEAC\uCEAD\uCEC1\uCEE4\uCEE5\uCEE8\uCEEB\uCEEC\uCEF4\uCEF5\uCEF7\uCEF8\uCEF9\uCF00\uCF01\uCF04\uCF08\uCF10\uCF11\uCF13\uCF15\uCF1C\uCF20\uCF24\uCF2C\uCF2D\uCF2F\uCF30\uCF31\uCF38\uCF54\uCF55\uCF58\uCF5C\uCF64\uCF65\uCF67\uCF69\uCF70\uCF71\uCF74\uCF78\uCF80\uCF85\uCF8C\uCFA1\uCFA8\uCFB0\uCFC4\uCFE0\uCFE1\uCFE4\uCFE8\uCFF0\uCFF1\uCFF3\uCFF5\uCFFC\uD000\uD004\uD011\uD018\uD02D\uD034\uD035\uD038\uD03C\uFFFD".split("");
      for (j = 0; j != D[196].length; ++j)
        if (D[196][j].charCodeAt(0) !== 65533) {
          e[D[196][j]] = 50176 + j;
          d[50176 + j] = D[196][j];
        }
      D[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD715\uD716\uD717\uD71A\uD71B\uD71D\uD71E\uD71F\uD721\uD722\uD723\uD724\uD725\uD726\uD727\uD72A\uD72C\uD72E\uD72F\uD730\uD731\uD732\uD733\uD736\uD737\uD739\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD73A\uD73B\uD73D\uD73E\uD73F\uD740\uD741\uD742\uD743\uD745\uD746\uD748\uD74A\uD74B\uD74C\uD74D\uD74E\uD74F\uD752\uD753\uD755\uD75A\uD75B\uD75C\uD75D\uD75E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD75F\uD762\uD764\uD766\uD767\uD768\uD76A\uD76B\uD76D\uD76E\uD76F\uD771\uD772\uD773\uD775\uD776\uD777\uD778\uD779\uD77A\uD77B\uD77E\uD77F\uD780\uD782\uD783\uD784\uD785\uD786\uD787\uD78A\uD78B\uD044\uD045\uD047\uD049\uD050\uD054\uD058\uD060\uD06C\uD06D\uD070\uD074\uD07C\uD07D\uD081\uD0A4\uD0A5\uD0A8\uD0AC\uD0B4\uD0B5\uD0B7\uD0B9\uD0C0\uD0C1\uD0C4\uD0C8\uD0C9\uD0D0\uD0D1\uD0D3\uD0D4\uD0D5\uD0DC\uD0DD\uD0E0\uD0E4\uD0EC\uD0ED\uD0EF\uD0F0\uD0F1\uD0F8\uD10D\uD130\uD131\uD134\uD138\uD13A\uD140\uD141\uD143\uD144\uD145\uD14C\uD14D\uD150\uD154\uD15C\uD15D\uD15F\uD161\uD168\uD16C\uD17C\uD184\uD188\uD1A0\uD1A1\uD1A4\uD1A8\uD1B0\uD1B1\uD1B3\uD1B5\uD1BA\uD1BC\uD1C0\uD1D8\uD1F4\uD1F8\uD207\uD209\uD210\uD22C\uD22D\uD230\uD234\uD23C\uD23D\uD23F\uD241\uD248\uD25C\uFFFD".split("");
      for (j = 0; j != D[197].length; ++j)
        if (D[197][j].charCodeAt(0) !== 65533) {
          e[D[197][j]] = 50432 + j;
          d[50432 + j] = D[197][j];
        }
      D[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD78D\uD78E\uD78F\uD791\uD792\uD793\uD794\uD795\uD796\uD797\uD79A\uD79C\uD79E\uD79F\uD7A0\uD7A1\uD7A2\uD7A3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD264\uD280\uD281\uD284\uD288\uD290\uD291\uD295\uD29C\uD2A0\uD2A4\uD2AC\uD2B1\uD2B8\uD2B9\uD2BC\uD2BF\uD2C0\uD2C2\uD2C8\uD2C9\uD2CB\uD2D4\uD2D8\uD2DC\uD2E4\uD2E5\uD2F0\uD2F1\uD2F4\uD2F8\uD300\uD301\uD303\uD305\uD30C\uD30D\uD30E\uD310\uD314\uD316\uD31C\uD31D\uD31F\uD320\uD321\uD325\uD328\uD329\uD32C\uD330\uD338\uD339\uD33B\uD33C\uD33D\uD344\uD345\uD37C\uD37D\uD380\uD384\uD38C\uD38D\uD38F\uD390\uD391\uD398\uD399\uD39C\uD3A0\uD3A8\uD3A9\uD3AB\uD3AD\uD3B4\uD3B8\uD3BC\uD3C4\uD3C5\uD3C8\uD3C9\uD3D0\uD3D8\uD3E1\uD3E3\uD3EC\uD3ED\uD3F0\uD3F4\uD3FC\uD3FD\uD3FF\uD401\uFFFD".split("");
      for (j = 0; j != D[198].length; ++j)
        if (D[198][j].charCodeAt(0) !== 65533) {
          e[D[198][j]] = 50688 + j;
          d[50688 + j] = D[198][j];
        }
      D[199] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD408\uD41D\uD440\uD444\uD45C\uD460\uD464\uD46D\uD46F\uD478\uD479\uD47C\uD47F\uD480\uD482\uD488\uD489\uD48B\uD48D\uD494\uD4A9\uD4CC\uD4D0\uD4D4\uD4DC\uD4DF\uD4E8\uD4EC\uD4F0\uD4F8\uD4FB\uD4FD\uD504\uD508\uD50C\uD514\uD515\uD517\uD53C\uD53D\uD540\uD544\uD54C\uD54D\uD54F\uD551\uD558\uD559\uD55C\uD560\uD565\uD568\uD569\uD56B\uD56D\uD574\uD575\uD578\uD57C\uD584\uD585\uD587\uD588\uD589\uD590\uD5A5\uD5C8\uD5C9\uD5CC\uD5D0\uD5D2\uD5D8\uD5D9\uD5DB\uD5DD\uD5E4\uD5E5\uD5E8\uD5EC\uD5F4\uD5F5\uD5F7\uD5F9\uD600\uD601\uD604\uD608\uD610\uD611\uD613\uD614\uD615\uD61C\uD620\uFFFD".split("");
      for (j = 0; j != D[199].length; ++j)
        if (D[199][j].charCodeAt(0) !== 65533) {
          e[D[199][j]] = 50944 + j;
          d[50944 + j] = D[199][j];
        }
      D[200] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD624\uD62D\uD638\uD639\uD63C\uD640\uD645\uD648\uD649\uD64B\uD64D\uD651\uD654\uD655\uD658\uD65C\uD667\uD669\uD670\uD671\uD674\uD683\uD685\uD68C\uD68D\uD690\uD694\uD69D\uD69F\uD6A1\uD6A8\uD6AC\uD6B0\uD6B9\uD6BB\uD6C4\uD6C5\uD6C8\uD6CC\uD6D1\uD6D4\uD6D7\uD6D9\uD6E0\uD6E4\uD6E8\uD6F0\uD6F5\uD6FC\uD6FD\uD700\uD704\uD711\uD718\uD719\uD71C\uD720\uD728\uD729\uD72B\uD72D\uD734\uD735\uD738\uD73C\uD744\uD747\uD749\uD750\uD751\uD754\uD756\uD757\uD758\uD759\uD760\uD761\uD763\uD765\uD769\uD76C\uD770\uD774\uD77C\uD77D\uD781\uD788\uD789\uD78C\uD790\uD798\uD799\uD79B\uD79D\uFFFD".split("");
      for (j = 0; j != D[200].length; ++j)
        if (D[200][j].charCodeAt(0) !== 65533) {
          e[D[200][j]] = 51200 + j;
          d[51200 + j] = D[200][j];
        }
      D[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F3D\u4F73\u5047\u50F9\u52A0\u53EF\u5475\u54E5\u5609\u5AC1\u5BB6\u6687\u67B6\u67B7\u67EF\u6B4C\u73C2\u75C2\u7A3C\u82DB\u8304\u8857\u8888\u8A36\u8CC8\u8DCF\u8EFB\u8FE6\u99D5\u523B\u5374\u5404\u606A\u6164\u6BBC\u73CF\u811A\u89BA\u89D2\u95A3\u4F83\u520A\u58BE\u5978\u59E6\u5E72\u5E79\u61C7\u63C0\u6746\u67EC\u687F\u6F97\u764E\u770B\u78F5\u7A08\u7AFF\u7C21\u809D\u826E\u8271\u8AEB\u9593\u4E6B\u559D\u66F7\u6E34\u78A3\u7AED\u845B\u8910\u874E\u97A8\u52D8\u574E\u582A\u5D4C\u611F\u61BE\u6221\u6562\u67D1\u6A44\u6E1B\u7518\u75B3\u76E3\u77B0\u7D3A\u90AF\u9451\u9452\u9F95\uFFFD".split("");
      for (j = 0; j != D[202].length; ++j)
        if (D[202][j].charCodeAt(0) !== 65533) {
          e[D[202][j]] = 51712 + j;
          d[51712 + j] = D[202][j];
        }
      D[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5323\u5CAC\u7532\u80DB\u9240\u9598\u525B\u5808\u59DC\u5CA1\u5D17\u5EB7\u5F3A\u5F4A\u6177\u6C5F\u757A\u7586\u7CE0\u7D73\u7DB1\u7F8C\u8154\u8221\u8591\u8941\u8B1B\u92FC\u964D\u9C47\u4ECB\u4EF7\u500B\u51F1\u584F\u6137\u613E\u6168\u6539\u69EA\u6F11\u75A5\u7686\u76D6\u7B87\u82A5\u84CB\uF900\u93A7\u958B\u5580\u5BA2\u5751\uF901\u7CB3\u7FB9\u91B5\u5028\u53BB\u5C45\u5DE8\u62D2\u636E\u64DA\u64E7\u6E20\u70AC\u795B\u8DDD\u8E1E\uF902\u907D\u9245\u92F8\u4E7E\u4EF6\u5065\u5DFE\u5EFA\u6106\u6957\u8171\u8654\u8E47\u9375\u9A2B\u4E5E\u5091\u6770\u6840\u5109\u528D\u5292\u6AA2\uFFFD".split("");
      for (j = 0; j != D[203].length; ++j)
        if (D[203][j].charCodeAt(0) !== 65533) {
          e[D[203][j]] = 51968 + j;
          d[51968 + j] = D[203][j];
        }
      D[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77BC\u9210\u9ED4\u52AB\u602F\u8FF2\u5048\u61A9\u63ED\u64CA\u683C\u6A84\u6FC0\u8188\u89A1\u9694\u5805\u727D\u72AC\u7504\u7D79\u7E6D\u80A9\u898B\u8B74\u9063\u9D51\u6289\u6C7A\u6F54\u7D50\u7F3A\u8A23\u517C\u614A\u7B9D\u8B19\u9257\u938C\u4EAC\u4FD3\u501E\u50BE\u5106\u52C1\u52CD\u537F\u5770\u5883\u5E9A\u5F91\u6176\u61AC\u64CE\u656C\u666F\u66BB\u66F4\u6897\u6D87\u7085\u70F1\u749F\u74A5\u74CA\u75D9\u786C\u78EC\u7ADF\u7AF6\u7D45\u7D93\u8015\u803F\u811B\u8396\u8B66\u8F15\u9015\u93E1\u9803\u9838\u9A5A\u9BE8\u4FC2\u5553\u583A\u5951\u5B63\u5C46\u60B8\u6212\u6842\u68B0\uFFFD".split("");
      for (j = 0; j != D[204].length; ++j)
        if (D[204][j].charCodeAt(0) !== 65533) {
          e[D[204][j]] = 52224 + j;
          d[52224 + j] = D[204][j];
        }
      D[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u68E8\u6EAA\u754C\u7678\u78CE\u7A3D\u7CFB\u7E6B\u7E7C\u8A08\u8AA1\u8C3F\u968E\u9DC4\u53E4\u53E9\u544A\u5471\u56FA\u59D1\u5B64\u5C3B\u5EAB\u62F7\u6537\u6545\u6572\u66A0\u67AF\u69C1\u6CBD\u75FC\u7690\u777E\u7A3F\u7F94\u8003\u80A1\u818F\u82E6\u82FD\u83F0\u85C1\u8831\u88B4\u8AA5\uF903\u8F9C\u932E\u96C7\u9867\u9AD8\u9F13\u54ED\u659B\u66F2\u688F\u7A40\u8C37\u9D60\u56F0\u5764\u5D11\u6606\u68B1\u68CD\u6EFE\u7428\u889E\u9BE4\u6C68\uF904\u9AA8\u4F9B\u516C\u5171\u529F\u5B54\u5DE5\u6050\u606D\u62F1\u63A7\u653B\u73D9\u7A7A\u86A3\u8CA2\u978F\u4E32\u5BE1\u6208\u679C\u74DC\uFFFD".split("");
      for (j = 0; j != D[205].length; ++j)
        if (D[205][j].charCodeAt(0) !== 65533) {
          e[D[205][j]] = 52480 + j;
          d[52480 + j] = D[205][j];
        }
      D[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79D1\u83D3\u8A87\u8AB2\u8DE8\u904E\u934B\u9846\u5ED3\u69E8\u85FF\u90ED\uF905\u51A0\u5B98\u5BEC\u6163\u68FA\u6B3E\u704C\u742F\u74D8\u7BA1\u7F50\u83C5\u89C0\u8CAB\u95DC\u9928\u522E\u605D\u62EC\u9002\u4F8A\u5149\u5321\u58D9\u5EE3\u66E0\u6D38\u709A\u72C2\u73D6\u7B50\u80F1\u945B\u5366\u639B\u7F6B\u4E56\u5080\u584A\u58DE\u602A\u6127\u62D0\u69D0\u9B41\u5B8F\u7D18\u80B1\u8F5F\u4EA4\u50D1\u54AC\u55AC\u5B0C\u5DA0\u5DE7\u652A\u654E\u6821\u6A4B\u72E1\u768E\u77EF\u7D5E\u7FF9\u81A0\u854E\u86DF\u8F03\u8F4E\u90CA\u9903\u9A55\u9BAB\u4E18\u4E45\u4E5D\u4EC7\u4FF1\u5177\u52FE\uFFFD".split("");
      for (j = 0; j != D[206].length; ++j)
        if (D[206][j].charCodeAt(0) !== 65533) {
          e[D[206][j]] = 52736 + j;
          d[52736 + j] = D[206][j];
        }
      D[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5340\u53E3\u53E5\u548E\u5614\u5775\u57A2\u5BC7\u5D87\u5ED0\u61FC\u62D8\u6551\u67B8\u67E9\u69CB\u6B50\u6BC6\u6BEC\u6C42\u6E9D\u7078\u72D7\u7396\u7403\u77BF\u77E9\u7A76\u7D7F\u8009\u81FC\u8205\u820A\u82DF\u8862\u8B33\u8CFC\u8EC0\u9011\u90B1\u9264\u92B6\u99D2\u9A45\u9CE9\u9DD7\u9F9C\u570B\u5C40\u83CA\u97A0\u97AB\u9EB4\u541B\u7A98\u7FA4\u88D9\u8ECD\u90E1\u5800\u5C48\u6398\u7A9F\u5BAE\u5F13\u7A79\u7AAE\u828E\u8EAC\u5026\u5238\u52F8\u5377\u5708\u62F3\u6372\u6B0A\u6DC3\u7737\u53A5\u7357\u8568\u8E76\u95D5\u673A\u6AC3\u6F70\u8A6D\u8ECC\u994B\uF906\u6677\u6B78\u8CB4\uFFFD".split("");
      for (j = 0; j != D[207].length; ++j)
        if (D[207][j].charCodeAt(0) !== 65533) {
          e[D[207][j]] = 52992 + j;
          d[52992 + j] = D[207][j];
        }
      D[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B3C\uF907\u53EB\u572D\u594E\u63C6\u69FB\u73EA\u7845\u7ABA\u7AC5\u7CFE\u8475\u898F\u8D73\u9035\u95A8\u52FB\u5747\u7547\u7B60\u83CC\u921E\uF908\u6A58\u514B\u524B\u5287\u621F\u68D8\u6975\u9699\u50C5\u52A4\u52E4\u61C3\u65A4\u6839\u69FF\u747E\u7B4B\u82B9\u83EB\u89B2\u8B39\u8FD1\u9949\uF909\u4ECA\u5997\u64D2\u6611\u6A8E\u7434\u7981\u79BD\u82A9\u887E\u887F\u895F\uF90A\u9326\u4F0B\u53CA\u6025\u6271\u6C72\u7D1A\u7D66\u4E98\u5162\u77DC\u80AF\u4F01\u4F0E\u5176\u5180\u55DC\u5668\u573B\u57FA\u57FC\u5914\u5947\u5993\u5BC4\u5C90\u5D0E\u5DF1\u5E7E\u5FCC\u6280\u65D7\u65E3\uFFFD".split("");
      for (j = 0; j != D[208].length; ++j)
        if (D[208][j].charCodeAt(0) !== 65533) {
          e[D[208][j]] = 53248 + j;
          d[53248 + j] = D[208][j];
        }
      D[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u671E\u671F\u675E\u68CB\u68C4\u6A5F\u6B3A\u6C23\u6C7D\u6C82\u6DC7\u7398\u7426\u742A\u7482\u74A3\u7578\u757F\u7881\u78EF\u7941\u7947\u7948\u797A\u7B95\u7D00\u7DBA\u7F88\u8006\u802D\u808C\u8A18\u8B4F\u8C48\u8D77\u9321\u9324\u98E2\u9951\u9A0E\u9A0F\u9A65\u9E92\u7DCA\u4F76\u5409\u62EE\u6854\u91D1\u55AB\u513A\uF90B\uF90C\u5A1C\u61E6\uF90D\u62CF\u62FF\uF90E\uF90F\uF910\uF911\uF912\uF913\u90A3\uF914\uF915\uF916\uF917\uF918\u8AFE\uF919\uF91A\uF91B\uF91C\u6696\uF91D\u7156\uF91E\uF91F\u96E3\uF920\u634F\u637A\u5357\uF921\u678F\u6960\u6E73\uF922\u7537\uF923\uF924\uF925\uFFFD".split("");
      for (j = 0; j != D[209].length; ++j)
        if (D[209][j].charCodeAt(0) !== 65533) {
          e[D[209][j]] = 53504 + j;
          d[53504 + j] = D[209][j];
        }
      D[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D0D\uF926\uF927\u8872\u56CA\u5A18\uF928\uF929\uF92A\uF92B\uF92C\u4E43\uF92D\u5167\u5948\u67F0\u8010\uF92E\u5973\u5E74\u649A\u79CA\u5FF5\u606C\u62C8\u637B\u5BE7\u5BD7\u52AA\uF92F\u5974\u5F29\u6012\uF930\uF931\uF932\u7459\uF933\uF934\uF935\uF936\uF937\uF938\u99D1\uF939\uF93A\uF93B\uF93C\uF93D\uF93E\uF93F\uF940\uF941\uF942\uF943\u6FC3\uF944\uF945\u81BF\u8FB2\u60F1\uF946\uF947\u8166\uF948\uF949\u5C3F\uF94A\uF94B\uF94C\uF94D\uF94E\uF94F\uF950\uF951\u5AE9\u8A25\u677B\u7D10\uF952\uF953\uF954\uF955\uF956\uF957\u80FD\uF958\uF959\u5C3C\u6CE5\u533F\u6EBA\u591A\u8336\uFFFD".split("");
      for (j = 0; j != D[210].length; ++j)
        if (D[210][j].charCodeAt(0) !== 65533) {
          e[D[210][j]] = 53760 + j;
          d[53760 + j] = D[210][j];
        }
      D[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E39\u4EB6\u4F46\u55AE\u5718\u58C7\u5F56\u65B7\u65E6\u6A80\u6BB5\u6E4D\u77ED\u7AEF\u7C1E\u7DDE\u86CB\u8892\u9132\u935B\u64BB\u6FBE\u737A\u75B8\u9054\u5556\u574D\u61BA\u64D4\u66C7\u6DE1\u6E5B\u6F6D\u6FB9\u75F0\u8043\u81BD\u8541\u8983\u8AC7\u8B5A\u931F\u6C93\u7553\u7B54\u8E0F\u905D\u5510\u5802\u5858\u5E62\u6207\u649E\u68E0\u7576\u7CD6\u87B3\u9EE8\u4EE3\u5788\u576E\u5927\u5C0D\u5CB1\u5E36\u5F85\u6234\u64E1\u73B3\u81FA\u888B\u8CB8\u968A\u9EDB\u5B85\u5FB7\u60B3\u5012\u5200\u5230\u5716\u5835\u5857\u5C0E\u5C60\u5CF6\u5D8B\u5EA6\u5F92\u60BC\u6311\u6389\u6417\u6843\uFFFD".split("");
      for (j = 0; j != D[211].length; ++j)
        if (D[211][j].charCodeAt(0) !== 65533) {
          e[D[211][j]] = 54016 + j;
          d[54016 + j] = D[211][j];
        }
      D[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u68F9\u6AC2\u6DD8\u6E21\u6ED4\u6FE4\u71FE\u76DC\u7779\u79B1\u7A3B\u8404\u89A9\u8CED\u8DF3\u8E48\u9003\u9014\u9053\u90FD\u934D\u9676\u97DC\u6BD2\u7006\u7258\u72A2\u7368\u7763\u79BF\u7BE4\u7E9B\u8B80\u58A9\u60C7\u6566\u65FD\u66BE\u6C8C\u711E\u71C9\u8C5A\u9813\u4E6D\u7A81\u4EDD\u51AC\u51CD\u52D5\u540C\u61A7\u6771\u6850\u68DF\u6D1E\u6F7C\u75BC\u77B3\u7AE5\u80F4\u8463\u9285\u515C\u6597\u675C\u6793\u75D8\u7AC7\u8373\uF95A\u8C46\u9017\u982D\u5C6F\u81C0\u829A\u9041\u906F\u920D\u5F97\u5D9D\u6A59\u71C8\u767B\u7B49\u85E4\u8B04\u9127\u9A30\u5587\u61F6\uF95B\u7669\u7F85\uFFFD".split("");
      for (j = 0; j != D[212].length; ++j)
        if (D[212][j].charCodeAt(0) !== 65533) {
          e[D[212][j]] = 54272 + j;
          d[54272 + j] = D[212][j];
        }
      D[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u863F\u87BA\u88F8\u908F\uF95C\u6D1B\u70D9\u73DE\u7D61\u843D\uF95D\u916A\u99F1\uF95E\u4E82\u5375\u6B04\u6B12\u703E\u721B\u862D\u9E1E\u524C\u8FA3\u5D50\u64E5\u652C\u6B16\u6FEB\u7C43\u7E9C\u85CD\u8964\u89BD\u62C9\u81D8\u881F\u5ECA\u6717\u6D6A\u72FC\u7405\u746F\u8782\u90DE\u4F86\u5D0D\u5FA0\u840A\u51B7\u63A0\u7565\u4EAE\u5006\u5169\u51C9\u6881\u6A11\u7CAE\u7CB1\u7CE7\u826F\u8AD2\u8F1B\u91CF\u4FB6\u5137\u52F5\u5442\u5EEC\u616E\u623E\u65C5\u6ADA\u6FFE\u792A\u85DC\u8823\u95AD\u9A62\u9A6A\u9E97\u9ECE\u529B\u66C6\u6B77\u701D\u792B\u8F62\u9742\u6190\u6200\u6523\u6F23\uFFFD".split("");
      for (j = 0; j != D[213].length; ++j)
        if (D[213][j].charCodeAt(0) !== 65533) {
          e[D[213][j]] = 54528 + j;
          d[54528 + j] = D[213][j];
        }
      D[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7149\u7489\u7DF4\u806F\u84EE\u8F26\u9023\u934A\u51BD\u5217\u52A3\u6D0C\u70C8\u88C2\u5EC9\u6582\u6BAE\u6FC2\u7C3E\u7375\u4EE4\u4F36\u56F9\uF95F\u5CBA\u5DBA\u601C\u73B2\u7B2D\u7F9A\u7FCE\u8046\u901E\u9234\u96F6\u9748\u9818\u9F61\u4F8B\u6FA7\u79AE\u91B4\u96B7\u52DE\uF960\u6488\u64C4\u6AD3\u6F5E\u7018\u7210\u76E7\u8001\u8606\u865C\u8DEF\u8F05\u9732\u9B6F\u9DFA\u9E75\u788C\u797F\u7DA0\u83C9\u9304\u9E7F\u9E93\u8AD6\u58DF\u5F04\u6727\u7027\u74CF\u7C60\u807E\u5121\u7028\u7262\u78CA\u8CC2\u8CDA\u8CF4\u96F7\u4E86\u50DA\u5BEE\u5ED6\u6599\u71CE\u7642\u77AD\u804A\u84FC\uFFFD".split("");
      for (j = 0; j != D[214].length; ++j)
        if (D[214][j].charCodeAt(0) !== 65533) {
          e[D[214][j]] = 54784 + j;
          d[54784 + j] = D[214][j];
        }
      D[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u907C\u9B27\u9F8D\u58D8\u5A41\u5C62\u6A13\u6DDA\u6F0F\u763B\u7D2F\u7E37\u851E\u8938\u93E4\u964B\u5289\u65D2\u67F3\u69B4\u6D41\u6E9C\u700F\u7409\u7460\u7559\u7624\u786B\u8B2C\u985E\u516D\u622E\u9678\u4F96\u502B\u5D19\u6DEA\u7DB8\u8F2A\u5F8B\u6144\u6817\uF961\u9686\u52D2\u808B\u51DC\u51CC\u695E\u7A1C\u7DBE\u83F1\u9675\u4FDA\u5229\u5398\u540F\u550E\u5C65\u60A7\u674E\u68A8\u6D6C\u7281\u72F8\u7406\u7483\uF962\u75E2\u7C6C\u7F79\u7FB8\u8389\u88CF\u88E1\u91CC\u91D0\u96E2\u9BC9\u541D\u6F7E\u71D0\u7498\u85FA\u8EAA\u96A3\u9C57\u9E9F\u6797\u6DCB\u7433\u81E8\u9716\u782C\uFFFD".split("");
      for (j = 0; j != D[215].length; ++j)
        if (D[215][j].charCodeAt(0) !== 65533) {
          e[D[215][j]] = 55040 + j;
          d[55040 + j] = D[215][j];
        }
      D[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7ACB\u7B20\u7C92\u6469\u746A\u75F2\u78BC\u78E8\u99AC\u9B54\u9EBB\u5BDE\u5E55\u6F20\u819C\u83AB\u9088\u4E07\u534D\u5A29\u5DD2\u5F4E\u6162\u633D\u6669\u66FC\u6EFF\u6F2B\u7063\u779E\u842C\u8513\u883B\u8F13\u9945\u9C3B\u551C\u62B9\u672B\u6CAB\u8309\u896A\u977A\u4EA1\u5984\u5FD8\u5FD9\u671B\u7DB2\u7F54\u8292\u832B\u83BD\u8F1E\u9099\u57CB\u59B9\u5A92\u5BD0\u6627\u679A\u6885\u6BCF\u7164\u7F75\u8CB7\u8CE3\u9081\u9B45\u8108\u8C8A\u964C\u9A40\u9EA5\u5B5F\u6C13\u731B\u76F2\u76DF\u840C\u51AA\u8993\u514D\u5195\u52C9\u68C9\u6C94\u7704\u7720\u7DBF\u7DEC\u9762\u9EB5\u6EC5\uFFFD".split("");
      for (j = 0; j != D[216].length; ++j)
        if (D[216][j].charCodeAt(0) !== 65533) {
          e[D[216][j]] = 55296 + j;
          d[55296 + j] = D[216][j];
        }
      D[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8511\u51A5\u540D\u547D\u660E\u669D\u6927\u6E9F\u76BF\u7791\u8317\u84C2\u879F\u9169\u9298\u9CF4\u8882\u4FAE\u5192\u52DF\u59C6\u5E3D\u6155\u6478\u6479\u66AE\u67D0\u6A21\u6BCD\u6BDB\u725F\u7261\u7441\u7738\u77DB\u8017\u82BC\u8305\u8B00\u8B28\u8C8C\u6728\u6C90\u7267\u76EE\u7766\u7A46\u9DA9\u6B7F\u6C92\u5922\u6726\u8499\u536F\u5893\u5999\u5EDF\u63CF\u6634\u6773\u6E3A\u732B\u7AD7\u82D7\u9328\u52D9\u5DEB\u61AE\u61CB\u620A\u62C7\u64AB\u65E0\u6959\u6B66\u6BCB\u7121\u73F7\u755D\u7E46\u821E\u8302\u856A\u8AA3\u8CBF\u9727\u9D61\u58A8\u9ED8\u5011\u520E\u543B\u554F\u6587\uFFFD".split("");
      for (j = 0; j != D[217].length; ++j)
        if (D[217][j].charCodeAt(0) !== 65533) {
          e[D[217][j]] = 55552 + j;
          d[55552 + j] = D[217][j];
        }
      D[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C76\u7D0A\u7D0B\u805E\u868A\u9580\u96EF\u52FF\u6C95\u7269\u5473\u5A9A\u5C3E\u5D4B\u5F4C\u5FAE\u672A\u68B6\u6963\u6E3C\u6E44\u7709\u7C73\u7F8E\u8587\u8B0E\u8FF7\u9761\u9EF4\u5CB7\u60B6\u610D\u61AB\u654F\u65FB\u65FC\u6C11\u6CEF\u739F\u73C9\u7DE1\u9594\u5BC6\u871C\u8B10\u525D\u535A\u62CD\u640F\u64B2\u6734\u6A38\u6CCA\u73C0\u749E\u7B94\u7C95\u7E1B\u818A\u8236\u8584\u8FEB\u96F9\u99C1\u4F34\u534A\u53CD\u53DB\u62CC\u642C\u6500\u6591\u69C3\u6CEE\u6F58\u73ED\u7554\u7622\u76E4\u76FC\u78D0\u78FB\u792C\u7D46\u822C\u87E0\u8FD4\u9812\u98EF\u52C3\u62D4\u64A5\u6E24\u6F51\uFFFD".split("");
      for (j = 0; j != D[218].length; ++j)
        if (D[218][j].charCodeAt(0) !== 65533) {
          e[D[218][j]] = 55808 + j;
          d[55808 + j] = D[218][j];
        }
      D[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u767C\u8DCB\u91B1\u9262\u9AEE\u9B43\u5023\u508D\u574A\u59A8\u5C28\u5E47\u5F77\u623F\u653E\u65B9\u65C1\u6609\u678B\u699C\u6EC2\u78C5\u7D21\u80AA\u8180\u822B\u82B3\u84A1\u868C\u8A2A\u8B17\u90A6\u9632\u9F90\u500D\u4FF3\uF963\u57F9\u5F98\u62DC\u6392\u676F\u6E43\u7119\u76C3\u80CC\u80DA\u88F4\u88F5\u8919\u8CE0\u8F29\u914D\u966A\u4F2F\u4F70\u5E1B\u67CF\u6822\u767D\u767E\u9B44\u5E61\u6A0A\u7169\u71D4\u756A\uF964\u7E41\u8543\u85E9\u98DC\u4F10\u7B4F\u7F70\u95A5\u51E1\u5E06\u68B5\u6C3E\u6C4E\u6CDB\u72AF\u7BC4\u8303\u6CD5\u743A\u50FB\u5288\u58C1\u64D8\u6A97\u74A7\u7656\uFFFD".split("");
      for (j = 0; j != D[219].length; ++j)
        if (D[219][j].charCodeAt(0) !== 65533) {
          e[D[219][j]] = 56064 + j;
          d[56064 + j] = D[219][j];
        }
      D[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u78A7\u8617\u95E2\u9739\uF965\u535E\u5F01\u8B8A\u8FA8\u8FAF\u908A\u5225\u77A5\u9C49\u9F08\u4E19\u5002\u5175\u5C5B\u5E77\u661E\u663A\u67C4\u68C5\u70B3\u7501\u75C5\u79C9\u7ADD\u8F27\u9920\u9A08\u4FDD\u5821\u5831\u5BF6\u666E\u6B65\u6D11\u6E7A\u6F7D\u73E4\u752B\u83E9\u88DC\u8913\u8B5C\u8F14\u4F0F\u50D5\u5310\u535C\u5B93\u5FA9\u670D\u798F\u8179\u832F\u8514\u8907\u8986\u8F39\u8F3B\u99A5\u9C12\u672C\u4E76\u4FF8\u5949\u5C01\u5CEF\u5CF0\u6367\u68D2\u70FD\u71A2\u742B\u7E2B\u84EC\u8702\u9022\u92D2\u9CF3\u4E0D\u4ED8\u4FEF\u5085\u5256\u526F\u5426\u5490\u57E0\u592B\u5A66\uFFFD".split("");
      for (j = 0; j != D[220].length; ++j)
        if (D[220][j].charCodeAt(0) !== 65533) {
          e[D[220][j]] = 56320 + j;
          d[56320 + j] = D[220][j];
        }
      D[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B5A\u5B75\u5BCC\u5E9C\uF966\u6276\u6577\u65A7\u6D6E\u6EA5\u7236\u7B26\u7C3F\u7F36\u8150\u8151\u819A\u8240\u8299\u83A9\u8A03\u8CA0\u8CE6\u8CFB\u8D74\u8DBA\u90E8\u91DC\u961C\u9644\u99D9\u9CE7\u5317\u5206\u5429\u5674\u58B3\u5954\u596E\u5FFF\u61A4\u626E\u6610\u6C7E\u711A\u76C6\u7C89\u7CDE\u7D1B\u82AC\u8CC1\u96F0\uF967\u4F5B\u5F17\u5F7F\u62C2\u5D29\u670B\u68DA\u787C\u7E43\u9D6C\u4E15\u5099\u5315\u532A\u5351\u5983\u5A62\u5E87\u60B2\u618A\u6249\u6279\u6590\u6787\u69A7\u6BD4\u6BD6\u6BD7\u6BD8\u6CB8\uF968\u7435\u75FA\u7812\u7891\u79D5\u79D8\u7C83\u7DCB\u7FE1\u80A5\uFFFD".split("");
      for (j = 0; j != D[221].length; ++j)
        if (D[221][j].charCodeAt(0) !== 65533) {
          e[D[221][j]] = 56576 + j;
          d[56576 + j] = D[221][j];
        }
      D[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u813E\u81C2\u83F2\u871A\u88E8\u8AB9\u8B6C\u8CBB\u9119\u975E\u98DB\u9F3B\u56AC\u5B2A\u5F6C\u658C\u6AB3\u6BAF\u6D5C\u6FF1\u7015\u725D\u73AD\u8CA7\u8CD3\u983B\u6191\u6C37\u8058\u9A01\u4E4D\u4E8B\u4E9B\u4ED5\u4F3A\u4F3C\u4F7F\u4FDF\u50FF\u53F2\u53F8\u5506\u55E3\u56DB\u58EB\u5962\u5A11\u5BEB\u5BFA\u5C04\u5DF3\u5E2B\u5F99\u601D\u6368\u659C\u65AF\u67F6\u67FB\u68AD\u6B7B\u6C99\u6CD7\u6E23\u7009\u7345\u7802\u793E\u7940\u7960\u79C1\u7BE9\u7D17\u7D72\u8086\u820D\u838E\u84D1\u86C7\u88DF\u8A50\u8A5E\u8B1D\u8CDC\u8D66\u8FAD\u90AA\u98FC\u99DF\u9E9D\u524A\uF969\u6714\uF96A\uFFFD".split("");
      for (j = 0; j != D[222].length; ++j)
        if (D[222][j].charCodeAt(0) !== 65533) {
          e[D[222][j]] = 56832 + j;
          d[56832 + j] = D[222][j];
        }
      D[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5098\u522A\u5C71\u6563\u6C55\u73CA\u7523\u759D\u7B97\u849C\u9178\u9730\u4E77\u6492\u6BBA\u715E\u85A9\u4E09\uF96B\u6749\u68EE\u6E17\u829F\u8518\u886B\u63F7\u6F81\u9212\u98AF\u4E0A\u50B7\u50CF\u511F\u5546\u55AA\u5617\u5B40\u5C19\u5CE0\u5E38\u5E8A\u5EA0\u5EC2\u60F3\u6851\u6A61\u6E58\u723D\u7240\u72C0\u76F8\u7965\u7BB1\u7FD4\u88F3\u89F4\u8A73\u8C61\u8CDE\u971C\u585E\u74BD\u8CFD\u55C7\uF96C\u7A61\u7D22\u8272\u7272\u751F\u7525\uF96D\u7B19\u5885\u58FB\u5DBC\u5E8F\u5EB6\u5F90\u6055\u6292\u637F\u654D\u6691\u66D9\u66F8\u6816\u68F2\u7280\u745E\u7B6E\u7D6E\u7DD6\u7F72\uFFFD".split("");
      for (j = 0; j != D[223].length; ++j)
        if (D[223][j].charCodeAt(0) !== 65533) {
          e[D[223][j]] = 57088 + j;
          d[57088 + j] = D[223][j];
        }
      D[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u80E5\u8212\u85AF\u897F\u8A93\u901D\u92E4\u9ECD\u9F20\u5915\u596D\u5E2D\u60DC\u6614\u6673\u6790\u6C50\u6DC5\u6F5F\u77F3\u78A9\u84C6\u91CB\u932B\u4ED9\u50CA\u5148\u5584\u5B0B\u5BA3\u6247\u657E\u65CB\u6E32\u717D\u7401\u7444\u7487\u74BF\u766C\u79AA\u7DDA\u7E55\u7FA8\u817A\u81B3\u8239\u861A\u87EC\u8A75\u8DE3\u9078\u9291\u9425\u994D\u9BAE\u5368\u5C51\u6954\u6CC4\u6D29\u6E2B\u820C\u859B\u893B\u8A2D\u8AAA\u96EA\u9F67\u5261\u66B9\u6BB2\u7E96\u87FE\u8D0D\u9583\u965D\u651D\u6D89\u71EE\uF96E\u57CE\u59D3\u5BAC\u6027\u60FA\u6210\u661F\u665F\u7329\u73F9\u76DB\u7701\u7B6C\uFFFD".split("");
      for (j = 0; j != D[224].length; ++j)
        if (D[224][j].charCodeAt(0) !== 65533) {
          e[D[224][j]] = 57344 + j;
          d[57344 + j] = D[224][j];
        }
      D[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8056\u8072\u8165\u8AA0\u9192\u4E16\u52E2\u6B72\u6D17\u7A05\u7B39\u7D30\uF96F\u8CB0\u53EC\u562F\u5851\u5BB5\u5C0F\u5C11\u5DE2\u6240\u6383\u6414\u662D\u68B3\u6CBC\u6D88\u6EAF\u701F\u70A4\u71D2\u7526\u758F\u758E\u7619\u7B11\u7BE0\u7C2B\u7D20\u7D39\u852C\u856D\u8607\u8A34\u900D\u9061\u90B5\u92B7\u97F6\u9A37\u4FD7\u5C6C\u675F\u6D91\u7C9F\u7E8C\u8B16\u8D16\u901F\u5B6B\u5DFD\u640D\u84C0\u905C\u98E1\u7387\u5B8B\u609A\u677E\u6DDE\u8A1F\u8AA6\u9001\u980C\u5237\uF970\u7051\u788E\u9396\u8870\u91D7\u4FEE\u53D7\u55FD\u56DA\u5782\u58FD\u5AC2\u5B88\u5CAB\u5CC0\u5E25\u6101\uFFFD".split("");
      for (j = 0; j != D[225].length; ++j)
        if (D[225][j].charCodeAt(0) !== 65533) {
          e[D[225][j]] = 57600 + j;
          d[57600 + j] = D[225][j];
        }
      D[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u620D\u624B\u6388\u641C\u6536\u6578\u6A39\u6B8A\u6C34\u6D19\u6F31\u71E7\u72E9\u7378\u7407\u74B2\u7626\u7761\u79C0\u7A57\u7AEA\u7CB9\u7D8F\u7DAC\u7E61\u7F9E\u8129\u8331\u8490\u84DA\u85EA\u8896\u8AB0\u8B90\u8F38\u9042\u9083\u916C\u9296\u92B9\u968B\u96A7\u96A8\u96D6\u9700\u9808\u9996\u9AD3\u9B1A\u53D4\u587E\u5919\u5B70\u5BBF\u6DD1\u6F5A\u719F\u7421\u74B9\u8085\u83FD\u5DE1\u5F87\u5FAA\u6042\u65EC\u6812\u696F\u6A53\u6B89\u6D35\u6DF3\u73E3\u76FE\u77AC\u7B4D\u7D14\u8123\u821C\u8340\u84F4\u8563\u8A62\u8AC4\u9187\u931E\u9806\u99B4\u620C\u8853\u8FF0\u9265\u5D07\u5D27\uFFFD".split("");
      for (j = 0; j != D[226].length; ++j)
        if (D[226][j].charCodeAt(0) !== 65533) {
          e[D[226][j]] = 57856 + j;
          d[57856 + j] = D[226][j];
        }
      D[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5D69\u745F\u819D\u8768\u6FD5\u62FE\u7FD2\u8936\u8972\u4E1E\u4E58\u50E7\u52DD\u5347\u627F\u6607\u7E69\u8805\u965E\u4F8D\u5319\u5636\u59CB\u5AA4\u5C38\u5C4E\u5C4D\u5E02\u5F11\u6043\u65BD\u662F\u6642\u67BE\u67F4\u731C\u77E2\u793A\u7FC5\u8494\u84CD\u8996\u8A66\u8A69\u8AE1\u8C55\u8C7A\u57F4\u5BD4\u5F0F\u606F\u62ED\u690D\u6B96\u6E5C\u7184\u7BD2\u8755\u8B58\u8EFE\u98DF\u98FE\u4F38\u4F81\u4FE1\u547B\u5A20\u5BB8\u613C\u65B0\u6668\u71FC\u7533\u795E\u7D33\u814E\u81E3\u8398\u85AA\u85CE\u8703\u8A0A\u8EAB\u8F9B\uF971\u8FC5\u5931\u5BA4\u5BE6\u6089\u5BE9\u5C0B\u5FC3\u6C81\uFFFD".split("");
      for (j = 0; j != D[227].length; ++j)
        if (D[227][j].charCodeAt(0) !== 65533) {
          e[D[227][j]] = 58112 + j;
          d[58112 + j] = D[227][j];
        }
      D[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF972\u6DF1\u700B\u751A\u82AF\u8AF6\u4EC0\u5341\uF973\u96D9\u6C0F\u4E9E\u4FC4\u5152\u555E\u5A25\u5CE8\u6211\u7259\u82BD\u83AA\u86FE\u8859\u8A1D\u963F\u96C5\u9913\u9D09\u9D5D\u580A\u5CB3\u5DBD\u5E44\u60E1\u6115\u63E1\u6A02\u6E25\u9102\u9354\u984E\u9C10\u9F77\u5B89\u5CB8\u6309\u664F\u6848\u773C\u96C1\u978D\u9854\u9B9F\u65A1\u8B01\u8ECB\u95BC\u5535\u5CA9\u5DD6\u5EB5\u6697\u764C\u83F4\u95C7\u58D3\u62BC\u72CE\u9D28\u4EF0\u592E\u600F\u663B\u6B83\u79E7\u9D26\u5393\u54C0\u57C3\u5D16\u611B\u66D6\u6DAF\u788D\u827E\u9698\u9744\u5384\u627C\u6396\u6DB2\u7E0A\u814B\u984D\uFFFD".split("");
      for (j = 0; j != D[228].length; ++j)
        if (D[228][j].charCodeAt(0) !== 65533) {
          e[D[228][j]] = 58368 + j;
          d[58368 + j] = D[228][j];
        }
      D[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6AFB\u7F4C\u9DAF\u9E1A\u4E5F\u503B\u51B6\u591C\u60F9\u63F6\u6930\u723A\u8036\uF974\u91CE\u5F31\uF975\uF976\u7D04\u82E5\u846F\u84BB\u85E5\u8E8D\uF977\u4F6F\uF978\uF979\u58E4\u5B43\u6059\u63DA\u6518\u656D\u6698\uF97A\u694A\u6A23\u6D0B\u7001\u716C\u75D2\u760D\u79B3\u7A70\uF97B\u7F8A\uF97C\u8944\uF97D\u8B93\u91C0\u967D\uF97E\u990A\u5704\u5FA1\u65BC\u6F01\u7600\u79A6\u8A9E\u99AD\u9B5A\u9F6C\u5104\u61B6\u6291\u6A8D\u81C6\u5043\u5830\u5F66\u7109\u8A00\u8AFA\u5B7C\u8616\u4FFA\u513C\u56B4\u5944\u63A9\u6DF9\u5DAA\u696D\u5186\u4E88\u4F59\uF97F\uF980\uF981\u5982\uF982\uFFFD".split("");
      for (j = 0; j != D[229].length; ++j)
        if (D[229][j].charCodeAt(0) !== 65533) {
          e[D[229][j]] = 58624 + j;
          d[58624 + j] = D[229][j];
        }
      D[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF983\u6B5F\u6C5D\uF984\u74B5\u7916\uF985\u8207\u8245\u8339\u8F3F\u8F5D\uF986\u9918\uF987\uF988\uF989\u4EA6\uF98A\u57DF\u5F79\u6613\uF98B\uF98C\u75AB\u7E79\u8B6F\uF98D\u9006\u9A5B\u56A5\u5827\u59F8\u5A1F\u5BB4\uF98E\u5EF6\uF98F\uF990\u6350\u633B\uF991\u693D\u6C87\u6CBF\u6D8E\u6D93\u6DF5\u6F14\uF992\u70DF\u7136\u7159\uF993\u71C3\u71D5\uF994\u784F\u786F\uF995\u7B75\u7DE3\uF996\u7E2F\uF997\u884D\u8EDF\uF998\uF999\uF99A\u925B\uF99B\u9CF6\uF99C\uF99D\uF99E\u6085\u6D85\uF99F\u71B1\uF9A0\uF9A1\u95B1\u53AD\uF9A2\uF9A3\uF9A4\u67D3\uF9A5\u708E\u7130\u7430\u8276\u82D2\uFFFD".split("");
      for (j = 0; j != D[230].length; ++j)
        if (D[230][j].charCodeAt(0) !== 65533) {
          e[D[230][j]] = 58880 + j;
          d[58880 + j] = D[230][j];
        }
      D[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF9A6\u95BB\u9AE5\u9E7D\u66C4\uF9A7\u71C1\u8449\uF9A8\uF9A9\u584B\uF9AA\uF9AB\u5DB8\u5F71\uF9AC\u6620\u668E\u6979\u69AE\u6C38\u6CF3\u6E36\u6F41\u6FDA\u701B\u702F\u7150\u71DF\u7370\uF9AD\u745B\uF9AE\u74D4\u76C8\u7A4E\u7E93\uF9AF\uF9B0\u82F1\u8A60\u8FCE\uF9B1\u9348\uF9B2\u9719\uF9B3\uF9B4\u4E42\u502A\uF9B5\u5208\u53E1\u66F3\u6C6D\u6FCA\u730A\u777F\u7A62\u82AE\u85DD\u8602\uF9B6\u88D4\u8A63\u8B7D\u8C6B\uF9B7\u92B3\uF9B8\u9713\u9810\u4E94\u4F0D\u4FC9\u50B2\u5348\u543E\u5433\u55DA\u5862\u58BA\u5967\u5A1B\u5BE4\u609F\uF9B9\u61CA\u6556\u65FF\u6664\u68A7\u6C5A\u6FB3\uFFFD".split("");
      for (j = 0; j != D[231].length; ++j)
        if (D[231][j].charCodeAt(0) !== 65533) {
          e[D[231][j]] = 59136 + j;
          d[59136 + j] = D[231][j];
        }
      D[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u70CF\u71AC\u7352\u7B7D\u8708\u8AA4\u9C32\u9F07\u5C4B\u6C83\u7344\u7389\u923A\u6EAB\u7465\u761F\u7A69\u7E15\u860A\u5140\u58C5\u64C1\u74EE\u7515\u7670\u7FC1\u9095\u96CD\u9954\u6E26\u74E6\u7AA9\u7AAA\u81E5\u86D9\u8778\u8A1B\u5A49\u5B8C\u5B9B\u68A1\u6900\u6D63\u73A9\u7413\u742C\u7897\u7DE9\u7FEB\u8118\u8155\u839E\u8C4C\u962E\u9811\u66F0\u5F80\u65FA\u6789\u6C6A\u738B\u502D\u5A03\u6B6A\u77EE\u5916\u5D6C\u5DCD\u7325\u754F\uF9BA\uF9BB\u50E5\u51F9\u582F\u592D\u5996\u59DA\u5BE5\uF9BC\uF9BD\u5DA2\u62D7\u6416\u6493\u64FE\uF9BE\u66DC\uF9BF\u6A48\uF9C0\u71FF\u7464\uF9C1\uFFFD".split("");
      for (j = 0; j != D[232].length; ++j)
        if (D[232][j].charCodeAt(0) !== 65533) {
          e[D[232][j]] = 59392 + j;
          d[59392 + j] = D[232][j];
        }
      D[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A88\u7AAF\u7E47\u7E5E\u8000\u8170\uF9C2\u87EF\u8981\u8B20\u9059\uF9C3\u9080\u9952\u617E\u6B32\u6D74\u7E1F\u8925\u8FB1\u4FD1\u50AD\u5197\u52C7\u57C7\u5889\u5BB9\u5EB8\u6142\u6995\u6D8C\u6E67\u6EB6\u7194\u7462\u7528\u752C\u8073\u8338\u84C9\u8E0A\u9394\u93DE\uF9C4\u4E8E\u4F51\u5076\u512A\u53C8\u53CB\u53F3\u5B87\u5BD3\u5C24\u611A\u6182\u65F4\u725B\u7397\u7440\u76C2\u7950\u7991\u79B9\u7D06\u7FBD\u828B\u85D5\u865E\u8FC2\u9047\u90F5\u91EA\u9685\u96E8\u96E9\u52D6\u5F67\u65ED\u6631\u682F\u715C\u7A36\u90C1\u980A\u4E91\uF9C5\u6A52\u6B9E\u6F90\u7189\u8018\u82B8\u8553\uFFFD".split("");
      for (j = 0; j != D[233].length; ++j)
        if (D[233][j].charCodeAt(0) !== 65533) {
          e[D[233][j]] = 59648 + j;
          d[59648 + j] = D[233][j];
        }
      D[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u904B\u9695\u96F2\u97FB\u851A\u9B31\u4E90\u718A\u96C4\u5143\u539F\u54E1\u5713\u5712\u57A3\u5A9B\u5AC4\u5BC3\u6028\u613F\u63F4\u6C85\u6D39\u6E72\u6E90\u7230\u733F\u7457\u82D1\u8881\u8F45\u9060\uF9C6\u9662\u9858\u9D1B\u6708\u8D8A\u925E\u4F4D\u5049\u50DE\u5371\u570D\u59D4\u5A01\u5C09\u6170\u6690\u6E2D\u7232\u744B\u7DEF\u80C3\u840E\u8466\u853F\u875F\u885B\u8918\u8B02\u9055\u97CB\u9B4F\u4E73\u4F91\u5112\u516A\uF9C7\u552F\u55A9\u5B7A\u5BA5\u5E7C\u5E7D\u5EBE\u60A0\u60DF\u6108\u6109\u63C4\u6538\u6709\uF9C8\u67D4\u67DA\uF9C9\u6961\u6962\u6CB9\u6D27\uF9CA\u6E38\uF9CB\uFFFD".split("");
      for (j = 0; j != D[234].length; ++j)
        if (D[234][j].charCodeAt(0) !== 65533) {
          e[D[234][j]] = 59904 + j;
          d[59904 + j] = D[234][j];
        }
      D[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FE1\u7336\u7337\uF9CC\u745C\u7531\uF9CD\u7652\uF9CE\uF9CF\u7DAD\u81FE\u8438\u88D5\u8A98\u8ADB\u8AED\u8E30\u8E42\u904A\u903E\u907A\u9149\u91C9\u936E\uF9D0\uF9D1\u5809\uF9D2\u6BD3\u8089\u80B2\uF9D3\uF9D4\u5141\u596B\u5C39\uF9D5\uF9D6\u6F64\u73A7\u80E4\u8D07\uF9D7\u9217\u958F\uF9D8\uF9D9\uF9DA\uF9DB\u807F\u620E\u701C\u7D68\u878D\uF9DC\u57A0\u6069\u6147\u6BB7\u8ABE\u9280\u96B1\u4E59\u541F\u6DEB\u852D\u9670\u97F3\u98EE\u63D6\u6CE3\u9091\u51DD\u61C9\u81BA\u9DF9\u4F9D\u501A\u5100\u5B9C\u610F\u61FF\u64EC\u6905\u6BC5\u7591\u77E3\u7FA9\u8264\u858F\u87FB\u8863\u8ABC\uFFFD".split("");
      for (j = 0; j != D[235].length; ++j)
        if (D[235][j].charCodeAt(0) !== 65533) {
          e[D[235][j]] = 60160 + j;
          d[60160 + j] = D[235][j];
        }
      D[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B70\u91AB\u4E8C\u4EE5\u4F0A\uF9DD\uF9DE\u5937\u59E8\uF9DF\u5DF2\u5F1B\u5F5B\u6021\uF9E0\uF9E1\uF9E2\uF9E3\u723E\u73E5\uF9E4\u7570\u75CD\uF9E5\u79FB\uF9E6\u800C\u8033\u8084\u82E1\u8351\uF9E7\uF9E8\u8CBD\u8CB3\u9087\uF9E9\uF9EA\u98F4\u990C\uF9EB\uF9EC\u7037\u76CA\u7FCA\u7FCC\u7FFC\u8B1A\u4EBA\u4EC1\u5203\u5370\uF9ED\u54BD\u56E0\u59FB\u5BC5\u5F15\u5FCD\u6E6E\uF9EE\uF9EF\u7D6A\u8335\uF9F0\u8693\u8A8D\uF9F1\u976D\u9777\uF9F2\uF9F3\u4E00\u4F5A\u4F7E\u58F9\u65E5\u6EA2\u9038\u93B0\u99B9\u4EFB\u58EC\u598A\u59D9\u6041\uF9F4\uF9F5\u7A14\uF9F6\u834F\u8CC3\u5165\u5344\uFFFD".split("");
      for (j = 0; j != D[236].length; ++j)
        if (D[236][j].charCodeAt(0) !== 65533) {
          e[D[236][j]] = 60416 + j;
          d[60416 + j] = D[236][j];
        }
      D[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF9F7\uF9F8\uF9F9\u4ECD\u5269\u5B55\u82BF\u4ED4\u523A\u54A8\u59C9\u59FF\u5B50\u5B57\u5B5C\u6063\u6148\u6ECB\u7099\u716E\u7386\u74F7\u75B5\u78C1\u7D2B\u8005\u81EA\u8328\u8517\u85C9\u8AEE\u8CC7\u96CC\u4F5C\u52FA\u56BC\u65AB\u6628\u707C\u70B8\u7235\u7DBD\u828D\u914C\u96C0\u9D72\u5B71\u68E7\u6B98\u6F7A\u76DE\u5C91\u66AB\u6F5B\u7BB4\u7C2A\u8836\u96DC\u4E08\u4ED7\u5320\u5834\u58BB\u58EF\u596C\u5C07\u5E33\u5E84\u5F35\u638C\u66B2\u6756\u6A1F\u6AA3\u6B0C\u6F3F\u7246\uF9FA\u7350\u748B\u7AE0\u7CA7\u8178\u81DF\u81E7\u838A\u846C\u8523\u8594\u85CF\u88DD\u8D13\u91AC\u9577\uFFFD".split("");
      for (j = 0; j != D[237].length; ++j)
        if (D[237][j].charCodeAt(0) !== 65533) {
          e[D[237][j]] = 60672 + j;
          d[60672 + j] = D[237][j];
        }
      D[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u969C\u518D\u54C9\u5728\u5BB0\u624D\u6750\u683D\u6893\u6E3D\u6ED3\u707D\u7E21\u88C1\u8CA1\u8F09\u9F4B\u9F4E\u722D\u7B8F\u8ACD\u931A\u4F47\u4F4E\u5132\u5480\u59D0\u5E95\u62B5\u6775\u696E\u6A17\u6CAE\u6E1A\u72D9\u732A\u75BD\u7BB8\u7D35\u82E7\u83F9\u8457\u85F7\u8A5B\u8CAF\u8E87\u9019\u90B8\u96CE\u9F5F\u52E3\u540A\u5AE1\u5BC2\u6458\u6575\u6EF4\u72C4\uF9FB\u7684\u7A4D\u7B1B\u7C4D\u7E3E\u7FDF\u837B\u8B2B\u8CCA\u8D64\u8DE1\u8E5F\u8FEA\u8FF9\u9069\u93D1\u4F43\u4F7A\u50B3\u5168\u5178\u524D\u526A\u5861\u587C\u5960\u5C08\u5C55\u5EDB\u609B\u6230\u6813\u6BBF\u6C08\u6FB1\uFFFD".split("");
      for (j = 0; j != D[238].length; ++j)
        if (D[238][j].charCodeAt(0) !== 65533) {
          e[D[238][j]] = 60928 + j;
          d[60928 + j] = D[238][j];
        }
      D[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u714E\u7420\u7530\u7538\u7551\u7672\u7B4C\u7B8B\u7BAD\u7BC6\u7E8F\u8A6E\u8F3E\u8F49\u923F\u9293\u9322\u942B\u96FB\u985A\u986B\u991E\u5207\u622A\u6298\u6D59\u7664\u7ACA\u7BC0\u7D76\u5360\u5CBE\u5E97\u6F38\u70B9\u7C98\u9711\u9B8E\u9EDE\u63A5\u647A\u8776\u4E01\u4E95\u4EAD\u505C\u5075\u5448\u59C3\u5B9A\u5E40\u5EAD\u5EF7\u5F81\u60C5\u633A\u653F\u6574\u65CC\u6676\u6678\u67FE\u6968\u6A89\u6B63\u6C40\u6DC0\u6DE8\u6E1F\u6E5E\u701E\u70A1\u738E\u73FD\u753A\u775B\u7887\u798E\u7A0B\u7A7D\u7CBE\u7D8E\u8247\u8A02\u8AEA\u8C9E\u912D\u914A\u91D8\u9266\u92CC\u9320\u9706\u9756\uFFFD".split("");
      for (j = 0; j != D[239].length; ++j)
        if (D[239][j].charCodeAt(0) !== 65533) {
          e[D[239][j]] = 61184 + j;
          d[61184 + j] = D[239][j];
        }
      D[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u975C\u9802\u9F0E\u5236\u5291\u557C\u5824\u5E1D\u5F1F\u608C\u63D0\u68AF\u6FDF\u796D\u7B2C\u81CD\u85BA\u88FD\u8AF8\u8E44\u918D\u9664\u969B\u973D\u984C\u9F4A\u4FCE\u5146\u51CB\u52A9\u5632\u5F14\u5F6B\u63AA\u64CD\u65E9\u6641\u66FA\u66F9\u671D\u689D\u68D7\u69FD\u6F15\u6F6E\u7167\u71E5\u722A\u74AA\u773A\u7956\u795A\u79DF\u7A20\u7A95\u7C97\u7CDF\u7D44\u7E70\u8087\u85FB\u86A4\u8A54\u8ABF\u8D99\u8E81\u9020\u906D\u91E3\u963B\u96D5\u9CE5\u65CF\u7C07\u8DB3\u93C3\u5B58\u5C0A\u5352\u62D9\u731D\u5027\u5B97\u5F9E\u60B0\u616B\u68D5\u6DD9\u742E\u7A2E\u7D42\u7D9C\u7E31\u816B\uFFFD".split("");
      for (j = 0; j != D[240].length; ++j)
        if (D[240][j].charCodeAt(0) !== 65533) {
          e[D[240][j]] = 61440 + j;
          d[61440 + j] = D[240][j];
        }
      D[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E2A\u8E35\u937E\u9418\u4F50\u5750\u5DE6\u5EA7\u632B\u7F6A\u4E3B\u4F4F\u4F8F\u505A\u59DD\u80C4\u546A\u5468\u55FE\u594F\u5B99\u5DDE\u5EDA\u665D\u6731\u67F1\u682A\u6CE8\u6D32\u6E4A\u6F8D\u70B7\u73E0\u7587\u7C4C\u7D02\u7D2C\u7DA2\u821F\u86DB\u8A3B\u8A85\u8D70\u8E8A\u8F33\u9031\u914E\u9152\u9444\u99D0\u7AF9\u7CA5\u4FCA\u5101\u51C6\u57C8\u5BEF\u5CFB\u6659\u6A3D\u6D5A\u6E96\u6FEC\u710C\u756F\u7AE3\u8822\u9021\u9075\u96CB\u99FF\u8301\u4E2D\u4EF2\u8846\u91CD\u537D\u6ADB\u696B\u6C41\u847A\u589E\u618E\u66FE\u62EF\u70DD\u7511\u75C7\u7E52\u84B8\u8B49\u8D08\u4E4B\u53EA\uFFFD".split("");
      for (j = 0; j != D[241].length; ++j)
        if (D[241][j].charCodeAt(0) !== 65533) {
          e[D[241][j]] = 61696 + j;
          d[61696 + j] = D[241][j];
        }
      D[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54AB\u5730\u5740\u5FD7\u6301\u6307\u646F\u652F\u65E8\u667A\u679D\u67B3\u6B62\u6C60\u6C9A\u6F2C\u77E5\u7825\u7949\u7957\u7D19\u80A2\u8102\u81F3\u829D\u82B7\u8718\u8A8C\uF9FC\u8D04\u8DBE\u9072\u76F4\u7A19\u7A37\u7E54\u8077\u5507\u55D4\u5875\u632F\u6422\u6649\u664B\u686D\u699B\u6B84\u6D25\u6EB1\u73CD\u7468\u74A1\u755B\u75B9\u76E1\u771E\u778B\u79E6\u7E09\u7E1D\u81FB\u852F\u8897\u8A3A\u8CD1\u8EEB\u8FB0\u9032\u93AD\u9663\u9673\u9707\u4F84\u53F1\u59EA\u5AC9\u5E19\u684E\u74C6\u75BE\u79E9\u7A92\u81A3\u86ED\u8CEA\u8DCC\u8FED\u659F\u6715\uF9FD\u57F7\u6F57\u7DDD\u8F2F\uFFFD".split("");
      for (j = 0; j != D[242].length; ++j)
        if (D[242][j].charCodeAt(0) !== 65533) {
          e[D[242][j]] = 61952 + j;
          d[61952 + j] = D[242][j];
        }
      D[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93F6\u96C6\u5FB5\u61F2\u6F84\u4E14\u4F98\u501F\u53C9\u55DF\u5D6F\u5DEE\u6B21\u6B64\u78CB\u7B9A\uF9FE\u8E49\u8ECA\u906E\u6349\u643E\u7740\u7A84\u932F\u947F\u9F6A\u64B0\u6FAF\u71E6\u74A8\u74DA\u7AC4\u7C12\u7E82\u7CB2\u7E98\u8B9A\u8D0A\u947D\u9910\u994C\u5239\u5BDF\u64E6\u672D\u7D2E\u50ED\u53C3\u5879\u6158\u6159\u61FA\u65AC\u7AD9\u8B92\u8B96\u5009\u5021\u5275\u5531\u5A3C\u5EE0\u5F70\u6134\u655E\u660C\u6636\u66A2\u69CD\u6EC4\u6F32\u7316\u7621\u7A93\u8139\u8259\u83D6\u84BC\u50B5\u57F0\u5BC0\u5BE8\u5F69\u63A1\u7826\u7DB5\u83DC\u8521\u91C7\u91F5\u518A\u67F5\u7B56\uFFFD".split("");
      for (j = 0; j != D[243].length; ++j)
        if (D[243][j].charCodeAt(0) !== 65533) {
          e[D[243][j]] = 62208 + j;
          d[62208 + j] = D[243][j];
        }
      D[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8CAC\u51C4\u59BB\u60BD\u8655\u501C\uF9FF\u5254\u5C3A\u617D\u621A\u62D3\u64F2\u65A5\u6ECC\u7620\u810A\u8E60\u965F\u96BB\u4EDF\u5343\u5598\u5929\u5DDD\u64C5\u6CC9\u6DFA\u7394\u7A7F\u821B\u85A6\u8CE4\u8E10\u9077\u91E7\u95E1\u9621\u97C6\u51F8\u54F2\u5586\u5FB9\u64A4\u6F88\u7DB4\u8F1F\u8F4D\u9435\u50C9\u5C16\u6CBE\u6DFB\u751B\u77BB\u7C3D\u7C64\u8A79\u8AC2\u581E\u59BE\u5E16\u6377\u7252\u758A\u776B\u8ADC\u8CBC\u8F12\u5EF3\u6674\u6DF8\u807D\u83C1\u8ACB\u9751\u9BD6\uFA00\u5243\u66FF\u6D95\u6EEF\u7DE0\u8AE6\u902E\u905E\u9AD4\u521D\u527F\u54E8\u6194\u6284\u62DB\u68A2\uFFFD".split("");
      for (j = 0; j != D[244].length; ++j)
        if (D[244][j].charCodeAt(0) !== 65533) {
          e[D[244][j]] = 62464 + j;
          d[62464 + j] = D[244][j];
        }
      D[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6912\u695A\u6A35\u7092\u7126\u785D\u7901\u790E\u79D2\u7A0D\u8096\u8278\u82D5\u8349\u8549\u8C82\u8D85\u9162\u918B\u91AE\u4FC3\u56D1\u71ED\u77D7\u8700\u89F8\u5BF8\u5FD6\u6751\u90A8\u53E2\u585A\u5BF5\u60A4\u6181\u6460\u7E3D\u8070\u8525\u9283\u64AE\u50AC\u5D14\u6700\u589C\u62BD\u63A8\u690E\u6978\u6A1E\u6E6B\u76BA\u79CB\u82BB\u8429\u8ACF\u8DA8\u8FFD\u9112\u914B\u919C\u9310\u9318\u939A\u96DB\u9A36\u9C0D\u4E11\u755C\u795D\u7AFA\u7B51\u7BC9\u7E2E\u84C4\u8E59\u8E74\u8EF8\u9010\u6625\u693F\u7443\u51FA\u672E\u9EDC\u5145\u5FE0\u6C96\u87F2\u885D\u8877\u60B4\u81B5\u8403\uFFFD".split("");
      for (j = 0; j != D[245].length; ++j)
        if (D[245][j].charCodeAt(0) !== 65533) {
          e[D[245][j]] = 62720 + j;
          d[62720 + j] = D[245][j];
        }
      D[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D05\u53D6\u5439\u5634\u5A36\u5C31\u708A\u7FE0\u805A\u8106\u81ED\u8DA3\u9189\u9A5F\u9DF2\u5074\u4EC4\u53A0\u60FB\u6E2C\u5C64\u4F88\u5024\u55E4\u5CD9\u5E5F\u6065\u6894\u6CBB\u6DC4\u71BE\u75D4\u75F4\u7661\u7A1A\u7A49\u7DC7\u7DFB\u7F6E\u81F4\u86A9\u8F1C\u96C9\u99B3\u9F52\u5247\u52C5\u98ED\u89AA\u4E03\u67D2\u6F06\u4FB5\u5BE2\u6795\u6C88\u6D78\u741B\u7827\u91DD\u937C\u87C4\u79E4\u7A31\u5FEB\u4ED6\u54A4\u553E\u58AE\u59A5\u60F0\u6253\u62D6\u6736\u6955\u8235\u9640\u99B1\u99DD\u502C\u5353\u5544\u577C\uFA01\u6258\uFA02\u64E2\u666B\u67DD\u6FC1\u6FEF\u7422\u7438\u8A17\uFFFD".split("");
      for (j = 0; j != D[246].length; ++j)
        if (D[246][j].charCodeAt(0) !== 65533) {
          e[D[246][j]] = 62976 + j;
          d[62976 + j] = D[246][j];
        }
      D[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9438\u5451\u5606\u5766\u5F48\u619A\u6B4E\u7058\u70AD\u7DBB\u8A95\u596A\u812B\u63A2\u7708\u803D\u8CAA\u5854\u642D\u69BB\u5B95\u5E11\u6E6F\uFA03\u8569\u514C\u53F0\u592A\u6020\u614B\u6B86\u6C70\u6CF0\u7B1E\u80CE\u82D4\u8DC6\u90B0\u98B1\uFA04\u64C7\u6FA4\u6491\u6504\u514E\u5410\u571F\u8A0E\u615F\u6876\uFA05\u75DB\u7B52\u7D71\u901A\u5806\u69CC\u817F\u892A\u9000\u9839\u5078\u5957\u59AC\u6295\u900F\u9B2A\u615D\u7279\u95D6\u5761\u5A46\u5DF4\u628A\u64AD\u64FA\u6777\u6CE2\u6D3E\u722C\u7436\u7834\u7F77\u82AD\u8DDB\u9817\u5224\u5742\u677F\u7248\u74E3\u8CA9\u8FA6\u9211\uFFFD".split("");
      for (j = 0; j != D[247].length; ++j)
        if (D[247][j].charCodeAt(0) !== 65533) {
          e[D[247][j]] = 63232 + j;
          d[63232 + j] = D[247][j];
        }
      D[248] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u962A\u516B\u53ED\u634C\u4F69\u5504\u6096\u6557\u6C9B\u6D7F\u724C\u72FD\u7A17\u8987\u8C9D\u5F6D\u6F8E\u70F9\u81A8\u610E\u4FBF\u504F\u6241\u7247\u7BC7\u7DE8\u7FE9\u904D\u97AD\u9A19\u8CB6\u576A\u5E73\u67B0\u840D\u8A55\u5420\u5B16\u5E63\u5EE2\u5F0A\u6583\u80BA\u853D\u9589\u965B\u4F48\u5305\u530D\u530F\u5486\u54FA\u5703\u5E03\u6016\u629B\u62B1\u6355\uFA06\u6CE1\u6D66\u75B1\u7832\u80DE\u812F\u82DE\u8461\u84B2\u888D\u8912\u900B\u92EA\u98FD\u9B91\u5E45\u66B4\u66DD\u7011\u7206\uFA07\u4FF5\u527D\u5F6A\u6153\u6753\u6A19\u6F02\u74E2\u7968\u8868\u8C79\u98C7\u98C4\u9A43\uFFFD".split("");
      for (j = 0; j != D[248].length; ++j)
        if (D[248][j].charCodeAt(0) !== 65533) {
          e[D[248][j]] = 63488 + j;
          d[63488 + j] = D[248][j];
        }
      D[249] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C1\u7A1F\u6953\u8AF7\u8C4A\u98A8\u99AE\u5F7C\u62AB\u75B2\u76AE\u88AB\u907F\u9642\u5339\u5F3C\u5FC5\u6CCC\u73CC\u7562\u758B\u7B46\u82FE\u999D\u4E4F\u903C\u4E0B\u4F55\u53A6\u590F\u5EC8\u6630\u6CB3\u7455\u8377\u8766\u8CC0\u9050\u971E\u9C15\u58D1\u5B78\u8650\u8B14\u9DB4\u5BD2\u6068\u608D\u65F1\u6C57\u6F22\u6FA3\u701A\u7F55\u7FF0\u9591\u9592\u9650\u97D3\u5272\u8F44\u51FD\u542B\u54B8\u5563\u558A\u6ABB\u6DB5\u7DD8\u8266\u929C\u9677\u9E79\u5408\u54C8\u76D2\u86E4\u95A4\u95D4\u965C\u4EA2\u4F09\u59EE\u5AE6\u5DF7\u6052\u6297\u676D\u6841\u6C86\u6E2F\u7F38\u809B\u822A\uFFFD".split("");
      for (j = 0; j != D[249].length; ++j)
        if (D[249][j].charCodeAt(0) !== 65533) {
          e[D[249][j]] = 63744 + j;
          d[63744 + j] = D[249][j];
        }
      D[250] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFA08\uFA09\u9805\u4EA5\u5055\u54B3\u5793\u595A\u5B69\u5BB3\u61C8\u6977\u6D77\u7023\u87F9\u89E3\u8A72\u8AE7\u9082\u99ED\u9AB8\u52BE\u6838\u5016\u5E78\u674F\u8347\u884C\u4EAB\u5411\u56AE\u73E6\u9115\u97FF\u9909\u9957\u9999\u5653\u589F\u865B\u8A31\u61B2\u6AF6\u737B\u8ED2\u6B47\u96AA\u9A57\u5955\u7200\u8D6B\u9769\u4FD4\u5CF4\u5F26\u61F8\u665B\u6CEB\u70AB\u7384\u73B9\u73FE\u7729\u774D\u7D43\u7D62\u7E23\u8237\u8852\uFA0A\u8CE2\u9249\u986F\u5B51\u7A74\u8840\u9801\u5ACC\u4FE0\u5354\u593E\u5CFD\u633E\u6D79\u72F9\u8105\u8107\u83A2\u92CF\u9830\u4EA8\u5144\u5211\u578B\uFFFD".split("");
      for (j = 0; j != D[250].length; ++j)
        if (D[250][j].charCodeAt(0) !== 65533) {
          e[D[250][j]] = 64e3 + j;
          d[64e3 + j] = D[250][j];
        }
      D[251] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F62\u6CC2\u6ECE\u7005\u7050\u70AF\u7192\u73E9\u7469\u834A\u87A2\u8861\u9008\u90A2\u93A3\u99A8\u516E\u5F57\u60E0\u6167\u66B3\u8559\u8E4A\u91AF\u978B\u4E4E\u4E92\u547C\u58D5\u58FA\u597D\u5CB5\u5F27\u6236\u6248\u660A\u6667\u6BEB\u6D69\u6DCF\u6E56\u6EF8\u6F94\u6FE0\u6FE9\u705D\u72D0\u7425\u745A\u74E0\u7693\u795C\u7CCA\u7E1E\u80E1\u82A6\u846B\u84BF\u864E\u865F\u8774\u8B77\u8C6A\u93AC\u9800\u9865\u60D1\u6216\u9177\u5A5A\u660F\u6DF7\u6E3E\u743F\u9B42\u5FFD\u60DA\u7B0F\u54C4\u5F18\u6C5E\u6CD3\u6D2A\u70D8\u7D05\u8679\u8A0C\u9D3B\u5316\u548C\u5B05\u6A3A\u706B\u7575\uFFFD".split("");
      for (j = 0; j != D[251].length; ++j)
        if (D[251][j].charCodeAt(0) !== 65533) {
          e[D[251][j]] = 64256 + j;
          d[64256 + j] = D[251][j];
        }
      D[252] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u798D\u79BE\u82B1\u83EF\u8A71\u8B41\u8CA8\u9774\uFA0B\u64F4\u652B\u78BA\u78BB\u7A6B\u4E38\u559A\u5950\u5BA6\u5E7B\u60A3\u63DB\u6B61\u6665\u6853\u6E19\u7165\u74B0\u7D08\u9084\u9A69\u9C25\u6D3B\u6ED1\u733E\u8C41\u95CA\u51F0\u5E4C\u5FA8\u604D\u60F6\u6130\u614C\u6643\u6644\u69A5\u6CC1\u6E5F\u6EC9\u6F62\u714C\u749C\u7687\u7BC1\u7C27\u8352\u8757\u9051\u968D\u9EC3\u532F\u56DE\u5EFB\u5F8A\u6062\u6094\u61F7\u6666\u6703\u6A9C\u6DEE\u6FAE\u7070\u736A\u7E6A\u81BE\u8334\u86D4\u8AA8\u8CC4\u5283\u7372\u5B96\u6A6B\u9404\u54EE\u5686\u5B5D\u6548\u6585\u66C9\u689F\u6D8D\u6DC6\uFFFD".split("");
      for (j = 0; j != D[252].length; ++j)
        if (D[252][j].charCodeAt(0) !== 65533) {
          e[D[252][j]] = 64512 + j;
          d[64512 + j] = D[252][j];
        }
      D[253] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u723B\u80B4\u9175\u9A4D\u4FAF\u5019\u539A\u540E\u543C\u5589\u55C5\u5E3F\u5F8C\u673D\u7166\u73DD\u9005\u52DB\u52F3\u5864\u58CE\u7104\u718F\u71FB\u85B0\u8A13\u6688\u85A8\u55A7\u6684\u714A\u8431\u5349\u5599\u6BC1\u5F59\u5FBD\u63EE\u6689\u7147\u8AF1\u8F1D\u9EBE\u4F11\u643A\u70CB\u7566\u8667\u6064\u8B4E\u9DF8\u5147\u51F6\u5308\u6D36\u80F8\u9ED1\u6615\u6B23\u7098\u75D5\u5403\u5C79\u7D07\u8A16\u6B20\u6B3D\u6B46\u5438\u6070\u6D3D\u7FD5\u8208\u50D6\u51DE\u559C\u566B\u56CD\u59EC\u5B09\u5E0C\u6199\u6198\u6231\u665E\u66E6\u7199\u71B9\u71BA\u72A7\u79A7\u7A00\u7FB2\u8A70\uFFFD".split("");
      for (j = 0; j != D[253].length; ++j)
        if (D[253][j].charCodeAt(0) !== 65533) {
          e[D[253][j]] = 64768 + j;
          d[64768 + j] = D[253][j];
        }
      return { "enc": e, "dec": d };
    }();
    cptable2[950] = function() {
      var d = [], e = {}, D = [], j;
      D[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[0].length; ++j)
        if (D[0][j].charCodeAt(0) !== 65533) {
          e[D[0][j]] = 0 + j;
          d[0 + j] = D[0][j];
        }
      D[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\uFF0C\u3001\u3002\uFF0E\u2027\uFF1B\uFF1A\uFF1F\uFF01\uFE30\u2026\u2025\uFE50\uFE51\uFE52\xB7\uFE54\uFE55\uFE56\uFE57\uFF5C\u2013\uFE31\u2014\uFE33\u2574\uFE34\uFE4F\uFF08\uFF09\uFE35\uFE36\uFF5B\uFF5D\uFE37\uFE38\u3014\u3015\uFE39\uFE3A\u3010\u3011\uFE3B\uFE3C\u300A\u300B\uFE3D\uFE3E\u3008\u3009\uFE3F\uFE40\u300C\u300D\uFE41\uFE42\u300E\u300F\uFE43\uFE44\uFE59\uFE5A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFE5B\uFE5C\uFE5D\uFE5E\u2018\u2019\u201C\u201D\u301D\u301E\u2035\u2032\uFF03\uFF06\uFF0A\u203B\xA7\u3003\u25CB\u25CF\u25B3\u25B2\u25CE\u2606\u2605\u25C7\u25C6\u25A1\u25A0\u25BD\u25BC\u32A3\u2105\xAF\uFFE3\uFF3F\u02CD\uFE49\uFE4A\uFE4D\uFE4E\uFE4B\uFE4C\uFE5F\uFE60\uFE61\uFF0B\uFF0D\xD7\xF7\xB1\u221A\uFF1C\uFF1E\uFF1D\u2266\u2267\u2260\u221E\u2252\u2261\uFE62\uFE63\uFE64\uFE65\uFE66\uFF5E\u2229\u222A\u22A5\u2220\u221F\u22BF\u33D2\u33D1\u222B\u222E\u2235\u2234\u2640\u2642\u2295\u2299\u2191\u2193\u2190\u2192\u2196\u2197\u2199\u2198\u2225\u2223\uFF0F\uFFFD".split("");
      for (j = 0; j != D[161].length; ++j)
        if (D[161][j].charCodeAt(0) !== 65533) {
          e[D[161][j]] = 41216 + j;
          d[41216 + j] = D[161][j];
        }
      D[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF3C\u2215\uFE68\uFF04\uFFE5\u3012\uFFE0\uFFE1\uFF05\uFF20\u2103\u2109\uFE69\uFE6A\uFE6B\u33D5\u339C\u339D\u339E\u33CE\u33A1\u338E\u338F\u33C4\xB0\u5159\u515B\u515E\u515D\u5161\u5163\u55E7\u74E9\u7CCE\u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\u258F\u258E\u258D\u258C\u258B\u258A\u2589\u253C\u2534\u252C\u2524\u251C\u2594\u2500\u2502\u2595\u250C\u2510\u2514\u2518\u256D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u256E\u2570\u256F\u2550\u255E\u256A\u2561\u25E2\u25E3\u25E5\u25E4\u2571\u2572\u2573\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u3021\u3022\u3023\u3024\u3025\u3026\u3027\u3028\u3029\u5341\u5344\u5345\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFFFD".split("");
      for (j = 0; j != D[162].length; ++j)
        if (D[162][j].charCodeAt(0) !== 65533) {
          e[D[162][j]] = 41472 + j;
          d[41472 + j] = D[162][j];
        }
      D[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF57\uFF58\uFF59\uFF5A\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\u02D9\u02C9\u02CA\u02C7\u02CB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[163].length; ++j)
        if (D[163][j].charCodeAt(0) !== 65533) {
          e[D[163][j]] = 41728 + j;
          d[41728 + j] = D[163][j];
        }
      D[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E00\u4E59\u4E01\u4E03\u4E43\u4E5D\u4E86\u4E8C\u4EBA\u513F\u5165\u516B\u51E0\u5200\u5201\u529B\u5315\u5341\u535C\u53C8\u4E09\u4E0B\u4E08\u4E0A\u4E2B\u4E38\u51E1\u4E45\u4E48\u4E5F\u4E5E\u4E8E\u4EA1\u5140\u5203\u52FA\u5343\u53C9\u53E3\u571F\u58EB\u5915\u5927\u5973\u5B50\u5B51\u5B53\u5BF8\u5C0F\u5C22\u5C38\u5C71\u5DDD\u5DE5\u5DF1\u5DF2\u5DF3\u5DFE\u5E72\u5EFE\u5F0B\u5F13\u624D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E11\u4E10\u4E0D\u4E2D\u4E30\u4E39\u4E4B\u5C39\u4E88\u4E91\u4E95\u4E92\u4E94\u4EA2\u4EC1\u4EC0\u4EC3\u4EC6\u4EC7\u4ECD\u4ECA\u4ECB\u4EC4\u5143\u5141\u5167\u516D\u516E\u516C\u5197\u51F6\u5206\u5207\u5208\u52FB\u52FE\u52FF\u5316\u5339\u5348\u5347\u5345\u535E\u5384\u53CB\u53CA\u53CD\u58EC\u5929\u592B\u592A\u592D\u5B54\u5C11\u5C24\u5C3A\u5C6F\u5DF4\u5E7B\u5EFF\u5F14\u5F15\u5FC3\u6208\u6236\u624B\u624E\u652F\u6587\u6597\u65A4\u65B9\u65E5\u66F0\u6708\u6728\u6B20\u6B62\u6B79\u6BCB\u6BD4\u6BDB\u6C0F\u6C34\u706B\u722A\u7236\u723B\u7247\u7259\u725B\u72AC\u738B\u4E19\uFFFD".split("");
      for (j = 0; j != D[164].length; ++j)
        if (D[164][j].charCodeAt(0) !== 65533) {
          e[D[164][j]] = 41984 + j;
          d[41984 + j] = D[164][j];
        }
      D[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E16\u4E15\u4E14\u4E18\u4E3B\u4E4D\u4E4F\u4E4E\u4EE5\u4ED8\u4ED4\u4ED5\u4ED6\u4ED7\u4EE3\u4EE4\u4ED9\u4EDE\u5145\u5144\u5189\u518A\u51AC\u51F9\u51FA\u51F8\u520A\u52A0\u529F\u5305\u5306\u5317\u531D\u4EDF\u534A\u5349\u5361\u5360\u536F\u536E\u53BB\u53EF\u53E4\u53F3\u53EC\u53EE\u53E9\u53E8\u53FC\u53F8\u53F5\u53EB\u53E6\u53EA\u53F2\u53F1\u53F0\u53E5\u53ED\u53FB\u56DB\u56DA\u5916\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u592E\u5931\u5974\u5976\u5B55\u5B83\u5C3C\u5DE8\u5DE7\u5DE6\u5E02\u5E03\u5E73\u5E7C\u5F01\u5F18\u5F17\u5FC5\u620A\u6253\u6254\u6252\u6251\u65A5\u65E6\u672E\u672C\u672A\u672B\u672D\u6B63\u6BCD\u6C11\u6C10\u6C38\u6C41\u6C40\u6C3E\u72AF\u7384\u7389\u74DC\u74E6\u7518\u751F\u7528\u7529\u7530\u7531\u7532\u7533\u758B\u767D\u76AE\u76BF\u76EE\u77DB\u77E2\u77F3\u793A\u79BE\u7A74\u7ACB\u4E1E\u4E1F\u4E52\u4E53\u4E69\u4E99\u4EA4\u4EA6\u4EA5\u4EFF\u4F09\u4F19\u4F0A\u4F15\u4F0D\u4F10\u4F11\u4F0F\u4EF2\u4EF6\u4EFB\u4EF0\u4EF3\u4EFD\u4F01\u4F0B\u5149\u5147\u5146\u5148\u5168\uFFFD".split("");
      for (j = 0; j != D[165].length; ++j)
        if (D[165][j].charCodeAt(0) !== 65533) {
          e[D[165][j]] = 42240 + j;
          d[42240 + j] = D[165][j];
        }
      D[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5171\u518D\u51B0\u5217\u5211\u5212\u520E\u5216\u52A3\u5308\u5321\u5320\u5370\u5371\u5409\u540F\u540C\u540A\u5410\u5401\u540B\u5404\u5411\u540D\u5408\u5403\u540E\u5406\u5412\u56E0\u56DE\u56DD\u5733\u5730\u5728\u572D\u572C\u572F\u5729\u5919\u591A\u5937\u5938\u5984\u5978\u5983\u597D\u5979\u5982\u5981\u5B57\u5B58\u5B87\u5B88\u5B85\u5B89\u5BFA\u5C16\u5C79\u5DDE\u5E06\u5E76\u5E74\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F0F\u5F1B\u5FD9\u5FD6\u620E\u620C\u620D\u6210\u6263\u625B\u6258\u6536\u65E9\u65E8\u65EC\u65ED\u66F2\u66F3\u6709\u673D\u6734\u6731\u6735\u6B21\u6B64\u6B7B\u6C16\u6C5D\u6C57\u6C59\u6C5F\u6C60\u6C50\u6C55\u6C61\u6C5B\u6C4D\u6C4E\u7070\u725F\u725D\u767E\u7AF9\u7C73\u7CF8\u7F36\u7F8A\u7FBD\u8001\u8003\u800C\u8012\u8033\u807F\u8089\u808B\u808C\u81E3\u81EA\u81F3\u81FC\u820C\u821B\u821F\u826E\u8272\u827E\u866B\u8840\u884C\u8863\u897F\u9621\u4E32\u4EA8\u4F4D\u4F4F\u4F47\u4F57\u4F5E\u4F34\u4F5B\u4F55\u4F30\u4F50\u4F51\u4F3D\u4F3A\u4F38\u4F43\u4F54\u4F3C\u4F46\u4F63\uFFFD".split("");
      for (j = 0; j != D[166].length; ++j)
        if (D[166][j].charCodeAt(0) !== 65533) {
          e[D[166][j]] = 42496 + j;
          d[42496 + j] = D[166][j];
        }
      D[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F5C\u4F60\u4F2F\u4F4E\u4F36\u4F59\u4F5D\u4F48\u4F5A\u514C\u514B\u514D\u5175\u51B6\u51B7\u5225\u5224\u5229\u522A\u5228\u52AB\u52A9\u52AA\u52AC\u5323\u5373\u5375\u541D\u542D\u541E\u543E\u5426\u544E\u5427\u5446\u5443\u5433\u5448\u5442\u541B\u5429\u544A\u5439\u543B\u5438\u542E\u5435\u5436\u5420\u543C\u5440\u5431\u542B\u541F\u542C\u56EA\u56F0\u56E4\u56EB\u574A\u5751\u5740\u574D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5747\u574E\u573E\u5750\u574F\u573B\u58EF\u593E\u599D\u5992\u59A8\u599E\u59A3\u5999\u5996\u598D\u59A4\u5993\u598A\u59A5\u5B5D\u5B5C\u5B5A\u5B5B\u5B8C\u5B8B\u5B8F\u5C2C\u5C40\u5C41\u5C3F\u5C3E\u5C90\u5C91\u5C94\u5C8C\u5DEB\u5E0C\u5E8F\u5E87\u5E8A\u5EF7\u5F04\u5F1F\u5F64\u5F62\u5F77\u5F79\u5FD8\u5FCC\u5FD7\u5FCD\u5FF1\u5FEB\u5FF8\u5FEA\u6212\u6211\u6284\u6297\u6296\u6280\u6276\u6289\u626D\u628A\u627C\u627E\u6279\u6273\u6292\u626F\u6298\u626E\u6295\u6293\u6291\u6286\u6539\u653B\u6538\u65F1\u66F4\u675F\u674E\u674F\u6750\u6751\u675C\u6756\u675E\u6749\u6746\u6760\uFFFD".split("");
      for (j = 0; j != D[167].length; ++j)
        if (D[167][j].charCodeAt(0) !== 65533) {
          e[D[167][j]] = 42752 + j;
          d[42752 + j] = D[167][j];
        }
      D[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6753\u6757\u6B65\u6BCF\u6C42\u6C5E\u6C99\u6C81\u6C88\u6C89\u6C85\u6C9B\u6C6A\u6C7A\u6C90\u6C70\u6C8C\u6C68\u6C96\u6C92\u6C7D\u6C83\u6C72\u6C7E\u6C74\u6C86\u6C76\u6C8D\u6C94\u6C98\u6C82\u7076\u707C\u707D\u7078\u7262\u7261\u7260\u72C4\u72C2\u7396\u752C\u752B\u7537\u7538\u7682\u76EF\u77E3\u79C1\u79C0\u79BF\u7A76\u7CFB\u7F55\u8096\u8093\u809D\u8098\u809B\u809A\u80B2\u826F\u8292\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u828B\u828D\u898B\u89D2\u8A00\u8C37\u8C46\u8C55\u8C9D\u8D64\u8D70\u8DB3\u8EAB\u8ECA\u8F9B\u8FB0\u8FC2\u8FC6\u8FC5\u8FC4\u5DE1\u9091\u90A2\u90AA\u90A6\u90A3\u9149\u91C6\u91CC\u9632\u962E\u9631\u962A\u962C\u4E26\u4E56\u4E73\u4E8B\u4E9B\u4E9E\u4EAB\u4EAC\u4F6F\u4F9D\u4F8D\u4F73\u4F7F\u4F6C\u4F9B\u4F8B\u4F86\u4F83\u4F70\u4F75\u4F88\u4F69\u4F7B\u4F96\u4F7E\u4F8F\u4F91\u4F7A\u5154\u5152\u5155\u5169\u5177\u5176\u5178\u51BD\u51FD\u523B\u5238\u5237\u523A\u5230\u522E\u5236\u5241\u52BE\u52BB\u5352\u5354\u5353\u5351\u5366\u5377\u5378\u5379\u53D6\u53D4\u53D7\u5473\u5475\uFFFD".split("");
      for (j = 0; j != D[168].length; ++j)
        if (D[168][j].charCodeAt(0) !== 65533) {
          e[D[168][j]] = 43008 + j;
          d[43008 + j] = D[168][j];
        }
      D[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5496\u5478\u5495\u5480\u547B\u5477\u5484\u5492\u5486\u547C\u5490\u5471\u5476\u548C\u549A\u5462\u5468\u548B\u547D\u548E\u56FA\u5783\u5777\u576A\u5769\u5761\u5766\u5764\u577C\u591C\u5949\u5947\u5948\u5944\u5954\u59BE\u59BB\u59D4\u59B9\u59AE\u59D1\u59C6\u59D0\u59CD\u59CB\u59D3\u59CA\u59AF\u59B3\u59D2\u59C5\u5B5F\u5B64\u5B63\u5B97\u5B9A\u5B98\u5B9C\u5B99\u5B9B\u5C1A\u5C48\u5C45\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C46\u5CB7\u5CA1\u5CB8\u5CA9\u5CAB\u5CB1\u5CB3\u5E18\u5E1A\u5E16\u5E15\u5E1B\u5E11\u5E78\u5E9A\u5E97\u5E9C\u5E95\u5E96\u5EF6\u5F26\u5F27\u5F29\u5F80\u5F81\u5F7F\u5F7C\u5FDD\u5FE0\u5FFD\u5FF5\u5FFF\u600F\u6014\u602F\u6035\u6016\u602A\u6015\u6021\u6027\u6029\u602B\u601B\u6216\u6215\u623F\u623E\u6240\u627F\u62C9\u62CC\u62C4\u62BF\u62C2\u62B9\u62D2\u62DB\u62AB\u62D3\u62D4\u62CB\u62C8\u62A8\u62BD\u62BC\u62D0\u62D9\u62C7\u62CD\u62B5\u62DA\u62B1\u62D8\u62D6\u62D7\u62C6\u62AC\u62CE\u653E\u65A7\u65BC\u65FA\u6614\u6613\u660C\u6606\u6602\u660E\u6600\u660F\u6615\u660A\uFFFD".split("");
      for (j = 0; j != D[169].length; ++j)
        if (D[169][j].charCodeAt(0) !== 65533) {
          e[D[169][j]] = 43264 + j;
          d[43264 + j] = D[169][j];
        }
      D[170] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6607\u670D\u670B\u676D\u678B\u6795\u6771\u679C\u6773\u6777\u6787\u679D\u6797\u676F\u6770\u677F\u6789\u677E\u6790\u6775\u679A\u6793\u677C\u676A\u6772\u6B23\u6B66\u6B67\u6B7F\u6C13\u6C1B\u6CE3\u6CE8\u6CF3\u6CB1\u6CCC\u6CE5\u6CB3\u6CBD\u6CBE\u6CBC\u6CE2\u6CAB\u6CD5\u6CD3\u6CB8\u6CC4\u6CB9\u6CC1\u6CAE\u6CD7\u6CC5\u6CF1\u6CBF\u6CBB\u6CE1\u6CDB\u6CCA\u6CAC\u6CEF\u6CDC\u6CD6\u6CE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7095\u708E\u7092\u708A\u7099\u722C\u722D\u7238\u7248\u7267\u7269\u72C0\u72CE\u72D9\u72D7\u72D0\u73A9\u73A8\u739F\u73AB\u73A5\u753D\u759D\u7599\u759A\u7684\u76C2\u76F2\u76F4\u77E5\u77FD\u793E\u7940\u7941\u79C9\u79C8\u7A7A\u7A79\u7AFA\u7CFE\u7F54\u7F8C\u7F8B\u8005\u80BA\u80A5\u80A2\u80B1\u80A1\u80AB\u80A9\u80B4\u80AA\u80AF\u81E5\u81FE\u820D\u82B3\u829D\u8299\u82AD\u82BD\u829F\u82B9\u82B1\u82AC\u82A5\u82AF\u82B8\u82A3\u82B0\u82BE\u82B7\u864E\u8671\u521D\u8868\u8ECB\u8FCE\u8FD4\u8FD1\u90B5\u90B8\u90B1\u90B6\u91C7\u91D1\u9577\u9580\u961C\u9640\u963F\u963B\u9644\uFFFD".split("");
      for (j = 0; j != D[170].length; ++j)
        if (D[170][j].charCodeAt(0) !== 65533) {
          e[D[170][j]] = 43520 + j;
          d[43520 + j] = D[170][j];
        }
      D[171] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9642\u96B9\u96E8\u9752\u975E\u4E9F\u4EAD\u4EAE\u4FE1\u4FB5\u4FAF\u4FBF\u4FE0\u4FD1\u4FCF\u4FDD\u4FC3\u4FB6\u4FD8\u4FDF\u4FCA\u4FD7\u4FAE\u4FD0\u4FC4\u4FC2\u4FDA\u4FCE\u4FDE\u4FB7\u5157\u5192\u5191\u51A0\u524E\u5243\u524A\u524D\u524C\u524B\u5247\u52C7\u52C9\u52C3\u52C1\u530D\u5357\u537B\u539A\u53DB\u54AC\u54C0\u54A8\u54CE\u54C9\u54B8\u54A6\u54B3\u54C7\u54C2\u54BD\u54AA\u54C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C4\u54C8\u54AF\u54AB\u54B1\u54BB\u54A9\u54A7\u54BF\u56FF\u5782\u578B\u57A0\u57A3\u57A2\u57CE\u57AE\u5793\u5955\u5951\u594F\u594E\u5950\u59DC\u59D8\u59FF\u59E3\u59E8\u5A03\u59E5\u59EA\u59DA\u59E6\u5A01\u59FB\u5B69\u5BA3\u5BA6\u5BA4\u5BA2\u5BA5\u5C01\u5C4E\u5C4F\u5C4D\u5C4B\u5CD9\u5CD2\u5DF7\u5E1D\u5E25\u5E1F\u5E7D\u5EA0\u5EA6\u5EFA\u5F08\u5F2D\u5F65\u5F88\u5F85\u5F8A\u5F8B\u5F87\u5F8C\u5F89\u6012\u601D\u6020\u6025\u600E\u6028\u604D\u6070\u6068\u6062\u6046\u6043\u606C\u606B\u606A\u6064\u6241\u62DC\u6316\u6309\u62FC\u62ED\u6301\u62EE\u62FD\u6307\u62F1\u62F7\uFFFD".split("");
      for (j = 0; j != D[171].length; ++j)
        if (D[171][j].charCodeAt(0) !== 65533) {
          e[D[171][j]] = 43776 + j;
          d[43776 + j] = D[171][j];
        }
      D[172] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62EF\u62EC\u62FE\u62F4\u6311\u6302\u653F\u6545\u65AB\u65BD\u65E2\u6625\u662D\u6620\u6627\u662F\u661F\u6628\u6631\u6624\u66F7\u67FF\u67D3\u67F1\u67D4\u67D0\u67EC\u67B6\u67AF\u67F5\u67E9\u67EF\u67C4\u67D1\u67B4\u67DA\u67E5\u67B8\u67CF\u67DE\u67F3\u67B0\u67D9\u67E2\u67DD\u67D2\u6B6A\u6B83\u6B86\u6BB5\u6BD2\u6BD7\u6C1F\u6CC9\u6D0B\u6D32\u6D2A\u6D41\u6D25\u6D0C\u6D31\u6D1E\u6D17\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D3B\u6D3D\u6D3E\u6D36\u6D1B\u6CF5\u6D39\u6D27\u6D38\u6D29\u6D2E\u6D35\u6D0E\u6D2B\u70AB\u70BA\u70B3\u70AC\u70AF\u70AD\u70B8\u70AE\u70A4\u7230\u7272\u726F\u7274\u72E9\u72E0\u72E1\u73B7\u73CA\u73BB\u73B2\u73CD\u73C0\u73B3\u751A\u752D\u754F\u754C\u754E\u754B\u75AB\u75A4\u75A5\u75A2\u75A3\u7678\u7686\u7687\u7688\u76C8\u76C6\u76C3\u76C5\u7701\u76F9\u76F8\u7709\u770B\u76FE\u76FC\u7707\u77DC\u7802\u7814\u780C\u780D\u7946\u7949\u7948\u7947\u79B9\u79BA\u79D1\u79D2\u79CB\u7A7F\u7A81\u7AFF\u7AFD\u7C7D\u7D02\u7D05\u7D00\u7D09\u7D07\u7D04\u7D06\u7F38\u7F8E\u7FBF\u8004\uFFFD".split("");
      for (j = 0; j != D[172].length; ++j)
        if (D[172][j].charCodeAt(0) !== 65533) {
          e[D[172][j]] = 44032 + j;
          d[44032 + j] = D[172][j];
        }
      D[173] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8010\u800D\u8011\u8036\u80D6\u80E5\u80DA\u80C3\u80C4\u80CC\u80E1\u80DB\u80CE\u80DE\u80E4\u80DD\u81F4\u8222\u82E7\u8303\u8305\u82E3\u82DB\u82E6\u8304\u82E5\u8302\u8309\u82D2\u82D7\u82F1\u8301\u82DC\u82D4\u82D1\u82DE\u82D3\u82DF\u82EF\u8306\u8650\u8679\u867B\u867A\u884D\u886B\u8981\u89D4\u8A08\u8A02\u8A03\u8C9E\u8CA0\u8D74\u8D73\u8DB4\u8ECD\u8ECC\u8FF0\u8FE6\u8FE2\u8FEA\u8FE5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8FED\u8FEB\u8FE4\u8FE8\u90CA\u90CE\u90C1\u90C3\u914B\u914A\u91CD\u9582\u9650\u964B\u964C\u964D\u9762\u9769\u97CB\u97ED\u97F3\u9801\u98A8\u98DB\u98DF\u9996\u9999\u4E58\u4EB3\u500C\u500D\u5023\u4FEF\u5026\u5025\u4FF8\u5029\u5016\u5006\u503C\u501F\u501A\u5012\u5011\u4FFA\u5000\u5014\u5028\u4FF1\u5021\u500B\u5019\u5018\u4FF3\u4FEE\u502D\u502A\u4FFE\u502B\u5009\u517C\u51A4\u51A5\u51A2\u51CD\u51CC\u51C6\u51CB\u5256\u525C\u5254\u525B\u525D\u532A\u537F\u539F\u539D\u53DF\u54E8\u5510\u5501\u5537\u54FC\u54E5\u54F2\u5506\u54FA\u5514\u54E9\u54ED\u54E1\u5509\u54EE\u54EA\uFFFD".split("");
      for (j = 0; j != D[173].length; ++j)
        if (D[173][j].charCodeAt(0) !== 65533) {
          e[D[173][j]] = 44288 + j;
          d[44288 + j] = D[173][j];
        }
      D[174] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54E6\u5527\u5507\u54FD\u550F\u5703\u5704\u57C2\u57D4\u57CB\u57C3\u5809\u590F\u5957\u5958\u595A\u5A11\u5A18\u5A1C\u5A1F\u5A1B\u5A13\u59EC\u5A20\u5A23\u5A29\u5A25\u5A0C\u5A09\u5B6B\u5C58\u5BB0\u5BB3\u5BB6\u5BB4\u5BAE\u5BB5\u5BB9\u5BB8\u5C04\u5C51\u5C55\u5C50\u5CED\u5CFD\u5CFB\u5CEA\u5CE8\u5CF0\u5CF6\u5D01\u5CF4\u5DEE\u5E2D\u5E2B\u5EAB\u5EAD\u5EA7\u5F31\u5F92\u5F91\u5F90\u6059\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6063\u6065\u6050\u6055\u606D\u6069\u606F\u6084\u609F\u609A\u608D\u6094\u608C\u6085\u6096\u6247\u62F3\u6308\u62FF\u634E\u633E\u632F\u6355\u6342\u6346\u634F\u6349\u633A\u6350\u633D\u632A\u632B\u6328\u634D\u634C\u6548\u6549\u6599\u65C1\u65C5\u6642\u6649\u664F\u6643\u6652\u664C\u6645\u6641\u66F8\u6714\u6715\u6717\u6821\u6838\u6848\u6846\u6853\u6839\u6842\u6854\u6829\u68B3\u6817\u684C\u6851\u683D\u67F4\u6850\u6840\u683C\u6843\u682A\u6845\u6813\u6818\u6841\u6B8A\u6B89\u6BB7\u6C23\u6C27\u6C28\u6C26\u6C24\u6CF0\u6D6A\u6D95\u6D88\u6D87\u6D66\u6D78\u6D77\u6D59\u6D93\uFFFD".split("");
      for (j = 0; j != D[174].length; ++j)
        if (D[174][j].charCodeAt(0) !== 65533) {
          e[D[174][j]] = 44544 + j;
          d[44544 + j] = D[174][j];
        }
      D[175] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D6C\u6D89\u6D6E\u6D5A\u6D74\u6D69\u6D8C\u6D8A\u6D79\u6D85\u6D65\u6D94\u70CA\u70D8\u70E4\u70D9\u70C8\u70CF\u7239\u7279\u72FC\u72F9\u72FD\u72F8\u72F7\u7386\u73ED\u7409\u73EE\u73E0\u73EA\u73DE\u7554\u755D\u755C\u755A\u7559\u75BE\u75C5\u75C7\u75B2\u75B3\u75BD\u75BC\u75B9\u75C2\u75B8\u768B\u76B0\u76CA\u76CD\u76CE\u7729\u771F\u7720\u7728\u77E9\u7830\u7827\u7838\u781D\u7834\u7837\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7825\u782D\u7820\u781F\u7832\u7955\u7950\u7960\u795F\u7956\u795E\u795D\u7957\u795A\u79E4\u79E3\u79E7\u79DF\u79E6\u79E9\u79D8\u7A84\u7A88\u7AD9\u7B06\u7B11\u7C89\u7D21\u7D17\u7D0B\u7D0A\u7D20\u7D22\u7D14\u7D10\u7D15\u7D1A\u7D1C\u7D0D\u7D19\u7D1B\u7F3A\u7F5F\u7F94\u7FC5\u7FC1\u8006\u8018\u8015\u8019\u8017\u803D\u803F\u80F1\u8102\u80F0\u8105\u80ED\u80F4\u8106\u80F8\u80F3\u8108\u80FD\u810A\u80FC\u80EF\u81ED\u81EC\u8200\u8210\u822A\u822B\u8228\u822C\u82BB\u832B\u8352\u8354\u834A\u8338\u8350\u8349\u8335\u8334\u834F\u8332\u8339\u8336\u8317\u8340\u8331\u8328\u8343\uFFFD".split("");
      for (j = 0; j != D[175].length; ++j)
        if (D[175][j].charCodeAt(0) !== 65533) {
          e[D[175][j]] = 44800 + j;
          d[44800 + j] = D[175][j];
        }
      D[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8654\u868A\u86AA\u8693\u86A4\u86A9\u868C\u86A3\u869C\u8870\u8877\u8881\u8882\u887D\u8879\u8A18\u8A10\u8A0E\u8A0C\u8A15\u8A0A\u8A17\u8A13\u8A16\u8A0F\u8A11\u8C48\u8C7A\u8C79\u8CA1\u8CA2\u8D77\u8EAC\u8ED2\u8ED4\u8ECF\u8FB1\u9001\u9006\u8FF7\u9000\u8FFA\u8FF4\u9003\u8FFD\u9005\u8FF8\u9095\u90E1\u90DD\u90E2\u9152\u914D\u914C\u91D8\u91DD\u91D7\u91DC\u91D9\u9583\u9662\u9663\u9661\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u965B\u965D\u9664\u9658\u965E\u96BB\u98E2\u99AC\u9AA8\u9AD8\u9B25\u9B32\u9B3C\u4E7E\u507A\u507D\u505C\u5047\u5043\u504C\u505A\u5049\u5065\u5076\u504E\u5055\u5075\u5074\u5077\u504F\u500F\u506F\u506D\u515C\u5195\u51F0\u526A\u526F\u52D2\u52D9\u52D8\u52D5\u5310\u530F\u5319\u533F\u5340\u533E\u53C3\u66FC\u5546\u556A\u5566\u5544\u555E\u5561\u5543\u554A\u5531\u5556\u554F\u5555\u552F\u5564\u5538\u552E\u555C\u552C\u5563\u5533\u5541\u5557\u5708\u570B\u5709\u57DF\u5805\u580A\u5806\u57E0\u57E4\u57FA\u5802\u5835\u57F7\u57F9\u5920\u5962\u5A36\u5A41\u5A49\u5A66\u5A6A\u5A40\uFFFD".split("");
      for (j = 0; j != D[176].length; ++j)
        if (D[176][j].charCodeAt(0) !== 65533) {
          e[D[176][j]] = 45056 + j;
          d[45056 + j] = D[176][j];
        }
      D[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A3C\u5A62\u5A5A\u5A46\u5A4A\u5B70\u5BC7\u5BC5\u5BC4\u5BC2\u5BBF\u5BC6\u5C09\u5C08\u5C07\u5C60\u5C5C\u5C5D\u5D07\u5D06\u5D0E\u5D1B\u5D16\u5D22\u5D11\u5D29\u5D14\u5D19\u5D24\u5D27\u5D17\u5DE2\u5E38\u5E36\u5E33\u5E37\u5EB7\u5EB8\u5EB6\u5EB5\u5EBE\u5F35\u5F37\u5F57\u5F6C\u5F69\u5F6B\u5F97\u5F99\u5F9E\u5F98\u5FA1\u5FA0\u5F9C\u607F\u60A3\u6089\u60A0\u60A8\u60CB\u60B4\u60E6\u60BD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u60C5\u60BB\u60B5\u60DC\u60BC\u60D8\u60D5\u60C6\u60DF\u60B8\u60DA\u60C7\u621A\u621B\u6248\u63A0\u63A7\u6372\u6396\u63A2\u63A5\u6377\u6367\u6398\u63AA\u6371\u63A9\u6389\u6383\u639B\u636B\u63A8\u6384\u6388\u6399\u63A1\u63AC\u6392\u638F\u6380\u637B\u6369\u6368\u637A\u655D\u6556\u6551\u6559\u6557\u555F\u654F\u6558\u6555\u6554\u659C\u659B\u65AC\u65CF\u65CB\u65CC\u65CE\u665D\u665A\u6664\u6668\u6666\u665E\u66F9\u52D7\u671B\u6881\u68AF\u68A2\u6893\u68B5\u687F\u6876\u68B1\u68A7\u6897\u68B0\u6883\u68C4\u68AD\u6886\u6885\u6894\u689D\u68A8\u689F\u68A1\u6882\u6B32\u6BBA\uFFFD".split("");
      for (j = 0; j != D[177].length; ++j)
        if (D[177][j].charCodeAt(0) !== 65533) {
          e[D[177][j]] = 45312 + j;
          d[45312 + j] = D[177][j];
        }
      D[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BEB\u6BEC\u6C2B\u6D8E\u6DBC\u6DF3\u6DD9\u6DB2\u6DE1\u6DCC\u6DE4\u6DFB\u6DFA\u6E05\u6DC7\u6DCB\u6DAF\u6DD1\u6DAE\u6DDE\u6DF9\u6DB8\u6DF7\u6DF5\u6DC5\u6DD2\u6E1A\u6DB5\u6DDA\u6DEB\u6DD8\u6DEA\u6DF1\u6DEE\u6DE8\u6DC6\u6DC4\u6DAA\u6DEC\u6DBF\u6DE6\u70F9\u7109\u710A\u70FD\u70EF\u723D\u727D\u7281\u731C\u731B\u7316\u7313\u7319\u7387\u7405\u740A\u7403\u7406\u73FE\u740D\u74E0\u74F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74F7\u751C\u7522\u7565\u7566\u7562\u7570\u758F\u75D4\u75D5\u75B5\u75CA\u75CD\u768E\u76D4\u76D2\u76DB\u7737\u773E\u773C\u7736\u7738\u773A\u786B\u7843\u784E\u7965\u7968\u796D\u79FB\u7A92\u7A95\u7B20\u7B28\u7B1B\u7B2C\u7B26\u7B19\u7B1E\u7B2E\u7C92\u7C97\u7C95\u7D46\u7D43\u7D71\u7D2E\u7D39\u7D3C\u7D40\u7D30\u7D33\u7D44\u7D2F\u7D42\u7D32\u7D31\u7F3D\u7F9E\u7F9A\u7FCC\u7FCE\u7FD2\u801C\u804A\u8046\u812F\u8116\u8123\u812B\u8129\u8130\u8124\u8202\u8235\u8237\u8236\u8239\u838E\u839E\u8398\u8378\u83A2\u8396\u83BD\u83AB\u8392\u838A\u8393\u8389\u83A0\u8377\u837B\u837C\uFFFD".split("");
      for (j = 0; j != D[178].length; ++j)
        if (D[178][j].charCodeAt(0) !== 65533) {
          e[D[178][j]] = 45568 + j;
          d[45568 + j] = D[178][j];
        }
      D[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8386\u83A7\u8655\u5F6A\u86C7\u86C0\u86B6\u86C4\u86B5\u86C6\u86CB\u86B1\u86AF\u86C9\u8853\u889E\u8888\u88AB\u8892\u8896\u888D\u888B\u8993\u898F\u8A2A\u8A1D\u8A23\u8A25\u8A31\u8A2D\u8A1F\u8A1B\u8A22\u8C49\u8C5A\u8CA9\u8CAC\u8CAB\u8CA8\u8CAA\u8CA7\u8D67\u8D66\u8DBE\u8DBA\u8EDB\u8EDF\u9019\u900D\u901A\u9017\u9023\u901F\u901D\u9010\u9015\u901E\u9020\u900F\u9022\u9016\u901B\u9014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90E8\u90ED\u90FD\u9157\u91CE\u91F5\u91E6\u91E3\u91E7\u91ED\u91E9\u9589\u966A\u9675\u9673\u9678\u9670\u9674\u9676\u9677\u966C\u96C0\u96EA\u96E9\u7AE0\u7ADF\u9802\u9803\u9B5A\u9CE5\u9E75\u9E7F\u9EA5\u9EBB\u50A2\u508D\u5085\u5099\u5091\u5080\u5096\u5098\u509A\u6700\u51F1\u5272\u5274\u5275\u5269\u52DE\u52DD\u52DB\u535A\u53A5\u557B\u5580\u55A7\u557C\u558A\u559D\u5598\u5582\u559C\u55AA\u5594\u5587\u558B\u5583\u55B3\u55AE\u559F\u553E\u55B2\u559A\u55BB\u55AC\u55B1\u557E\u5589\u55AB\u5599\u570D\u582F\u582A\u5834\u5824\u5830\u5831\u5821\u581D\u5820\u58F9\u58FA\u5960\uFFFD".split("");
      for (j = 0; j != D[179].length; ++j)
        if (D[179][j].charCodeAt(0) !== 65533) {
          e[D[179][j]] = 45824 + j;
          d[45824 + j] = D[179][j];
        }
      D[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A77\u5A9A\u5A7F\u5A92\u5A9B\u5AA7\u5B73\u5B71\u5BD2\u5BCC\u5BD3\u5BD0\u5C0A\u5C0B\u5C31\u5D4C\u5D50\u5D34\u5D47\u5DFD\u5E45\u5E3D\u5E40\u5E43\u5E7E\u5ECA\u5EC1\u5EC2\u5EC4\u5F3C\u5F6D\u5FA9\u5FAA\u5FA8\u60D1\u60E1\u60B2\u60B6\u60E0\u611C\u6123\u60FA\u6115\u60F0\u60FB\u60F4\u6168\u60F1\u610E\u60F6\u6109\u6100\u6112\u621F\u6249\u63A3\u638C\u63CF\u63C0\u63E9\u63C9\u63C6\u63CD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u63D2\u63E3\u63D0\u63E1\u63D6\u63ED\u63EE\u6376\u63F4\u63EA\u63DB\u6452\u63DA\u63F9\u655E\u6566\u6562\u6563\u6591\u6590\u65AF\u666E\u6670\u6674\u6676\u666F\u6691\u667A\u667E\u6677\u66FE\u66FF\u671F\u671D\u68FA\u68D5\u68E0\u68D8\u68D7\u6905\u68DF\u68F5\u68EE\u68E7\u68F9\u68D2\u68F2\u68E3\u68CB\u68CD\u690D\u6912\u690E\u68C9\u68DA\u696E\u68FB\u6B3E\u6B3A\u6B3D\u6B98\u6B96\u6BBC\u6BEF\u6C2E\u6C2F\u6C2C\u6E2F\u6E38\u6E54\u6E21\u6E32\u6E67\u6E4A\u6E20\u6E25\u6E23\u6E1B\u6E5B\u6E58\u6E24\u6E56\u6E6E\u6E2D\u6E26\u6E6F\u6E34\u6E4D\u6E3A\u6E2C\u6E43\u6E1D\u6E3E\u6ECB\uFFFD".split("");
      for (j = 0; j != D[180].length; ++j)
        if (D[180][j].charCodeAt(0) !== 65533) {
          e[D[180][j]] = 46080 + j;
          d[46080 + j] = D[180][j];
        }
      D[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6E89\u6E19\u6E4E\u6E63\u6E44\u6E72\u6E69\u6E5F\u7119\u711A\u7126\u7130\u7121\u7136\u716E\u711C\u724C\u7284\u7280\u7336\u7325\u7334\u7329\u743A\u742A\u7433\u7422\u7425\u7435\u7436\u7434\u742F\u741B\u7426\u7428\u7525\u7526\u756B\u756A\u75E2\u75DB\u75E3\u75D9\u75D8\u75DE\u75E0\u767B\u767C\u7696\u7693\u76B4\u76DC\u774F\u77ED\u785D\u786C\u786F\u7A0D\u7A08\u7A0B\u7A05\u7A00\u7A98\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A97\u7A96\u7AE5\u7AE3\u7B49\u7B56\u7B46\u7B50\u7B52\u7B54\u7B4D\u7B4B\u7B4F\u7B51\u7C9F\u7CA5\u7D5E\u7D50\u7D68\u7D55\u7D2B\u7D6E\u7D72\u7D61\u7D66\u7D62\u7D70\u7D73\u5584\u7FD4\u7FD5\u800B\u8052\u8085\u8155\u8154\u814B\u8151\u814E\u8139\u8146\u813E\u814C\u8153\u8174\u8212\u821C\u83E9\u8403\u83F8\u840D\u83E0\u83C5\u840B\u83C1\u83EF\u83F1\u83F4\u8457\u840A\u83F0\u840C\u83CC\u83FD\u83F2\u83CA\u8438\u840E\u8404\u83DC\u8407\u83D4\u83DF\u865B\u86DF\u86D9\u86ED\u86D4\u86DB\u86E4\u86D0\u86DE\u8857\u88C1\u88C2\u88B1\u8983\u8996\u8A3B\u8A60\u8A55\u8A5E\u8A3C\u8A41\uFFFD".split("");
      for (j = 0; j != D[181].length; ++j)
        if (D[181][j].charCodeAt(0) !== 65533) {
          e[D[181][j]] = 46336 + j;
          d[46336 + j] = D[181][j];
        }
      D[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A54\u8A5B\u8A50\u8A46\u8A34\u8A3A\u8A36\u8A56\u8C61\u8C82\u8CAF\u8CBC\u8CB3\u8CBD\u8CC1\u8CBB\u8CC0\u8CB4\u8CB7\u8CB6\u8CBF\u8CB8\u8D8A\u8D85\u8D81\u8DCE\u8DDD\u8DCB\u8DDA\u8DD1\u8DCC\u8DDB\u8DC6\u8EFB\u8EF8\u8EFC\u8F9C\u902E\u9035\u9031\u9038\u9032\u9036\u9102\u90F5\u9109\u90FE\u9163\u9165\u91CF\u9214\u9215\u9223\u9209\u921E\u920D\u9210\u9207\u9211\u9594\u958F\u958B\u9591\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9593\u9592\u958E\u968A\u968E\u968B\u967D\u9685\u9686\u968D\u9672\u9684\u96C1\u96C5\u96C4\u96C6\u96C7\u96EF\u96F2\u97CC\u9805\u9806\u9808\u98E7\u98EA\u98EF\u98E9\u98F2\u98ED\u99AE\u99AD\u9EC3\u9ECD\u9ED1\u4E82\u50AD\u50B5\u50B2\u50B3\u50C5\u50BE\u50AC\u50B7\u50BB\u50AF\u50C7\u527F\u5277\u527D\u52DF\u52E6\u52E4\u52E2\u52E3\u532F\u55DF\u55E8\u55D3\u55E6\u55CE\u55DC\u55C7\u55D1\u55E3\u55E4\u55EF\u55DA\u55E1\u55C5\u55C6\u55E5\u55C9\u5712\u5713\u585E\u5851\u5858\u5857\u585A\u5854\u586B\u584C\u586D\u584A\u5862\u5852\u584B\u5967\u5AC1\u5AC9\u5ACC\u5ABE\u5ABD\u5ABC\uFFFD".split("");
      for (j = 0; j != D[182].length; ++j)
        if (D[182][j].charCodeAt(0) !== 65533) {
          e[D[182][j]] = 46592 + j;
          d[46592 + j] = D[182][j];
        }
      D[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5AB3\u5AC2\u5AB2\u5D69\u5D6F\u5E4C\u5E79\u5EC9\u5EC8\u5F12\u5F59\u5FAC\u5FAE\u611A\u610F\u6148\u611F\u60F3\u611B\u60F9\u6101\u6108\u614E\u614C\u6144\u614D\u613E\u6134\u6127\u610D\u6106\u6137\u6221\u6222\u6413\u643E\u641E\u642A\u642D\u643D\u642C\u640F\u641C\u6414\u640D\u6436\u6416\u6417\u6406\u656C\u659F\u65B0\u6697\u6689\u6687\u6688\u6696\u6684\u6698\u668D\u6703\u6994\u696D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u695A\u6977\u6960\u6954\u6975\u6930\u6982\u694A\u6968\u696B\u695E\u6953\u6979\u6986\u695D\u6963\u695B\u6B47\u6B72\u6BC0\u6BBF\u6BD3\u6BFD\u6EA2\u6EAF\u6ED3\u6EB6\u6EC2\u6E90\u6E9D\u6EC7\u6EC5\u6EA5\u6E98\u6EBC\u6EBA\u6EAB\u6ED1\u6E96\u6E9C\u6EC4\u6ED4\u6EAA\u6EA7\u6EB4\u714E\u7159\u7169\u7164\u7149\u7167\u715C\u716C\u7166\u714C\u7165\u715E\u7146\u7168\u7156\u723A\u7252\u7337\u7345\u733F\u733E\u746F\u745A\u7455\u745F\u745E\u7441\u743F\u7459\u745B\u745C\u7576\u7578\u7600\u75F0\u7601\u75F2\u75F1\u75FA\u75FF\u75F4\u75F3\u76DE\u76DF\u775B\u776B\u7766\u775E\u7763\uFFFD".split("");
      for (j = 0; j != D[183].length; ++j)
        if (D[183][j].charCodeAt(0) !== 65533) {
          e[D[183][j]] = 46848 + j;
          d[46848 + j] = D[183][j];
        }
      D[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7779\u776A\u776C\u775C\u7765\u7768\u7762\u77EE\u788E\u78B0\u7897\u7898\u788C\u7889\u787C\u7891\u7893\u787F\u797A\u797F\u7981\u842C\u79BD\u7A1C\u7A1A\u7A20\u7A14\u7A1F\u7A1E\u7A9F\u7AA0\u7B77\u7BC0\u7B60\u7B6E\u7B67\u7CB1\u7CB3\u7CB5\u7D93\u7D79\u7D91\u7D81\u7D8F\u7D5B\u7F6E\u7F69\u7F6A\u7F72\u7FA9\u7FA8\u7FA4\u8056\u8058\u8086\u8084\u8171\u8170\u8178\u8165\u816E\u8173\u816B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8179\u817A\u8166\u8205\u8247\u8482\u8477\u843D\u8431\u8475\u8466\u846B\u8449\u846C\u845B\u843C\u8435\u8461\u8463\u8469\u846D\u8446\u865E\u865C\u865F\u86F9\u8713\u8708\u8707\u8700\u86FE\u86FB\u8702\u8703\u8706\u870A\u8859\u88DF\u88D4\u88D9\u88DC\u88D8\u88DD\u88E1\u88CA\u88D5\u88D2\u899C\u89E3\u8A6B\u8A72\u8A73\u8A66\u8A69\u8A70\u8A87\u8A7C\u8A63\u8AA0\u8A71\u8A85\u8A6D\u8A62\u8A6E\u8A6C\u8A79\u8A7B\u8A3E\u8A68\u8C62\u8C8A\u8C89\u8CCA\u8CC7\u8CC8\u8CC4\u8CB2\u8CC3\u8CC2\u8CC5\u8DE1\u8DDF\u8DE8\u8DEF\u8DF3\u8DFA\u8DEA\u8DE4\u8DE6\u8EB2\u8F03\u8F09\u8EFE\u8F0A\uFFFD".split("");
      for (j = 0; j != D[184].length; ++j)
        if (D[184][j].charCodeAt(0) !== 65533) {
          e[D[184][j]] = 47104 + j;
          d[47104 + j] = D[184][j];
        }
      D[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F9F\u8FB2\u904B\u904A\u9053\u9042\u9054\u903C\u9055\u9050\u9047\u904F\u904E\u904D\u9051\u903E\u9041\u9112\u9117\u916C\u916A\u9169\u91C9\u9237\u9257\u9238\u923D\u9240\u923E\u925B\u924B\u9264\u9251\u9234\u9249\u924D\u9245\u9239\u923F\u925A\u9598\u9698\u9694\u9695\u96CD\u96CB\u96C9\u96CA\u96F7\u96FB\u96F9\u96F6\u9756\u9774\u9776\u9810\u9811\u9813\u980A\u9812\u980C\u98FC\u98F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u98FD\u98FE\u99B3\u99B1\u99B4\u9AE1\u9CE9\u9E82\u9F0E\u9F13\u9F20\u50E7\u50EE\u50E5\u50D6\u50ED\u50DA\u50D5\u50CF\u50D1\u50F1\u50CE\u50E9\u5162\u51F3\u5283\u5282\u5331\u53AD\u55FE\u5600\u561B\u5617\u55FD\u5614\u5606\u5609\u560D\u560E\u55F7\u5616\u561F\u5608\u5610\u55F6\u5718\u5716\u5875\u587E\u5883\u5893\u588A\u5879\u5885\u587D\u58FD\u5925\u5922\u5924\u596A\u5969\u5AE1\u5AE6\u5AE9\u5AD7\u5AD6\u5AD8\u5AE3\u5B75\u5BDE\u5BE7\u5BE1\u5BE5\u5BE6\u5BE8\u5BE2\u5BE4\u5BDF\u5C0D\u5C62\u5D84\u5D87\u5E5B\u5E63\u5E55\u5E57\u5E54\u5ED3\u5ED6\u5F0A\u5F46\u5F70\u5FB9\u6147\uFFFD".split("");
      for (j = 0; j != D[185].length; ++j)
        if (D[185][j].charCodeAt(0) !== 65533) {
          e[D[185][j]] = 47360 + j;
          d[47360 + j] = D[185][j];
        }
      D[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u613F\u614B\u6177\u6162\u6163\u615F\u615A\u6158\u6175\u622A\u6487\u6458\u6454\u64A4\u6478\u645F\u647A\u6451\u6467\u6434\u646D\u647B\u6572\u65A1\u65D7\u65D6\u66A2\u66A8\u669D\u699C\u69A8\u6995\u69C1\u69AE\u69D3\u69CB\u699B\u69B7\u69BB\u69AB\u69B4\u69D0\u69CD\u69AD\u69CC\u69A6\u69C3\u69A3\u6B49\u6B4C\u6C33\u6F33\u6F14\u6EFE\u6F13\u6EF4\u6F29\u6F3E\u6F20\u6F2C\u6F0F\u6F02\u6F22\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6EFF\u6EEF\u6F06\u6F31\u6F38\u6F32\u6F23\u6F15\u6F2B\u6F2F\u6F88\u6F2A\u6EEC\u6F01\u6EF2\u6ECC\u6EF7\u7194\u7199\u717D\u718A\u7184\u7192\u723E\u7292\u7296\u7344\u7350\u7464\u7463\u746A\u7470\u746D\u7504\u7591\u7627\u760D\u760B\u7609\u7613\u76E1\u76E3\u7784\u777D\u777F\u7761\u78C1\u789F\u78A7\u78B3\u78A9\u78A3\u798E\u798F\u798D\u7A2E\u7A31\u7AAA\u7AA9\u7AED\u7AEF\u7BA1\u7B95\u7B8B\u7B75\u7B97\u7B9D\u7B94\u7B8F\u7BB8\u7B87\u7B84\u7CB9\u7CBD\u7CBE\u7DBB\u7DB0\u7D9C\u7DBD\u7DBE\u7DA0\u7DCA\u7DB4\u7DB2\u7DB1\u7DBA\u7DA2\u7DBF\u7DB5\u7DB8\u7DAD\u7DD2\u7DC7\u7DAC\uFFFD".split("");
      for (j = 0; j != D[186].length; ++j)
        if (D[186][j].charCodeAt(0) !== 65533) {
          e[D[186][j]] = 47616 + j;
          d[47616 + j] = D[186][j];
        }
      D[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F70\u7FE0\u7FE1\u7FDF\u805E\u805A\u8087\u8150\u8180\u818F\u8188\u818A\u817F\u8182\u81E7\u81FA\u8207\u8214\u821E\u824B\u84C9\u84BF\u84C6\u84C4\u8499\u849E\u84B2\u849C\u84CB\u84B8\u84C0\u84D3\u8490\u84BC\u84D1\u84CA\u873F\u871C\u873B\u8722\u8725\u8734\u8718\u8755\u8737\u8729\u88F3\u8902\u88F4\u88F9\u88F8\u88FD\u88E8\u891A\u88EF\u8AA6\u8A8C\u8A9E\u8AA3\u8A8D\u8AA1\u8A93\u8AA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AAA\u8AA5\u8AA8\u8A98\u8A91\u8A9A\u8AA7\u8C6A\u8C8D\u8C8C\u8CD3\u8CD1\u8CD2\u8D6B\u8D99\u8D95\u8DFC\u8F14\u8F12\u8F15\u8F13\u8FA3\u9060\u9058\u905C\u9063\u9059\u905E\u9062\u905D\u905B\u9119\u9118\u911E\u9175\u9178\u9177\u9174\u9278\u9280\u9285\u9298\u9296\u927B\u9293\u929C\u92A8\u927C\u9291\u95A1\u95A8\u95A9\u95A3\u95A5\u95A4\u9699\u969C\u969B\u96CC\u96D2\u9700\u977C\u9785\u97F6\u9817\u9818\u98AF\u98B1\u9903\u9905\u990C\u9909\u99C1\u9AAF\u9AB0\u9AE6\u9B41\u9B42\u9CF4\u9CF6\u9CF3\u9EBC\u9F3B\u9F4A\u5104\u5100\u50FB\u50F5\u50F9\u5102\u5108\u5109\u5105\u51DC\uFFFD".split("");
      for (j = 0; j != D[187].length; ++j)
        if (D[187][j].charCodeAt(0) !== 65533) {
          e[D[187][j]] = 47872 + j;
          d[47872 + j] = D[187][j];
        }
      D[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5287\u5288\u5289\u528D\u528A\u52F0\u53B2\u562E\u563B\u5639\u5632\u563F\u5634\u5629\u5653\u564E\u5657\u5674\u5636\u562F\u5630\u5880\u589F\u589E\u58B3\u589C\u58AE\u58A9\u58A6\u596D\u5B09\u5AFB\u5B0B\u5AF5\u5B0C\u5B08\u5BEE\u5BEC\u5BE9\u5BEB\u5C64\u5C65\u5D9D\u5D94\u5E62\u5E5F\u5E61\u5EE2\u5EDA\u5EDF\u5EDD\u5EE3\u5EE0\u5F48\u5F71\u5FB7\u5FB5\u6176\u6167\u616E\u615D\u6155\u6182\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u617C\u6170\u616B\u617E\u61A7\u6190\u61AB\u618E\u61AC\u619A\u61A4\u6194\u61AE\u622E\u6469\u646F\u6479\u649E\u64B2\u6488\u6490\u64B0\u64A5\u6493\u6495\u64A9\u6492\u64AE\u64AD\u64AB\u649A\u64AC\u6499\u64A2\u64B3\u6575\u6577\u6578\u66AE\u66AB\u66B4\u66B1\u6A23\u6A1F\u69E8\u6A01\u6A1E\u6A19\u69FD\u6A21\u6A13\u6A0A\u69F3\u6A02\u6A05\u69ED\u6A11\u6B50\u6B4E\u6BA4\u6BC5\u6BC6\u6F3F\u6F7C\u6F84\u6F51\u6F66\u6F54\u6F86\u6F6D\u6F5B\u6F78\u6F6E\u6F8E\u6F7A\u6F70\u6F64\u6F97\u6F58\u6ED5\u6F6F\u6F60\u6F5F\u719F\u71AC\u71B1\u71A8\u7256\u729B\u734E\u7357\u7469\u748B\u7483\uFFFD".split("");
      for (j = 0; j != D[188].length; ++j)
        if (D[188][j].charCodeAt(0) !== 65533) {
          e[D[188][j]] = 48128 + j;
          d[48128 + j] = D[188][j];
        }
      D[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u747E\u7480\u757F\u7620\u7629\u761F\u7624\u7626\u7621\u7622\u769A\u76BA\u76E4\u778E\u7787\u778C\u7791\u778B\u78CB\u78C5\u78BA\u78CA\u78BE\u78D5\u78BC\u78D0\u7A3F\u7A3C\u7A40\u7A3D\u7A37\u7A3B\u7AAF\u7AAE\u7BAD\u7BB1\u7BC4\u7BB4\u7BC6\u7BC7\u7BC1\u7BA0\u7BCC\u7CCA\u7DE0\u7DF4\u7DEF\u7DFB\u7DD8\u7DEC\u7DDD\u7DE8\u7DE3\u7DDA\u7DDE\u7DE9\u7D9E\u7DD9\u7DF2\u7DF9\u7F75\u7F77\u7FAF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7FE9\u8026\u819B\u819C\u819D\u81A0\u819A\u8198\u8517\u853D\u851A\u84EE\u852C\u852D\u8513\u8511\u8523\u8521\u8514\u84EC\u8525\u84FF\u8506\u8782\u8774\u8776\u8760\u8766\u8778\u8768\u8759\u8757\u874C\u8753\u885B\u885D\u8910\u8907\u8912\u8913\u8915\u890A\u8ABC\u8AD2\u8AC7\u8AC4\u8A95\u8ACB\u8AF8\u8AB2\u8AC9\u8AC2\u8ABF\u8AB0\u8AD6\u8ACD\u8AB6\u8AB9\u8ADB\u8C4C\u8C4E\u8C6C\u8CE0\u8CDE\u8CE6\u8CE4\u8CEC\u8CED\u8CE2\u8CE3\u8CDC\u8CEA\u8CE1\u8D6D\u8D9F\u8DA3\u8E2B\u8E10\u8E1D\u8E22\u8E0F\u8E29\u8E1F\u8E21\u8E1E\u8EBA\u8F1D\u8F1B\u8F1F\u8F29\u8F26\u8F2A\u8F1C\u8F1E\uFFFD".split("");
      for (j = 0; j != D[189].length; ++j)
        if (D[189][j].charCodeAt(0) !== 65533) {
          e[D[189][j]] = 48384 + j;
          d[48384 + j] = D[189][j];
        }
      D[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F25\u9069\u906E\u9068\u906D\u9077\u9130\u912D\u9127\u9131\u9187\u9189\u918B\u9183\u92C5\u92BB\u92B7\u92EA\u92AC\u92E4\u92C1\u92B3\u92BC\u92D2\u92C7\u92F0\u92B2\u95AD\u95B1\u9704\u9706\u9707\u9709\u9760\u978D\u978B\u978F\u9821\u982B\u981C\u98B3\u990A\u9913\u9912\u9918\u99DD\u99D0\u99DF\u99DB\u99D1\u99D5\u99D2\u99D9\u9AB7\u9AEE\u9AEF\u9B27\u9B45\u9B44\u9B77\u9B6F\u9D06\u9D09\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D03\u9EA9\u9EBE\u9ECE\u58A8\u9F52\u5112\u5118\u5114\u5110\u5115\u5180\u51AA\u51DD\u5291\u5293\u52F3\u5659\u566B\u5679\u5669\u5664\u5678\u566A\u5668\u5665\u5671\u566F\u566C\u5662\u5676\u58C1\u58BE\u58C7\u58C5\u596E\u5B1D\u5B34\u5B78\u5BF0\u5C0E\u5F4A\u61B2\u6191\u61A9\u618A\u61CD\u61B6\u61BE\u61CA\u61C8\u6230\u64C5\u64C1\u64CB\u64BB\u64BC\u64DA\u64C4\u64C7\u64C2\u64CD\u64BF\u64D2\u64D4\u64BE\u6574\u66C6\u66C9\u66B9\u66C4\u66C7\u66B8\u6A3D\u6A38\u6A3A\u6A59\u6A6B\u6A58\u6A39\u6A44\u6A62\u6A61\u6A4B\u6A47\u6A35\u6A5F\u6A48\u6B59\u6B77\u6C05\u6FC2\u6FB1\u6FA1\uFFFD".split("");
      for (j = 0; j != D[190].length; ++j)
        if (D[190][j].charCodeAt(0) !== 65533) {
          e[D[190][j]] = 48640 + j;
          d[48640 + j] = D[190][j];
        }
      D[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FC3\u6FA4\u6FC1\u6FA7\u6FB3\u6FC0\u6FB9\u6FB6\u6FA6\u6FA0\u6FB4\u71BE\u71C9\u71D0\u71D2\u71C8\u71D5\u71B9\u71CE\u71D9\u71DC\u71C3\u71C4\u7368\u749C\u74A3\u7498\u749F\u749E\u74E2\u750C\u750D\u7634\u7638\u763A\u76E7\u76E5\u77A0\u779E\u779F\u77A5\u78E8\u78DA\u78EC\u78E7\u79A6\u7A4D\u7A4E\u7A46\u7A4C\u7A4B\u7ABA\u7BD9\u7C11\u7BC9\u7BE4\u7BDB\u7BE1\u7BE9\u7BE6\u7CD5\u7CD6\u7E0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E11\u7E08\u7E1B\u7E23\u7E1E\u7E1D\u7E09\u7E10\u7F79\u7FB2\u7FF0\u7FF1\u7FEE\u8028\u81B3\u81A9\u81A8\u81FB\u8208\u8258\u8259\u854A\u8559\u8548\u8568\u8569\u8543\u8549\u856D\u856A\u855E\u8783\u879F\u879E\u87A2\u878D\u8861\u892A\u8932\u8925\u892B\u8921\u89AA\u89A6\u8AE6\u8AFA\u8AEB\u8AF1\u8B00\u8ADC\u8AE7\u8AEE\u8AFE\u8B01\u8B02\u8AF7\u8AED\u8AF3\u8AF6\u8AFC\u8C6B\u8C6D\u8C93\u8CF4\u8E44\u8E31\u8E34\u8E42\u8E39\u8E35\u8F3B\u8F2F\u8F38\u8F33\u8FA8\u8FA6\u9075\u9074\u9078\u9072\u907C\u907A\u9134\u9192\u9320\u9336\u92F8\u9333\u932F\u9322\u92FC\u932B\u9304\u931A\uFFFD".split("");
      for (j = 0; j != D[191].length; ++j)
        if (D[191][j].charCodeAt(0) !== 65533) {
          e[D[191][j]] = 48896 + j;
          d[48896 + j] = D[191][j];
        }
      D[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9310\u9326\u9321\u9315\u932E\u9319\u95BB\u96A7\u96A8\u96AA\u96D5\u970E\u9711\u9716\u970D\u9713\u970F\u975B\u975C\u9766\u9798\u9830\u9838\u983B\u9837\u982D\u9839\u9824\u9910\u9928\u991E\u991B\u9921\u991A\u99ED\u99E2\u99F1\u9AB8\u9ABC\u9AFB\u9AED\u9B28\u9B91\u9D15\u9D23\u9D26\u9D28\u9D12\u9D1B\u9ED8\u9ED4\u9F8D\u9F9C\u512A\u511F\u5121\u5132\u52F5\u568E\u5680\u5690\u5685\u5687\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u568F\u58D5\u58D3\u58D1\u58CE\u5B30\u5B2A\u5B24\u5B7A\u5C37\u5C68\u5DBC\u5DBA\u5DBD\u5DB8\u5E6B\u5F4C\u5FBD\u61C9\u61C2\u61C7\u61E6\u61CB\u6232\u6234\u64CE\u64CA\u64D8\u64E0\u64F0\u64E6\u64EC\u64F1\u64E2\u64ED\u6582\u6583\u66D9\u66D6\u6A80\u6A94\u6A84\u6AA2\u6A9C\u6ADB\u6AA3\u6A7E\u6A97\u6A90\u6AA0\u6B5C\u6BAE\u6BDA\u6C08\u6FD8\u6FF1\u6FDF\u6FE0\u6FDB\u6FE4\u6FEB\u6FEF\u6F80\u6FEC\u6FE1\u6FE9\u6FD5\u6FEE\u6FF0\u71E7\u71DF\u71EE\u71E6\u71E5\u71ED\u71EC\u71F4\u71E0\u7235\u7246\u7370\u7372\u74A9\u74B0\u74A6\u74A8\u7646\u7642\u764C\u76EA\u77B3\u77AA\u77B0\u77AC\uFFFD".split("");
      for (j = 0; j != D[192].length; ++j)
        if (D[192][j].charCodeAt(0) !== 65533) {
          e[D[192][j]] = 49152 + j;
          d[49152 + j] = D[192][j];
        }
      D[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77A7\u77AD\u77EF\u78F7\u78FA\u78F4\u78EF\u7901\u79A7\u79AA\u7A57\u7ABF\u7C07\u7C0D\u7BFE\u7BF7\u7C0C\u7BE0\u7CE0\u7CDC\u7CDE\u7CE2\u7CDF\u7CD9\u7CDD\u7E2E\u7E3E\u7E46\u7E37\u7E32\u7E43\u7E2B\u7E3D\u7E31\u7E45\u7E41\u7E34\u7E39\u7E48\u7E35\u7E3F\u7E2F\u7F44\u7FF3\u7FFC\u8071\u8072\u8070\u806F\u8073\u81C6\u81C3\u81BA\u81C2\u81C0\u81BF\u81BD\u81C9\u81BE\u81E8\u8209\u8271\u85AA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8584\u857E\u859C\u8591\u8594\u85AF\u859B\u8587\u85A8\u858A\u8667\u87C0\u87D1\u87B3\u87D2\u87C6\u87AB\u87BB\u87BA\u87C8\u87CB\u893B\u8936\u8944\u8938\u893D\u89AC\u8B0E\u8B17\u8B19\u8B1B\u8B0A\u8B20\u8B1D\u8B04\u8B10\u8C41\u8C3F\u8C73\u8CFA\u8CFD\u8CFC\u8CF8\u8CFB\u8DA8\u8E49\u8E4B\u8E48\u8E4A\u8F44\u8F3E\u8F42\u8F45\u8F3F\u907F\u907D\u9084\u9081\u9082\u9080\u9139\u91A3\u919E\u919C\u934D\u9382\u9328\u9375\u934A\u9365\u934B\u9318\u937E\u936C\u935B\u9370\u935A\u9354\u95CA\u95CB\u95CC\u95C8\u95C6\u96B1\u96B8\u96D6\u971C\u971E\u97A0\u97D3\u9846\u98B6\u9935\u9A01\uFFFD".split("");
      for (j = 0; j != D[193].length; ++j)
        if (D[193][j].charCodeAt(0) !== 65533) {
          e[D[193][j]] = 49408 + j;
          d[49408 + j] = D[193][j];
        }
      D[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u99FF\u9BAE\u9BAB\u9BAA\u9BAD\u9D3B\u9D3F\u9E8B\u9ECF\u9EDE\u9EDC\u9EDD\u9EDB\u9F3E\u9F4B\u53E2\u5695\u56AE\u58D9\u58D8\u5B38\u5F5D\u61E3\u6233\u64F4\u64F2\u64FE\u6506\u64FA\u64FB\u64F7\u65B7\u66DC\u6726\u6AB3\u6AAC\u6AC3\u6ABB\u6AB8\u6AC2\u6AAE\u6AAF\u6B5F\u6B78\u6BAF\u7009\u700B\u6FFE\u7006\u6FFA\u7011\u700F\u71FB\u71FC\u71FE\u71F8\u7377\u7375\u74A7\u74BF\u7515\u7656\u7658\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7652\u77BD\u77BF\u77BB\u77BC\u790E\u79AE\u7A61\u7A62\u7A60\u7AC4\u7AC5\u7C2B\u7C27\u7C2A\u7C1E\u7C23\u7C21\u7CE7\u7E54\u7E55\u7E5E\u7E5A\u7E61\u7E52\u7E59\u7F48\u7FF9\u7FFB\u8077\u8076\u81CD\u81CF\u820A\u85CF\u85A9\u85CD\u85D0\u85C9\u85B0\u85BA\u85B9\u85A6\u87EF\u87EC\u87F2\u87E0\u8986\u89B2\u89F4\u8B28\u8B39\u8B2C\u8B2B\u8C50\u8D05\u8E59\u8E63\u8E66\u8E64\u8E5F\u8E55\u8EC0\u8F49\u8F4D\u9087\u9083\u9088\u91AB\u91AC\u91D0\u9394\u938A\u9396\u93A2\u93B3\u93AE\u93AC\u93B0\u9398\u939A\u9397\u95D4\u95D6\u95D0\u95D5\u96E2\u96DC\u96D9\u96DB\u96DE\u9724\u97A3\u97A6\uFFFD".split("");
      for (j = 0; j != D[194].length; ++j)
        if (D[194][j].charCodeAt(0) !== 65533) {
          e[D[194][j]] = 49664 + j;
          d[49664 + j] = D[194][j];
        }
      D[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97AD\u97F9\u984D\u984F\u984C\u984E\u9853\u98BA\u993E\u993F\u993D\u992E\u99A5\u9A0E\u9AC1\u9B03\u9B06\u9B4F\u9B4E\u9B4D\u9BCA\u9BC9\u9BFD\u9BC8\u9BC0\u9D51\u9D5D\u9D60\u9EE0\u9F15\u9F2C\u5133\u56A5\u58DE\u58DF\u58E2\u5BF5\u9F90\u5EEC\u61F2\u61F7\u61F6\u61F5\u6500\u650F\u66E0\u66DD\u6AE5\u6ADD\u6ADA\u6AD3\u701B\u701F\u7028\u701A\u701D\u7015\u7018\u7206\u720D\u7258\u72A2\u7378\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u737A\u74BD\u74CA\u74E3\u7587\u7586\u765F\u7661\u77C7\u7919\u79B1\u7A6B\u7A69\u7C3E\u7C3F\u7C38\u7C3D\u7C37\u7C40\u7E6B\u7E6D\u7E79\u7E69\u7E6A\u7F85\u7E73\u7FB6\u7FB9\u7FB8\u81D8\u85E9\u85DD\u85EA\u85D5\u85E4\u85E5\u85F7\u87FB\u8805\u880D\u87F9\u87FE\u8960\u895F\u8956\u895E\u8B41\u8B5C\u8B58\u8B49\u8B5A\u8B4E\u8B4F\u8B46\u8B59\u8D08\u8D0A\u8E7C\u8E72\u8E87\u8E76\u8E6C\u8E7A\u8E74\u8F54\u8F4E\u8FAD\u908A\u908B\u91B1\u91AE\u93E1\u93D1\u93DF\u93C3\u93C8\u93DC\u93DD\u93D6\u93E2\u93CD\u93D8\u93E4\u93D7\u93E8\u95DC\u96B4\u96E3\u972A\u9727\u9761\u97DC\u97FB\u985E\uFFFD".split("");
      for (j = 0; j != D[195].length; ++j)
        if (D[195][j].charCodeAt(0) !== 65533) {
          e[D[195][j]] = 49920 + j;
          d[49920 + j] = D[195][j];
        }
      D[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9858\u985B\u98BC\u9945\u9949\u9A16\u9A19\u9B0D\u9BE8\u9BE7\u9BD6\u9BDB\u9D89\u9D61\u9D72\u9D6A\u9D6C\u9E92\u9E97\u9E93\u9EB4\u52F8\u56A8\u56B7\u56B6\u56B4\u56BC\u58E4\u5B40\u5B43\u5B7D\u5BF6\u5DC9\u61F8\u61FA\u6518\u6514\u6519\u66E6\u6727\u6AEC\u703E\u7030\u7032\u7210\u737B\u74CF\u7662\u7665\u7926\u792A\u792C\u792B\u7AC7\u7AF6\u7C4C\u7C43\u7C4D\u7CEF\u7CF0\u8FAE\u7E7D\u7E7C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E82\u7F4C\u8000\u81DA\u8266\u85FB\u85F9\u8611\u85FA\u8606\u860B\u8607\u860A\u8814\u8815\u8964\u89BA\u89F8\u8B70\u8B6C\u8B66\u8B6F\u8B5F\u8B6B\u8D0F\u8D0D\u8E89\u8E81\u8E85\u8E82\u91B4\u91CB\u9418\u9403\u93FD\u95E1\u9730\u98C4\u9952\u9951\u99A8\u9A2B\u9A30\u9A37\u9A35\u9C13\u9C0D\u9E79\u9EB5\u9EE8\u9F2F\u9F5F\u9F63\u9F61\u5137\u5138\u56C1\u56C0\u56C2\u5914\u5C6C\u5DCD\u61FC\u61FE\u651D\u651C\u6595\u66E9\u6AFB\u6B04\u6AFA\u6BB2\u704C\u721B\u72A7\u74D6\u74D4\u7669\u77D3\u7C50\u7E8F\u7E8C\u7FBC\u8617\u862D\u861A\u8823\u8822\u8821\u881F\u896A\u896C\u89BD\u8B74\uFFFD".split("");
      for (j = 0; j != D[196].length; ++j)
        if (D[196][j].charCodeAt(0) !== 65533) {
          e[D[196][j]] = 50176 + j;
          d[50176 + j] = D[196][j];
        }
      D[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B77\u8B7D\u8D13\u8E8A\u8E8D\u8E8B\u8F5F\u8FAF\u91BA\u942E\u9433\u9435\u943A\u9438\u9432\u942B\u95E2\u9738\u9739\u9732\u97FF\u9867\u9865\u9957\u9A45\u9A43\u9A40\u9A3E\u9ACF\u9B54\u9B51\u9C2D\u9C25\u9DAF\u9DB4\u9DC2\u9DB8\u9E9D\u9EEF\u9F19\u9F5C\u9F66\u9F67\u513C\u513B\u56C8\u56CA\u56C9\u5B7F\u5DD4\u5DD2\u5F4E\u61FF\u6524\u6B0A\u6B61\u7051\u7058\u7380\u74E4\u758A\u766E\u766C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79B3\u7C60\u7C5F\u807E\u807D\u81DF\u8972\u896F\u89FC\u8B80\u8D16\u8D17\u8E91\u8E93\u8F61\u9148\u9444\u9451\u9452\u973D\u973E\u97C3\u97C1\u986B\u9955\u9A55\u9A4D\u9AD2\u9B1A\u9C49\u9C31\u9C3E\u9C3B\u9DD3\u9DD7\u9F34\u9F6C\u9F6A\u9F94\u56CC\u5DD6\u6200\u6523\u652B\u652A\u66EC\u6B10\u74DA\u7ACA\u7C64\u7C63\u7C65\u7E93\u7E96\u7E94\u81E2\u8638\u863F\u8831\u8B8A\u9090\u908F\u9463\u9460\u9464\u9768\u986F\u995C\u9A5A\u9A5B\u9A57\u9AD3\u9AD4\u9AD1\u9C54\u9C57\u9C56\u9DE5\u9E9F\u9EF4\u56D1\u58E9\u652C\u705E\u7671\u7672\u77D7\u7F50\u7F88\u8836\u8839\u8862\u8B93\u8B92\uFFFD".split("");
      for (j = 0; j != D[197].length; ++j)
        if (D[197][j].charCodeAt(0) !== 65533) {
          e[D[197][j]] = 50432 + j;
          d[50432 + j] = D[197][j];
        }
      D[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B96\u8277\u8D1B\u91C0\u946A\u9742\u9748\u9744\u97C6\u9870\u9A5F\u9B22\u9B58\u9C5F\u9DF9\u9DFA\u9E7C\u9E7D\u9F07\u9F77\u9F72\u5EF3\u6B16\u7063\u7C6C\u7C6E\u883B\u89C0\u8EA1\u91C1\u9472\u9470\u9871\u995E\u9AD6\u9B23\u9ECC\u7064\u77DA\u8B9A\u9477\u97C9\u9A62\u9A65\u7E9C\u8B9C\u8EAA\u91C5\u947D\u947E\u947C\u9C77\u9C78\u9EF7\u8C54\u947F\u9E1A\u7228\u9A6A\u9B31\u9E1B\u9E1E\u7C72\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[198].length; ++j)
        if (D[198][j].charCodeAt(0) !== 65533) {
          e[D[198][j]] = 50688 + j;
          d[50688 + j] = D[198][j];
        }
      D[201] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E42\u4E5C\u51F5\u531A\u5382\u4E07\u4E0C\u4E47\u4E8D\u56D7\uFA0C\u5C6E\u5F73\u4E0F\u5187\u4E0E\u4E2E\u4E93\u4EC2\u4EC9\u4EC8\u5198\u52FC\u536C\u53B9\u5720\u5903\u592C\u5C10\u5DFF\u65E1\u6BB3\u6BCC\u6C14\u723F\u4E31\u4E3C\u4EE8\u4EDC\u4EE9\u4EE1\u4EDD\u4EDA\u520C\u531C\u534C\u5722\u5723\u5917\u592F\u5B81\u5B84\u5C12\u5C3B\u5C74\u5C73\u5E04\u5E80\u5E82\u5FC9\u6209\u6250\u6C15\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C36\u6C43\u6C3F\u6C3B\u72AE\u72B0\u738A\u79B8\u808A\u961E\u4F0E\u4F18\u4F2C\u4EF5\u4F14\u4EF1\u4F00\u4EF7\u4F08\u4F1D\u4F02\u4F05\u4F22\u4F13\u4F04\u4EF4\u4F12\u51B1\u5213\u5209\u5210\u52A6\u5322\u531F\u534D\u538A\u5407\u56E1\u56DF\u572E\u572A\u5734\u593C\u5980\u597C\u5985\u597B\u597E\u5977\u597F\u5B56\u5C15\u5C25\u5C7C\u5C7A\u5C7B\u5C7E\u5DDF\u5E75\u5E84\u5F02\u5F1A\u5F74\u5FD5\u5FD4\u5FCF\u625C\u625E\u6264\u6261\u6266\u6262\u6259\u6260\u625A\u6265\u65EF\u65EE\u673E\u6739\u6738\u673B\u673A\u673F\u673C\u6733\u6C18\u6C46\u6C52\u6C5C\u6C4F\u6C4A\u6C54\u6C4B\uFFFD".split("");
      for (j = 0; j != D[201].length; ++j)
        if (D[201][j].charCodeAt(0) !== 65533) {
          e[D[201][j]] = 51456 + j;
          d[51456 + j] = D[201][j];
        }
      D[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C4C\u7071\u725E\u72B4\u72B5\u738E\u752A\u767F\u7A75\u7F51\u8278\u827C\u8280\u827D\u827F\u864D\u897E\u9099\u9097\u9098\u909B\u9094\u9622\u9624\u9620\u9623\u4F56\u4F3B\u4F62\u4F49\u4F53\u4F64\u4F3E\u4F67\u4F52\u4F5F\u4F41\u4F58\u4F2D\u4F33\u4F3F\u4F61\u518F\u51B9\u521C\u521E\u5221\u52AD\u52AE\u5309\u5363\u5372\u538E\u538F\u5430\u5437\u542A\u5454\u5445\u5419\u541C\u5425\u5418\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u543D\u544F\u5441\u5428\u5424\u5447\u56EE\u56E7\u56E5\u5741\u5745\u574C\u5749\u574B\u5752\u5906\u5940\u59A6\u5998\u59A0\u5997\u598E\u59A2\u5990\u598F\u59A7\u59A1\u5B8E\u5B92\u5C28\u5C2A\u5C8D\u5C8F\u5C88\u5C8B\u5C89\u5C92\u5C8A\u5C86\u5C93\u5C95\u5DE0\u5E0A\u5E0E\u5E8B\u5E89\u5E8C\u5E88\u5E8D\u5F05\u5F1D\u5F78\u5F76\u5FD2\u5FD1\u5FD0\u5FED\u5FE8\u5FEE\u5FF3\u5FE1\u5FE4\u5FE3\u5FFA\u5FEF\u5FF7\u5FFB\u6000\u5FF4\u623A\u6283\u628C\u628E\u628F\u6294\u6287\u6271\u627B\u627A\u6270\u6281\u6288\u6277\u627D\u6272\u6274\u6537\u65F0\u65F4\u65F3\u65F2\u65F5\u6745\u6747\uFFFD".split("");
      for (j = 0; j != D[202].length; ++j)
        if (D[202][j].charCodeAt(0) !== 65533) {
          e[D[202][j]] = 51712 + j;
          d[51712 + j] = D[202][j];
        }
      D[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6759\u6755\u674C\u6748\u675D\u674D\u675A\u674B\u6BD0\u6C19\u6C1A\u6C78\u6C67\u6C6B\u6C84\u6C8B\u6C8F\u6C71\u6C6F\u6C69\u6C9A\u6C6D\u6C87\u6C95\u6C9C\u6C66\u6C73\u6C65\u6C7B\u6C8E\u7074\u707A\u7263\u72BF\u72BD\u72C3\u72C6\u72C1\u72BA\u72C5\u7395\u7397\u7393\u7394\u7392\u753A\u7539\u7594\u7595\u7681\u793D\u8034\u8095\u8099\u8090\u8092\u809C\u8290\u828F\u8285\u828E\u8291\u8293\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u828A\u8283\u8284\u8C78\u8FC9\u8FBF\u909F\u90A1\u90A5\u909E\u90A7\u90A0\u9630\u9628\u962F\u962D\u4E33\u4F98\u4F7C\u4F85\u4F7D\u4F80\u4F87\u4F76\u4F74\u4F89\u4F84\u4F77\u4F4C\u4F97\u4F6A\u4F9A\u4F79\u4F81\u4F78\u4F90\u4F9C\u4F94\u4F9E\u4F92\u4F82\u4F95\u4F6B\u4F6E\u519E\u51BC\u51BE\u5235\u5232\u5233\u5246\u5231\u52BC\u530A\u530B\u533C\u5392\u5394\u5487\u547F\u5481\u5491\u5482\u5488\u546B\u547A\u547E\u5465\u546C\u5474\u5466\u548D\u546F\u5461\u5460\u5498\u5463\u5467\u5464\u56F7\u56F9\u576F\u5772\u576D\u576B\u5771\u5770\u5776\u5780\u5775\u577B\u5773\u5774\u5762\uFFFD".split("");
      for (j = 0; j != D[203].length; ++j)
        if (D[203][j].charCodeAt(0) !== 65533) {
          e[D[203][j]] = 51968 + j;
          d[51968 + j] = D[203][j];
        }
      D[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5768\u577D\u590C\u5945\u59B5\u59BA\u59CF\u59CE\u59B2\u59CC\u59C1\u59B6\u59BC\u59C3\u59D6\u59B1\u59BD\u59C0\u59C8\u59B4\u59C7\u5B62\u5B65\u5B93\u5B95\u5C44\u5C47\u5CAE\u5CA4\u5CA0\u5CB5\u5CAF\u5CA8\u5CAC\u5C9F\u5CA3\u5CAD\u5CA2\u5CAA\u5CA7\u5C9D\u5CA5\u5CB6\u5CB0\u5CA6\u5E17\u5E14\u5E19\u5F28\u5F22\u5F23\u5F24\u5F54\u5F82\u5F7E\u5F7D\u5FDE\u5FE5\u602D\u6026\u6019\u6032\u600B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6034\u600A\u6017\u6033\u601A\u601E\u602C\u6022\u600D\u6010\u602E\u6013\u6011\u600C\u6009\u601C\u6214\u623D\u62AD\u62B4\u62D1\u62BE\u62AA\u62B6\u62CA\u62AE\u62B3\u62AF\u62BB\u62A9\u62B0\u62B8\u653D\u65A8\u65BB\u6609\u65FC\u6604\u6612\u6608\u65FB\u6603\u660B\u660D\u6605\u65FD\u6611\u6610\u66F6\u670A\u6785\u676C\u678E\u6792\u6776\u677B\u6798\u6786\u6784\u6774\u678D\u678C\u677A\u679F\u6791\u6799\u6783\u677D\u6781\u6778\u6779\u6794\u6B25\u6B80\u6B7E\u6BDE\u6C1D\u6C93\u6CEC\u6CEB\u6CEE\u6CD9\u6CB6\u6CD4\u6CAD\u6CE7\u6CB7\u6CD0\u6CC2\u6CBA\u6CC3\u6CC6\u6CED\u6CF2\uFFFD".split("");
      for (j = 0; j != D[204].length; ++j)
        if (D[204][j].charCodeAt(0) !== 65533) {
          e[D[204][j]] = 52224 + j;
          d[52224 + j] = D[204][j];
        }
      D[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6CD2\u6CDD\u6CB4\u6C8A\u6C9D\u6C80\u6CDE\u6CC0\u6D30\u6CCD\u6CC7\u6CB0\u6CF9\u6CCF\u6CE9\u6CD1\u7094\u7098\u7085\u7093\u7086\u7084\u7091\u7096\u7082\u709A\u7083\u726A\u72D6\u72CB\u72D8\u72C9\u72DC\u72D2\u72D4\u72DA\u72CC\u72D1\u73A4\u73A1\u73AD\u73A6\u73A2\u73A0\u73AC\u739D\u74DD\u74E8\u753F\u7540\u753E\u758C\u7598\u76AF\u76F3\u76F1\u76F0\u76F5\u77F8\u77FC\u77F9\u77FB\u77FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77F7\u7942\u793F\u79C5\u7A78\u7A7B\u7AFB\u7C75\u7CFD\u8035\u808F\u80AE\u80A3\u80B8\u80B5\u80AD\u8220\u82A0\u82C0\u82AB\u829A\u8298\u829B\u82B5\u82A7\u82AE\u82BC\u829E\u82BA\u82B4\u82A8\u82A1\u82A9\u82C2\u82A4\u82C3\u82B6\u82A2\u8670\u866F\u866D\u866E\u8C56\u8FD2\u8FCB\u8FD3\u8FCD\u8FD6\u8FD5\u8FD7\u90B2\u90B4\u90AF\u90B3\u90B0\u9639\u963D\u963C\u963A\u9643\u4FCD\u4FC5\u4FD3\u4FB2\u4FC9\u4FCB\u4FC1\u4FD4\u4FDC\u4FD9\u4FBB\u4FB3\u4FDB\u4FC7\u4FD6\u4FBA\u4FC0\u4FB9\u4FEC\u5244\u5249\u52C0\u52C2\u533D\u537C\u5397\u5396\u5399\u5398\u54BA\u54A1\u54AD\u54A5\u54CF\uFFFD".split("");
      for (j = 0; j != D[205].length; ++j)
        if (D[205][j].charCodeAt(0) !== 65533) {
          e[D[205][j]] = 52480 + j;
          d[52480 + j] = D[205][j];
        }
      D[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C3\u830D\u54B7\u54AE\u54D6\u54B6\u54C5\u54C6\u54A0\u5470\u54BC\u54A2\u54BE\u5472\u54DE\u54B0\u57B5\u579E\u579F\u57A4\u578C\u5797\u579D\u579B\u5794\u5798\u578F\u5799\u57A5\u579A\u5795\u58F4\u590D\u5953\u59E1\u59DE\u59EE\u5A00\u59F1\u59DD\u59FA\u59FD\u59FC\u59F6\u59E4\u59F2\u59F7\u59DB\u59E9\u59F3\u59F5\u59E0\u59FE\u59F4\u59ED\u5BA8\u5C4C\u5CD0\u5CD8\u5CCC\u5CD7\u5CCB\u5CDB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5CDE\u5CDA\u5CC9\u5CC7\u5CCA\u5CD6\u5CD3\u5CD4\u5CCF\u5CC8\u5CC6\u5CCE\u5CDF\u5CF8\u5DF9\u5E21\u5E22\u5E23\u5E20\u5E24\u5EB0\u5EA4\u5EA2\u5E9B\u5EA3\u5EA5\u5F07\u5F2E\u5F56\u5F86\u6037\u6039\u6054\u6072\u605E\u6045\u6053\u6047\u6049\u605B\u604C\u6040\u6042\u605F\u6024\u6044\u6058\u6066\u606E\u6242\u6243\u62CF\u630D\u630B\u62F5\u630E\u6303\u62EB\u62F9\u630F\u630C\u62F8\u62F6\u6300\u6313\u6314\u62FA\u6315\u62FB\u62F0\u6541\u6543\u65AA\u65BF\u6636\u6621\u6632\u6635\u661C\u6626\u6622\u6633\u662B\u663A\u661D\u6634\u6639\u662E\u670F\u6710\u67C1\u67F2\u67C8\u67BA\uFFFD".split("");
      for (j = 0; j != D[206].length; ++j)
        if (D[206][j].charCodeAt(0) !== 65533) {
          e[D[206][j]] = 52736 + j;
          d[52736 + j] = D[206][j];
        }
      D[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u67DC\u67BB\u67F8\u67D8\u67C0\u67B7\u67C5\u67EB\u67E4\u67DF\u67B5\u67CD\u67B3\u67F7\u67F6\u67EE\u67E3\u67C2\u67B9\u67CE\u67E7\u67F0\u67B2\u67FC\u67C6\u67ED\u67CC\u67AE\u67E6\u67DB\u67FA\u67C9\u67CA\u67C3\u67EA\u67CB\u6B28\u6B82\u6B84\u6BB6\u6BD6\u6BD8\u6BE0\u6C20\u6C21\u6D28\u6D34\u6D2D\u6D1F\u6D3C\u6D3F\u6D12\u6D0A\u6CDA\u6D33\u6D04\u6D19\u6D3A\u6D1A\u6D11\u6D00\u6D1D\u6D42\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D01\u6D18\u6D37\u6D03\u6D0F\u6D40\u6D07\u6D20\u6D2C\u6D08\u6D22\u6D09\u6D10\u70B7\u709F\u70BE\u70B1\u70B0\u70A1\u70B4\u70B5\u70A9\u7241\u7249\u724A\u726C\u7270\u7273\u726E\u72CA\u72E4\u72E8\u72EB\u72DF\u72EA\u72E6\u72E3\u7385\u73CC\u73C2\u73C8\u73C5\u73B9\u73B6\u73B5\u73B4\u73EB\u73BF\u73C7\u73BE\u73C3\u73C6\u73B8\u73CB\u74EC\u74EE\u752E\u7547\u7548\u75A7\u75AA\u7679\u76C4\u7708\u7703\u7704\u7705\u770A\u76F7\u76FB\u76FA\u77E7\u77E8\u7806\u7811\u7812\u7805\u7810\u780F\u780E\u7809\u7803\u7813\u794A\u794C\u794B\u7945\u7944\u79D5\u79CD\u79CF\u79D6\u79CE\u7A80\uFFFD".split("");
      for (j = 0; j != D[207].length; ++j)
        if (D[207][j].charCodeAt(0) !== 65533) {
          e[D[207][j]] = 52992 + j;
          d[52992 + j] = D[207][j];
        }
      D[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A7E\u7AD1\u7B00\u7B01\u7C7A\u7C78\u7C79\u7C7F\u7C80\u7C81\u7D03\u7D08\u7D01\u7F58\u7F91\u7F8D\u7FBE\u8007\u800E\u800F\u8014\u8037\u80D8\u80C7\u80E0\u80D1\u80C8\u80C2\u80D0\u80C5\u80E3\u80D9\u80DC\u80CA\u80D5\u80C9\u80CF\u80D7\u80E6\u80CD\u81FF\u8221\u8294\u82D9\u82FE\u82F9\u8307\u82E8\u8300\u82D5\u833A\u82EB\u82D6\u82F4\u82EC\u82E1\u82F2\u82F5\u830C\u82FB\u82F6\u82F0\u82EA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u82E4\u82E0\u82FA\u82F3\u82ED\u8677\u8674\u867C\u8673\u8841\u884E\u8867\u886A\u8869\u89D3\u8A04\u8A07\u8D72\u8FE3\u8FE1\u8FEE\u8FE0\u90F1\u90BD\u90BF\u90D5\u90C5\u90BE\u90C7\u90CB\u90C8\u91D4\u91D3\u9654\u964F\u9651\u9653\u964A\u964E\u501E\u5005\u5007\u5013\u5022\u5030\u501B\u4FF5\u4FF4\u5033\u5037\u502C\u4FF6\u4FF7\u5017\u501C\u5020\u5027\u5035\u502F\u5031\u500E\u515A\u5194\u5193\u51CA\u51C4\u51C5\u51C8\u51CE\u5261\u525A\u5252\u525E\u525F\u5255\u5262\u52CD\u530E\u539E\u5526\u54E2\u5517\u5512\u54E7\u54F3\u54E4\u551A\u54FF\u5504\u5508\u54EB\u5511\u5505\u54F1\uFFFD".split("");
      for (j = 0; j != D[208].length; ++j)
        if (D[208][j].charCodeAt(0) !== 65533) {
          e[D[208][j]] = 53248 + j;
          d[53248 + j] = D[208][j];
        }
      D[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u550A\u54FB\u54F7\u54F8\u54E0\u550E\u5503\u550B\u5701\u5702\u57CC\u5832\u57D5\u57D2\u57BA\u57C6\u57BD\u57BC\u57B8\u57B6\u57BF\u57C7\u57D0\u57B9\u57C1\u590E\u594A\u5A19\u5A16\u5A2D\u5A2E\u5A15\u5A0F\u5A17\u5A0A\u5A1E\u5A33\u5B6C\u5BA7\u5BAD\u5BAC\u5C03\u5C56\u5C54\u5CEC\u5CFF\u5CEE\u5CF1\u5CF7\u5D00\u5CF9\u5E29\u5E28\u5EA8\u5EAE\u5EAA\u5EAC\u5F33\u5F30\u5F67\u605D\u605A\u6067\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6041\u60A2\u6088\u6080\u6092\u6081\u609D\u6083\u6095\u609B\u6097\u6087\u609C\u608E\u6219\u6246\u62F2\u6310\u6356\u632C\u6344\u6345\u6336\u6343\u63E4\u6339\u634B\u634A\u633C\u6329\u6341\u6334\u6358\u6354\u6359\u632D\u6347\u6333\u635A\u6351\u6338\u6357\u6340\u6348\u654A\u6546\u65C6\u65C3\u65C4\u65C2\u664A\u665F\u6647\u6651\u6712\u6713\u681F\u681A\u6849\u6832\u6833\u683B\u684B\u684F\u6816\u6831\u681C\u6835\u682B\u682D\u682F\u684E\u6844\u6834\u681D\u6812\u6814\u6826\u6828\u682E\u684D\u683A\u6825\u6820\u6B2C\u6B2F\u6B2D\u6B31\u6B34\u6B6D\u8082\u6B88\u6BE6\u6BE4\uFFFD".split("");
      for (j = 0; j != D[209].length; ++j)
        if (D[209][j].charCodeAt(0) !== 65533) {
          e[D[209][j]] = 53504 + j;
          d[53504 + j] = D[209][j];
        }
      D[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BE8\u6BE3\u6BE2\u6BE7\u6C25\u6D7A\u6D63\u6D64\u6D76\u6D0D\u6D61\u6D92\u6D58\u6D62\u6D6D\u6D6F\u6D91\u6D8D\u6DEF\u6D7F\u6D86\u6D5E\u6D67\u6D60\u6D97\u6D70\u6D7C\u6D5F\u6D82\u6D98\u6D2F\u6D68\u6D8B\u6D7E\u6D80\u6D84\u6D16\u6D83\u6D7B\u6D7D\u6D75\u6D90\u70DC\u70D3\u70D1\u70DD\u70CB\u7F39\u70E2\u70D7\u70D2\u70DE\u70E0\u70D4\u70CD\u70C5\u70C6\u70C7\u70DA\u70CE\u70E1\u7242\u7278\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7277\u7276\u7300\u72FA\u72F4\u72FE\u72F6\u72F3\u72FB\u7301\u73D3\u73D9\u73E5\u73D6\u73BC\u73E7\u73E3\u73E9\u73DC\u73D2\u73DB\u73D4\u73DD\u73DA\u73D7\u73D8\u73E8\u74DE\u74DF\u74F4\u74F5\u7521\u755B\u755F\u75B0\u75C1\u75BB\u75C4\u75C0\u75BF\u75B6\u75BA\u768A\u76C9\u771D\u771B\u7710\u7713\u7712\u7723\u7711\u7715\u7719\u771A\u7722\u7727\u7823\u782C\u7822\u7835\u782F\u7828\u782E\u782B\u7821\u7829\u7833\u782A\u7831\u7954\u795B\u794F\u795C\u7953\u7952\u7951\u79EB\u79EC\u79E0\u79EE\u79ED\u79EA\u79DC\u79DE\u79DD\u7A86\u7A89\u7A85\u7A8B\u7A8C\u7A8A\u7A87\u7AD8\u7B10\uFFFD".split("");
      for (j = 0; j != D[210].length; ++j)
        if (D[210][j].charCodeAt(0) !== 65533) {
          e[D[210][j]] = 53760 + j;
          d[53760 + j] = D[210][j];
        }
      D[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7B04\u7B13\u7B05\u7B0F\u7B08\u7B0A\u7B0E\u7B09\u7B12\u7C84\u7C91\u7C8A\u7C8C\u7C88\u7C8D\u7C85\u7D1E\u7D1D\u7D11\u7D0E\u7D18\u7D16\u7D13\u7D1F\u7D12\u7D0F\u7D0C\u7F5C\u7F61\u7F5E\u7F60\u7F5D\u7F5B\u7F96\u7F92\u7FC3\u7FC2\u7FC0\u8016\u803E\u8039\u80FA\u80F2\u80F9\u80F5\u8101\u80FB\u8100\u8201\u822F\u8225\u8333\u832D\u8344\u8319\u8351\u8325\u8356\u833F\u8341\u8326\u831C\u8322\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8342\u834E\u831B\u832A\u8308\u833C\u834D\u8316\u8324\u8320\u8337\u832F\u8329\u8347\u8345\u834C\u8353\u831E\u832C\u834B\u8327\u8348\u8653\u8652\u86A2\u86A8\u8696\u868D\u8691\u869E\u8687\u8697\u8686\u868B\u869A\u8685\u86A5\u8699\u86A1\u86A7\u8695\u8698\u868E\u869D\u8690\u8694\u8843\u8844\u886D\u8875\u8876\u8872\u8880\u8871\u887F\u886F\u8883\u887E\u8874\u887C\u8A12\u8C47\u8C57\u8C7B\u8CA4\u8CA3\u8D76\u8D78\u8DB5\u8DB7\u8DB6\u8ED1\u8ED3\u8FFE\u8FF5\u9002\u8FFF\u8FFB\u9004\u8FFC\u8FF6\u90D6\u90E0\u90D9\u90DA\u90E3\u90DF\u90E5\u90D8\u90DB\u90D7\u90DC\u90E4\u9150\uFFFD".split("");
      for (j = 0; j != D[211].length; ++j)
        if (D[211][j].charCodeAt(0) !== 65533) {
          e[D[211][j]] = 54016 + j;
          d[54016 + j] = D[211][j];
        }
      D[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u914E\u914F\u91D5\u91E2\u91DA\u965C\u965F\u96BC\u98E3\u9ADF\u9B2F\u4E7F\u5070\u506A\u5061\u505E\u5060\u5053\u504B\u505D\u5072\u5048\u504D\u5041\u505B\u504A\u5062\u5015\u5045\u505F\u5069\u506B\u5063\u5064\u5046\u5040\u506E\u5073\u5057\u5051\u51D0\u526B\u526D\u526C\u526E\u52D6\u52D3\u532D\u539C\u5575\u5576\u553C\u554D\u5550\u5534\u552A\u5551\u5562\u5536\u5535\u5530\u5552\u5545\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u550C\u5532\u5565\u554E\u5539\u5548\u552D\u553B\u5540\u554B\u570A\u5707\u57FB\u5814\u57E2\u57F6\u57DC\u57F4\u5800\u57ED\u57FD\u5808\u57F8\u580B\u57F3\u57CF\u5807\u57EE\u57E3\u57F2\u57E5\u57EC\u57E1\u580E\u57FC\u5810\u57E7\u5801\u580C\u57F1\u57E9\u57F0\u580D\u5804\u595C\u5A60\u5A58\u5A55\u5A67\u5A5E\u5A38\u5A35\u5A6D\u5A50\u5A5F\u5A65\u5A6C\u5A53\u5A64\u5A57\u5A43\u5A5D\u5A52\u5A44\u5A5B\u5A48\u5A8E\u5A3E\u5A4D\u5A39\u5A4C\u5A70\u5A69\u5A47\u5A51\u5A56\u5A42\u5A5C\u5B72\u5B6E\u5BC1\u5BC0\u5C59\u5D1E\u5D0B\u5D1D\u5D1A\u5D20\u5D0C\u5D28\u5D0D\u5D26\u5D25\u5D0F\uFFFD".split("");
      for (j = 0; j != D[212].length; ++j)
        if (D[212][j].charCodeAt(0) !== 65533) {
          e[D[212][j]] = 54272 + j;
          d[54272 + j] = D[212][j];
        }
      D[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5D30\u5D12\u5D23\u5D1F\u5D2E\u5E3E\u5E34\u5EB1\u5EB4\u5EB9\u5EB2\u5EB3\u5F36\u5F38\u5F9B\u5F96\u5F9F\u608A\u6090\u6086\u60BE\u60B0\u60BA\u60D3\u60D4\u60CF\u60E4\u60D9\u60DD\u60C8\u60B1\u60DB\u60B7\u60CA\u60BF\u60C3\u60CD\u60C0\u6332\u6365\u638A\u6382\u637D\u63BD\u639E\u63AD\u639D\u6397\u63AB\u638E\u636F\u6387\u6390\u636E\u63AF\u6375\u639C\u636D\u63AE\u637C\u63A4\u633B\u639F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6378\u6385\u6381\u6391\u638D\u6370\u6553\u65CD\u6665\u6661\u665B\u6659\u665C\u6662\u6718\u6879\u6887\u6890\u689C\u686D\u686E\u68AE\u68AB\u6956\u686F\u68A3\u68AC\u68A9\u6875\u6874\u68B2\u688F\u6877\u6892\u687C\u686B\u6872\u68AA\u6880\u6871\u687E\u689B\u6896\u688B\u68A0\u6889\u68A4\u6878\u687B\u6891\u688C\u688A\u687D\u6B36\u6B33\u6B37\u6B38\u6B91\u6B8F\u6B8D\u6B8E\u6B8C\u6C2A\u6DC0\u6DAB\u6DB4\u6DB3\u6E74\u6DAC\u6DE9\u6DE2\u6DB7\u6DF6\u6DD4\u6E00\u6DC8\u6DE0\u6DDF\u6DD6\u6DBE\u6DE5\u6DDC\u6DDD\u6DDB\u6DF4\u6DCA\u6DBD\u6DED\u6DF0\u6DBA\u6DD5\u6DC2\u6DCF\u6DC9\uFFFD".split("");
      for (j = 0; j != D[213].length; ++j)
        if (D[213][j].charCodeAt(0) !== 65533) {
          e[D[213][j]] = 54528 + j;
          d[54528 + j] = D[213][j];
        }
      D[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6DD0\u6DF2\u6DD3\u6DFD\u6DD7\u6DCD\u6DE3\u6DBB\u70FA\u710D\u70F7\u7117\u70F4\u710C\u70F0\u7104\u70F3\u7110\u70FC\u70FF\u7106\u7113\u7100\u70F8\u70F6\u710B\u7102\u710E\u727E\u727B\u727C\u727F\u731D\u7317\u7307\u7311\u7318\u730A\u7308\u72FF\u730F\u731E\u7388\u73F6\u73F8\u73F5\u7404\u7401\u73FD\u7407\u7400\u73FA\u73FC\u73FF\u740C\u740B\u73F4\u7408\u7564\u7563\u75CE\u75D2\u75CF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75CB\u75CC\u75D1\u75D0\u768F\u7689\u76D3\u7739\u772F\u772D\u7731\u7732\u7734\u7733\u773D\u7725\u773B\u7735\u7848\u7852\u7849\u784D\u784A\u784C\u7826\u7845\u7850\u7964\u7967\u7969\u796A\u7963\u796B\u7961\u79BB\u79FA\u79F8\u79F6\u79F7\u7A8F\u7A94\u7A90\u7B35\u7B47\u7B34\u7B25\u7B30\u7B22\u7B24\u7B33\u7B18\u7B2A\u7B1D\u7B31\u7B2B\u7B2D\u7B2F\u7B32\u7B38\u7B1A\u7B23\u7C94\u7C98\u7C96\u7CA3\u7D35\u7D3D\u7D38\u7D36\u7D3A\u7D45\u7D2C\u7D29\u7D41\u7D47\u7D3E\u7D3F\u7D4A\u7D3B\u7D28\u7F63\u7F95\u7F9C\u7F9D\u7F9B\u7FCA\u7FCB\u7FCD\u7FD0\u7FD1\u7FC7\u7FCF\u7FC9\u801F\uFFFD".split("");
      for (j = 0; j != D[214].length; ++j)
        if (D[214][j].charCodeAt(0) !== 65533) {
          e[D[214][j]] = 54784 + j;
          d[54784 + j] = D[214][j];
        }
      D[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u801E\u801B\u8047\u8043\u8048\u8118\u8125\u8119\u811B\u812D\u811F\u812C\u811E\u8121\u8115\u8127\u811D\u8122\u8211\u8238\u8233\u823A\u8234\u8232\u8274\u8390\u83A3\u83A8\u838D\u837A\u8373\u83A4\u8374\u838F\u8381\u8395\u8399\u8375\u8394\u83A9\u837D\u8383\u838C\u839D\u839B\u83AA\u838B\u837E\u83A5\u83AF\u8388\u8397\u83B0\u837F\u83A6\u8387\u83AE\u8376\u839A\u8659\u8656\u86BF\u86B7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u86C2\u86C1\u86C5\u86BA\u86B0\u86C8\u86B9\u86B3\u86B8\u86CC\u86B4\u86BB\u86BC\u86C3\u86BD\u86BE\u8852\u8889\u8895\u88A8\u88A2\u88AA\u889A\u8891\u88A1\u889F\u8898\u88A7\u8899\u889B\u8897\u88A4\u88AC\u888C\u8893\u888E\u8982\u89D6\u89D9\u89D5\u8A30\u8A27\u8A2C\u8A1E\u8C39\u8C3B\u8C5C\u8C5D\u8C7D\u8CA5\u8D7D\u8D7B\u8D79\u8DBC\u8DC2\u8DB9\u8DBF\u8DC1\u8ED8\u8EDE\u8EDD\u8EDC\u8ED7\u8EE0\u8EE1\u9024\u900B\u9011\u901C\u900C\u9021\u90EF\u90EA\u90F0\u90F4\u90F2\u90F3\u90D4\u90EB\u90EC\u90E9\u9156\u9158\u915A\u9153\u9155\u91EC\u91F4\u91F1\u91F3\u91F8\u91E4\u91F9\u91EA\uFFFD".split("");
      for (j = 0; j != D[215].length; ++j)
        if (D[215][j].charCodeAt(0) !== 65533) {
          e[D[215][j]] = 55040 + j;
          d[55040 + j] = D[215][j];
        }
      D[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u91EB\u91F7\u91E8\u91EE\u957A\u9586\u9588\u967C\u966D\u966B\u9671\u966F\u96BF\u976A\u9804\u98E5\u9997\u509B\u5095\u5094\u509E\u508B\u50A3\u5083\u508C\u508E\u509D\u5068\u509C\u5092\u5082\u5087\u515F\u51D4\u5312\u5311\u53A4\u53A7\u5591\u55A8\u55A5\u55AD\u5577\u5645\u55A2\u5593\u5588\u558F\u55B5\u5581\u55A3\u5592\u55A4\u557D\u558C\u55A6\u557F\u5595\u55A1\u558E\u570C\u5829\u5837\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5819\u581E\u5827\u5823\u5828\u57F5\u5848\u5825\u581C\u581B\u5833\u583F\u5836\u582E\u5839\u5838\u582D\u582C\u583B\u5961\u5AAF\u5A94\u5A9F\u5A7A\u5AA2\u5A9E\u5A78\u5AA6\u5A7C\u5AA5\u5AAC\u5A95\u5AAE\u5A37\u5A84\u5A8A\u5A97\u5A83\u5A8B\u5AA9\u5A7B\u5A7D\u5A8C\u5A9C\u5A8F\u5A93\u5A9D\u5BEA\u5BCD\u5BCB\u5BD4\u5BD1\u5BCA\u5BCE\u5C0C\u5C30\u5D37\u5D43\u5D6B\u5D41\u5D4B\u5D3F\u5D35\u5D51\u5D4E\u5D55\u5D33\u5D3A\u5D52\u5D3D\u5D31\u5D59\u5D42\u5D39\u5D49\u5D38\u5D3C\u5D32\u5D36\u5D40\u5D45\u5E44\u5E41\u5F58\u5FA6\u5FA5\u5FAB\u60C9\u60B9\u60CC\u60E2\u60CE\u60C4\u6114\uFFFD".split("");
      for (j = 0; j != D[216].length; ++j)
        if (D[216][j].charCodeAt(0) !== 65533) {
          e[D[216][j]] = 55296 + j;
          d[55296 + j] = D[216][j];
        }
      D[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u60F2\u610A\u6116\u6105\u60F5\u6113\u60F8\u60FC\u60FE\u60C1\u6103\u6118\u611D\u6110\u60FF\u6104\u610B\u624A\u6394\u63B1\u63B0\u63CE\u63E5\u63E8\u63EF\u63C3\u649D\u63F3\u63CA\u63E0\u63F6\u63D5\u63F2\u63F5\u6461\u63DF\u63BE\u63DD\u63DC\u63C4\u63D8\u63D3\u63C2\u63C7\u63CC\u63CB\u63C8\u63F0\u63D7\u63D9\u6532\u6567\u656A\u6564\u655C\u6568\u6565\u658C\u659D\u659E\u65AE\u65D0\u65D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u667C\u666C\u667B\u6680\u6671\u6679\u666A\u6672\u6701\u690C\u68D3\u6904\u68DC\u692A\u68EC\u68EA\u68F1\u690F\u68D6\u68F7\u68EB\u68E4\u68F6\u6913\u6910\u68F3\u68E1\u6907\u68CC\u6908\u6970\u68B4\u6911\u68EF\u68C6\u6914\u68F8\u68D0\u68FD\u68FC\u68E8\u690B\u690A\u6917\u68CE\u68C8\u68DD\u68DE\u68E6\u68F4\u68D1\u6906\u68D4\u68E9\u6915\u6925\u68C7\u6B39\u6B3B\u6B3F\u6B3C\u6B94\u6B97\u6B99\u6B95\u6BBD\u6BF0\u6BF2\u6BF3\u6C30\u6DFC\u6E46\u6E47\u6E1F\u6E49\u6E88\u6E3C\u6E3D\u6E45\u6E62\u6E2B\u6E3F\u6E41\u6E5D\u6E73\u6E1C\u6E33\u6E4B\u6E40\u6E51\u6E3B\u6E03\u6E2E\u6E5E\uFFFD".split("");
      for (j = 0; j != D[217].length; ++j)
        if (D[217][j].charCodeAt(0) !== 65533) {
          e[D[217][j]] = 55552 + j;
          d[55552 + j] = D[217][j];
        }
      D[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6E68\u6E5C\u6E61\u6E31\u6E28\u6E60\u6E71\u6E6B\u6E39\u6E22\u6E30\u6E53\u6E65\u6E27\u6E78\u6E64\u6E77\u6E55\u6E79\u6E52\u6E66\u6E35\u6E36\u6E5A\u7120\u711E\u712F\u70FB\u712E\u7131\u7123\u7125\u7122\u7132\u711F\u7128\u713A\u711B\u724B\u725A\u7288\u7289\u7286\u7285\u728B\u7312\u730B\u7330\u7322\u7331\u7333\u7327\u7332\u732D\u7326\u7323\u7335\u730C\u742E\u742C\u7430\u742B\u7416\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u741A\u7421\u742D\u7431\u7424\u7423\u741D\u7429\u7420\u7432\u74FB\u752F\u756F\u756C\u75E7\u75DA\u75E1\u75E6\u75DD\u75DF\u75E4\u75D7\u7695\u7692\u76DA\u7746\u7747\u7744\u774D\u7745\u774A\u774E\u774B\u774C\u77DE\u77EC\u7860\u7864\u7865\u785C\u786D\u7871\u786A\u786E\u7870\u7869\u7868\u785E\u7862\u7974\u7973\u7972\u7970\u7A02\u7A0A\u7A03\u7A0C\u7A04\u7A99\u7AE6\u7AE4\u7B4A\u7B3B\u7B44\u7B48\u7B4C\u7B4E\u7B40\u7B58\u7B45\u7CA2\u7C9E\u7CA8\u7CA1\u7D58\u7D6F\u7D63\u7D53\u7D56\u7D67\u7D6A\u7D4F\u7D6D\u7D5C\u7D6B\u7D52\u7D54\u7D69\u7D51\u7D5F\u7D4E\u7F3E\u7F3F\u7F65\uFFFD".split("");
      for (j = 0; j != D[218].length; ++j)
        if (D[218][j].charCodeAt(0) !== 65533) {
          e[D[218][j]] = 55808 + j;
          d[55808 + j] = D[218][j];
        }
      D[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F66\u7FA2\u7FA0\u7FA1\u7FD7\u8051\u804F\u8050\u80FE\u80D4\u8143\u814A\u8152\u814F\u8147\u813D\u814D\u813A\u81E6\u81EE\u81F7\u81F8\u81F9\u8204\u823C\u823D\u823F\u8275\u833B\u83CF\u83F9\u8423\u83C0\u83E8\u8412\u83E7\u83E4\u83FC\u83F6\u8410\u83C6\u83C8\u83EB\u83E3\u83BF\u8401\u83DD\u83E5\u83D8\u83FF\u83E1\u83CB\u83CE\u83D6\u83F5\u83C9\u8409\u840F\u83DE\u8411\u8406\u83C2\u83F3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u83D5\u83FA\u83C7\u83D1\u83EA\u8413\u83C3\u83EC\u83EE\u83C4\u83FB\u83D7\u83E2\u841B\u83DB\u83FE\u86D8\u86E2\u86E6\u86D3\u86E3\u86DA\u86EA\u86DD\u86EB\u86DC\u86EC\u86E9\u86D7\u86E8\u86D1\u8848\u8856\u8855\u88BA\u88D7\u88B9\u88B8\u88C0\u88BE\u88B6\u88BC\u88B7\u88BD\u88B2\u8901\u88C9\u8995\u8998\u8997\u89DD\u89DA\u89DB\u8A4E\u8A4D\u8A39\u8A59\u8A40\u8A57\u8A58\u8A44\u8A45\u8A52\u8A48\u8A51\u8A4A\u8A4C\u8A4F\u8C5F\u8C81\u8C80\u8CBA\u8CBE\u8CB0\u8CB9\u8CB5\u8D84\u8D80\u8D89\u8DD8\u8DD3\u8DCD\u8DC7\u8DD6\u8DDC\u8DCF\u8DD5\u8DD9\u8DC8\u8DD7\u8DC5\u8EEF\u8EF7\u8EFA\uFFFD".split("");
      for (j = 0; j != D[219].length; ++j)
        if (D[219][j].charCodeAt(0) !== 65533) {
          e[D[219][j]] = 56064 + j;
          d[56064 + j] = D[219][j];
        }
      D[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8EF9\u8EE6\u8EEE\u8EE5\u8EF5\u8EE7\u8EE8\u8EF6\u8EEB\u8EF1\u8EEC\u8EF4\u8EE9\u902D\u9034\u902F\u9106\u912C\u9104\u90FF\u90FC\u9108\u90F9\u90FB\u9101\u9100\u9107\u9105\u9103\u9161\u9164\u915F\u9162\u9160\u9201\u920A\u9225\u9203\u921A\u9226\u920F\u920C\u9200\u9212\u91FF\u91FD\u9206\u9204\u9227\u9202\u921C\u9224\u9219\u9217\u9205\u9216\u957B\u958D\u958C\u9590\u9687\u967E\u9688\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9689\u9683\u9680\u96C2\u96C8\u96C3\u96F1\u96F0\u976C\u9770\u976E\u9807\u98A9\u98EB\u9CE6\u9EF9\u4E83\u4E84\u4EB6\u50BD\u50BF\u50C6\u50AE\u50C4\u50CA\u50B4\u50C8\u50C2\u50B0\u50C1\u50BA\u50B1\u50CB\u50C9\u50B6\u50B8\u51D7\u527A\u5278\u527B\u527C\u55C3\u55DB\u55CC\u55D0\u55CB\u55CA\u55DD\u55C0\u55D4\u55C4\u55E9\u55BF\u55D2\u558D\u55CF\u55D5\u55E2\u55D6\u55C8\u55F2\u55CD\u55D9\u55C2\u5714\u5853\u5868\u5864\u584F\u584D\u5849\u586F\u5855\u584E\u585D\u5859\u5865\u585B\u583D\u5863\u5871\u58FC\u5AC7\u5AC4\u5ACB\u5ABA\u5AB8\u5AB1\u5AB5\u5AB0\u5ABF\u5AC8\u5ABB\u5AC6\uFFFD".split("");
      for (j = 0; j != D[220].length; ++j)
        if (D[220][j].charCodeAt(0) !== 65533) {
          e[D[220][j]] = 56320 + j;
          d[56320 + j] = D[220][j];
        }
      D[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5AB7\u5AC0\u5ACA\u5AB4\u5AB6\u5ACD\u5AB9\u5A90\u5BD6\u5BD8\u5BD9\u5C1F\u5C33\u5D71\u5D63\u5D4A\u5D65\u5D72\u5D6C\u5D5E\u5D68\u5D67\u5D62\u5DF0\u5E4F\u5E4E\u5E4A\u5E4D\u5E4B\u5EC5\u5ECC\u5EC6\u5ECB\u5EC7\u5F40\u5FAF\u5FAD\u60F7\u6149\u614A\u612B\u6145\u6136\u6132\u612E\u6146\u612F\u614F\u6129\u6140\u6220\u9168\u6223\u6225\u6224\u63C5\u63F1\u63EB\u6410\u6412\u6409\u6420\u6424\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6433\u6443\u641F\u6415\u6418\u6439\u6437\u6422\u6423\u640C\u6426\u6430\u6428\u6441\u6435\u642F\u640A\u641A\u6440\u6425\u6427\u640B\u63E7\u641B\u642E\u6421\u640E\u656F\u6592\u65D3\u6686\u668C\u6695\u6690\u668B\u668A\u6699\u6694\u6678\u6720\u6966\u695F\u6938\u694E\u6962\u6971\u693F\u6945\u696A\u6939\u6942\u6957\u6959\u697A\u6948\u6949\u6935\u696C\u6933\u693D\u6965\u68F0\u6978\u6934\u6969\u6940\u696F\u6944\u6976\u6958\u6941\u6974\u694C\u693B\u694B\u6937\u695C\u694F\u6951\u6932\u6952\u692F\u697B\u693C\u6B46\u6B45\u6B43\u6B42\u6B48\u6B41\u6B9B\uFA0D\u6BFB\u6BFC\uFFFD".split("");
      for (j = 0; j != D[221].length; ++j)
        if (D[221][j].charCodeAt(0) !== 65533) {
          e[D[221][j]] = 56576 + j;
          d[56576 + j] = D[221][j];
        }
      D[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BF9\u6BF7\u6BF8\u6E9B\u6ED6\u6EC8\u6E8F\u6EC0\u6E9F\u6E93\u6E94\u6EA0\u6EB1\u6EB9\u6EC6\u6ED2\u6EBD\u6EC1\u6E9E\u6EC9\u6EB7\u6EB0\u6ECD\u6EA6\u6ECF\u6EB2\u6EBE\u6EC3\u6EDC\u6ED8\u6E99\u6E92\u6E8E\u6E8D\u6EA4\u6EA1\u6EBF\u6EB3\u6ED0\u6ECA\u6E97\u6EAE\u6EA3\u7147\u7154\u7152\u7163\u7160\u7141\u715D\u7162\u7172\u7178\u716A\u7161\u7142\u7158\u7143\u714B\u7170\u715F\u7150\u7153\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7144\u714D\u715A\u724F\u728D\u728C\u7291\u7290\u728E\u733C\u7342\u733B\u733A\u7340\u734A\u7349\u7444\u744A\u744B\u7452\u7451\u7457\u7440\u744F\u7450\u744E\u7442\u7446\u744D\u7454\u74E1\u74FF\u74FE\u74FD\u751D\u7579\u7577\u6983\u75EF\u760F\u7603\u75F7\u75FE\u75FC\u75F9\u75F8\u7610\u75FB\u75F6\u75ED\u75F5\u75FD\u7699\u76B5\u76DD\u7755\u775F\u7760\u7752\u7756\u775A\u7769\u7767\u7754\u7759\u776D\u77E0\u7887\u789A\u7894\u788F\u7884\u7895\u7885\u7886\u78A1\u7883\u7879\u7899\u7880\u7896\u787B\u797C\u7982\u797D\u7979\u7A11\u7A18\u7A19\u7A12\u7A17\u7A15\u7A22\u7A13\uFFFD".split("");
      for (j = 0; j != D[222].length; ++j)
        if (D[222][j].charCodeAt(0) !== 65533) {
          e[D[222][j]] = 56832 + j;
          d[56832 + j] = D[222][j];
        }
      D[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A1B\u7A10\u7AA3\u7AA2\u7A9E\u7AEB\u7B66\u7B64\u7B6D\u7B74\u7B69\u7B72\u7B65\u7B73\u7B71\u7B70\u7B61\u7B78\u7B76\u7B63\u7CB2\u7CB4\u7CAF\u7D88\u7D86\u7D80\u7D8D\u7D7F\u7D85\u7D7A\u7D8E\u7D7B\u7D83\u7D7C\u7D8C\u7D94\u7D84\u7D7D\u7D92\u7F6D\u7F6B\u7F67\u7F68\u7F6C\u7FA6\u7FA5\u7FA7\u7FDB\u7FDC\u8021\u8164\u8160\u8177\u815C\u8169\u815B\u8162\u8172\u6721\u815E\u8176\u8167\u816F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8144\u8161\u821D\u8249\u8244\u8240\u8242\u8245\u84F1\u843F\u8456\u8476\u8479\u848F\u848D\u8465\u8451\u8440\u8486\u8467\u8430\u844D\u847D\u845A\u8459\u8474\u8473\u845D\u8507\u845E\u8437\u843A\u8434\u847A\u8443\u8478\u8432\u8445\u8429\u83D9\u844B\u842F\u8442\u842D\u845F\u8470\u8439\u844E\u844C\u8452\u846F\u84C5\u848E\u843B\u8447\u8436\u8433\u8468\u847E\u8444\u842B\u8460\u8454\u846E\u8450\u870B\u8704\u86F7\u870C\u86FA\u86D6\u86F5\u874D\u86F8\u870E\u8709\u8701\u86F6\u870D\u8705\u88D6\u88CB\u88CD\u88CE\u88DE\u88DB\u88DA\u88CC\u88D0\u8985\u899B\u89DF\u89E5\u89E4\uFFFD".split("");
      for (j = 0; j != D[223].length; ++j)
        if (D[223][j].charCodeAt(0) !== 65533) {
          e[D[223][j]] = 57088 + j;
          d[57088 + j] = D[223][j];
        }
      D[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89E1\u89E0\u89E2\u89DC\u89E6\u8A76\u8A86\u8A7F\u8A61\u8A3F\u8A77\u8A82\u8A84\u8A75\u8A83\u8A81\u8A74\u8A7A\u8C3C\u8C4B\u8C4A\u8C65\u8C64\u8C66\u8C86\u8C84\u8C85\u8CCC\u8D68\u8D69\u8D91\u8D8C\u8D8E\u8D8F\u8D8D\u8D93\u8D94\u8D90\u8D92\u8DF0\u8DE0\u8DEC\u8DF1\u8DEE\u8DD0\u8DE9\u8DE3\u8DE2\u8DE7\u8DF2\u8DEB\u8DF4\u8F06\u8EFF\u8F01\u8F00\u8F05\u8F07\u8F08\u8F02\u8F0B\u9052\u903F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9044\u9049\u903D\u9110\u910D\u910F\u9111\u9116\u9114\u910B\u910E\u916E\u916F\u9248\u9252\u9230\u923A\u9266\u9233\u9265\u925E\u9283\u922E\u924A\u9246\u926D\u926C\u924F\u9260\u9267\u926F\u9236\u9261\u9270\u9231\u9254\u9263\u9250\u9272\u924E\u9253\u924C\u9256\u9232\u959F\u959C\u959E\u959B\u9692\u9693\u9691\u9697\u96CE\u96FA\u96FD\u96F8\u96F5\u9773\u9777\u9778\u9772\u980F\u980D\u980E\u98AC\u98F6\u98F9\u99AF\u99B2\u99B0\u99B5\u9AAD\u9AAB\u9B5B\u9CEA\u9CED\u9CE7\u9E80\u9EFD\u50E6\u50D4\u50D7\u50E8\u50F3\u50DB\u50EA\u50DD\u50E4\u50D3\u50EC\u50F0\u50EF\u50E3\u50E0\uFFFD".split("");
      for (j = 0; j != D[224].length; ++j)
        if (D[224][j].charCodeAt(0) !== 65533) {
          e[D[224][j]] = 57344 + j;
          d[57344 + j] = D[224][j];
        }
      D[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51D8\u5280\u5281\u52E9\u52EB\u5330\u53AC\u5627\u5615\u560C\u5612\u55FC\u560F\u561C\u5601\u5613\u5602\u55FA\u561D\u5604\u55FF\u55F9\u5889\u587C\u5890\u5898\u5886\u5881\u587F\u5874\u588B\u587A\u5887\u5891\u588E\u5876\u5882\u5888\u587B\u5894\u588F\u58FE\u596B\u5ADC\u5AEE\u5AE5\u5AD5\u5AEA\u5ADA\u5AED\u5AEB\u5AF3\u5AE2\u5AE0\u5ADB\u5AEC\u5ADE\u5ADD\u5AD9\u5AE8\u5ADF\u5B77\u5BE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5BE3\u5C63\u5D82\u5D80\u5D7D\u5D86\u5D7A\u5D81\u5D77\u5D8A\u5D89\u5D88\u5D7E\u5D7C\u5D8D\u5D79\u5D7F\u5E58\u5E59\u5E53\u5ED8\u5ED1\u5ED7\u5ECE\u5EDC\u5ED5\u5ED9\u5ED2\u5ED4\u5F44\u5F43\u5F6F\u5FB6\u612C\u6128\u6141\u615E\u6171\u6173\u6152\u6153\u6172\u616C\u6180\u6174\u6154\u617A\u615B\u6165\u613B\u616A\u6161\u6156\u6229\u6227\u622B\u642B\u644D\u645B\u645D\u6474\u6476\u6472\u6473\u647D\u6475\u6466\u64A6\u644E\u6482\u645E\u645C\u644B\u6453\u6460\u6450\u647F\u643F\u646C\u646B\u6459\u6465\u6477\u6573\u65A0\u66A1\u66A0\u669F\u6705\u6704\u6722\u69B1\u69B6\u69C9\uFFFD".split("");
      for (j = 0; j != D[225].length; ++j)
        if (D[225][j].charCodeAt(0) !== 65533) {
          e[D[225][j]] = 57600 + j;
          d[57600 + j] = D[225][j];
        }
      D[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u69A0\u69CE\u6996\u69B0\u69AC\u69BC\u6991\u6999\u698E\u69A7\u698D\u69A9\u69BE\u69AF\u69BF\u69C4\u69BD\u69A4\u69D4\u69B9\u69CA\u699A\u69CF\u69B3\u6993\u69AA\u69A1\u699E\u69D9\u6997\u6990\u69C2\u69B5\u69A5\u69C6\u6B4A\u6B4D\u6B4B\u6B9E\u6B9F\u6BA0\u6BC3\u6BC4\u6BFE\u6ECE\u6EF5\u6EF1\u6F03\u6F25\u6EF8\u6F37\u6EFB\u6F2E\u6F09\u6F4E\u6F19\u6F1A\u6F27\u6F18\u6F3B\u6F12\u6EED\u6F0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F36\u6F73\u6EF9\u6EEE\u6F2D\u6F40\u6F30\u6F3C\u6F35\u6EEB\u6F07\u6F0E\u6F43\u6F05\u6EFD\u6EF6\u6F39\u6F1C\u6EFC\u6F3A\u6F1F\u6F0D\u6F1E\u6F08\u6F21\u7187\u7190\u7189\u7180\u7185\u7182\u718F\u717B\u7186\u7181\u7197\u7244\u7253\u7297\u7295\u7293\u7343\u734D\u7351\u734C\u7462\u7473\u7471\u7475\u7472\u7467\u746E\u7500\u7502\u7503\u757D\u7590\u7616\u7608\u760C\u7615\u7611\u760A\u7614\u76B8\u7781\u777C\u7785\u7782\u776E\u7780\u776F\u777E\u7783\u78B2\u78AA\u78B4\u78AD\u78A8\u787E\u78AB\u789E\u78A5\u78A0\u78AC\u78A2\u78A4\u7998\u798A\u798B\u7996\u7995\u7994\u7993\uFFFD".split("");
      for (j = 0; j != D[226].length; ++j)
        if (D[226][j].charCodeAt(0) !== 65533) {
          e[D[226][j]] = 57856 + j;
          d[57856 + j] = D[226][j];
        }
      D[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7997\u7988\u7992\u7990\u7A2B\u7A4A\u7A30\u7A2F\u7A28\u7A26\u7AA8\u7AAB\u7AAC\u7AEE\u7B88\u7B9C\u7B8A\u7B91\u7B90\u7B96\u7B8D\u7B8C\u7B9B\u7B8E\u7B85\u7B98\u5284\u7B99\u7BA4\u7B82\u7CBB\u7CBF\u7CBC\u7CBA\u7DA7\u7DB7\u7DC2\u7DA3\u7DAA\u7DC1\u7DC0\u7DC5\u7D9D\u7DCE\u7DC4\u7DC6\u7DCB\u7DCC\u7DAF\u7DB9\u7D96\u7DBC\u7D9F\u7DA6\u7DAE\u7DA9\u7DA1\u7DC9\u7F73\u7FE2\u7FE3\u7FE5\u7FDE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8024\u805D\u805C\u8189\u8186\u8183\u8187\u818D\u818C\u818B\u8215\u8497\u84A4\u84A1\u849F\u84BA\u84CE\u84C2\u84AC\u84AE\u84AB\u84B9\u84B4\u84C1\u84CD\u84AA\u849A\u84B1\u84D0\u849D\u84A7\u84BB\u84A2\u8494\u84C7\u84CC\u849B\u84A9\u84AF\u84A8\u84D6\u8498\u84B6\u84CF\u84A0\u84D7\u84D4\u84D2\u84DB\u84B0\u8491\u8661\u8733\u8723\u8728\u876B\u8740\u872E\u871E\u8721\u8719\u871B\u8743\u872C\u8741\u873E\u8746\u8720\u8732\u872A\u872D\u873C\u8712\u873A\u8731\u8735\u8742\u8726\u8727\u8738\u8724\u871A\u8730\u8711\u88F7\u88E7\u88F1\u88F2\u88FA\u88FE\u88EE\u88FC\u88F6\u88FB\uFFFD".split("");
      for (j = 0; j != D[227].length; ++j)
        if (D[227][j].charCodeAt(0) !== 65533) {
          e[D[227][j]] = 58112 + j;
          d[58112 + j] = D[227][j];
        }
      D[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u88F0\u88EC\u88EB\u899D\u89A1\u899F\u899E\u89E9\u89EB\u89E8\u8AAB\u8A99\u8A8B\u8A92\u8A8F\u8A96\u8C3D\u8C68\u8C69\u8CD5\u8CCF\u8CD7\u8D96\u8E09\u8E02\u8DFF\u8E0D\u8DFD\u8E0A\u8E03\u8E07\u8E06\u8E05\u8DFE\u8E00\u8E04\u8F10\u8F11\u8F0E\u8F0D\u9123\u911C\u9120\u9122\u911F\u911D\u911A\u9124\u9121\u911B\u917A\u9172\u9179\u9173\u92A5\u92A4\u9276\u929B\u927A\u92A0\u9294\u92AA\u928D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92A6\u929A\u92AB\u9279\u9297\u927F\u92A3\u92EE\u928E\u9282\u9295\u92A2\u927D\u9288\u92A1\u928A\u9286\u928C\u9299\u92A7\u927E\u9287\u92A9\u929D\u928B\u922D\u969E\u96A1\u96FF\u9758\u977D\u977A\u977E\u9783\u9780\u9782\u977B\u9784\u9781\u977F\u97CE\u97CD\u9816\u98AD\u98AE\u9902\u9900\u9907\u999D\u999C\u99C3\u99B9\u99BB\u99BA\u99C2\u99BD\u99C7\u9AB1\u9AE3\u9AE7\u9B3E\u9B3F\u9B60\u9B61\u9B5F\u9CF1\u9CF2\u9CF5\u9EA7\u50FF\u5103\u5130\u50F8\u5106\u5107\u50F6\u50FE\u510B\u510C\u50FD\u510A\u528B\u528C\u52F1\u52EF\u5648\u5642\u564C\u5635\u5641\u564A\u5649\u5646\u5658\uFFFD".split("");
      for (j = 0; j != D[228].length; ++j)
        if (D[228][j].charCodeAt(0) !== 65533) {
          e[D[228][j]] = 58368 + j;
          d[58368 + j] = D[228][j];
        }
      D[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u565A\u5640\u5633\u563D\u562C\u563E\u5638\u562A\u563A\u571A\u58AB\u589D\u58B1\u58A0\u58A3\u58AF\u58AC\u58A5\u58A1\u58FF\u5AFF\u5AF4\u5AFD\u5AF7\u5AF6\u5B03\u5AF8\u5B02\u5AF9\u5B01\u5B07\u5B05\u5B0F\u5C67\u5D99\u5D97\u5D9F\u5D92\u5DA2\u5D93\u5D95\u5DA0\u5D9C\u5DA1\u5D9A\u5D9E\u5E69\u5E5D\u5E60\u5E5C\u7DF3\u5EDB\u5EDE\u5EE1\u5F49\u5FB2\u618B\u6183\u6179\u61B1\u61B0\u61A2\u6189\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u619B\u6193\u61AF\u61AD\u619F\u6192\u61AA\u61A1\u618D\u6166\u61B3\u622D\u646E\u6470\u6496\u64A0\u6485\u6497\u649C\u648F\u648B\u648A\u648C\u64A3\u649F\u6468\u64B1\u6498\u6576\u657A\u6579\u657B\u65B2\u65B3\u66B5\u66B0\u66A9\u66B2\u66B7\u66AA\u66AF\u6A00\u6A06\u6A17\u69E5\u69F8\u6A15\u69F1\u69E4\u6A20\u69FF\u69EC\u69E2\u6A1B\u6A1D\u69FE\u6A27\u69F2\u69EE\u6A14\u69F7\u69E7\u6A40\u6A08\u69E6\u69FB\u6A0D\u69FC\u69EB\u6A09\u6A04\u6A18\u6A25\u6A0F\u69F6\u6A26\u6A07\u69F4\u6A16\u6B51\u6BA5\u6BA3\u6BA2\u6BA6\u6C01\u6C00\u6BFF\u6C02\u6F41\u6F26\u6F7E\u6F87\u6FC6\u6F92\uFFFD".split("");
      for (j = 0; j != D[229].length; ++j)
        if (D[229][j].charCodeAt(0) !== 65533) {
          e[D[229][j]] = 58624 + j;
          d[58624 + j] = D[229][j];
        }
      D[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F8D\u6F89\u6F8C\u6F62\u6F4F\u6F85\u6F5A\u6F96\u6F76\u6F6C\u6F82\u6F55\u6F72\u6F52\u6F50\u6F57\u6F94\u6F93\u6F5D\u6F00\u6F61\u6F6B\u6F7D\u6F67\u6F90\u6F53\u6F8B\u6F69\u6F7F\u6F95\u6F63\u6F77\u6F6A\u6F7B\u71B2\u71AF\u719B\u71B0\u71A0\u719A\u71A9\u71B5\u719D\u71A5\u719E\u71A4\u71A1\u71AA\u719C\u71A7\u71B3\u7298\u729A\u7358\u7352\u735E\u735F\u7360\u735D\u735B\u7361\u735A\u7359\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7362\u7487\u7489\u748A\u7486\u7481\u747D\u7485\u7488\u747C\u7479\u7508\u7507\u757E\u7625\u761E\u7619\u761D\u761C\u7623\u761A\u7628\u761B\u769C\u769D\u769E\u769B\u778D\u778F\u7789\u7788\u78CD\u78BB\u78CF\u78CC\u78D1\u78CE\u78D4\u78C8\u78C3\u78C4\u78C9\u799A\u79A1\u79A0\u799C\u79A2\u799B\u6B76\u7A39\u7AB2\u7AB4\u7AB3\u7BB7\u7BCB\u7BBE\u7BAC\u7BCE\u7BAF\u7BB9\u7BCA\u7BB5\u7CC5\u7CC8\u7CCC\u7CCB\u7DF7\u7DDB\u7DEA\u7DE7\u7DD7\u7DE1\u7E03\u7DFA\u7DE6\u7DF6\u7DF1\u7DF0\u7DEE\u7DDF\u7F76\u7FAC\u7FB0\u7FAD\u7FED\u7FEB\u7FEA\u7FEC\u7FE6\u7FE8\u8064\u8067\u81A3\u819F\uFFFD".split("");
      for (j = 0; j != D[230].length; ++j)
        if (D[230][j].charCodeAt(0) !== 65533) {
          e[D[230][j]] = 58880 + j;
          d[58880 + j] = D[230][j];
        }
      D[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u819E\u8195\u81A2\u8199\u8197\u8216\u824F\u8253\u8252\u8250\u824E\u8251\u8524\u853B\u850F\u8500\u8529\u850E\u8509\u850D\u851F\u850A\u8527\u851C\u84FB\u852B\u84FA\u8508\u850C\u84F4\u852A\u84F2\u8515\u84F7\u84EB\u84F3\u84FC\u8512\u84EA\u84E9\u8516\u84FE\u8528\u851D\u852E\u8502\u84FD\u851E\u84F6\u8531\u8526\u84E7\u84E8\u84F0\u84EF\u84F9\u8518\u8520\u8530\u850B\u8519\u852F\u8662\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8756\u8763\u8764\u8777\u87E1\u8773\u8758\u8754\u875B\u8752\u8761\u875A\u8751\u875E\u876D\u876A\u8750\u874E\u875F\u875D\u876F\u876C\u877A\u876E\u875C\u8765\u874F\u877B\u8775\u8762\u8767\u8769\u885A\u8905\u890C\u8914\u890B\u8917\u8918\u8919\u8906\u8916\u8911\u890E\u8909\u89A2\u89A4\u89A3\u89ED\u89F0\u89EC\u8ACF\u8AC6\u8AB8\u8AD3\u8AD1\u8AD4\u8AD5\u8ABB\u8AD7\u8ABE\u8AC0\u8AC5\u8AD8\u8AC3\u8ABA\u8ABD\u8AD9\u8C3E\u8C4D\u8C8F\u8CE5\u8CDF\u8CD9\u8CE8\u8CDA\u8CDD\u8CE7\u8DA0\u8D9C\u8DA1\u8D9B\u8E20\u8E23\u8E25\u8E24\u8E2E\u8E15\u8E1B\u8E16\u8E11\u8E19\u8E26\u8E27\uFFFD".split("");
      for (j = 0; j != D[231].length; ++j)
        if (D[231][j].charCodeAt(0) !== 65533) {
          e[D[231][j]] = 59136 + j;
          d[59136 + j] = D[231][j];
        }
      D[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E14\u8E12\u8E18\u8E13\u8E1C\u8E17\u8E1A\u8F2C\u8F24\u8F18\u8F1A\u8F20\u8F23\u8F16\u8F17\u9073\u9070\u906F\u9067\u906B\u912F\u912B\u9129\u912A\u9132\u9126\u912E\u9185\u9186\u918A\u9181\u9182\u9184\u9180\u92D0\u92C3\u92C4\u92C0\u92D9\u92B6\u92CF\u92F1\u92DF\u92D8\u92E9\u92D7\u92DD\u92CC\u92EF\u92C2\u92E8\u92CA\u92C8\u92CE\u92E6\u92CD\u92D5\u92C9\u92E0\u92DE\u92E7\u92D1\u92D3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92B5\u92E1\u92C6\u92B4\u957C\u95AC\u95AB\u95AE\u95B0\u96A4\u96A2\u96D3\u9705\u9708\u9702\u975A\u978A\u978E\u9788\u97D0\u97CF\u981E\u981D\u9826\u9829\u9828\u9820\u981B\u9827\u98B2\u9908\u98FA\u9911\u9914\u9916\u9917\u9915\u99DC\u99CD\u99CF\u99D3\u99D4\u99CE\u99C9\u99D6\u99D8\u99CB\u99D7\u99CC\u9AB3\u9AEC\u9AEB\u9AF3\u9AF2\u9AF1\u9B46\u9B43\u9B67\u9B74\u9B71\u9B66\u9B76\u9B75\u9B70\u9B68\u9B64\u9B6C\u9CFC\u9CFA\u9CFD\u9CFF\u9CF7\u9D07\u9D00\u9CF9\u9CFB\u9D08\u9D05\u9D04\u9E83\u9ED3\u9F0F\u9F10\u511C\u5113\u5117\u511A\u5111\u51DE\u5334\u53E1\u5670\u5660\u566E\uFFFD".split("");
      for (j = 0; j != D[232].length; ++j)
        if (D[232][j].charCodeAt(0) !== 65533) {
          e[D[232][j]] = 59392 + j;
          d[59392 + j] = D[232][j];
        }
      D[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5673\u5666\u5663\u566D\u5672\u565E\u5677\u571C\u571B\u58C8\u58BD\u58C9\u58BF\u58BA\u58C2\u58BC\u58C6\u5B17\u5B19\u5B1B\u5B21\u5B14\u5B13\u5B10\u5B16\u5B28\u5B1A\u5B20\u5B1E\u5BEF\u5DAC\u5DB1\u5DA9\u5DA7\u5DB5\u5DB0\u5DAE\u5DAA\u5DA8\u5DB2\u5DAD\u5DAF\u5DB4\u5E67\u5E68\u5E66\u5E6F\u5EE9\u5EE7\u5EE6\u5EE8\u5EE5\u5F4B\u5FBC\u619D\u61A8\u6196\u61C5\u61B4\u61C6\u61C1\u61CC\u61BA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u61BF\u61B8\u618C\u64D7\u64D6\u64D0\u64CF\u64C9\u64BD\u6489\u64C3\u64DB\u64F3\u64D9\u6533\u657F\u657C\u65A2\u66C8\u66BE\u66C0\u66CA\u66CB\u66CF\u66BD\u66BB\u66BA\u66CC\u6723\u6A34\u6A66\u6A49\u6A67\u6A32\u6A68\u6A3E\u6A5D\u6A6D\u6A76\u6A5B\u6A51\u6A28\u6A5A\u6A3B\u6A3F\u6A41\u6A6A\u6A64\u6A50\u6A4F\u6A54\u6A6F\u6A69\u6A60\u6A3C\u6A5E\u6A56\u6A55\u6A4D\u6A4E\u6A46\u6B55\u6B54\u6B56\u6BA7\u6BAA\u6BAB\u6BC8\u6BC7\u6C04\u6C03\u6C06\u6FAD\u6FCB\u6FA3\u6FC7\u6FBC\u6FCE\u6FC8\u6F5E\u6FC4\u6FBD\u6F9E\u6FCA\u6FA8\u7004\u6FA5\u6FAE\u6FBA\u6FAC\u6FAA\u6FCF\u6FBF\u6FB8\uFFFD".split("");
      for (j = 0; j != D[233].length; ++j)
        if (D[233][j].charCodeAt(0) !== 65533) {
          e[D[233][j]] = 59648 + j;
          d[59648 + j] = D[233][j];
        }
      D[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FA2\u6FC9\u6FAB\u6FCD\u6FAF\u6FB2\u6FB0\u71C5\u71C2\u71BF\u71B8\u71D6\u71C0\u71C1\u71CB\u71D4\u71CA\u71C7\u71CF\u71BD\u71D8\u71BC\u71C6\u71DA\u71DB\u729D\u729E\u7369\u7366\u7367\u736C\u7365\u736B\u736A\u747F\u749A\u74A0\u7494\u7492\u7495\u74A1\u750B\u7580\u762F\u762D\u7631\u763D\u7633\u763C\u7635\u7632\u7630\u76BB\u76E6\u779A\u779D\u77A1\u779C\u779B\u77A2\u77A3\u7795\u7799\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7797\u78DD\u78E9\u78E5\u78EA\u78DE\u78E3\u78DB\u78E1\u78E2\u78ED\u78DF\u78E0\u79A4\u7A44\u7A48\u7A47\u7AB6\u7AB8\u7AB5\u7AB1\u7AB7\u7BDE\u7BE3\u7BE7\u7BDD\u7BD5\u7BE5\u7BDA\u7BE8\u7BF9\u7BD4\u7BEA\u7BE2\u7BDC\u7BEB\u7BD8\u7BDF\u7CD2\u7CD4\u7CD7\u7CD0\u7CD1\u7E12\u7E21\u7E17\u7E0C\u7E1F\u7E20\u7E13\u7E0E\u7E1C\u7E15\u7E1A\u7E22\u7E0B\u7E0F\u7E16\u7E0D\u7E14\u7E25\u7E24\u7F43\u7F7B\u7F7C\u7F7A\u7FB1\u7FEF\u802A\u8029\u806C\u81B1\u81A6\u81AE\u81B9\u81B5\u81AB\u81B0\u81AC\u81B4\u81B2\u81B7\u81A7\u81F2\u8255\u8256\u8257\u8556\u8545\u856B\u854D\u8553\u8561\u8558\uFFFD".split("");
      for (j = 0; j != D[234].length; ++j)
        if (D[234][j].charCodeAt(0) !== 65533) {
          e[D[234][j]] = 59904 + j;
          d[59904 + j] = D[234][j];
        }
      D[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8540\u8546\u8564\u8541\u8562\u8544\u8551\u8547\u8563\u853E\u855B\u8571\u854E\u856E\u8575\u8555\u8567\u8560\u858C\u8566\u855D\u8554\u8565\u856C\u8663\u8665\u8664\u879B\u878F\u8797\u8793\u8792\u8788\u8781\u8796\u8798\u8779\u8787\u87A3\u8785\u8790\u8791\u879D\u8784\u8794\u879C\u879A\u8789\u891E\u8926\u8930\u892D\u892E\u8927\u8931\u8922\u8929\u8923\u892F\u892C\u891F\u89F1\u8AE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AE2\u8AF2\u8AF4\u8AF5\u8ADD\u8B14\u8AE4\u8ADF\u8AF0\u8AC8\u8ADE\u8AE1\u8AE8\u8AFF\u8AEF\u8AFB\u8C91\u8C92\u8C90\u8CF5\u8CEE\u8CF1\u8CF0\u8CF3\u8D6C\u8D6E\u8DA5\u8DA7\u8E33\u8E3E\u8E38\u8E40\u8E45\u8E36\u8E3C\u8E3D\u8E41\u8E30\u8E3F\u8EBD\u8F36\u8F2E\u8F35\u8F32\u8F39\u8F37\u8F34\u9076\u9079\u907B\u9086\u90FA\u9133\u9135\u9136\u9193\u9190\u9191\u918D\u918F\u9327\u931E\u9308\u931F\u9306\u930F\u937A\u9338\u933C\u931B\u9323\u9312\u9301\u9346\u932D\u930E\u930D\u92CB\u931D\u92FA\u9325\u9313\u92F9\u92F7\u9334\u9302\u9324\u92FF\u9329\u9339\u9335\u932A\u9314\u930C\uFFFD".split("");
      for (j = 0; j != D[235].length; ++j)
        if (D[235][j].charCodeAt(0) !== 65533) {
          e[D[235][j]] = 60160 + j;
          d[60160 + j] = D[235][j];
        }
      D[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u930B\u92FE\u9309\u9300\u92FB\u9316\u95BC\u95CD\u95BE\u95B9\u95BA\u95B6\u95BF\u95B5\u95BD\u96A9\u96D4\u970B\u9712\u9710\u9799\u9797\u9794\u97F0\u97F8\u9835\u982F\u9832\u9924\u991F\u9927\u9929\u999E\u99EE\u99EC\u99E5\u99E4\u99F0\u99E3\u99EA\u99E9\u99E7\u9AB9\u9ABF\u9AB4\u9ABB\u9AF6\u9AFA\u9AF9\u9AF7\u9B33\u9B80\u9B85\u9B87\u9B7C\u9B7E\u9B7B\u9B82\u9B93\u9B92\u9B90\u9B7A\u9B95\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B7D\u9B88\u9D25\u9D17\u9D20\u9D1E\u9D14\u9D29\u9D1D\u9D18\u9D22\u9D10\u9D19\u9D1F\u9E88\u9E86\u9E87\u9EAE\u9EAD\u9ED5\u9ED6\u9EFA\u9F12\u9F3D\u5126\u5125\u5122\u5124\u5120\u5129\u52F4\u5693\u568C\u568D\u5686\u5684\u5683\u567E\u5682\u567F\u5681\u58D6\u58D4\u58CF\u58D2\u5B2D\u5B25\u5B32\u5B23\u5B2C\u5B27\u5B26\u5B2F\u5B2E\u5B7B\u5BF1\u5BF2\u5DB7\u5E6C\u5E6A\u5FBE\u5FBB\u61C3\u61B5\u61BC\u61E7\u61E0\u61E5\u61E4\u61E8\u61DE\u64EF\u64E9\u64E3\u64EB\u64E4\u64E8\u6581\u6580\u65B6\u65DA\u66D2\u6A8D\u6A96\u6A81\u6AA5\u6A89\u6A9F\u6A9B\u6AA1\u6A9E\u6A87\u6A93\u6A8E\uFFFD".split("");
      for (j = 0; j != D[236].length; ++j)
        if (D[236][j].charCodeAt(0) !== 65533) {
          e[D[236][j]] = 60416 + j;
          d[60416 + j] = D[236][j];
        }
      D[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A95\u6A83\u6AA8\u6AA4\u6A91\u6A7F\u6AA6\u6A9A\u6A85\u6A8C\u6A92\u6B5B\u6BAD\u6C09\u6FCC\u6FA9\u6FF4\u6FD4\u6FE3\u6FDC\u6FED\u6FE7\u6FE6\u6FDE\u6FF2\u6FDD\u6FE2\u6FE8\u71E1\u71F1\u71E8\u71F2\u71E4\u71F0\u71E2\u7373\u736E\u736F\u7497\u74B2\u74AB\u7490\u74AA\u74AD\u74B1\u74A5\u74AF\u7510\u7511\u7512\u750F\u7584\u7643\u7648\u7649\u7647\u76A4\u76E9\u77B5\u77AB\u77B2\u77B7\u77B6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77B4\u77B1\u77A8\u77F0\u78F3\u78FD\u7902\u78FB\u78FC\u78F2\u7905\u78F9\u78FE\u7904\u79AB\u79A8\u7A5C\u7A5B\u7A56\u7A58\u7A54\u7A5A\u7ABE\u7AC0\u7AC1\u7C05\u7C0F\u7BF2\u7C00\u7BFF\u7BFB\u7C0E\u7BF4\u7C0B\u7BF3\u7C02\u7C09\u7C03\u7C01\u7BF8\u7BFD\u7C06\u7BF0\u7BF1\u7C10\u7C0A\u7CE8\u7E2D\u7E3C\u7E42\u7E33\u9848\u7E38\u7E2A\u7E49\u7E40\u7E47\u7E29\u7E4C\u7E30\u7E3B\u7E36\u7E44\u7E3A\u7F45\u7F7F\u7F7E\u7F7D\u7FF4\u7FF2\u802C\u81BB\u81C4\u81CC\u81CA\u81C5\u81C7\u81BC\u81E9\u825B\u825A\u825C\u8583\u8580\u858F\u85A7\u8595\u85A0\u858B\u85A3\u857B\u85A4\u859A\u859E\uFFFD".split("");
      for (j = 0; j != D[237].length; ++j)
        if (D[237][j].charCodeAt(0) !== 65533) {
          e[D[237][j]] = 60672 + j;
          d[60672 + j] = D[237][j];
        }
      D[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8577\u857C\u8589\u85A1\u857A\u8578\u8557\u858E\u8596\u8586\u858D\u8599\u859D\u8581\u85A2\u8582\u8588\u8585\u8579\u8576\u8598\u8590\u859F\u8668\u87BE\u87AA\u87AD\u87C5\u87B0\u87AC\u87B9\u87B5\u87BC\u87AE\u87C9\u87C3\u87C2\u87CC\u87B7\u87AF\u87C4\u87CA\u87B4\u87B6\u87BF\u87B8\u87BD\u87DE\u87B2\u8935\u8933\u893C\u893E\u8941\u8952\u8937\u8942\u89AD\u89AF\u89AE\u89F2\u89F3\u8B1E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B18\u8B16\u8B11\u8B05\u8B0B\u8B22\u8B0F\u8B12\u8B15\u8B07\u8B0D\u8B08\u8B06\u8B1C\u8B13\u8B1A\u8C4F\u8C70\u8C72\u8C71\u8C6F\u8C95\u8C94\u8CF9\u8D6F\u8E4E\u8E4D\u8E53\u8E50\u8E4C\u8E47\u8F43\u8F40\u9085\u907E\u9138\u919A\u91A2\u919B\u9199\u919F\u91A1\u919D\u91A0\u93A1\u9383\u93AF\u9364\u9356\u9347\u937C\u9358\u935C\u9376\u9349\u9350\u9351\u9360\u936D\u938F\u934C\u936A\u9379\u9357\u9355\u9352\u934F\u9371\u9377\u937B\u9361\u935E\u9363\u9367\u9380\u934E\u9359\u95C7\u95C0\u95C9\u95C3\u95C5\u95B7\u96AE\u96B0\u96AC\u9720\u971F\u9718\u971D\u9719\u979A\u97A1\u979C\uFFFD".split("");
      for (j = 0; j != D[238].length; ++j)
        if (D[238][j].charCodeAt(0) !== 65533) {
          e[D[238][j]] = 60928 + j;
          d[60928 + j] = D[238][j];
        }
      D[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u979E\u979D\u97D5\u97D4\u97F1\u9841\u9844\u984A\u9849\u9845\u9843\u9925\u992B\u992C\u992A\u9933\u9932\u992F\u992D\u9931\u9930\u9998\u99A3\u99A1\u9A02\u99FA\u99F4\u99F7\u99F9\u99F8\u99F6\u99FB\u99FD\u99FE\u99FC\u9A03\u9ABE\u9AFE\u9AFD\u9B01\u9AFC\u9B48\u9B9A\u9BA8\u9B9E\u9B9B\u9BA6\u9BA1\u9BA5\u9BA4\u9B86\u9BA2\u9BA0\u9BAF\u9D33\u9D41\u9D67\u9D36\u9D2E\u9D2F\u9D31\u9D38\u9D30\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D45\u9D42\u9D43\u9D3E\u9D37\u9D40\u9D3D\u7FF5\u9D2D\u9E8A\u9E89\u9E8D\u9EB0\u9EC8\u9EDA\u9EFB\u9EFF\u9F24\u9F23\u9F22\u9F54\u9FA0\u5131\u512D\u512E\u5698\u569C\u5697\u569A\u569D\u5699\u5970\u5B3C\u5C69\u5C6A\u5DC0\u5E6D\u5E6E\u61D8\u61DF\u61ED\u61EE\u61F1\u61EA\u61F0\u61EB\u61D6\u61E9\u64FF\u6504\u64FD\u64F8\u6501\u6503\u64FC\u6594\u65DB\u66DA\u66DB\u66D8\u6AC5\u6AB9\u6ABD\u6AE1\u6AC6\u6ABA\u6AB6\u6AB7\u6AC7\u6AB4\u6AAD\u6B5E\u6BC9\u6C0B\u7007\u700C\u700D\u7001\u7005\u7014\u700E\u6FFF\u7000\u6FFB\u7026\u6FFC\u6FF7\u700A\u7201\u71FF\u71F9\u7203\u71FD\u7376\uFFFD".split("");
      for (j = 0; j != D[239].length; ++j)
        if (D[239][j].charCodeAt(0) !== 65533) {
          e[D[239][j]] = 61184 + j;
          d[61184 + j] = D[239][j];
        }
      D[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74B8\u74C0\u74B5\u74C1\u74BE\u74B6\u74BB\u74C2\u7514\u7513\u765C\u7664\u7659\u7650\u7653\u7657\u765A\u76A6\u76BD\u76EC\u77C2\u77BA\u78FF\u790C\u7913\u7914\u7909\u7910\u7912\u7911\u79AD\u79AC\u7A5F\u7C1C\u7C29\u7C19\u7C20\u7C1F\u7C2D\u7C1D\u7C26\u7C28\u7C22\u7C25\u7C30\u7E5C\u7E50\u7E56\u7E63\u7E58\u7E62\u7E5F\u7E51\u7E60\u7E57\u7E53\u7FB5\u7FB3\u7FF7\u7FF8\u8075\u81D1\u81D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81D0\u825F\u825E\u85B4\u85C6\u85C0\u85C3\u85C2\u85B3\u85B5\u85BD\u85C7\u85C4\u85BF\u85CB\u85CE\u85C8\u85C5\u85B1\u85B6\u85D2\u8624\u85B8\u85B7\u85BE\u8669\u87E7\u87E6\u87E2\u87DB\u87EB\u87EA\u87E5\u87DF\u87F3\u87E4\u87D4\u87DC\u87D3\u87ED\u87D8\u87E3\u87A4\u87D7\u87D9\u8801\u87F4\u87E8\u87DD\u8953\u894B\u894F\u894C\u8946\u8950\u8951\u8949\u8B2A\u8B27\u8B23\u8B33\u8B30\u8B35\u8B47\u8B2F\u8B3C\u8B3E\u8B31\u8B25\u8B37\u8B26\u8B36\u8B2E\u8B24\u8B3B\u8B3D\u8B3A\u8C42\u8C75\u8C99\u8C98\u8C97\u8CFE\u8D04\u8D02\u8D00\u8E5C\u8E62\u8E60\u8E57\u8E56\u8E5E\u8E65\u8E67\uFFFD".split("");
      for (j = 0; j != D[240].length; ++j)
        if (D[240][j].charCodeAt(0) !== 65533) {
          e[D[240][j]] = 61440 + j;
          d[61440 + j] = D[240][j];
        }
      D[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E5B\u8E5A\u8E61\u8E5D\u8E69\u8E54\u8F46\u8F47\u8F48\u8F4B\u9128\u913A\u913B\u913E\u91A8\u91A5\u91A7\u91AF\u91AA\u93B5\u938C\u9392\u93B7\u939B\u939D\u9389\u93A7\u938E\u93AA\u939E\u93A6\u9395\u9388\u9399\u939F\u938D\u93B1\u9391\u93B2\u93A4\u93A8\u93B4\u93A3\u93A5\u95D2\u95D3\u95D1\u96B3\u96D7\u96DA\u5DC2\u96DF\u96D8\u96DD\u9723\u9722\u9725\u97AC\u97AE\u97A8\u97AB\u97A4\u97AA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97A2\u97A5\u97D7\u97D9\u97D6\u97D8\u97FA\u9850\u9851\u9852\u98B8\u9941\u993C\u993A\u9A0F\u9A0B\u9A09\u9A0D\u9A04\u9A11\u9A0A\u9A05\u9A07\u9A06\u9AC0\u9ADC\u9B08\u9B04\u9B05\u9B29\u9B35\u9B4A\u9B4C\u9B4B\u9BC7\u9BC6\u9BC3\u9BBF\u9BC1\u9BB5\u9BB8\u9BD3\u9BB6\u9BC4\u9BB9\u9BBD\u9D5C\u9D53\u9D4F\u9D4A\u9D5B\u9D4B\u9D59\u9D56\u9D4C\u9D57\u9D52\u9D54\u9D5F\u9D58\u9D5A\u9E8E\u9E8C\u9EDF\u9F01\u9F00\u9F16\u9F25\u9F2B\u9F2A\u9F29\u9F28\u9F4C\u9F55\u5134\u5135\u5296\u52F7\u53B4\u56AB\u56AD\u56A6\u56A7\u56AA\u56AC\u58DA\u58DD\u58DB\u5912\u5B3D\u5B3E\u5B3F\u5DC3\u5E70\uFFFD".split("");
      for (j = 0; j != D[241].length; ++j)
        if (D[241][j].charCodeAt(0) !== 65533) {
          e[D[241][j]] = 61696 + j;
          d[61696 + j] = D[241][j];
        }
      D[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5FBF\u61FB\u6507\u6510\u650D\u6509\u650C\u650E\u6584\u65DE\u65DD\u66DE\u6AE7\u6AE0\u6ACC\u6AD1\u6AD9\u6ACB\u6ADF\u6ADC\u6AD0\u6AEB\u6ACF\u6ACD\u6ADE\u6B60\u6BB0\u6C0C\u7019\u7027\u7020\u7016\u702B\u7021\u7022\u7023\u7029\u7017\u7024\u701C\u702A\u720C\u720A\u7207\u7202\u7205\u72A5\u72A6\u72A4\u72A3\u72A1\u74CB\u74C5\u74B7\u74C3\u7516\u7660\u77C9\u77CA\u77C4\u77F1\u791D\u791B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7921\u791C\u7917\u791E\u79B0\u7A67\u7A68\u7C33\u7C3C\u7C39\u7C2C\u7C3B\u7CEC\u7CEA\u7E76\u7E75\u7E78\u7E70\u7E77\u7E6F\u7E7A\u7E72\u7E74\u7E68\u7F4B\u7F4A\u7F83\u7F86\u7FB7\u7FFD\u7FFE\u8078\u81D7\u81D5\u8264\u8261\u8263\u85EB\u85F1\u85ED\u85D9\u85E1\u85E8\u85DA\u85D7\u85EC\u85F2\u85F8\u85D8\u85DF\u85E3\u85DC\u85D1\u85F0\u85E6\u85EF\u85DE\u85E2\u8800\u87FA\u8803\u87F6\u87F7\u8809\u880C\u880B\u8806\u87FC\u8808\u87FF\u880A\u8802\u8962\u895A\u895B\u8957\u8961\u895C\u8958\u895D\u8959\u8988\u89B7\u89B6\u89F6\u8B50\u8B48\u8B4A\u8B40\u8B53\u8B56\u8B54\u8B4B\u8B55\uFFFD".split("");
      for (j = 0; j != D[242].length; ++j)
        if (D[242][j].charCodeAt(0) !== 65533) {
          e[D[242][j]] = 61952 + j;
          d[61952 + j] = D[242][j];
        }
      D[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B51\u8B42\u8B52\u8B57\u8C43\u8C77\u8C76\u8C9A\u8D06\u8D07\u8D09\u8DAC\u8DAA\u8DAD\u8DAB\u8E6D\u8E78\u8E73\u8E6A\u8E6F\u8E7B\u8EC2\u8F52\u8F51\u8F4F\u8F50\u8F53\u8FB4\u9140\u913F\u91B0\u91AD\u93DE\u93C7\u93CF\u93C2\u93DA\u93D0\u93F9\u93EC\u93CC\u93D9\u93A9\u93E6\u93CA\u93D4\u93EE\u93E3\u93D5\u93C4\u93CE\u93C0\u93D2\u93E7\u957D\u95DA\u95DB\u96E1\u9729\u972B\u972C\u9728\u9726\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97B3\u97B7\u97B6\u97DD\u97DE\u97DF\u985C\u9859\u985D\u9857\u98BF\u98BD\u98BB\u98BE\u9948\u9947\u9943\u99A6\u99A7\u9A1A\u9A15\u9A25\u9A1D\u9A24\u9A1B\u9A22\u9A20\u9A27\u9A23\u9A1E\u9A1C\u9A14\u9AC2\u9B0B\u9B0A\u9B0E\u9B0C\u9B37\u9BEA\u9BEB\u9BE0\u9BDE\u9BE4\u9BE6\u9BE2\u9BF0\u9BD4\u9BD7\u9BEC\u9BDC\u9BD9\u9BE5\u9BD5\u9BE1\u9BDA\u9D77\u9D81\u9D8A\u9D84\u9D88\u9D71\u9D80\u9D78\u9D86\u9D8B\u9D8C\u9D7D\u9D6B\u9D74\u9D75\u9D70\u9D69\u9D85\u9D73\u9D7B\u9D82\u9D6F\u9D79\u9D7F\u9D87\u9D68\u9E94\u9E91\u9EC0\u9EFC\u9F2D\u9F40\u9F41\u9F4D\u9F56\u9F57\u9F58\u5337\u56B2\uFFFD".split("");
      for (j = 0; j != D[243].length; ++j)
        if (D[243][j].charCodeAt(0) !== 65533) {
          e[D[243][j]] = 62208 + j;
          d[62208 + j] = D[243][j];
        }
      D[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u56B5\u56B3\u58E3\u5B45\u5DC6\u5DC7\u5EEE\u5EEF\u5FC0\u5FC1\u61F9\u6517\u6516\u6515\u6513\u65DF\u66E8\u66E3\u66E4\u6AF3\u6AF0\u6AEA\u6AE8\u6AF9\u6AF1\u6AEE\u6AEF\u703C\u7035\u702F\u7037\u7034\u7031\u7042\u7038\u703F\u703A\u7039\u7040\u703B\u7033\u7041\u7213\u7214\u72A8\u737D\u737C\u74BA\u76AB\u76AA\u76BE\u76ED\u77CC\u77CE\u77CF\u77CD\u77F2\u7925\u7923\u7927\u7928\u7924\u7929\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79B2\u7A6E\u7A6C\u7A6D\u7AF7\u7C49\u7C48\u7C4A\u7C47\u7C45\u7CEE\u7E7B\u7E7E\u7E81\u7E80\u7FBA\u7FFF\u8079\u81DB\u81D9\u820B\u8268\u8269\u8622\u85FF\u8601\u85FE\u861B\u8600\u85F6\u8604\u8609\u8605\u860C\u85FD\u8819\u8810\u8811\u8817\u8813\u8816\u8963\u8966\u89B9\u89F7\u8B60\u8B6A\u8B5D\u8B68\u8B63\u8B65\u8B67\u8B6D\u8DAE\u8E86\u8E88\u8E84\u8F59\u8F56\u8F57\u8F55\u8F58\u8F5A\u908D\u9143\u9141\u91B7\u91B5\u91B2\u91B3\u940B\u9413\u93FB\u9420\u940F\u9414\u93FE\u9415\u9410\u9428\u9419\u940D\u93F5\u9400\u93F7\u9407\u940E\u9416\u9412\u93FA\u9409\u93F8\u940A\u93FF\uFFFD".split("");
      for (j = 0; j != D[244].length; ++j)
        if (D[244][j].charCodeAt(0) !== 65533) {
          e[D[244][j]] = 62464 + j;
          d[62464 + j] = D[244][j];
        }
      D[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93FC\u940C\u93F6\u9411\u9406\u95DE\u95E0\u95DF\u972E\u972F\u97B9\u97BB\u97FD\u97FE\u9860\u9862\u9863\u985F\u98C1\u98C2\u9950\u994E\u9959\u994C\u994B\u9953\u9A32\u9A34\u9A31\u9A2C\u9A2A\u9A36\u9A29\u9A2E\u9A38\u9A2D\u9AC7\u9ACA\u9AC6\u9B10\u9B12\u9B11\u9C0B\u9C08\u9BF7\u9C05\u9C12\u9BF8\u9C40\u9C07\u9C0E\u9C06\u9C17\u9C14\u9C09\u9D9F\u9D99\u9DA4\u9D9D\u9D92\u9D98\u9D90\u9D9B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9DA0\u9D94\u9D9C\u9DAA\u9D97\u9DA1\u9D9A\u9DA2\u9DA8\u9D9E\u9DA3\u9DBF\u9DA9\u9D96\u9DA6\u9DA7\u9E99\u9E9B\u9E9A\u9EE5\u9EE4\u9EE7\u9EE6\u9F30\u9F2E\u9F5B\u9F60\u9F5E\u9F5D\u9F59\u9F91\u513A\u5139\u5298\u5297\u56C3\u56BD\u56BE\u5B48\u5B47\u5DCB\u5DCF\u5EF1\u61FD\u651B\u6B02\u6AFC\u6B03\u6AF8\u6B00\u7043\u7044\u704A\u7048\u7049\u7045\u7046\u721D\u721A\u7219\u737E\u7517\u766A\u77D0\u792D\u7931\u792F\u7C54\u7C53\u7CF2\u7E8A\u7E87\u7E88\u7E8B\u7E86\u7E8D\u7F4D\u7FBB\u8030\u81DD\u8618\u862A\u8626\u861F\u8623\u861C\u8619\u8627\u862E\u8621\u8620\u8629\u861E\u8625\uFFFD".split("");
      for (j = 0; j != D[245].length; ++j)
        if (D[245][j].charCodeAt(0) !== 65533) {
          e[D[245][j]] = 62720 + j;
          d[62720 + j] = D[245][j];
        }
      D[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8829\u881D\u881B\u8820\u8824\u881C\u882B\u884A\u896D\u8969\u896E\u896B\u89FA\u8B79\u8B78\u8B45\u8B7A\u8B7B\u8D10\u8D14\u8DAF\u8E8E\u8E8C\u8F5E\u8F5B\u8F5D\u9146\u9144\u9145\u91B9\u943F\u943B\u9436\u9429\u943D\u943C\u9430\u9439\u942A\u9437\u942C\u9440\u9431\u95E5\u95E4\u95E3\u9735\u973A\u97BF\u97E1\u9864\u98C9\u98C6\u98C0\u9958\u9956\u9A39\u9A3D\u9A46\u9A44\u9A42\u9A41\u9A3A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A3F\u9ACD\u9B15\u9B17\u9B18\u9B16\u9B3A\u9B52\u9C2B\u9C1D\u9C1C\u9C2C\u9C23\u9C28\u9C29\u9C24\u9C21\u9DB7\u9DB6\u9DBC\u9DC1\u9DC7\u9DCA\u9DCF\u9DBE\u9DC5\u9DC3\u9DBB\u9DB5\u9DCE\u9DB9\u9DBA\u9DAC\u9DC8\u9DB1\u9DAD\u9DCC\u9DB3\u9DCD\u9DB2\u9E7A\u9E9C\u9EEB\u9EEE\u9EED\u9F1B\u9F18\u9F1A\u9F31\u9F4E\u9F65\u9F64\u9F92\u4EB9\u56C6\u56C5\u56CB\u5971\u5B4B\u5B4C\u5DD5\u5DD1\u5EF2\u6521\u6520\u6526\u6522\u6B0B\u6B08\u6B09\u6C0D\u7055\u7056\u7057\u7052\u721E\u721F\u72A9\u737F\u74D8\u74D5\u74D9\u74D7\u766D\u76AD\u7935\u79B4\u7A70\u7A71\u7C57\u7C5C\u7C59\u7C5B\u7C5A\uFFFD".split("");
      for (j = 0; j != D[246].length; ++j)
        if (D[246][j].charCodeAt(0) !== 65533) {
          e[D[246][j]] = 62976 + j;
          d[62976 + j] = D[246][j];
        }
      D[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7CF4\u7CF1\u7E91\u7F4F\u7F87\u81DE\u826B\u8634\u8635\u8633\u862C\u8632\u8636\u882C\u8828\u8826\u882A\u8825\u8971\u89BF\u89BE\u89FB\u8B7E\u8B84\u8B82\u8B86\u8B85\u8B7F\u8D15\u8E95\u8E94\u8E9A\u8E92\u8E90\u8E96\u8E97\u8F60\u8F62\u9147\u944C\u9450\u944A\u944B\u944F\u9447\u9445\u9448\u9449\u9446\u973F\u97E3\u986A\u9869\u98CB\u9954\u995B\u9A4E\u9A53\u9A54\u9A4C\u9A4F\u9A48\u9A4A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A49\u9A52\u9A50\u9AD0\u9B19\u9B2B\u9B3B\u9B56\u9B55\u9C46\u9C48\u9C3F\u9C44\u9C39\u9C33\u9C41\u9C3C\u9C37\u9C34\u9C32\u9C3D\u9C36\u9DDB\u9DD2\u9DDE\u9DDA\u9DCB\u9DD0\u9DDC\u9DD1\u9DDF\u9DE9\u9DD9\u9DD8\u9DD6\u9DF5\u9DD5\u9DDD\u9EB6\u9EF0\u9F35\u9F33\u9F32\u9F42\u9F6B\u9F95\u9FA2\u513D\u5299\u58E8\u58E7\u5972\u5B4D\u5DD8\u882F\u5F4F\u6201\u6203\u6204\u6529\u6525\u6596\u66EB\u6B11\u6B12\u6B0F\u6BCA\u705B\u705A\u7222\u7382\u7381\u7383\u7670\u77D4\u7C67\u7C66\u7E95\u826C\u863A\u8640\u8639\u863C\u8631\u863B\u863E\u8830\u8832\u882E\u8833\u8976\u8974\u8973\u89FE\uFFFD".split("");
      for (j = 0; j != D[247].length; ++j)
        if (D[247][j].charCodeAt(0) !== 65533) {
          e[D[247][j]] = 63232 + j;
          d[63232 + j] = D[247][j];
        }
      D[248] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B8C\u8B8E\u8B8B\u8B88\u8C45\u8D19\u8E98\u8F64\u8F63\u91BC\u9462\u9455\u945D\u9457\u945E\u97C4\u97C5\u9800\u9A56\u9A59\u9B1E\u9B1F\u9B20\u9C52\u9C58\u9C50\u9C4A\u9C4D\u9C4B\u9C55\u9C59\u9C4C\u9C4E\u9DFB\u9DF7\u9DEF\u9DE3\u9DEB\u9DF8\u9DE4\u9DF6\u9DE1\u9DEE\u9DE6\u9DF2\u9DF0\u9DE2\u9DEC\u9DF4\u9DF3\u9DE8\u9DED\u9EC2\u9ED0\u9EF2\u9EF3\u9F06\u9F1C\u9F38\u9F37\u9F36\u9F43\u9F4F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F71\u9F70\u9F6E\u9F6F\u56D3\u56CD\u5B4E\u5C6D\u652D\u66ED\u66EE\u6B13\u705F\u7061\u705D\u7060\u7223\u74DB\u74E5\u77D5\u7938\u79B7\u79B6\u7C6A\u7E97\u7F89\u826D\u8643\u8838\u8837\u8835\u884B\u8B94\u8B95\u8E9E\u8E9F\u8EA0\u8E9D\u91BE\u91BD\u91C2\u946B\u9468\u9469\u96E5\u9746\u9743\u9747\u97C7\u97E5\u9A5E\u9AD5\u9B59\u9C63\u9C67\u9C66\u9C62\u9C5E\u9C60\u9E02\u9DFE\u9E07\u9E03\u9E06\u9E05\u9E00\u9E01\u9E09\u9DFF\u9DFD\u9E04\u9EA0\u9F1E\u9F46\u9F74\u9F75\u9F76\u56D4\u652E\u65B8\u6B18\u6B19\u6B17\u6B1A\u7062\u7226\u72AA\u77D8\u77D9\u7939\u7C69\u7C6B\u7CF6\u7E9A\uFFFD".split("");
      for (j = 0; j != D[248].length; ++j)
        if (D[248][j].charCodeAt(0) !== 65533) {
          e[D[248][j]] = 63488 + j;
          d[63488 + j] = D[248][j];
        }
      D[249] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E98\u7E9B\u7E99\u81E0\u81E1\u8646\u8647\u8648\u8979\u897A\u897C\u897B\u89FF\u8B98\u8B99\u8EA5\u8EA4\u8EA3\u946E\u946D\u946F\u9471\u9473\u9749\u9872\u995F\u9C68\u9C6E\u9C6D\u9E0B\u9E0D\u9E10\u9E0F\u9E12\u9E11\u9EA1\u9EF5\u9F09\u9F47\u9F78\u9F7B\u9F7A\u9F79\u571E\u7066\u7C6F\u883C\u8DB2\u8EA6\u91C3\u9474\u9478\u9476\u9475\u9A60\u9C74\u9C73\u9C71\u9C75\u9E14\u9E13\u9EF6\u9F0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9FA4\u7068\u7065\u7CF7\u866A\u883E\u883D\u883F\u8B9E\u8C9C\u8EA9\u8EC9\u974B\u9873\u9874\u98CC\u9961\u99AB\u9A64\u9A66\u9A67\u9B24\u9E15\u9E17\u9F48\u6207\u6B1E\u7227\u864C\u8EA8\u9482\u9480\u9481\u9A69\u9A68\u9B2E\u9E19\u7229\u864B\u8B9F\u9483\u9C79\u9EB7\u7675\u9A6B\u9C7A\u9E1D\u7069\u706A\u9EA4\u9F7E\u9F49\u9F98\u7881\u92B9\u88CF\u58BB\u6052\u7CA7\u5AFA\u2554\u2566\u2557\u2560\u256C\u2563\u255A\u2569\u255D\u2552\u2564\u2555\u255E\u256A\u2561\u2558\u2567\u255B\u2553\u2565\u2556\u255F\u256B\u2562\u2559\u2568\u255C\u2551\u2550\u256D\u256E\u2570\u256F\u2593\uFFFD".split("");
      for (j = 0; j != D[249].length; ++j)
        if (D[249][j].charCodeAt(0) !== 65533) {
          e[D[249][j]] = 63744 + j;
          d[63744 + j] = D[249][j];
        }
      return { "enc": e, "dec": d };
    }();
    cptable2[1250] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\u0160\u2039\u015A\u0164\u017D\u0179\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0161\u203A\u015B\u0165\u017E\u017A\xA0\u02C7\u02D8\u0141\xA4\u0104\xA6\xA7\xA8\xA9\u015E\xAB\xAC\xAD\xAE\u017B\xB0\xB1\u02DB\u0142\xB4\xB5\xB6\xB7\xB8\u0105\u015F\xBB\u013D\u02DD\u013E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1251] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u040C\u040B\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u045C\u045B\u045F\xA0\u040E\u045E\u0408\xA4\u0490\xA6\xA7\u0401\xA9\u0404\xAB\xAC\xAD\xAE\u0407\xB0\xB1\u0406\u0456\u0491\xB5\xB6\xB7\u0451\u2116\u0454\xBB\u0458\u0405\u0455\u0457\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1252] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\u017D\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\u017E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1253] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0385\u0386\xA3\xA4\xA5\xA6\xA7\xA8\xA9\uFFFD\xAB\xAC\xAD\xAE\u2015\xB0\xB1\xB2\xB3\u0384\xB5\xB6\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1254] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1255] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\xA1\xA2\xA3\u20AA\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\xBF\u05B0\u05B1\u05B2\u05B3\u05B4\u05B5\u05B6\u05B7\u05B8\u05B9\uFFFD\u05BB\u05BC\u05BD\u05BE\u05BF\u05C0\u05C1\u05C2\u05C3\u05F0\u05F1\u05F2\u05F3\u05F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1256] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\u067E\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0679\u2039\u0152\u0686\u0698\u0688\u06AF\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u06A9\u2122\u0691\u203A\u0153\u200C\u200D\u06BA\xA0\u060C\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\u06BE\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\u061B\xBB\xBC\xBD\xBE\u061F\u06C1\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\xD7\u0637\u0638\u0639\u063A\u0640\u0641\u0642\u0643\xE0\u0644\xE2\u0645\u0646\u0647\u0648\xE7\xE8\xE9\xEA\xEB\u0649\u064A\xEE\xEF\u064B\u064C\u064D\u064E\xF4\u064F\u0650\xF7\u0651\xF9\u0652\xFB\xFC\u200E\u200F\u06D2", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1257] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\xA8\u02C7\xB8\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\xAF\u02DB\uFFFD\xA0\uFFFD\xA2\xA3\xA4\uFFFD\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u02D9", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1258] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[1e4] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[10006] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xB9\xB2\xC9\xB3\xD6\xDC\u0385\xE0\xE2\xE4\u0384\xA8\xE7\xE9\xE8\xEA\xEB\xA3\u2122\xEE\xEF\u2022\xBD\u2030\xF4\xF6\xA6\xAD\xF9\xFB\xFC\u2020\u0393\u0394\u0398\u039B\u039E\u03A0\xDF\xAE\xA9\u03A3\u03AA\xA7\u2260\xB0\u0387\u0391\xB1\u2264\u2265\xA5\u0392\u0395\u0396\u0397\u0399\u039A\u039C\u03A6\u03AB\u03A8\u03A9\u03AC\u039D\xAC\u039F\u03A1\u2248\u03A4\xAB\xBB\u2026\xA0\u03A5\u03A7\u0386\u0388\u0153\u2013\u2015\u201C\u201D\u2018\u2019\xF7\u0389\u038A\u038C\u038E\u03AD\u03AE\u03AF\u03CC\u038F\u03CD\u03B1\u03B2\u03C8\u03B4\u03B5\u03C6\u03B3\u03B7\u03B9\u03BE\u03BA\u03BB\u03BC\u03BD\u03BF\u03C0\u03CE\u03C1\u03C3\u03C4\u03B8\u03C9\u03C2\u03C7\u03C5\u03B6\u03CA\u03CB\u0390\u03B0\uFFFD", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[10007] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\xA2\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u2202\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[10008] = function() {
      var d = [], e = {}, D = [], j;
      D[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\x80\uF8D8\uF8D9\uF8DA\uF8DB\uF8DC\uF8DD\uF8DE\uF8DF\uF8E0\uF8E1\uF8E2\uF8E3\uF8E4\uF8E5\uF8E6\uF8E7\uF8E8\uF8E9\uF8EA\uF8EB\uF8EC\uF8ED\uF8EE\uF8EF\uF8F0\uF8F1\uF8F2\uF8F3\uF8F4\uF8F5\uF8F6\uF8F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF8F8\uF8F9\uF8FA\uF8FB\uF8FC\uF8FD\uF8FE\uF8FF".split("");
      for (j = 0; j != D[0].length; ++j)
        if (D[0][j].charCodeAt(0) !== 65533) {
          e[D[0][j]] = 0 + j;
          d[0 + j] = D[0][j];
        }
      D[161] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\u30FB\u02C9\u02C7\xA8\u3003\u3005\u2015\uFF5E\uFFFD\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013\uFFFD".split("");
      for (j = 0; j != D[161].length; ++j)
        if (D[161][j].charCodeAt(0) !== 65533) {
          e[D[161][j]] = 41216 + j;
          d[41216 + j] = D[161][j];
        }
      D[162] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2488\u2489\u248A\u248B\u248C\u248D\u248E\u248F\u2490\u2491\u2492\u2493\u2494\u2495\u2496\u2497\u2498\u2499\u249A\u249B\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\u2483\u2484\u2485\u2486\u2487\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\uFFFD\uFFFD\u3220\u3221\u3222\u3223\u3224\u3225\u3226\u3227\u3228\u3229\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u216A\u216B\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[162].length; ++j)
        if (D[162][j].charCodeAt(0) !== 65533) {
          e[D[162][j]] = 41472 + j;
          d[41472 + j] = D[162][j];
        }
      D[163] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF01\uFF02\uFF03\uFFE5\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFF3C\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD".split("");
      for (j = 0; j != D[163].length; ++j)
        if (D[163][j].charCodeAt(0) !== 65533) {
          e[D[163][j]] = 41728 + j;
          d[41728 + j] = D[163][j];
        }
      D[164] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[164].length; ++j)
        if (D[164][j].charCodeAt(0) !== 65533) {
          e[D[164][j]] = 41984 + j;
          d[41984 + j] = D[164][j];
        }
      D[165] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[165].length; ++j)
        if (D[165][j].charCodeAt(0) !== 65533) {
          e[D[165][j]] = 42240 + j;
          d[42240 + j] = D[165][j];
        }
      D[166] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[166].length; ++j)
        if (D[166][j].charCodeAt(0) !== 65533) {
          e[D[166][j]] = 42496 + j;
          d[42496 + j] = D[166][j];
        }
      D[167] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[167].length; ++j)
        if (D[167][j].charCodeAt(0) !== 65533) {
          e[D[167][j]] = 42752 + j;
          d[42752 + j] = D[167][j];
        }
      D[168] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[168].length; ++j)
        if (D[168][j].charCodeAt(0) !== 65533) {
          e[D[168][j]] = 43008 + j;
          d[43008 + j] = D[168][j];
        }
      D[169] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2501\u2502\u2503\u2504\u2505\u2506\u2507\u2508\u2509\u250A\u250B\u250C\u250D\u250E\u250F\u2510\u2511\u2512\u2513\u2514\u2515\u2516\u2517\u2518\u2519\u251A\u251B\u251C\u251D\u251E\u251F\u2520\u2521\u2522\u2523\u2524\u2525\u2526\u2527\u2528\u2529\u252A\u252B\u252C\u252D\u252E\u252F\u2530\u2531\u2532\u2533\u2534\u2535\u2536\u2537\u2538\u2539\u253A\u253B\u253C\u253D\u253E\u253F\u2540\u2541\u2542\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\u254B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[169].length; ++j)
        if (D[169][j].charCodeAt(0) !== 65533) {
          e[D[169][j]] = 43264 + j;
          d[43264 + j] = D[169][j];
        }
      D[176] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265\uFFFD".split("");
      for (j = 0; j != D[176].length; ++j)
        if (D[176][j].charCodeAt(0) !== 65533) {
          e[D[176][j]] = 45056 + j;
          d[45056 + j] = D[176][j];
        }
      D[177] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3\uFFFD".split("");
      for (j = 0; j != D[177].length; ++j)
        if (D[177][j].charCodeAt(0) !== 65533) {
          e[D[177][j]] = 45312 + j;
          d[45312 + j] = D[177][j];
        }
      D[178] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316\uFFFD".split("");
      for (j = 0; j != D[178].length; ++j)
        if (D[178][j].charCodeAt(0) !== 65533) {
          e[D[178][j]] = 45568 + j;
          d[45568 + j] = D[178][j];
        }
      D[179] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A\uFFFD".split("");
      for (j = 0; j != D[179].length; ++j)
        if (D[179][j].charCodeAt(0) !== 65533) {
          e[D[179][j]] = 45824 + j;
          d[45824 + j] = D[179][j];
        }
      D[180] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E\uFFFD".split("");
      for (j = 0; j != D[180].length; ++j)
        if (D[180][j].charCodeAt(0) !== 65533) {
          e[D[180][j]] = 46080 + j;
          d[46080 + j] = D[180][j];
        }
      D[181] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0\uFFFD".split("");
      for (j = 0; j != D[181].length; ++j)
        if (D[181][j].charCodeAt(0) !== 65533) {
          e[D[181][j]] = 46336 + j;
          d[46336 + j] = D[181][j];
        }
      D[182] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C\uFFFD".split("");
      for (j = 0; j != D[182].length; ++j)
        if (D[182][j].charCodeAt(0) !== 65533) {
          e[D[182][j]] = 46592 + j;
          d[46592 + j] = D[182][j];
        }
      D[183] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D\uFFFD".split("");
      for (j = 0; j != D[183].length; ++j)
        if (D[183][j].charCodeAt(0) !== 65533) {
          e[D[183][j]] = 46848 + j;
          d[46848 + j] = D[183][j];
        }
      D[184] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9\uFFFD".split("");
      for (j = 0; j != D[184].length; ++j)
        if (D[184][j].charCodeAt(0) !== 65533) {
          e[D[184][j]] = 47104 + j;
          d[47104 + j] = D[184][j];
        }
      D[185] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8\uFFFD".split("");
      for (j = 0; j != D[185].length; ++j)
        if (D[185][j].charCodeAt(0) !== 65533) {
          e[D[185][j]] = 47360 + j;
          d[47360 + j] = D[185][j];
        }
      D[186] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56\uFFFD".split("");
      for (j = 0; j != D[186].length; ++j)
        if (D[186][j].charCodeAt(0) !== 65533) {
          e[D[186][j]] = 47616 + j;
          d[47616 + j] = D[186][j];
        }
      D[187] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95\uFFFD".split("");
      for (j = 0; j != D[187].length; ++j)
        if (D[187][j].charCodeAt(0) !== 65533) {
          e[D[187][j]] = 47872 + j;
          d[47872 + j] = D[187][j];
        }
      D[188] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6\uFFFD".split("");
      for (j = 0; j != D[188].length; ++j)
        if (D[188][j].charCodeAt(0) !== 65533) {
          e[D[188][j]] = 48128 + j;
          d[48128 + j] = D[188][j];
        }
      D[189] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78\uFFFD".split("");
      for (j = 0; j != D[189].length; ++j)
        if (D[189][j].charCodeAt(0) !== 65533) {
          e[D[189][j]] = 48384 + j;
          d[48384 + j] = D[189][j];
        }
      D[190] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB\uFFFD".split("");
      for (j = 0; j != D[190].length; ++j)
        if (D[190][j].charCodeAt(0) !== 65533) {
          e[D[190][j]] = 48640 + j;
          d[48640 + j] = D[190][j];
        }
      D[191] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080\uFFFD".split("");
      for (j = 0; j != D[191].length; ++j)
        if (D[191][j].charCodeAt(0) !== 65533) {
          e[D[191][j]] = 48896 + j;
          d[48896 + j] = D[191][j];
        }
      D[192] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0\uFFFD".split("");
      for (j = 0; j != D[192].length; ++j)
        if (D[192][j].charCodeAt(0) !== 65533) {
          e[D[192][j]] = 49152 + j;
          d[49152 + j] = D[192][j];
        }
      D[193] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF\uFFFD".split("");
      for (j = 0; j != D[193].length; ++j)
        if (D[193][j].charCodeAt(0) !== 65533) {
          e[D[193][j]] = 49408 + j;
          d[49408 + j] = D[193][j];
        }
      D[194] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B\uFFFD".split("");
      for (j = 0; j != D[194].length; ++j)
        if (D[194][j].charCodeAt(0) !== 65533) {
          e[D[194][j]] = 49664 + j;
          d[49664 + j] = D[194][j];
        }
      D[195] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478\uFFFD".split("");
      for (j = 0; j != D[195].length; ++j)
        if (D[195][j].charCodeAt(0) !== 65533) {
          e[D[195][j]] = 49920 + j;
          d[49920 + j] = D[195][j];
        }
      D[196] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81\uFFFD".split("");
      for (j = 0; j != D[196].length; ++j)
        if (D[196][j].charCodeAt(0) !== 65533) {
          e[D[196][j]] = 50176 + j;
          d[50176 + j] = D[196][j];
        }
      D[197] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7\uFFFD".split("");
      for (j = 0; j != D[197].length; ++j)
        if (D[197][j].charCodeAt(0) !== 65533) {
          e[D[197][j]] = 50432 + j;
          d[50432 + j] = D[197][j];
        }
      D[198] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390\uFFFD".split("");
      for (j = 0; j != D[198].length; ++j)
        if (D[198][j].charCodeAt(0) !== 65533) {
          e[D[198][j]] = 50688 + j;
          d[50688 + j] = D[198][j];
        }
      D[199] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20\uFFFD".split("");
      for (j = 0; j != D[199].length; ++j)
        if (D[199][j].charCodeAt(0) !== 65533) {
          e[D[199][j]] = 50944 + j;
          d[50944 + j] = D[199][j];
        }
      D[200] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1\uFFFD".split("");
      for (j = 0; j != D[200].length; ++j)
        if (D[200][j].charCodeAt(0) !== 65533) {
          e[D[200][j]] = 51200 + j;
          d[51200 + j] = D[200][j];
        }
      D[201] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3\uFFFD".split("");
      for (j = 0; j != D[201].length; ++j)
        if (D[201][j].charCodeAt(0) !== 65533) {
          e[D[201][j]] = 51456 + j;
          d[51456 + j] = D[201][j];
        }
      D[202] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31\uFFFD".split("");
      for (j = 0; j != D[202].length; ++j)
        if (D[202][j].charCodeAt(0) !== 65533) {
          e[D[202][j]] = 51712 + j;
          d[51712 + j] = D[202][j];
        }
      D[203] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854\uFFFD".split("");
      for (j = 0; j != D[203].length; ++j)
        if (D[203][j].charCodeAt(0) !== 65533) {
          e[D[203][j]] = 51968 + j;
          d[51968 + j] = D[203][j];
        }
      D[204] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3\uFFFD".split("");
      for (j = 0; j != D[204].length; ++j)
        if (D[204][j].charCodeAt(0) !== 65533) {
          e[D[204][j]] = 52224 + j;
          d[52224 + j] = D[204][j];
        }
      D[205] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01\uFFFD".split("");
      for (j = 0; j != D[205].length; ++j)
        if (D[205][j].charCodeAt(0) !== 65533) {
          e[D[205][j]] = 52480 + j;
          d[52480 + j] = D[205][j];
        }
      D[206] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A\uFFFD".split("");
      for (j = 0; j != D[206].length; ++j)
        if (D[206][j].charCodeAt(0) !== 65533) {
          e[D[206][j]] = 52736 + j;
          d[52736 + j] = D[206][j];
        }
      D[207] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653\uFFFD".split("");
      for (j = 0; j != D[207].length; ++j)
        if (D[207][j].charCodeAt(0) !== 65533) {
          e[D[207][j]] = 52992 + j;
          d[52992 + j] = D[207][j];
        }
      D[208] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384\uFFFD".split("");
      for (j = 0; j != D[208].length; ++j)
        if (D[208][j].charCodeAt(0) !== 65533) {
          e[D[208][j]] = 53248 + j;
          d[53248 + j] = D[208][j];
        }
      D[209] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476\uFFFD".split("");
      for (j = 0; j != D[209].length; ++j)
        if (D[209][j].charCodeAt(0) !== 65533) {
          e[D[209][j]] = 53504 + j;
          d[53504 + j] = D[209][j];
        }
      D[210] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690\uFFFD".split("");
      for (j = 0; j != D[210].length; ++j)
        if (D[210][j].charCodeAt(0) !== 65533) {
          e[D[210][j]] = 53760 + j;
          d[53760 + j] = D[210][j];
        }
      D[211] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89\uFFFD".split("");
      for (j = 0; j != D[211].length; ++j)
        if (D[211][j].charCodeAt(0) !== 65533) {
          e[D[211][j]] = 54016 + j;
          d[54016 + j] = D[211][j];
        }
      D[212] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67\uFFFD".split("");
      for (j = 0; j != D[212].length; ++j)
        if (D[212][j].charCodeAt(0) !== 65533) {
          e[D[212][j]] = 54272 + j;
          d[54272 + j] = D[212][j];
        }
      D[213] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F\uFFFD".split("");
      for (j = 0; j != D[213].length; ++j)
        if (D[213][j].charCodeAt(0) !== 65533) {
          e[D[213][j]] = 54528 + j;
          d[54528 + j] = D[213][j];
        }
      D[214] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51\uFFFD".split("");
      for (j = 0; j != D[214].length; ++j)
        if (D[214][j].charCodeAt(0) !== 65533) {
          e[D[214][j]] = 54784 + j;
          d[54784 + j] = D[214][j];
        }
      D[215] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD".split("");
      for (j = 0; j != D[215].length; ++j)
        if (D[215][j].charCodeAt(0) !== 65533) {
          e[D[215][j]] = 55040 + j;
          d[55040 + j] = D[215][j];
        }
      D[216] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D\uFFFD".split("");
      for (j = 0; j != D[216].length; ++j)
        if (D[216][j].charCodeAt(0) !== 65533) {
          e[D[216][j]] = 55296 + j;
          d[55296 + j] = D[216][j];
        }
      D[217] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC\uFFFD".split("");
      for (j = 0; j != D[217].length; ++j)
        if (D[217][j].charCodeAt(0) !== 65533) {
          e[D[217][j]] = 55552 + j;
          d[55552 + j] = D[217][j];
        }
      D[218] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA\uFFFD".split("");
      for (j = 0; j != D[218].length; ++j)
        if (D[218][j].charCodeAt(0) !== 65533) {
          e[D[218][j]] = 55808 + j;
          d[55808 + j] = D[218][j];
        }
      D[219] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD\uFFFD".split("");
      for (j = 0; j != D[219].length; ++j)
        if (D[219][j].charCodeAt(0) !== 65533) {
          e[D[219][j]] = 56064 + j;
          d[56064 + j] = D[219][j];
        }
      D[220] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365\uFFFD".split("");
      for (j = 0; j != D[220].length; ++j)
        if (D[220][j].charCodeAt(0) !== 65533) {
          e[D[220][j]] = 56320 + j;
          d[56320 + j] = D[220][j];
        }
      D[221] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A\uFFFD".split("");
      for (j = 0; j != D[221].length; ++j)
        if (D[221][j].charCodeAt(0) !== 65533) {
          e[D[221][j]] = 56576 + j;
          d[56576 + j] = D[221][j];
        }
      D[222] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496\uFFFD".split("");
      for (j = 0; j != D[222].length; ++j)
        if (D[222][j].charCodeAt(0) !== 65533) {
          e[D[222][j]] = 56832 + j;
          d[56832 + j] = D[222][j];
        }
      D[223] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C\uFFFD".split("");
      for (j = 0; j != D[223].length; ++j)
        if (D[223][j].charCodeAt(0) !== 65533) {
          e[D[223][j]] = 57088 + j;
          d[57088 + j] = D[223][j];
        }
      D[224] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C\uFFFD".split("");
      for (j = 0; j != D[224].length; ++j)
        if (D[224][j].charCodeAt(0) !== 65533) {
          e[D[224][j]] = 57344 + j;
          d[57344 + j] = D[224][j];
        }
      D[225] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA\uFFFD".split("");
      for (j = 0; j != D[225].length; ++j)
        if (D[225][j].charCodeAt(0) !== 65533) {
          e[D[225][j]] = 57600 + j;
          d[57600 + j] = D[225][j];
        }
      D[226] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967\u9968\u9969\u996A\u996B\u996C\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042\uFFFD".split("");
      for (j = 0; j != D[226].length; ++j)
        if (D[226][j].charCodeAt(0) !== 65533) {
          e[D[226][j]] = 57856 + j;
          d[57856 + j] = D[226][j];
        }
      D[227] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE\uFFFD".split("");
      for (j = 0; j != D[227].length; ++j)
        if (D[227][j].charCodeAt(0) !== 65533) {
          e[D[227][j]] = 58112 + j;
          d[58112 + j] = D[227][j];
        }
      D[228] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1\uFFFD".split("");
      for (j = 0; j != D[228].length; ++j)
        if (D[228][j].charCodeAt(0) !== 65533) {
          e[D[228][j]] = 58368 + j;
          d[58368 + j] = D[228][j];
        }
      D[229] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3\uFFFD".split("");
      for (j = 0; j != D[229].length; ++j)
        if (D[229][j].charCodeAt(0) !== 65533) {
          e[D[229][j]] = 58624 + j;
          d[58624 + j] = D[229][j];
        }
      D[230] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9\uFFFD".split("");
      for (j = 0; j != D[230].length; ++j)
        if (D[230][j].charCodeAt(0) !== 65533) {
          e[D[230][j]] = 58880 + j;
          d[58880 + j] = D[230][j];
        }
      D[231] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21\u7F22\u7F23\u7F24\u7F25\u7F26\u7F27\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F\u7F30\u7F31\u7F32\u7F33\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C\uFFFD".split("");
      for (j = 0; j != D[231].length; ++j)
        if (D[231][j].charCodeAt(0) !== 65533) {
          e[D[231][j]] = 59136 + j;
          d[59136 + j] = D[231][j];
        }
      D[232] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9\uFFFD".split("");
      for (j = 0; j != D[232].length; ++j)
        if (D[232][j].charCodeAt(0) !== 65533) {
          e[D[232][j]] = 59392 + j;
          d[59392 + j] = D[232][j];
        }
      D[233] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B\uFFFD".split("");
      for (j = 0; j != D[233].length; ++j)
        if (D[233][j].charCodeAt(0) !== 65533) {
          e[D[233][j]] = 59648 + j;
          d[59648 + j] = D[233][j];
        }
      D[234] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0\uFFFD".split("");
      for (j = 0; j != D[234].length; ++j)
        if (D[234][j].charCodeAt(0) !== 65533) {
          e[D[234][j]] = 59904 + j;
          d[59904 + j] = D[234][j];
        }
      D[235] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB\uFFFD".split("");
      for (j = 0; j != D[235].length; ++j)
        if (D[235][j].charCodeAt(0) !== 65533) {
          e[D[235][j]] = 60160 + j;
          d[60160 + j] = D[235][j];
        }
      D[236] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0\uFFFD".split("");
      for (j = 0; j != D[236].length; ++j)
        if (D[236][j].charCodeAt(0) !== 65533) {
          e[D[236][j]] = 60416 + j;
          d[60416 + j] = D[236][j];
        }
      D[237] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768\uFFFD".split("");
      for (j = 0; j != D[237].length; ++j)
        if (D[237][j].charCodeAt(0) !== 65533) {
          e[D[237][j]] = 60672 + j;
          d[60672 + j] = D[237][j];
        }
      D[238] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6\u94B7\u94B8\u94B9\u94BA\u94BC\u94BD\u94BF\u94C4\u94C8\u94C9\u94CA\u94CB\u94CC\u94CD\u94CE\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA\uFFFD".split("");
      for (j = 0; j != D[238].length; ++j)
        if (D[238][j].charCodeAt(0) !== 65533) {
          e[D[238][j]] = 60928 + j;
          d[60928 + j] = D[238][j];
        }
      D[239] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512\u9513\u9514\u9515\u9516\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564\u9565\u9566\u9567\u9568\u9569\u956A\u956B\u956C\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14\uFFFD".split("");
      for (j = 0; j != D[239].length; ++j)
        if (D[239][j].charCodeAt(0) !== 65533) {
          e[D[239][j]] = 61184 + j;
          d[61184 + j] = D[239][j];
        }
      D[240] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28\u9E29\u9E2A\u9E2B\u9E2C\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66\u9E67\u9E68\u9E69\u9E6A\u9E6B\u9E6C\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619\uFFFD".split("");
      for (j = 0; j != D[240].length; ++j)
        if (D[240][j].charCodeAt(0) !== 65533) {
          e[D[240][j]] = 61440 + j;
          d[61440 + j] = D[240][j];
        }
      D[241] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883\uFFFD".split("");
      for (j = 0; j != D[241].length; ++j)
        if (D[241][j].charCodeAt(0) !== 65533) {
          e[D[241][j]] = 61696 + j;
          d[61696 + j] = D[241][j];
        }
      D[242] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2\uFFFD".split("");
      for (j = 0; j != D[242].length; ++j)
        if (D[242][j].charCodeAt(0) !== 65533) {
          e[D[242][j]] = 61952 + j;
          d[61952 + j] = D[242][j];
        }
      D[243] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B\uFFFD".split("");
      for (j = 0; j != D[243].length; ++j)
        if (D[243][j].charCodeAt(0) !== 65533) {
          e[D[243][j]] = 62208 + j;
          d[62208 + j] = D[243][j];
        }
      D[244] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164\uFFFD".split("");
      for (j = 0; j != D[244].length; ++j)
        if (D[244][j].charCodeAt(0) !== 65533) {
          e[D[244][j]] = 62464 + j;
          d[62464 + j] = D[244][j];
        }
      D[245] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC\uFFFD".split("");
      for (j = 0; j != D[245].length; ++j)
        if (D[245][j].charCodeAt(0) !== 65533) {
          e[D[245][j]] = 62720 + j;
          d[62720 + j] = D[245][j];
        }
      D[246] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85\u9F86\u9F87\u9F88\u9F89\u9F8A\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E\u9C9F\u9CA0\u9CA1\u9CA2\u9CA3\u9CA5\u9CA6\u9CA7\u9CA8\u9CA9\u9CAB\u9CAD\u9CAE\u9CB0\u9CB1\u9CB2\u9CB3\u9CB4\u9CB5\u9CB6\u9CB7\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB\uFFFD".split("");
      for (j = 0; j != D[246].length; ++j)
        if (D[246][j].charCodeAt(0) !== 65533) {
          e[D[246][j]] = 62976 + j;
          d[62976 + j] = D[246][j];
        }
      D[247] = "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9CCC\u9CCD\u9CCE\u9CCF\u9CD0\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44\uFFFD".split("");
      for (j = 0; j != D[247].length; ++j)
        if (D[247][j].charCodeAt(0) !== 65533) {
          e[D[247][j]] = 63232 + j;
          d[63232 + j] = D[247][j];
        }
      return { "enc": e, "dec": d };
    }();
    cptable2[10029] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\u0100\u0101\xC9\u0104\xD6\xDC\xE1\u0105\u010C\xE4\u010D\u0106\u0107\xE9\u0179\u017A\u010E\xED\u010F\u0112\u0113\u0116\xF3\u0117\xF4\xF6\xF5\xFA\u011A\u011B\xFC\u2020\xB0\u0118\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\u0119\xA8\u2260\u0123\u012E\u012F\u012A\u2264\u2265\u012B\u0136\u2202\u2211\u0142\u013B\u013C\u013D\u013E\u0139\u013A\u0145\u0146\u0143\xAC\u221A\u0144\u0147\u2206\xAB\xBB\u2026\xA0\u0148\u0150\xD5\u0151\u014C\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\u014D\u0154\u0155\u0158\u2039\u203A\u0159\u0156\u0157\u0160\u201A\u201E\u0161\u015A\u015B\xC1\u0164\u0165\xCD\u017D\u017E\u016A\xD3\xD4\u016B\u016E\xDA\u016F\u0170\u0171\u0172\u0173\xDD\xFD\u0137\u017B\u0141\u017C\u0122\u02C7", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[10079] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\xDD\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\xD0\xF0\xDE\xFE\xFD\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[10081] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u011E\u011F\u0130\u0131\u015E\u015F\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\uFFFD\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    cptable2[28591] = function() {
      var d = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF", D = [], e = {};
      for (var i = 0; i != d.length; ++i) {
        if (d.charCodeAt(i) !== 65533)
          e[d.charAt(i)] = i;
        D[i] = d.charAt(i);
      }
      return { "enc": e, "dec": D };
    }();
    if (typeof module2 !== "undefined" && module2.exports && typeof DO_NOT_EXPORT_CODEPAGE === "undefined")
      module2.exports = cptable2;
    (function(root, factory) {
      "use strict";
      if (typeof cptable2 === "undefined") {
        if (typeof require !== "undefined") {
          var cpt = cptable2;
          if (typeof module2 !== "undefined" && module2.exports && typeof DO_NOT_EXPORT_CODEPAGE === "undefined")
            module2.exports = factory(cpt);
          else
            root.cptable = factory(cpt);
        } else
          throw new Error("cptable not found");
      } else
        cptable2 = factory(cptable2);
    })(exports, function(cpt) {
      "use strict";
      var magic = {
        "1200": "utf16le",
        "1201": "utf16be",
        "12000": "utf32le",
        "12001": "utf32be",
        "16969": "utf64le",
        "20127": "ascii",
        "65000": "utf7",
        "65001": "utf8"
      };
      var sbcs_cache = [874, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1e4];
      var dbcs_cache = [932, 936, 949, 950];
      var magic_cache = [65001];
      var magic_decode = {};
      var magic_encode = {};
      var cpdcache = {};
      var cpecache = {};
      var sfcc = function sfcc2(x) {
        return String.fromCharCode(x);
      };
      var cca = function cca2(x) {
        return x.charCodeAt(0);
      };
      var has_buf = typeof Buffer !== "undefined";
      var Buffer_from = function() {
      };
      if (has_buf) {
        var nbfs = !Buffer.from;
        if (!nbfs)
          try {
            Buffer.from("foo", "utf8");
          } catch (e) {
            nbfs = true;
          }
        Buffer_from = nbfs ? function(buf, enc) {
          return enc ? new Buffer(buf, enc) : new Buffer(buf);
        } : Buffer.from.bind(Buffer);
        if (!Buffer.allocUnsafe)
          Buffer.allocUnsafe = function(n) {
            return new Buffer(n);
          };
        var mdl = 1024, mdb = Buffer.allocUnsafe(mdl);
        var make_EE = function make_EE2(E) {
          var EE = Buffer.allocUnsafe(65536);
          for (var i = 0; i < 65536; ++i)
            EE[i] = 0;
          var keys = Object.keys(E), len = keys.length;
          for (var ee = 0, e = keys[ee]; ee < len; ++ee) {
            if (!(e = keys[ee]))
              continue;
            EE[e.charCodeAt(0)] = E[e];
          }
          return EE;
        };
        var sbcs_encode = function make_sbcs_encode(cp) {
          var EE = make_EE(cpt[cp].enc);
          return function sbcs_e(data, ofmt) {
            var len = data.length;
            var out, i = 0, j = 0, D = 0, w = 0;
            if (typeof data === "string") {
              out = Buffer.allocUnsafe(len);
              for (i = 0; i < len; ++i)
                out[i] = EE[data.charCodeAt(i)];
            } else if (Buffer.isBuffer(data)) {
              out = Buffer.allocUnsafe(2 * len);
              j = 0;
              for (i = 0; i < len; ++i) {
                D = data[i];
                if (D < 128)
                  out[j++] = EE[D];
                else if (D < 224) {
                  out[j++] = EE[((D & 31) << 6) + (data[i + 1] & 63)];
                  ++i;
                } else if (D < 240) {
                  out[j++] = EE[((D & 15) << 12) + ((data[i + 1] & 63) << 6) + (data[i + 2] & 63)];
                  i += 2;
                } else {
                  w = ((D & 7) << 18) + ((data[i + 1] & 63) << 12) + ((data[i + 2] & 63) << 6) + (data[i + 3] & 63);
                  i += 3;
                  if (w < 65536)
                    out[j++] = EE[w];
                  else {
                    w -= 65536;
                    out[j++] = EE[55296 + (w >> 10 & 1023)];
                    out[j++] = EE[56320 + (w & 1023)];
                  }
                }
              }
              out = out.slice(0, j);
            } else {
              out = Buffer.allocUnsafe(len);
              for (i = 0; i < len; ++i)
                out[i] = EE[data[i].charCodeAt(0)];
            }
            if (!ofmt || ofmt === "buf")
              return out;
            if (ofmt !== "arr")
              return out.toString("binary");
            return [].slice.call(out);
          };
        };
        var sbcs_decode = function make_sbcs_decode(cp) {
          var D = cpt[cp].dec;
          var DD = Buffer.allocUnsafe(131072), d = 0, c = "";
          for (d = 0; d < D.length; ++d) {
            if (!(c = D[d]))
              continue;
            var w = c.charCodeAt(0);
            DD[2 * d] = w & 255;
            DD[2 * d + 1] = w >> 8;
          }
          return function sbcs_d(data) {
            var len = data.length, i = 0, j = 0;
            if (2 * len > mdl) {
              mdl = 2 * len;
              mdb = Buffer.allocUnsafe(mdl);
            }
            if (Buffer.isBuffer(data)) {
              for (i = 0; i < len; i++) {
                j = 2 * data[i];
                mdb[2 * i] = DD[j];
                mdb[2 * i + 1] = DD[j + 1];
              }
            } else if (typeof data === "string") {
              for (i = 0; i < len; i++) {
                j = 2 * data.charCodeAt(i);
                mdb[2 * i] = DD[j];
                mdb[2 * i + 1] = DD[j + 1];
              }
            } else {
              for (i = 0; i < len; i++) {
                j = 2 * data[i];
                mdb[2 * i] = DD[j];
                mdb[2 * i + 1] = DD[j + 1];
              }
            }
            return mdb.slice(0, 2 * len).toString("ucs2");
          };
        };
        var dbcs_encode = function make_dbcs_encode(cp) {
          var E = cpt[cp].enc;
          var EE = Buffer.allocUnsafe(131072);
          for (var i = 0; i < 131072; ++i)
            EE[i] = 0;
          var keys = Object.keys(E);
          for (var ee = 0, e = keys[ee]; ee < keys.length; ++ee) {
            if (!(e = keys[ee]))
              continue;
            var f = e.charCodeAt(0);
            EE[2 * f] = E[e] & 255;
            EE[2 * f + 1] = E[e] >> 8;
          }
          return function dbcs_e(data, ofmt) {
            var len = data.length, out = Buffer.allocUnsafe(2 * len), i2 = 0, j = 0, jj = 0, k = 0, D = 0;
            if (typeof data === "string") {
              for (i2 = k = 0; i2 < len; ++i2) {
                j = data.charCodeAt(i2) * 2;
                out[k++] = EE[j + 1] || EE[j];
                if (EE[j + 1] > 0)
                  out[k++] = EE[j];
              }
              out = out.slice(0, k);
            } else if (Buffer.isBuffer(data)) {
              for (i2 = k = 0; i2 < len; ++i2) {
                D = data[i2];
                if (D < 128)
                  j = D;
                else if (D < 224) {
                  j = ((D & 31) << 6) + (data[i2 + 1] & 63);
                  ++i2;
                } else if (D < 240) {
                  j = ((D & 15) << 12) + ((data[i2 + 1] & 63) << 6) + (data[i2 + 2] & 63);
                  i2 += 2;
                } else {
                  j = ((D & 7) << 18) + ((data[i2 + 1] & 63) << 12) + ((data[i2 + 2] & 63) << 6) + (data[i2 + 3] & 63);
                  i2 += 3;
                }
                if (j < 65536) {
                  j *= 2;
                  out[k++] = EE[j + 1] || EE[j];
                  if (EE[j + 1] > 0)
                    out[k++] = EE[j];
                } else {
                  jj = j - 65536;
                  j = 2 * (55296 + (jj >> 10 & 1023));
                  out[k++] = EE[j + 1] || EE[j];
                  if (EE[j + 1] > 0)
                    out[k++] = EE[j];
                  j = 2 * (56320 + (jj & 1023));
                  out[k++] = EE[j + 1] || EE[j];
                  if (EE[j + 1] > 0)
                    out[k++] = EE[j];
                }
              }
              out = out.slice(0, k);
            } else {
              for (i2 = k = 0; i2 < len; i2++) {
                j = data[i2].charCodeAt(0) * 2;
                out[k++] = EE[j + 1] || EE[j];
                if (EE[j + 1] > 0)
                  out[k++] = EE[j];
              }
            }
            if (!ofmt || ofmt === "buf")
              return out;
            if (ofmt !== "arr")
              return out.toString("binary");
            return [].slice.call(out);
          };
        };
        var dbcs_decode = function make_dbcs_decode(cp) {
          var D = cpt[cp].dec;
          var DD = Buffer.allocUnsafe(131072), d = 0, c, w = 0, j = 0, i = 0;
          for (i = 0; i < 65536; ++i) {
            DD[2 * i] = 255;
            DD[2 * i + 1] = 253;
          }
          for (d = 0; d < D.length; ++d) {
            if (!(c = D[d]))
              continue;
            w = c.charCodeAt(0);
            j = 2 * d;
            DD[j] = w & 255;
            DD[j + 1] = w >> 8;
          }
          return function dbcs_d(data) {
            var len = data.length, out = Buffer.allocUnsafe(2 * len), i2 = 0, j2 = 0, k = 0;
            if (Buffer.isBuffer(data)) {
              for (i2 = 0; i2 < len; i2++) {
                j2 = 2 * data[i2];
                if (DD[j2] === 255 && DD[j2 + 1] === 253) {
                  j2 = 2 * ((data[i2] << 8) + data[i2 + 1]);
                  ++i2;
                }
                out[k++] = DD[j2];
                out[k++] = DD[j2 + 1];
              }
            } else if (typeof data === "string") {
              for (i2 = 0; i2 < len; i2++) {
                j2 = 2 * data.charCodeAt(i2);
                if (DD[j2] === 255 && DD[j2 + 1] === 253) {
                  j2 = 2 * ((data.charCodeAt(i2) << 8) + data.charCodeAt(i2 + 1));
                  ++i2;
                }
                out[k++] = DD[j2];
                out[k++] = DD[j2 + 1];
              }
            } else {
              for (i2 = 0; i2 < len; i2++) {
                j2 = 2 * data[i2];
                if (DD[j2] === 255 && DD[j2 + 1] === 253) {
                  j2 = 2 * ((data[i2] << 8) + data[i2 + 1]);
                  ++i2;
                }
                out[k++] = DD[j2];
                out[k++] = DD[j2 + 1];
              }
            }
            return out.slice(0, k).toString("ucs2");
          };
        };
        magic_decode[65001] = function utf8_d(data) {
          if (typeof data === "string")
            return utf8_d(data.split("").map(cca));
          var len = data.length, w = 0, ww = 0;
          if (4 * len > mdl) {
            mdl = 4 * len;
            mdb = Buffer.allocUnsafe(mdl);
          }
          var i = 0;
          if (len >= 3 && data[0] == 239) {
            if (data[1] == 187 && data[2] == 191)
              i = 3;
          }
          for (var j = 1, k = 0, D = 0; i < len; i += j) {
            j = 1;
            D = data[i];
            if (D < 128)
              w = D;
            else if (D < 224) {
              w = (D & 31) * 64 + (data[i + 1] & 63);
              j = 2;
            } else if (D < 240) {
              w = ((D & 15) << 12) + (data[i + 1] & 63) * 64 + (data[i + 2] & 63);
              j = 3;
            } else {
              w = (D & 7) * 262144 + ((data[i + 1] & 63) << 12) + (data[i + 2] & 63) * 64 + (data[i + 3] & 63);
              j = 4;
            }
            if (w < 65536) {
              mdb[k++] = w & 255;
              mdb[k++] = w >> 8;
            } else {
              w -= 65536;
              ww = 55296 + (w >> 10 & 1023);
              w = 56320 + (w & 1023);
              mdb[k++] = ww & 255;
              mdb[k++] = ww >>> 8;
              mdb[k++] = w & 255;
              mdb[k++] = w >>> 8 & 255;
            }
          }
          return mdb.slice(0, k).toString("ucs2");
        };
        magic_encode[65001] = function utf8_e(data, ofmt) {
          if (has_buf && Buffer.isBuffer(data)) {
            if (!ofmt || ofmt === "buf")
              return data;
            if (ofmt !== "arr")
              return data.toString("binary");
            return [].slice.call(data);
          }
          var len = data.length, w = 0, ww = 0, j = 0;
          var direct = typeof data === "string";
          if (4 * len > mdl) {
            mdl = 4 * len;
            mdb = Buffer.allocUnsafe(mdl);
          }
          for (var i = 0; i < len; ++i) {
            w = direct ? data.charCodeAt(i) : data[i].charCodeAt(0);
            if (w <= 127)
              mdb[j++] = w;
            else if (w <= 2047) {
              mdb[j++] = 192 + (w >> 6);
              mdb[j++] = 128 + (w & 63);
            } else if (w >= 55296 && w <= 57343) {
              w -= 55296;
              ++i;
              ww = (direct ? data.charCodeAt(i) : data[i].charCodeAt(0)) - 56320 + (w << 10);
              mdb[j++] = 240 + (ww >>> 18 & 7);
              mdb[j++] = 144 + (ww >>> 12 & 63);
              mdb[j++] = 128 + (ww >>> 6 & 63);
              mdb[j++] = 128 + (ww & 63);
            } else {
              mdb[j++] = 224 + (w >> 12);
              mdb[j++] = 128 + (w >> 6 & 63);
              mdb[j++] = 128 + (w & 63);
            }
          }
          if (!ofmt || ofmt === "buf")
            return mdb.slice(0, j);
          if (ofmt !== "arr")
            return mdb.slice(0, j).toString("binary");
          return [].slice.call(mdb, 0, j);
        };
      }
      var encache = function encache2() {
        if (has_buf) {
          if (cpdcache[sbcs_cache[0]])
            return;
          var i = 0, s = 0;
          for (i = 0; i < sbcs_cache.length; ++i) {
            s = sbcs_cache[i];
            if (cpt[s]) {
              cpdcache[s] = sbcs_decode(s);
              cpecache[s] = sbcs_encode(s);
            }
          }
          for (i = 0; i < dbcs_cache.length; ++i) {
            s = dbcs_cache[i];
            if (cpt[s]) {
              cpdcache[s] = dbcs_decode(s);
              cpecache[s] = dbcs_encode(s);
            }
          }
          for (i = 0; i < magic_cache.length; ++i) {
            s = magic_cache[i];
            if (magic_decode[s])
              cpdcache[s] = magic_decode[s];
            if (magic_encode[s])
              cpecache[s] = magic_encode[s];
          }
        }
      };
      var null_enc = function(data, ofmt) {
        return "";
      };
      var cp_decache = function cp_decache2(cp) {
        delete cpdcache[cp];
        delete cpecache[cp];
      };
      var decache = function decache2() {
        if (has_buf) {
          if (!cpdcache[sbcs_cache[0]])
            return;
          sbcs_cache.forEach(cp_decache);
          dbcs_cache.forEach(cp_decache);
          magic_cache.forEach(cp_decache);
        }
        last_enc = null_enc;
        last_cp = 0;
      };
      var cache = {
        encache,
        decache,
        sbcs: sbcs_cache,
        dbcs: dbcs_cache
      };
      encache();
      var BM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var SetD = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?";
      var last_enc = null_enc, last_cp = 0;
      var encode = function encode2(cp, data, ofmt) {
        if (cp === last_cp && last_enc) {
          return last_enc(data, ofmt);
        }
        if (cpecache[cp]) {
          last_enc = cpecache[last_cp = cp];
          return last_enc(data, ofmt);
        }
        if (has_buf && Buffer.isBuffer(data))
          data = data.toString("utf8");
        var len = data.length;
        var out = has_buf ? Buffer.allocUnsafe(4 * len) : [], w = 0, i = 0, j = 0, ww = 0;
        var C = cpt[cp], E, M = "";
        var isstr = typeof data === "string";
        if (C && (E = C.enc))
          for (i = 0; i < len; ++i, ++j) {
            w = E[isstr ? data.charAt(i) : data[i]];
            if (w > 255) {
              out[j] = w >> 8;
              out[++j] = w & 255;
            } else
              out[j] = w & 255;
          }
        else if (M = magic[cp])
          switch (M) {
            case "utf8":
              if (has_buf && isstr) {
                out = Buffer_from(data, M);
                j = out.length;
                break;
              }
              for (i = 0; i < len; ++i, ++j) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                if (w <= 127)
                  out[j] = w;
                else if (w <= 2047) {
                  out[j] = 192 + (w >> 6);
                  out[++j] = 128 + (w & 63);
                } else if (w >= 55296 && w <= 57343) {
                  w -= 55296;
                  ww = (isstr ? data.charCodeAt(++i) : data[++i].charCodeAt(0)) - 56320 + (w << 10);
                  out[j] = 240 + (ww >>> 18 & 7);
                  out[++j] = 144 + (ww >>> 12 & 63);
                  out[++j] = 128 + (ww >>> 6 & 63);
                  out[++j] = 128 + (ww & 63);
                } else {
                  out[j] = 224 + (w >> 12);
                  out[++j] = 128 + (w >> 6 & 63);
                  out[++j] = 128 + (w & 63);
                }
              }
              break;
            case "ascii":
              if (has_buf && typeof data === "string") {
                out = Buffer_from(data, M);
                j = out.length;
                break;
              }
              for (i = 0; i < len; ++i, ++j) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                if (w <= 127)
                  out[j] = w;
                else
                  throw new Error("bad ascii " + w);
              }
              break;
            case "utf16le":
              if (has_buf && typeof data === "string") {
                out = Buffer_from(data, M);
                j = out.length;
                break;
              }
              for (i = 0; i < len; ++i) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                out[j++] = w & 255;
                out[j++] = w >> 8;
              }
              break;
            case "utf16be":
              for (i = 0; i < len; ++i) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                out[j++] = w >> 8;
                out[j++] = w & 255;
              }
              break;
            case "utf32le":
              for (i = 0; i < len; ++i) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                if (w >= 55296 && w <= 57343)
                  w = 65536 + (w - 55296 << 10) + (data[++i].charCodeAt(0) - 56320);
                out[j++] = w & 255;
                w >>= 8;
                out[j++] = w & 255;
                w >>= 8;
                out[j++] = w & 255;
                w >>= 8;
                out[j++] = w & 255;
              }
              break;
            case "utf32be":
              for (i = 0; i < len; ++i) {
                w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0);
                if (w >= 55296 && w <= 57343)
                  w = 65536 + (w - 55296 << 10) + (data[++i].charCodeAt(0) - 56320);
                out[j + 3] = w & 255;
                w >>= 8;
                out[j + 2] = w & 255;
                w >>= 8;
                out[j + 1] = w & 255;
                w >>= 8;
                out[j] = w & 255;
                j += 4;
              }
              break;
            case "utf7":
              for (i = 0; i < len; i++) {
                var c = isstr ? data.charAt(i) : data[i].charAt(0);
                if (c === "+") {
                  out[j++] = 43;
                  out[j++] = 45;
                  continue;
                }
                if (SetD.indexOf(c) > -1) {
                  out[j++] = c.charCodeAt(0);
                  continue;
                }
                var tt = encode2(1201, c);
                out[j++] = 43;
                out[j++] = BM.charCodeAt(tt[0] >> 2);
                out[j++] = BM.charCodeAt(((tt[0] & 3) << 4) + ((tt[1] || 0) >> 4));
                out[j++] = BM.charCodeAt(((tt[1] & 15) << 2) + ((tt[2] || 0) >> 6));
                out[j++] = 45;
              }
              break;
            default:
              throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
          }
        else
          throw new Error("Unrecognized CP: " + cp);
        out = out.slice(0, j);
        if (!has_buf)
          return ofmt == "str" ? out.map(sfcc).join("") : out;
        if (!ofmt || ofmt === "buf")
          return out;
        if (ofmt !== "arr")
          return out.toString("binary");
        return [].slice.call(out);
      };
      var decode = function decode2(cp, data) {
        var F;
        if (F = cpdcache[cp])
          return F(data);
        if (typeof data === "string")
          return decode2(cp, data.split("").map(cca));
        var len = data.length, out = new Array(len), s = "", w = 0, i = 0, j = 1, k = 0, ww = 0;
        var C = cpt[cp], D, M = "";
        if (C && (D = C.dec)) {
          for (i = 0; i < len; i += j) {
            j = 2;
            s = D[(data[i] << 8) + data[i + 1]];
            if (!s) {
              j = 1;
              s = D[data[i]];
            }
            if (!s)
              throw new Error("Unrecognized code: " + data[i] + " " + data[i + j - 1] + " " + i + " " + j + " " + D[data[i]]);
            out[k++] = s;
          }
        } else if (M = magic[cp])
          switch (M) {
            case "utf8":
              if (len >= 3 && data[0] == 239) {
                if (data[1] == 187 && data[2] == 191)
                  i = 3;
              }
              for (; i < len; i += j) {
                j = 1;
                if (data[i] < 128)
                  w = data[i];
                else if (data[i] < 224) {
                  w = (data[i] & 31) * 64 + (data[i + 1] & 63);
                  j = 2;
                } else if (data[i] < 240) {
                  w = ((data[i] & 15) << 12) + (data[i + 1] & 63) * 64 + (data[i + 2] & 63);
                  j = 3;
                } else {
                  w = (data[i] & 7) * 262144 + ((data[i + 1] & 63) << 12) + (data[i + 2] & 63) * 64 + (data[i + 3] & 63);
                  j = 4;
                }
                if (w < 65536) {
                  out[k++] = String.fromCharCode(w);
                } else {
                  w -= 65536;
                  ww = 55296 + (w >> 10 & 1023);
                  w = 56320 + (w & 1023);
                  out[k++] = String.fromCharCode(ww);
                  out[k++] = String.fromCharCode(w);
                }
              }
              break;
            case "ascii":
              if (has_buf && Buffer.isBuffer(data))
                return data.toString(M);
              for (i = 0; i < len; i++)
                out[i] = String.fromCharCode(data[i]);
              k = len;
              break;
            case "utf16le":
              if (len >= 2 && data[0] == 255) {
                if (data[1] == 254)
                  i = 2;
              }
              if (has_buf && Buffer.isBuffer(data))
                return data.toString(M);
              j = 2;
              for (; i + 1 < len; i += j) {
                out[k++] = String.fromCharCode((data[i + 1] << 8) + data[i]);
              }
              break;
            case "utf16be":
              if (len >= 2 && data[0] == 254) {
                if (data[1] == 255)
                  i = 2;
              }
              j = 2;
              for (; i + 1 < len; i += j) {
                out[k++] = String.fromCharCode((data[i] << 8) + data[i + 1]);
              }
              break;
            case "utf32le":
              if (len >= 4 && data[0] == 255) {
                if (data[1] == 254 && data[2] === 0 && data[3] === 0)
                  i = 4;
              }
              j = 4;
              for (; i < len; i += j) {
                w = (data[i + 3] << 24) + (data[i + 2] << 16) + (data[i + 1] << 8) + data[i];
                if (w > 65535) {
                  w -= 65536;
                  out[k++] = String.fromCharCode(55296 + (w >> 10 & 1023));
                  out[k++] = String.fromCharCode(56320 + (w & 1023));
                } else
                  out[k++] = String.fromCharCode(w);
              }
              break;
            case "utf32be":
              if (len >= 4 && data[3] == 255) {
                if (data[2] == 254 && data[1] === 0 && data[0] === 0)
                  i = 4;
              }
              j = 4;
              for (; i < len; i += j) {
                w = (data[i] << 24) + (data[i + 1] << 16) + (data[i + 2] << 8) + data[i + 3];
                if (w > 65535) {
                  w -= 65536;
                  out[k++] = String.fromCharCode(55296 + (w >> 10 & 1023));
                  out[k++] = String.fromCharCode(56320 + (w & 1023));
                } else
                  out[k++] = String.fromCharCode(w);
              }
              break;
            case "utf7":
              if (len >= 4 && data[0] == 43 && data[1] == 47 && data[2] == 118) {
                if (len >= 5 && data[3] == 56 && data[4] == 45)
                  i = 5;
                else if (data[3] == 56 || data[3] == 57 || data[3] == 43 || data[3] == 47)
                  i = 4;
              }
              for (; i < len; i += j) {
                if (data[i] !== 43) {
                  j = 1;
                  out[k++] = String.fromCharCode(data[i]);
                  continue;
                }
                j = 1;
                if (data[i + 1] === 45) {
                  j = 2;
                  out[k++] = "+";
                  continue;
                }
                while (String.fromCharCode(data[i + j]).match(/[A-Za-z0-9+\/]/))
                  j++;
                var dash = 0;
                if (data[i + j] === 45) {
                  ++j;
                  dash = 1;
                }
                var tt = [];
                var o64 = "";
                var c1 = 0, c2 = 0, c3 = 0;
                var e1 = 0, e2 = 0, e3 = 0, e4 = 0;
                for (var l = 1; l < j - dash; ) {
                  e1 = BM.indexOf(String.fromCharCode(data[i + l++]));
                  e2 = BM.indexOf(String.fromCharCode(data[i + l++]));
                  c1 = e1 << 2 | e2 >> 4;
                  tt.push(c1);
                  e3 = BM.indexOf(String.fromCharCode(data[i + l++]));
                  if (e3 === -1)
                    break;
                  c2 = (e2 & 15) << 4 | e3 >> 2;
                  tt.push(c2);
                  e4 = BM.indexOf(String.fromCharCode(data[i + l++]));
                  if (e4 === -1)
                    break;
                  c3 = (e3 & 3) << 6 | e4;
                  if (e4 < 64)
                    tt.push(c3);
                }
                o64 = decode2(1201, tt);
                for (l = 0; l < o64.length; ++l)
                  out[k++] = o64.charAt(l);
              }
              break;
            default:
              throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
          }
        else
          throw new Error("Unrecognized CP: " + cp);
        return out.slice(0, k).join("");
      };
      var hascp = function hascp2(cp) {
        return !!(cpt[cp] || magic[cp]);
      };
      cpt.utils = { decode, encode, hascp, magic, cache };
      return cpt;
    });
  }
});

// node_modules/xlsx/xlsx.js
var require_xlsx = __commonJS({
  "node_modules/xlsx/xlsx.js"(exports, module2) {
    var XLSX2 = {};
    function make_xlsx_lib(XLSX3) {
      XLSX3.version = "0.18.5";
      var current_codepage = 1200, current_ansi = 1252;
      var $cptable;
      if (typeof cptable !== "undefined")
        $cptable = cptable;
      else if (typeof module2 !== "undefined" && typeof require !== "undefined") {
        $cptable = require_cpexcel();
      }
      var VALID_ANSI = [874, 932, 936, 949, 950, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1e4];
      var CS2CP = {
        0: 1252,
        1: 65001,
        2: 65001,
        77: 1e4,
        128: 932,
        129: 949,
        130: 1361,
        134: 936,
        136: 950,
        161: 1253,
        162: 1254,
        163: 1258,
        177: 1255,
        178: 1256,
        186: 1257,
        204: 1251,
        222: 874,
        238: 1250,
        255: 1252,
        69: 6969
      };
      var set_ansi = function(cp) {
        if (VALID_ANSI.indexOf(cp) == -1)
          return;
        current_ansi = CS2CP[0] = cp;
      };
      function reset_ansi() {
        set_ansi(1252);
      }
      var set_cp = function(cp) {
        current_codepage = cp;
        set_ansi(cp);
      };
      function reset_cp() {
        set_cp(1200);
        reset_ansi();
      }
      function char_codes(data) {
        var o = [];
        for (var i = 0, len = data.length; i < len; ++i)
          o[i] = data.charCodeAt(i);
        return o;
      }
      function utf16leread(data) {
        var o = [];
        for (var i = 0; i < data.length >> 1; ++i)
          o[i] = String.fromCharCode(data.charCodeAt(2 * i) + (data.charCodeAt(2 * i + 1) << 8));
        return o.join("");
      }
      function utf16beread(data) {
        var o = [];
        for (var i = 0; i < data.length >> 1; ++i)
          o[i] = String.fromCharCode(data.charCodeAt(2 * i + 1) + (data.charCodeAt(2 * i) << 8));
        return o.join("");
      }
      var debom = function(data) {
        var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
        if (c1 == 255 && c2 == 254)
          return utf16leread(data.slice(2));
        if (c1 == 254 && c2 == 255)
          return utf16beread(data.slice(2));
        if (c1 == 65279)
          return data.slice(1);
        return data;
      };
      var _getchar = function _gc1(x) {
        return String.fromCharCode(x);
      };
      var _getansi = function _ga1(x) {
        return String.fromCharCode(x);
      };
      if (typeof $cptable !== "undefined") {
        set_cp = function(cp) {
          current_codepage = cp;
          set_ansi(cp);
        };
        debom = function(data) {
          if (data.charCodeAt(0) === 255 && data.charCodeAt(1) === 254) {
            return $cptable.utils.decode(1200, char_codes(data.slice(2)));
          }
          return data;
        };
        _getchar = function _gc2(x) {
          if (current_codepage === 1200)
            return String.fromCharCode(x);
          return $cptable.utils.decode(current_codepage, [x & 255, x >> 8])[0];
        };
        _getansi = function _ga2(x) {
          return $cptable.utils.decode(current_ansi, [x])[0];
        };
      }
      var DENSE = null;
      var DIF_XL = true;
      var Base64_map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      function Base64_encode(input) {
        var o = "";
        var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
        for (var i = 0; i < input.length; ) {
          c1 = input.charCodeAt(i++);
          e1 = c1 >> 2;
          c2 = input.charCodeAt(i++);
          e2 = (c1 & 3) << 4 | c2 >> 4;
          c3 = input.charCodeAt(i++);
          e3 = (c2 & 15) << 2 | c3 >> 6;
          e4 = c3 & 63;
          if (isNaN(c2)) {
            e3 = e4 = 64;
          } else if (isNaN(c3)) {
            e4 = 64;
          }
          o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
        }
        return o;
      }
      function Base64_decode(input) {
        var o = "";
        var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
        input = input.replace(/[^\w\+\/\=]/g, "");
        for (var i = 0; i < input.length; ) {
          e1 = Base64_map.indexOf(input.charAt(i++));
          e2 = Base64_map.indexOf(input.charAt(i++));
          c1 = e1 << 2 | e2 >> 4;
          o += String.fromCharCode(c1);
          e3 = Base64_map.indexOf(input.charAt(i++));
          c2 = (e2 & 15) << 4 | e3 >> 2;
          if (e3 !== 64) {
            o += String.fromCharCode(c2);
          }
          e4 = Base64_map.indexOf(input.charAt(i++));
          c3 = (e3 & 3) << 6 | e4;
          if (e4 !== 64) {
            o += String.fromCharCode(c3);
          }
        }
        return o;
      }
      var has_buf = function() {
        return typeof Buffer !== "undefined" && typeof process !== "undefined" && typeof process.versions !== "undefined" && !!process.versions.node;
      }();
      var Buffer_from = function() {
        if (typeof Buffer !== "undefined") {
          var nbfs = !Buffer.from;
          if (!nbfs)
            try {
              Buffer.from("foo", "utf8");
            } catch (e) {
              nbfs = true;
            }
          return nbfs ? function(buf, enc) {
            return enc ? new Buffer(buf, enc) : new Buffer(buf);
          } : Buffer.from.bind(Buffer);
        }
        return function() {
        };
      }();
      function new_raw_buf(len) {
        if (has_buf)
          return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
        return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
      }
      function new_unsafe_buf(len) {
        if (has_buf)
          return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
        return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
      }
      var s2a = function s2a2(s) {
        if (has_buf)
          return Buffer_from(s, "binary");
        return s.split("").map(function(x) {
          return x.charCodeAt(0) & 255;
        });
      };
      function s2ab(s) {
        if (typeof ArrayBuffer === "undefined")
          return s2a(s);
        var buf = new ArrayBuffer(s.length), view = new Uint8Array(buf);
        for (var i = 0; i != s.length; ++i)
          view[i] = s.charCodeAt(i) & 255;
        return buf;
      }
      function a2s(data) {
        if (Array.isArray(data))
          return data.map(function(c) {
            return String.fromCharCode(c);
          }).join("");
        var o = [];
        for (var i = 0; i < data.length; ++i)
          o[i] = String.fromCharCode(data[i]);
        return o.join("");
      }
      function a2u(data) {
        if (typeof Uint8Array === "undefined")
          throw new Error("Unsupported");
        return new Uint8Array(data);
      }
      function ab2a(data) {
        if (typeof ArrayBuffer == "undefined")
          throw new Error("Unsupported");
        if (data instanceof ArrayBuffer)
          return ab2a(new Uint8Array(data));
        var o = new Array(data.length);
        for (var i = 0; i < data.length; ++i)
          o[i] = data[i];
        return o;
      }
      var bconcat = has_buf ? function(bufs) {
        return Buffer.concat(bufs.map(function(buf) {
          return Buffer.isBuffer(buf) ? buf : Buffer_from(buf);
        }));
      } : function(bufs) {
        if (typeof Uint8Array !== "undefined") {
          var i = 0, maxlen = 0;
          for (i = 0; i < bufs.length; ++i)
            maxlen += bufs[i].length;
          var o = new Uint8Array(maxlen);
          var len = 0;
          for (i = 0, maxlen = 0; i < bufs.length; maxlen += len, ++i) {
            len = bufs[i].length;
            if (bufs[i] instanceof Uint8Array)
              o.set(bufs[i], maxlen);
            else if (typeof bufs[i] == "string") {
              throw "wtf";
            } else
              o.set(new Uint8Array(bufs[i]), maxlen);
          }
          return o;
        }
        return [].concat.apply([], bufs.map(function(buf) {
          return Array.isArray(buf) ? buf : [].slice.call(buf);
        }));
      };
      function utf8decode(content) {
        var out = [], widx = 0, L = content.length + 250;
        var o = new_raw_buf(content.length + 255);
        for (var ridx = 0; ridx < content.length; ++ridx) {
          var c = content.charCodeAt(ridx);
          if (c < 128)
            o[widx++] = c;
          else if (c < 2048) {
            o[widx++] = 192 | c >> 6 & 31;
            o[widx++] = 128 | c & 63;
          } else if (c >= 55296 && c < 57344) {
            c = (c & 1023) + 64;
            var d = content.charCodeAt(++ridx) & 1023;
            o[widx++] = 240 | c >> 8 & 7;
            o[widx++] = 128 | c >> 2 & 63;
            o[widx++] = 128 | d >> 6 & 15 | (c & 3) << 4;
            o[widx++] = 128 | d & 63;
          } else {
            o[widx++] = 224 | c >> 12 & 15;
            o[widx++] = 128 | c >> 6 & 63;
            o[widx++] = 128 | c & 63;
          }
          if (widx > L) {
            out.push(o.slice(0, widx));
            widx = 0;
            o = new_raw_buf(65535);
            L = 65530;
          }
        }
        out.push(o.slice(0, widx));
        return bconcat(out);
      }
      var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
      function _strrev(x) {
        var o = "", i = x.length - 1;
        while (i >= 0)
          o += x.charAt(i--);
        return o;
      }
      function pad0(v, d) {
        var t = "" + v;
        return t.length >= d ? t : fill("0", d - t.length) + t;
      }
      function pad_(v, d) {
        var t = "" + v;
        return t.length >= d ? t : fill(" ", d - t.length) + t;
      }
      function rpad_(v, d) {
        var t = "" + v;
        return t.length >= d ? t : t + fill(" ", d - t.length);
      }
      function pad0r1(v, d) {
        var t = "" + Math.round(v);
        return t.length >= d ? t : fill("0", d - t.length) + t;
      }
      function pad0r2(v, d) {
        var t = "" + v;
        return t.length >= d ? t : fill("0", d - t.length) + t;
      }
      var p2_32 = Math.pow(2, 32);
      function pad0r(v, d) {
        if (v > p2_32 || v < -p2_32)
          return pad0r1(v, d);
        var i = Math.round(v);
        return pad0r2(i, d);
      }
      function SSF_isgeneral(s, i) {
        i = i || 0;
        return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108;
      }
      var days = [
        ["Sun", "Sunday"],
        ["Mon", "Monday"],
        ["Tue", "Tuesday"],
        ["Wed", "Wednesday"],
        ["Thu", "Thursday"],
        ["Fri", "Friday"],
        ["Sat", "Saturday"]
      ];
      var months = [
        ["J", "Jan", "January"],
        ["F", "Feb", "February"],
        ["M", "Mar", "March"],
        ["A", "Apr", "April"],
        ["M", "May", "May"],
        ["J", "Jun", "June"],
        ["J", "Jul", "July"],
        ["A", "Aug", "August"],
        ["S", "Sep", "September"],
        ["O", "Oct", "October"],
        ["N", "Nov", "November"],
        ["D", "Dec", "December"]
      ];
      function SSF_init_table(t) {
        if (!t)
          t = {};
        t[0] = "General";
        t[1] = "0";
        t[2] = "0.00";
        t[3] = "#,##0";
        t[4] = "#,##0.00";
        t[9] = "0%";
        t[10] = "0.00%";
        t[11] = "0.00E+00";
        t[12] = "# ?/?";
        t[13] = "# ??/??";
        t[14] = "m/d/yy";
        t[15] = "d-mmm-yy";
        t[16] = "d-mmm";
        t[17] = "mmm-yy";
        t[18] = "h:mm AM/PM";
        t[19] = "h:mm:ss AM/PM";
        t[20] = "h:mm";
        t[21] = "h:mm:ss";
        t[22] = "m/d/yy h:mm";
        t[37] = "#,##0 ;(#,##0)";
        t[38] = "#,##0 ;[Red](#,##0)";
        t[39] = "#,##0.00;(#,##0.00)";
        t[40] = "#,##0.00;[Red](#,##0.00)";
        t[45] = "mm:ss";
        t[46] = "[h]:mm:ss";
        t[47] = "mmss.0";
        t[48] = "##0.0E+0";
        t[49] = "@";
        t[56] = '"\u4E0A\u5348/\u4E0B\u5348 "hh"\u6642"mm"\u5206"ss"\u79D2 "';
        return t;
      }
      var table_fmt = {
        0: "General",
        1: "0",
        2: "0.00",
        3: "#,##0",
        4: "#,##0.00",
        9: "0%",
        10: "0.00%",
        11: "0.00E+00",
        12: "# ?/?",
        13: "# ??/??",
        14: "m/d/yy",
        15: "d-mmm-yy",
        16: "d-mmm",
        17: "mmm-yy",
        18: "h:mm AM/PM",
        19: "h:mm:ss AM/PM",
        20: "h:mm",
        21: "h:mm:ss",
        22: "m/d/yy h:mm",
        37: "#,##0 ;(#,##0)",
        38: "#,##0 ;[Red](#,##0)",
        39: "#,##0.00;(#,##0.00)",
        40: "#,##0.00;[Red](#,##0.00)",
        45: "mm:ss",
        46: "[h]:mm:ss",
        47: "mmss.0",
        48: "##0.0E+0",
        49: "@",
        56: '"\u4E0A\u5348/\u4E0B\u5348 "hh"\u6642"mm"\u5206"ss"\u79D2 "'
      };
      var SSF_default_map = {
        5: 37,
        6: 38,
        7: 39,
        8: 40,
        23: 0,
        24: 0,
        25: 0,
        26: 0,
        27: 14,
        28: 14,
        29: 14,
        30: 14,
        31: 14,
        50: 14,
        51: 14,
        52: 14,
        53: 14,
        54: 14,
        55: 14,
        56: 14,
        57: 14,
        58: 14,
        59: 1,
        60: 2,
        61: 3,
        62: 4,
        67: 9,
        68: 10,
        69: 12,
        70: 13,
        71: 14,
        72: 14,
        73: 15,
        74: 16,
        75: 17,
        76: 20,
        77: 21,
        78: 22,
        79: 45,
        80: 46,
        81: 47,
        82: 0
      };
      var SSF_default_str = {
        5: '"$"#,##0_);\\("$"#,##0\\)',
        63: '"$"#,##0_);\\("$"#,##0\\)',
        6: '"$"#,##0_);[Red]\\("$"#,##0\\)',
        64: '"$"#,##0_);[Red]\\("$"#,##0\\)',
        7: '"$"#,##0.00_);\\("$"#,##0.00\\)',
        65: '"$"#,##0.00_);\\("$"#,##0.00\\)',
        8: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        41: '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',
        42: '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',
        43: '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',
        44: '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'
      };
      function SSF_frac(x, D, mixed) {
        var sgn = x < 0 ? -1 : 1;
        var B = x * sgn;
        var P_2 = 0, P_1 = 1, P = 0;
        var Q_2 = 1, Q_1 = 0, Q = 0;
        var A = Math.floor(B);
        while (Q_1 < D) {
          A = Math.floor(B);
          P = A * P_1 + P_2;
          Q = A * Q_1 + Q_2;
          if (B - A < 5e-8)
            break;
          B = 1 / (B - A);
          P_2 = P_1;
          P_1 = P;
          Q_2 = Q_1;
          Q_1 = Q;
        }
        if (Q > D) {
          if (Q_1 > D) {
            Q = Q_2;
            P = P_2;
          } else {
            Q = Q_1;
            P = P_1;
          }
        }
        if (!mixed)
          return [0, sgn * P, Q];
        var q = Math.floor(sgn * P / Q);
        return [q, sgn * P - q * Q, Q];
      }
      function SSF_parse_date_code(v, opts, b2) {
        if (v > 2958465 || v < 0)
          return null;
        var date = v | 0, time = Math.floor(86400 * (v - date)), dow = 0;
        var dout = [];
        var out = { D: date, T: time, u: 86400 * (v - date) - time, y: 0, m: 0, d: 0, H: 0, M: 0, S: 0, q: 0 };
        if (Math.abs(out.u) < 1e-6)
          out.u = 0;
        if (opts && opts.date1904)
          date += 1462;
        if (out.u > 0.9999) {
          out.u = 0;
          if (++time == 86400) {
            out.T = time = 0;
            ++date;
            ++out.D;
          }
        }
        if (date === 60) {
          dout = b2 ? [1317, 10, 29] : [1900, 2, 29];
          dow = 3;
        } else if (date === 0) {
          dout = b2 ? [1317, 8, 29] : [1900, 1, 0];
          dow = 6;
        } else {
          if (date > 60)
            --date;
          var d = new Date(1900, 0, 1);
          d.setDate(d.getDate() + date - 1);
          dout = [d.getFullYear(), d.getMonth() + 1, d.getDate()];
          dow = d.getDay();
          if (date < 60)
            dow = (dow + 6) % 7;
          if (b2)
            dow = SSF_fix_hijri(d, dout);
        }
        out.y = dout[0];
        out.m = dout[1];
        out.d = dout[2];
        out.S = time % 60;
        time = Math.floor(time / 60);
        out.M = time % 60;
        time = Math.floor(time / 60);
        out.H = time;
        out.q = dow;
        return out;
      }
      var SSFbasedate = new Date(1899, 11, 31, 0, 0, 0);
      var SSFdnthresh = SSFbasedate.getTime();
      var SSFbase1904 = new Date(1900, 2, 1, 0, 0, 0);
      function datenum_local(v, date1904) {
        var epoch = v.getTime();
        if (date1904)
          epoch -= 1461 * 24 * 60 * 60 * 1e3;
        else if (v >= SSFbase1904)
          epoch += 24 * 60 * 60 * 1e3;
        return (epoch - (SSFdnthresh + (v.getTimezoneOffset() - SSFbasedate.getTimezoneOffset()) * 6e4)) / (24 * 60 * 60 * 1e3);
      }
      function SSF_strip_decimal(o) {
        return o.indexOf(".") == -1 ? o : o.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, "$1");
      }
      function SSF_normalize_exp(o) {
        if (o.indexOf("E") == -1)
          return o;
        return o.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/, "$1E").replace(/(E[+-])(\d)$/, "$10$2");
      }
      function SSF_small_exp(v) {
        var w = v < 0 ? 12 : 11;
        var o = SSF_strip_decimal(v.toFixed(12));
        if (o.length <= w)
          return o;
        o = v.toPrecision(10);
        if (o.length <= w)
          return o;
        return v.toExponential(5);
      }
      function SSF_large_exp(v) {
        var o = SSF_strip_decimal(v.toFixed(11));
        return o.length > (v < 0 ? 12 : 11) || o === "0" || o === "-0" ? v.toPrecision(6) : o;
      }
      function SSF_general_num(v) {
        var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E), o;
        if (V >= -4 && V <= -1)
          o = v.toPrecision(10 + V);
        else if (Math.abs(V) <= 9)
          o = SSF_small_exp(v);
        else if (V === 10)
          o = v.toFixed(10).substr(0, 12);
        else
          o = SSF_large_exp(v);
        return SSF_strip_decimal(SSF_normalize_exp(o.toUpperCase()));
      }
      function SSF_general(v, opts) {
        switch (typeof v) {
          case "string":
            return v;
          case "boolean":
            return v ? "TRUE" : "FALSE";
          case "number":
            return (v | 0) === v ? v.toString(10) : SSF_general_num(v);
          case "undefined":
            return "";
          case "object":
            if (v == null)
              return "";
            if (v instanceof Date)
              return SSF_format(14, datenum_local(v, opts && opts.date1904), opts);
        }
        throw new Error("unsupported value in General format: " + v);
      }
      function SSF_fix_hijri(date, o) {
        o[0] -= 581;
        var dow = date.getDay();
        if (date < 60)
          dow = (dow + 6) % 7;
        return dow;
      }
      function SSF_write_date(type, fmt, val, ss0) {
        var o = "", ss = 0, tt = 0, y = val.y, out, outl = 0;
        switch (type) {
          case 98:
            y = val.y + 543;
          case 121:
            switch (fmt.length) {
              case 1:
              case 2:
                out = y % 100;
                outl = 2;
                break;
              default:
                out = y % 1e4;
                outl = 4;
                break;
            }
            break;
          case 109:
            switch (fmt.length) {
              case 1:
              case 2:
                out = val.m;
                outl = fmt.length;
                break;
              case 3:
                return months[val.m - 1][1];
              case 5:
                return months[val.m - 1][0];
              default:
                return months[val.m - 1][2];
            }
            break;
          case 100:
            switch (fmt.length) {
              case 1:
              case 2:
                out = val.d;
                outl = fmt.length;
                break;
              case 3:
                return days[val.q][0];
              default:
                return days[val.q][1];
            }
            break;
          case 104:
            switch (fmt.length) {
              case 1:
              case 2:
                out = 1 + (val.H + 11) % 12;
                outl = fmt.length;
                break;
              default:
                throw "bad hour format: " + fmt;
            }
            break;
          case 72:
            switch (fmt.length) {
              case 1:
              case 2:
                out = val.H;
                outl = fmt.length;
                break;
              default:
                throw "bad hour format: " + fmt;
            }
            break;
          case 77:
            switch (fmt.length) {
              case 1:
              case 2:
                out = val.M;
                outl = fmt.length;
                break;
              default:
                throw "bad minute format: " + fmt;
            }
            break;
          case 115:
            if (fmt != "s" && fmt != "ss" && fmt != ".0" && fmt != ".00" && fmt != ".000")
              throw "bad second format: " + fmt;
            if (val.u === 0 && (fmt == "s" || fmt == "ss"))
              return pad0(val.S, fmt.length);
            if (ss0 >= 2)
              tt = ss0 === 3 ? 1e3 : 100;
            else
              tt = ss0 === 1 ? 10 : 1;
            ss = Math.round(tt * (val.S + val.u));
            if (ss >= 60 * tt)
              ss = 0;
            if (fmt === "s")
              return ss === 0 ? "0" : "" + ss / tt;
            o = pad0(ss, 2 + ss0);
            if (fmt === "ss")
              return o.substr(0, 2);
            return "." + o.substr(2, fmt.length - 1);
          case 90:
            switch (fmt) {
              case "[h]":
              case "[hh]":
                out = val.D * 24 + val.H;
                break;
              case "[m]":
              case "[mm]":
                out = (val.D * 24 + val.H) * 60 + val.M;
                break;
              case "[s]":
              case "[ss]":
                out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);
                break;
              default:
                throw "bad abstime format: " + fmt;
            }
            outl = fmt.length === 3 ? 1 : 2;
            break;
          case 101:
            out = y;
            outl = 1;
            break;
        }
        var outstr = outl > 0 ? pad0(out, outl) : "";
        return outstr;
      }
      function commaify(s) {
        var w = 3;
        if (s.length <= w)
          return s;
        var j = s.length % w, o = s.substr(0, j);
        for (; j != s.length; j += w)
          o += (o.length > 0 ? "," : "") + s.substr(j, w);
        return o;
      }
      var pct1 = /%/g;
      function write_num_pct(type, fmt, val) {
        var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
      }
      function write_num_cm(type, fmt, val) {
        var idx = fmt.length - 1;
        while (fmt.charCodeAt(idx - 1) === 44)
          --idx;
        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
      }
      function write_num_exp(fmt, val) {
        var o;
        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
        if (fmt.match(/^#+0.0E\+0$/)) {
          if (val == 0)
            return "0.0E+0";
          else if (val < 0)
            return "-" + write_num_exp(fmt, -val);
          var period = fmt.indexOf(".");
          if (period === -1)
            period = fmt.indexOf("E");
          var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
          if (ee < 0)
            ee += period;
          o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
          if (o.indexOf("e") === -1) {
            var fakee = Math.floor(Math.log(val) * Math.LOG10E);
            if (o.indexOf(".") === -1)
              o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
            else
              o += "E+" + (fakee - ee);
            while (o.substr(0, 2) === "0.") {
              o = o.charAt(0) + o.substr(2, period) + "." + o.substr(2 + period);
              o = o.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
            }
            o = o.replace(/\+-/, "-");
          }
          o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
            return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
          });
        } else
          o = val.toExponential(idx);
        if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/))
          o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
        if (fmt.match(/E\-/) && o.match(/e\+/))
          o = o.replace(/e\+/, "e");
        return o.replace("e", "E");
      }
      var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
      function write_num_f1(r, aval, sign) {
        var den = parseInt(r[4], 10), rr = Math.round(aval * den), base = Math.floor(rr / den);
        var myn = rr - base * den, myd = den;
        return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + "/" + r[3] + pad0(myd, r[4].length));
      }
      function write_num_f2(r, aval, sign) {
        return sign + (aval === 0 ? "" : "" + aval) + fill(" ", r[1].length + 2 + r[4].length);
      }
      var dec1 = /^#*0*\.([0#]+)/;
      var closeparen = /\).*[0#]/;
      var phone = /\(###\) ###\\?-####/;
      function hashq(str) {
        var o = "", cc;
        for (var i = 0; i != str.length; ++i)
          switch (cc = str.charCodeAt(i)) {
            case 35:
              break;
            case 63:
              o += " ";
              break;
            case 48:
              o += "0";
              break;
            default:
              o += String.fromCharCode(cc);
          }
        return o;
      }
      function rnd(val, d) {
        var dd = Math.pow(10, d);
        return "" + Math.round(val * dd) / dd;
      }
      function dec(val, d) {
        var _frac = val - Math.floor(val), dd = Math.pow(10, d);
        if (d < ("" + Math.round(_frac * dd)).length)
          return 0;
        return Math.round(_frac * dd);
      }
      function carry(val, d) {
        if (d < ("" + Math.round((val - Math.floor(val)) * Math.pow(10, d))).length) {
          return 1;
        }
        return 0;
      }
      function flr(val) {
        if (val < 2147483647 && val > -2147483648)
          return "" + (val >= 0 ? val | 0 : val - 1 | 0);
        return "" + Math.floor(val);
      }
      function write_num_flt(type, fmt, val) {
        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
          var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
          if (val >= 0)
            return write_num_flt("n", ffmt, val);
          return "(" + write_num_flt("n", ffmt, -val) + ")";
        }
        if (fmt.charCodeAt(fmt.length - 1) === 44)
          return write_num_cm(type, fmt, val);
        if (fmt.indexOf("%") !== -1)
          return write_num_pct(type, fmt, val);
        if (fmt.indexOf("E") !== -1)
          return write_num_exp(fmt, val);
        if (fmt.charCodeAt(0) === 36)
          return "$" + write_num_flt(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
        var o;
        var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
        if (fmt.match(/^00+$/))
          return sign + pad0r(aval, fmt.length);
        if (fmt.match(/^[#?]+$/)) {
          o = pad0r(val, 0);
          if (o === "0")
            o = "";
          return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
        }
        if (r = fmt.match(frac1))
          return write_num_f1(r, aval, sign);
        if (fmt.match(/^#+0+$/))
          return sign + pad0r(aval, fmt.length - fmt.indexOf("0"));
        if (r = fmt.match(dec1)) {
          o = rnd(val, r[1].length).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1])).replace(/\.(\d*)$/, function($$, $1) {
            return "." + $1 + fill("0", hashq(r[1]).length - $1.length);
          });
          return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
        }
        fmt = fmt.replace(/^#+([0.])/, "$1");
        if (r = fmt.match(/^(0*)\.(#*)$/)) {
          return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
        }
        if (r = fmt.match(/^#{1,3},##0(\.?)$/))
          return sign + commaify(pad0r(aval, 0));
        if (r = fmt.match(/^#,##0\.([#0]*0)$/)) {
          return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify("" + (Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length), r[1].length);
        }
        if (r = fmt.match(/^#,#*,#0/))
          return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val);
        if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
          o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val));
          ri = 0;
          return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x2) {
            return ri < o.length ? o.charAt(ri++) : x2 === "0" ? "0" : "";
          }));
        }
        if (fmt.match(phone)) {
          o = write_num_flt(type, "##########", val);
          return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
        }
        var oa = "";
        if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri = Math.min(r[4].length, 7);
          ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
          o = "" + sign;
          oa = write_num("n", r[1], ff[1]);
          if (oa.charAt(oa.length - 1) == " ")
            oa = oa.substr(0, oa.length - 1) + "0";
          o += oa + r[2] + "/" + r[3];
          oa = rpad_(ff[2], ri);
          if (oa.length < r[4].length)
            oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
          o += oa;
          return o;
        }
        if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri = Math.min(Math.max(r[1].length, r[4].length), 7);
          ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
          return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
        }
        if (r = fmt.match(/^[#0?]+$/)) {
          o = pad0r(val, 0);
          if (fmt.length <= o.length)
            return o;
          return hashq(fmt.substr(0, fmt.length - o.length)) + o;
        }
        if (r = fmt.match(/^([#0?]+)\.([#0]+)$/)) {
          o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
          ri = o.indexOf(".");
          var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
          return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
        }
        if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
          ri = dec(val, r[1].length);
          return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
            return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
          }) + "." + pad0(ri, r[1].length);
        }
        switch (fmt) {
          case "###,##0.00":
            return write_num_flt(type, "#,##0.00", val);
          case "###,###":
          case "##,###":
          case "#,###":
            var x = commaify(pad0r(aval, 0));
            return x !== "0" ? sign + x : "";
          case "###,###.00":
            return write_num_flt(type, "###,##0.00", val).replace(/^0\./, ".");
          case "#,###.00":
            return write_num_flt(type, "#,##0.00", val).replace(/^0\./, ".");
          default:
        }
        throw new Error("unsupported format |" + fmt + "|");
      }
      function write_num_cm2(type, fmt, val) {
        var idx = fmt.length - 1;
        while (fmt.charCodeAt(idx - 1) === 44)
          --idx;
        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
      }
      function write_num_pct2(type, fmt, val) {
        var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
      }
      function write_num_exp2(fmt, val) {
        var o;
        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
        if (fmt.match(/^#+0.0E\+0$/)) {
          if (val == 0)
            return "0.0E+0";
          else if (val < 0)
            return "-" + write_num_exp2(fmt, -val);
          var period = fmt.indexOf(".");
          if (period === -1)
            period = fmt.indexOf("E");
          var ee = Math.floor(Math.log(val) * Math.LOG10E) % period;
          if (ee < 0)
            ee += period;
          o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period);
          if (!o.match(/[Ee]/)) {
            var fakee = Math.floor(Math.log(val) * Math.LOG10E);
            if (o.indexOf(".") === -1)
              o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee);
            else
              o += "E+" + (fakee - ee);
            o = o.replace(/\+-/, "-");
          }
          o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $2, $3) {
            return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E";
          });
        } else
          o = val.toExponential(idx);
        if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/))
          o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1);
        if (fmt.match(/E\-/) && o.match(/e\+/))
          o = o.replace(/e\+/, "e");
        return o.replace("e", "E");
      }
      function write_num_int(type, fmt, val) {
        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
          var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
          if (val >= 0)
            return write_num_int("n", ffmt, val);
          return "(" + write_num_int("n", ffmt, -val) + ")";
        }
        if (fmt.charCodeAt(fmt.length - 1) === 44)
          return write_num_cm2(type, fmt, val);
        if (fmt.indexOf("%") !== -1)
          return write_num_pct2(type, fmt, val);
        if (fmt.indexOf("E") !== -1)
          return write_num_exp2(fmt, val);
        if (fmt.charCodeAt(0) === 36)
          return "$" + write_num_int(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
        var o;
        var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
        if (fmt.match(/^00+$/))
          return sign + pad0(aval, fmt.length);
        if (fmt.match(/^[#?]+$/)) {
          o = "" + val;
          if (val === 0)
            o = "";
          return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o;
        }
        if (r = fmt.match(frac1))
          return write_num_f2(r, aval, sign);
        if (fmt.match(/^#+0+$/))
          return sign + pad0(aval, fmt.length - fmt.indexOf("0"));
        if (r = fmt.match(dec1)) {
          o = ("" + val).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1]));
          o = o.replace(/\.(\d*)$/, function($$, $1) {
            return "." + $1 + fill("0", hashq(r[1]).length - $1.length);
          });
          return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".");
        }
        fmt = fmt.replace(/^#+([0.])/, "$1");
        if (r = fmt.match(/^(0*)\.(#*)$/)) {
          return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".");
        }
        if (r = fmt.match(/^#{1,3},##0(\.?)$/))
          return sign + commaify("" + aval);
        if (r = fmt.match(/^#,##0\.([#0]*0)$/)) {
          return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val) + "." + fill("0", r[1].length);
        }
        if (r = fmt.match(/^#,#*,#0/))
          return write_num_int(type, fmt.replace(/^#,#*,/, ""), val);
        if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
          o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val));
          ri = 0;
          return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x2) {
            return ri < o.length ? o.charAt(ri++) : x2 === "0" ? "0" : "";
          }));
        }
        if (fmt.match(phone)) {
          o = write_num_int(type, "##########", val);
          return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
        }
        var oa = "";
        if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri = Math.min(r[4].length, 7);
          ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
          o = "" + sign;
          oa = write_num("n", r[1], ff[1]);
          if (oa.charAt(oa.length - 1) == " ")
            oa = oa.substr(0, oa.length - 1) + "0";
          o += oa + r[2] + "/" + r[3];
          oa = rpad_(ff[2], ri);
          if (oa.length < r[4].length)
            oa = hashq(r[4].substr(r[4].length - oa.length)) + oa;
          o += oa;
          return o;
        }
        if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri = Math.min(Math.max(r[1].length, r[4].length), 7);
          ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
          return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length));
        }
        if (r = fmt.match(/^[#0?]+$/)) {
          o = "" + val;
          if (fmt.length <= o.length)
            return o;
          return hashq(fmt.substr(0, fmt.length - o.length)) + o;
        }
        if (r = fmt.match(/^([#0]+)\.([#0]+)$/)) {
          o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1");
          ri = o.indexOf(".");
          var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
          return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
        }
        if (r = fmt.match(/^00,000\.([#0]*0)$/)) {
          return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
            return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
          }) + "." + pad0(0, r[1].length);
        }
        switch (fmt) {
          case "###,###":
          case "##,###":
          case "#,###":
            var x = commaify("" + aval);
            return x !== "0" ? sign + x : "";
          default:
            if (fmt.match(/\.[0#?]*$/))
              return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
        }
        throw new Error("unsupported format |" + fmt + "|");
      }
      function write_num(type, fmt, val) {
        return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
      }
      function SSF_split_fmt(fmt) {
        var out = [];
        var in_str = false;
        for (var i = 0, j = 0; i < fmt.length; ++i)
          switch (fmt.charCodeAt(i)) {
            case 34:
              in_str = !in_str;
              break;
            case 95:
            case 42:
            case 92:
              ++i;
              break;
            case 59:
              out[out.length] = fmt.substr(j, i - j);
              j = i + 1;
          }
        out[out.length] = fmt.substr(j);
        if (in_str === true)
          throw new Error("Format |" + fmt + "| unterminated string ");
        return out;
      }
      var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
      function fmt_is_date(fmt) {
        var i = 0, c = "", o = "";
        while (i < fmt.length) {
          switch (c = fmt.charAt(i)) {
            case "G":
              if (SSF_isgeneral(fmt, i))
                i += 6;
              i++;
              break;
            case '"':
              for (; fmt.charCodeAt(++i) !== 34 && i < fmt.length; ) {
              }
              ++i;
              break;
            case "\\":
              i += 2;
              break;
            case "_":
              i += 2;
              break;
            case "@":
              ++i;
              break;
            case "B":
            case "b":
              if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2")
                return true;
            case "M":
            case "D":
            case "Y":
            case "H":
            case "S":
            case "E":
            case "m":
            case "d":
            case "y":
            case "h":
            case "s":
            case "e":
            case "g":
              return true;
            case "A":
            case "a":
            case "\u4E0A":
              if (fmt.substr(i, 3).toUpperCase() === "A/P")
                return true;
              if (fmt.substr(i, 5).toUpperCase() === "AM/PM")
                return true;
              if (fmt.substr(i, 5).toUpperCase() === "\u4E0A\u5348/\u4E0B\u5348")
                return true;
              ++i;
              break;
            case "[":
              o = c;
              while (fmt.charAt(i++) !== "]" && i < fmt.length)
                o += fmt.charAt(i);
              if (o.match(SSF_abstime))
                return true;
              break;
            case ".":
            case "0":
            case "#":
              while (i < fmt.length && ("0#?.,E+-%".indexOf(c = fmt.charAt(++i)) > -1 || c == "\\" && fmt.charAt(i + 1) == "-" && "0#".indexOf(fmt.charAt(i + 2)) > -1)) {
              }
              break;
            case "?":
              while (fmt.charAt(++i) === c) {
              }
              break;
            case "*":
              ++i;
              if (fmt.charAt(i) == " " || fmt.charAt(i) == "*")
                ++i;
              break;
            case "(":
            case ")":
              ++i;
              break;
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              while (i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) {
              }
              break;
            case " ":
              ++i;
              break;
            default:
              ++i;
              break;
          }
        }
        return false;
      }
      function eval_fmt(fmt, v, opts, flen) {
        var out = [], o = "", i = 0, c = "", lst = "t", dt, j, cc;
        var hr = "H";
        while (i < fmt.length) {
          switch (c = fmt.charAt(i)) {
            case "G":
              if (!SSF_isgeneral(fmt, i))
                throw new Error("unrecognized character " + c + " in " + fmt);
              out[out.length] = { t: "G", v: "General" };
              i += 7;
              break;
            case '"':
              for (o = ""; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length; )
                o += String.fromCharCode(cc);
              out[out.length] = { t: "t", v: o };
              ++i;
              break;
            case "\\":
              var w = fmt.charAt(++i), t = w === "(" || w === ")" ? w : "t";
              out[out.length] = { t, v: w };
              ++i;
              break;
            case "_":
              out[out.length] = { t: "t", v: " " };
              i += 2;
              break;
            case "@":
              out[out.length] = { t: "T", v };
              ++i;
              break;
            case "B":
            case "b":
              if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") {
                if (dt == null) {
                  dt = SSF_parse_date_code(v, opts, fmt.charAt(i + 1) === "2");
                  if (dt == null)
                    return "";
                }
                out[out.length] = { t: "X", v: fmt.substr(i, 2) };
                lst = c;
                i += 2;
                break;
              }
            case "M":
            case "D":
            case "Y":
            case "H":
            case "S":
            case "E":
              c = c.toLowerCase();
            case "m":
            case "d":
            case "y":
            case "h":
            case "s":
            case "e":
            case "g":
              if (v < 0)
                return "";
              if (dt == null) {
                dt = SSF_parse_date_code(v, opts);
                if (dt == null)
                  return "";
              }
              o = c;
              while (++i < fmt.length && fmt.charAt(i).toLowerCase() === c)
                o += c;
              if (c === "m" && lst.toLowerCase() === "h")
                c = "M";
              if (c === "h")
                c = hr;
              out[out.length] = { t: c, v: o };
              lst = c;
              break;
            case "A":
            case "a":
            case "\u4E0A":
              var q = { t: c, v: c };
              if (dt == null)
                dt = SSF_parse_date_code(v, opts);
              if (fmt.substr(i, 3).toUpperCase() === "A/P") {
                if (dt != null)
                  q.v = dt.H >= 12 ? "P" : "A";
                q.t = "T";
                hr = "h";
                i += 3;
              } else if (fmt.substr(i, 5).toUpperCase() === "AM/PM") {
                if (dt != null)
                  q.v = dt.H >= 12 ? "PM" : "AM";
                q.t = "T";
                i += 5;
                hr = "h";
              } else if (fmt.substr(i, 5).toUpperCase() === "\u4E0A\u5348/\u4E0B\u5348") {
                if (dt != null)
                  q.v = dt.H >= 12 ? "\u4E0B\u5348" : "\u4E0A\u5348";
                q.t = "T";
                i += 5;
                hr = "h";
              } else {
                q.t = "t";
                ++i;
              }
              if (dt == null && q.t === "T")
                return "";
              out[out.length] = q;
              lst = c;
              break;
            case "[":
              o = c;
              while (fmt.charAt(i++) !== "]" && i < fmt.length)
                o += fmt.charAt(i);
              if (o.slice(-1) !== "]")
                throw 'unterminated "[" block: |' + o + "|";
              if (o.match(SSF_abstime)) {
                if (dt == null) {
                  dt = SSF_parse_date_code(v, opts);
                  if (dt == null)
                    return "";
                }
                out[out.length] = { t: "Z", v: o.toLowerCase() };
                lst = o.charAt(1);
              } else if (o.indexOf("$") > -1) {
                o = (o.match(/\$([^-\[\]]*)/) || [])[1] || "$";
                if (!fmt_is_date(fmt))
                  out[out.length] = { t: "t", v: o };
              }
              break;
            case ".":
              if (dt != null) {
                o = c;
                while (++i < fmt.length && (c = fmt.charAt(i)) === "0")
                  o += c;
                out[out.length] = { t: "s", v: o };
                break;
              }
            case "0":
            case "#":
              o = c;
              while (++i < fmt.length && "0#?.,E+-%".indexOf(c = fmt.charAt(i)) > -1)
                o += c;
              out[out.length] = { t: "n", v: o };
              break;
            case "?":
              o = c;
              while (fmt.charAt(++i) === c)
                o += c;
              out[out.length] = { t: c, v: o };
              lst = c;
              break;
            case "*":
              ++i;
              if (fmt.charAt(i) == " " || fmt.charAt(i) == "*")
                ++i;
              break;
            case "(":
            case ")":
              out[out.length] = { t: flen === 1 ? "t" : c, v: c };
              ++i;
              break;
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              o = c;
              while (i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1)
                o += fmt.charAt(i);
              out[out.length] = { t: "D", v: o };
              break;
            case " ":
              out[out.length] = { t: c, v: c };
              ++i;
              break;
            case "$":
              out[out.length] = { t: "t", v: "$" };
              ++i;
              break;
            default:
              if (",$-+/():!^&'~{}<>=\u20ACacfijklopqrtuvwxzP".indexOf(c) === -1)
                throw new Error("unrecognized character " + c + " in " + fmt);
              out[out.length] = { t: "t", v: c };
              ++i;
              break;
          }
        }
        var bt = 0, ss0 = 0, ssm;
        for (i = out.length - 1, lst = "t"; i >= 0; --i) {
          switch (out[i].t) {
            case "h":
            case "H":
              out[i].t = hr;
              lst = "h";
              if (bt < 1)
                bt = 1;
              break;
            case "s":
              if (ssm = out[i].v.match(/\.0+$/))
                ss0 = Math.max(ss0, ssm[0].length - 1);
              if (bt < 3)
                bt = 3;
            case "d":
            case "y":
            case "M":
            case "e":
              lst = out[i].t;
              break;
            case "m":
              if (lst === "s") {
                out[i].t = "M";
                if (bt < 2)
                  bt = 2;
              }
              break;
            case "X":
              break;
            case "Z":
              if (bt < 1 && out[i].v.match(/[Hh]/))
                bt = 1;
              if (bt < 2 && out[i].v.match(/[Mm]/))
                bt = 2;
              if (bt < 3 && out[i].v.match(/[Ss]/))
                bt = 3;
          }
        }
        switch (bt) {
          case 0:
            break;
          case 1:
            if (dt.u >= 0.5) {
              dt.u = 0;
              ++dt.S;
            }
            if (dt.S >= 60) {
              dt.S = 0;
              ++dt.M;
            }
            if (dt.M >= 60) {
              dt.M = 0;
              ++dt.H;
            }
            break;
          case 2:
            if (dt.u >= 0.5) {
              dt.u = 0;
              ++dt.S;
            }
            if (dt.S >= 60) {
              dt.S = 0;
              ++dt.M;
            }
            break;
        }
        var nstr = "", jj;
        for (i = 0; i < out.length; ++i) {
          switch (out[i].t) {
            case "t":
            case "T":
            case " ":
            case "D":
              break;
            case "X":
              out[i].v = "";
              out[i].t = ";";
              break;
            case "d":
            case "m":
            case "y":
            case "h":
            case "H":
            case "M":
            case "s":
            case "e":
            case "b":
            case "Z":
              out[i].v = SSF_write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
              out[i].t = "t";
              break;
            case "n":
            case "?":
              jj = i + 1;
              while (out[jj] != null && ((c = out[jj].t) === "?" || c === "D" || (c === " " || c === "t") && out[jj + 1] != null && (out[jj + 1].t === "?" || out[jj + 1].t === "t" && out[jj + 1].v === "/") || out[i].t === "(" && (c === " " || c === "n" || c === ")") || c === "t" && (out[jj].v === "/" || out[jj].v === " " && out[jj + 1] != null && out[jj + 1].t == "?"))) {
                out[i].v += out[jj].v;
                out[jj] = { v: "", t: ";" };
                ++jj;
              }
              nstr += out[i].v;
              i = jj - 1;
              break;
            case "G":
              out[i].t = "t";
              out[i].v = SSF_general(v, opts);
              break;
          }
        }
        var vv = "", myv, ostr;
        if (nstr.length > 0) {
          if (nstr.charCodeAt(0) == 40) {
            myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v;
            ostr = write_num("n", nstr, myv);
          } else {
            myv = v < 0 && flen > 1 ? -v : v;
            ostr = write_num("n", nstr, myv);
            if (myv < 0 && out[0] && out[0].t == "t") {
              ostr = ostr.substr(1);
              out[0].v = "-" + out[0].v;
            }
          }
          jj = ostr.length - 1;
          var decpt = out.length;
          for (i = 0; i < out.length; ++i)
            if (out[i] != null && out[i].t != "t" && out[i].v.indexOf(".") > -1) {
              decpt = i;
              break;
            }
          var lasti = out.length;
          if (decpt === out.length && ostr.indexOf("E") === -1) {
            for (i = out.length - 1; i >= 0; --i) {
              if (out[i] == null || "n?".indexOf(out[i].t) === -1)
                continue;
              if (jj >= out[i].v.length - 1) {
                jj -= out[i].v.length;
                out[i].v = ostr.substr(jj + 1, out[i].v.length);
              } else if (jj < 0)
                out[i].v = "";
              else {
                out[i].v = ostr.substr(0, jj + 1);
                jj = -1;
              }
              out[i].t = "t";
              lasti = i;
            }
            if (jj >= 0 && lasti < out.length)
              out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
          } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
            jj = ostr.indexOf(".") - 1;
            for (i = decpt; i >= 0; --i) {
              if (out[i] == null || "n?".indexOf(out[i].t) === -1)
                continue;
              j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") - 1 : out[i].v.length - 1;
              vv = out[i].v.substr(j + 1);
              for (; j >= 0; --j) {
                if (jj >= 0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#"))
                  vv = ostr.charAt(jj--) + vv;
              }
              out[i].v = vv;
              out[i].t = "t";
              lasti = i;
            }
            if (jj >= 0 && lasti < out.length)
              out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
            jj = ostr.indexOf(".") + 1;
            for (i = decpt; i < out.length; ++i) {
              if (out[i] == null || "n?(".indexOf(out[i].t) === -1 && i !== decpt)
                continue;
              j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") + 1 : 0;
              vv = out[i].v.substr(0, j);
              for (; j < out[i].v.length; ++j) {
                if (jj < ostr.length)
                  vv += ostr.charAt(jj++);
              }
              out[i].v = vv;
              out[i].t = "t";
              lasti = i;
            }
          }
        }
        for (i = 0; i < out.length; ++i)
          if (out[i] != null && "n?".indexOf(out[i].t) > -1) {
            myv = flen > 1 && v < 0 && i > 0 && out[i - 1].v === "-" ? -v : v;
            out[i].v = write_num(out[i].t, out[i].v, myv);
            out[i].t = "t";
          }
        var retval = "";
        for (i = 0; i !== out.length; ++i)
          if (out[i] != null)
            retval += out[i].v;
        return retval;
      }
      var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
      function chkcond(v, rr) {
        if (rr == null)
          return false;
        var thresh = parseFloat(rr[2]);
        switch (rr[1]) {
          case "=":
            if (v == thresh)
              return true;
            break;
          case ">":
            if (v > thresh)
              return true;
            break;
          case "<":
            if (v < thresh)
              return true;
            break;
          case "<>":
            if (v != thresh)
              return true;
            break;
          case ">=":
            if (v >= thresh)
              return true;
            break;
          case "<=":
            if (v <= thresh)
              return true;
            break;
        }
        return false;
      }
      function choose_fmt(f, v) {
        var fmt = SSF_split_fmt(f);
        var l = fmt.length, lat = fmt[l - 1].indexOf("@");
        if (l < 4 && lat > -1)
          --l;
        if (fmt.length > 4)
          throw new Error("cannot find right format for |" + fmt.join("|") + "|");
        if (typeof v !== "number")
          return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"];
        switch (fmt.length) {
          case 1:
            fmt = lat > -1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"];
            break;
          case 2:
            fmt = lat > -1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"];
            break;
          case 3:
            fmt = lat > -1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"];
            break;
          case 4:
            break;
        }
        var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
        if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1)
          return [l, ff];
        if (fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
          var m1 = fmt[0].match(cfregex2);
          var m2 = fmt[1].match(cfregex2);
          return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
        }
        return [l, ff];
      }
      function SSF_format(fmt, v, o) {
        if (o == null)
          o = {};
        var sfmt = "";
        switch (typeof fmt) {
          case "string":
            if (fmt == "m/d/yy" && o.dateNF)
              sfmt = o.dateNF;
            else
              sfmt = fmt;
            break;
          case "number":
            if (fmt == 14 && o.dateNF)
              sfmt = o.dateNF;
            else
              sfmt = (o.table != null ? o.table : table_fmt)[fmt];
            if (sfmt == null)
              sfmt = o.table && o.table[SSF_default_map[fmt]] || table_fmt[SSF_default_map[fmt]];
            if (sfmt == null)
              sfmt = SSF_default_str[fmt] || "General";
            break;
        }
        if (SSF_isgeneral(sfmt, 0))
          return SSF_general(v, o);
        if (v instanceof Date)
          v = datenum_local(v, o.date1904);
        var f = choose_fmt(sfmt, v);
        if (SSF_isgeneral(f[1]))
          return SSF_general(v, o);
        if (v === true)
          v = "TRUE";
        else if (v === false)
          v = "FALSE";
        else if (v === "" || v == null)
          return "";
        return eval_fmt(f[1], v, o, f[0]);
      }
      function SSF_load(fmt, idx) {
        if (typeof idx != "number") {
          idx = +idx || -1;
          for (var i = 0; i < 392; ++i) {
            if (table_fmt[i] == void 0) {
              if (idx < 0)
                idx = i;
              continue;
            }
            if (table_fmt[i] == fmt) {
              idx = i;
              break;
            }
          }
          if (idx < 0)
            idx = 391;
        }
        table_fmt[idx] = fmt;
        return idx;
      }
      function SSF_load_table(tbl) {
        for (var i = 0; i != 392; ++i)
          if (tbl[i] !== void 0)
            SSF_load(tbl[i], i);
      }
      function make_ssf() {
        table_fmt = SSF_init_table();
      }
      var SSF = {
        format: SSF_format,
        load: SSF_load,
        _table: table_fmt,
        load_table: SSF_load_table,
        parse_date_code: SSF_parse_date_code,
        is_date: fmt_is_date,
        get_table: function get_table() {
          return SSF._table = table_fmt;
        }
      };
      var SSFImplicit = {
        "5": '"$"#,##0_);\\("$"#,##0\\)',
        "6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
        "7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
        "8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        "23": "General",
        "24": "General",
        "25": "General",
        "26": "General",
        "27": "m/d/yy",
        "28": "m/d/yy",
        "29": "m/d/yy",
        "30": "m/d/yy",
        "31": "m/d/yy",
        "32": "h:mm:ss",
        "33": "h:mm:ss",
        "34": "h:mm:ss",
        "35": "h:mm:ss",
        "36": "m/d/yy",
        "41": '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',
        "42": '_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)',
        "43": '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)',
        "44": '_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)',
        "50": "m/d/yy",
        "51": "m/d/yy",
        "52": "m/d/yy",
        "53": "m/d/yy",
        "54": "m/d/yy",
        "55": "m/d/yy",
        "56": "m/d/yy",
        "57": "m/d/yy",
        "58": "m/d/yy",
        "59": "0",
        "60": "0.00",
        "61": "#,##0",
        "62": "#,##0.00",
        "63": '"$"#,##0_);\\("$"#,##0\\)',
        "64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
        "65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
        "66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        "67": "0%",
        "68": "0.00%",
        "69": "# ?/?",
        "70": "# ??/??",
        "71": "m/d/yy",
        "72": "m/d/yy",
        "73": "d-mmm-yy",
        "74": "d-mmm",
        "75": "mmm-yy",
        "76": "h:mm",
        "77": "h:mm:ss",
        "78": "m/d/yy h:mm",
        "79": "mm:ss",
        "80": "[h]:mm:ss",
        "81": "mmss.0"
      };
      var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
      function dateNF_regex(dateNF) {
        var fmt = typeof dateNF == "number" ? table_fmt[dateNF] : dateNF;
        fmt = fmt.replace(dateNFregex, "(\\d+)");
        return new RegExp("^" + fmt + "$");
      }
      function dateNF_fix(str, dateNF, match) {
        var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;
        (dateNF.match(dateNFregex) || []).forEach(function(n, i) {
          var v = parseInt(match[i + 1], 10);
          switch (n.toLowerCase().charAt(0)) {
            case "y":
              Y = v;
              break;
            case "d":
              d = v;
              break;
            case "h":
              H = v;
              break;
            case "s":
              S = v;
              break;
            case "m":
              if (H >= 0)
                M = v;
              else
                m = v;
              break;
          }
        });
        if (S >= 0 && M == -1 && m >= 0) {
          M = m;
          m = -1;
        }
        var datestr = ("" + (Y >= 0 ? Y : new Date().getFullYear())).slice(-4) + "-" + ("00" + (m >= 1 ? m : 1)).slice(-2) + "-" + ("00" + (d >= 1 ? d : 1)).slice(-2);
        if (datestr.length == 7)
          datestr = "0" + datestr;
        if (datestr.length == 8)
          datestr = "20" + datestr;
        var timestr = ("00" + (H >= 0 ? H : 0)).slice(-2) + ":" + ("00" + (M >= 0 ? M : 0)).slice(-2) + ":" + ("00" + (S >= 0 ? S : 0)).slice(-2);
        if (H == -1 && M == -1 && S == -1)
          return datestr;
        if (Y == -1 && m == -1 && d == -1)
          return timestr;
        return datestr + "T" + timestr;
      }
      var CRC32 = function() {
        var CRC322 = {};
        CRC322.version = "1.2.0";
        function signed_crc_table() {
          var c = 0, table = new Array(256);
          for (var n = 0; n != 256; ++n) {
            c = n;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            table[n] = c;
          }
          return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
        }
        var T0 = signed_crc_table();
        function slice_by_16_tables(T) {
          var c = 0, v = 0, n = 0, table = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
          for (n = 0; n != 256; ++n)
            table[n] = T[n];
          for (n = 0; n != 256; ++n) {
            v = T[n];
            for (c = 256 + n; c < 4096; c += 256)
              v = table[c] = v >>> 8 ^ T[v & 255];
          }
          var out = [];
          for (n = 1; n != 16; ++n)
            out[n - 1] = typeof Int32Array !== "undefined" ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
          return out;
        }
        var TT = slice_by_16_tables(T0);
        var T1 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
        var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta = TT[9];
        var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
        function crc32_bstr(bstr, seed) {
          var C = seed ^ -1;
          for (var i = 0, L = bstr.length; i < L; )
            C = C >>> 8 ^ T0[(C ^ bstr.charCodeAt(i++)) & 255];
          return ~C;
        }
        function crc32_buf(B, seed) {
          var C = seed ^ -1, L = B.length - 15, i = 0;
          for (; i < L; )
            C = Tf[B[i++] ^ C & 255] ^ Te[B[i++] ^ C >> 8 & 255] ^ Td[B[i++] ^ C >> 16 & 255] ^ Tc[B[i++] ^ C >>> 24] ^ Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^ T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^ T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
          L += 15;
          while (i < L)
            C = C >>> 8 ^ T0[(C ^ B[i++]) & 255];
          return ~C;
        }
        function crc32_str(str, seed) {
          var C = seed ^ -1;
          for (var i = 0, L = str.length, c = 0, d = 0; i < L; ) {
            c = str.charCodeAt(i++);
            if (c < 128) {
              C = C >>> 8 ^ T0[(C ^ c) & 255];
            } else if (c < 2048) {
              C = C >>> 8 ^ T0[(C ^ (192 | c >> 6 & 31)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 255];
            } else if (c >= 55296 && c < 57344) {
              c = (c & 1023) + 64;
              d = str.charCodeAt(i++) & 1023;
              C = C >>> 8 ^ T0[(C ^ (240 | c >> 8 & 7)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | c >> 2 & 63)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | d & 63)) & 255];
            } else {
              C = C >>> 8 ^ T0[(C ^ (224 | c >> 12 & 15)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | c >> 6 & 63)) & 255];
              C = C >>> 8 ^ T0[(C ^ (128 | c & 63)) & 255];
            }
          }
          return ~C;
        }
        CRC322.table = T0;
        CRC322.bstr = crc32_bstr;
        CRC322.buf = crc32_buf;
        CRC322.str = crc32_str;
        return CRC322;
      }();
      var CFB = function _CFB() {
        var exports2 = {};
        exports2.version = "1.2.1";
        function namecmp(l, r) {
          var L = l.split("/"), R = r.split("/");
          for (var i2 = 0, c = 0, Z = Math.min(L.length, R.length); i2 < Z; ++i2) {
            if (c = L[i2].length - R[i2].length)
              return c;
            if (L[i2] != R[i2])
              return L[i2] < R[i2] ? -1 : 1;
          }
          return L.length - R.length;
        }
        function dirname(p) {
          if (p.charAt(p.length - 1) == "/")
            return p.slice(0, -1).indexOf("/") === -1 ? p : dirname(p.slice(0, -1));
          var c = p.lastIndexOf("/");
          return c === -1 ? p : p.slice(0, c + 1);
        }
        function filename(p) {
          if (p.charAt(p.length - 1) == "/")
            return filename(p.slice(0, -1));
          var c = p.lastIndexOf("/");
          return c === -1 ? p : p.slice(c + 1);
        }
        function write_dos_date(buf, date) {
          if (typeof date === "string")
            date = new Date(date);
          var hms = date.getHours();
          hms = hms << 6 | date.getMinutes();
          hms = hms << 5 | date.getSeconds() >>> 1;
          buf.write_shift(2, hms);
          var ymd = date.getFullYear() - 1980;
          ymd = ymd << 4 | date.getMonth() + 1;
          ymd = ymd << 5 | date.getDate();
          buf.write_shift(2, ymd);
        }
        function parse_dos_date(buf) {
          var hms = buf.read_shift(2) & 65535;
          var ymd = buf.read_shift(2) & 65535;
          var val = new Date();
          var d = ymd & 31;
          ymd >>>= 5;
          var m = ymd & 15;
          ymd >>>= 4;
          val.setMilliseconds(0);
          val.setFullYear(ymd + 1980);
          val.setMonth(m - 1);
          val.setDate(d);
          var S = hms & 31;
          hms >>>= 5;
          var M = hms & 63;
          hms >>>= 6;
          val.setHours(hms);
          val.setMinutes(M);
          val.setSeconds(S << 1);
          return val;
        }
        function parse_extra_field(blob) {
          prep_blob(blob, 0);
          var o = {};
          var flags = 0;
          while (blob.l <= blob.length - 4) {
            var type = blob.read_shift(2);
            var sz = blob.read_shift(2), tgt = blob.l + sz;
            var p = {};
            switch (type) {
              case 21589:
                {
                  flags = blob.read_shift(1);
                  if (flags & 1)
                    p.mtime = blob.read_shift(4);
                  if (sz > 5) {
                    if (flags & 2)
                      p.atime = blob.read_shift(4);
                    if (flags & 4)
                      p.ctime = blob.read_shift(4);
                  }
                  if (p.mtime)
                    p.mt = new Date(p.mtime * 1e3);
                }
                break;
            }
            blob.l = tgt;
            o[type] = p;
          }
          return o;
        }
        var fs;
        function get_fs() {
          return fs || (fs = require("fs"));
        }
        function parse(file, options) {
          if (file[0] == 80 && file[1] == 75)
            return parse_zip2(file, options);
          if ((file[0] | 32) == 109 && (file[1] | 32) == 105)
            return parse_mad(file, options);
          if (file.length < 512)
            throw new Error("CFB file size " + file.length + " < 512");
          var mver = 3;
          var ssz = 512;
          var nmfs = 0;
          var difat_sec_cnt = 0;
          var dir_start = 0;
          var minifat_start = 0;
          var difat_start = 0;
          var fat_addrs = [];
          var blob = file.slice(0, 512);
          prep_blob(blob, 0);
          var mv = check_get_mver(blob);
          mver = mv[0];
          switch (mver) {
            case 3:
              ssz = 512;
              break;
            case 4:
              ssz = 4096;
              break;
            case 0:
              if (mv[1] == 0)
                return parse_zip2(file, options);
            default:
              throw new Error("Major Version: Expected 3 or 4 saw " + mver);
          }
          if (ssz !== 512) {
            blob = file.slice(0, ssz);
            prep_blob(blob, 28);
          }
          var header = file.slice(0, ssz);
          check_shifts(blob, mver);
          var dir_cnt = blob.read_shift(4, "i");
          if (mver === 3 && dir_cnt !== 0)
            throw new Error("# Directory Sectors: Expected 0 saw " + dir_cnt);
          blob.l += 4;
          dir_start = blob.read_shift(4, "i");
          blob.l += 4;
          blob.chk("00100000", "Mini Stream Cutoff Size: ");
          minifat_start = blob.read_shift(4, "i");
          nmfs = blob.read_shift(4, "i");
          difat_start = blob.read_shift(4, "i");
          difat_sec_cnt = blob.read_shift(4, "i");
          for (var q2 = -1, j = 0; j < 109; ++j) {
            q2 = blob.read_shift(4, "i");
            if (q2 < 0)
              break;
            fat_addrs[j] = q2;
          }
          var sectors = sectorify(file, ssz);
          sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
          var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);
          sector_list[dir_start].name = "!Directory";
          if (nmfs > 0 && minifat_start !== ENDOFCHAIN)
            sector_list[minifat_start].name = "!MiniFAT";
          sector_list[fat_addrs[0]].name = "!FAT";
          sector_list.fat_addrs = fat_addrs;
          sector_list.ssz = ssz;
          var files = {}, Paths = [], FileIndex = [], FullPaths = [];
          read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);
          build_full_paths(FileIndex, FullPaths, Paths);
          Paths.shift();
          var o = {
            FileIndex,
            FullPaths
          };
          if (options && options.raw)
            o.raw = { header, sectors };
          return o;
        }
        function check_get_mver(blob) {
          if (blob[blob.l] == 80 && blob[blob.l + 1] == 75)
            return [0, 0];
          blob.chk(HEADER_SIGNATURE, "Header Signature: ");
          blob.l += 16;
          var mver = blob.read_shift(2, "u");
          return [blob.read_shift(2, "u"), mver];
        }
        function check_shifts(blob, mver) {
          var shift = 9;
          blob.l += 2;
          switch (shift = blob.read_shift(2)) {
            case 9:
              if (mver != 3)
                throw new Error("Sector Shift: Expected 9 saw " + shift);
              break;
            case 12:
              if (mver != 4)
                throw new Error("Sector Shift: Expected 12 saw " + shift);
              break;
            default:
              throw new Error("Sector Shift: Expected 9 or 12 saw " + shift);
          }
          blob.chk("0600", "Mini Sector Shift: ");
          blob.chk("000000000000", "Reserved: ");
        }
        function sectorify(file, ssz) {
          var nsectors = Math.ceil(file.length / ssz) - 1;
          var sectors = [];
          for (var i2 = 1; i2 < nsectors; ++i2)
            sectors[i2 - 1] = file.slice(i2 * ssz, (i2 + 1) * ssz);
          sectors[nsectors - 1] = file.slice(nsectors * ssz);
          return sectors;
        }
        function build_full_paths(FI, FP, Paths) {
          var i2 = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;
          var dad = [], q2 = [];
          for (; i2 < pl; ++i2) {
            dad[i2] = q2[i2] = i2;
            FP[i2] = Paths[i2];
          }
          for (; j < q2.length; ++j) {
            i2 = q2[j];
            L = FI[i2].L;
            R = FI[i2].R;
            C = FI[i2].C;
            if (dad[i2] === i2) {
              if (L !== -1 && dad[L] !== L)
                dad[i2] = dad[L];
              if (R !== -1 && dad[R] !== R)
                dad[i2] = dad[R];
            }
            if (C !== -1)
              dad[C] = i2;
            if (L !== -1 && i2 != dad[i2]) {
              dad[L] = dad[i2];
              if (q2.lastIndexOf(L) < j)
                q2.push(L);
            }
            if (R !== -1 && i2 != dad[i2]) {
              dad[R] = dad[i2];
              if (q2.lastIndexOf(R) < j)
                q2.push(R);
            }
          }
          for (i2 = 1; i2 < pl; ++i2)
            if (dad[i2] === i2) {
              if (R !== -1 && dad[R] !== R)
                dad[i2] = dad[R];
              else if (L !== -1 && dad[L] !== L)
                dad[i2] = dad[L];
            }
          for (i2 = 1; i2 < pl; ++i2) {
            if (FI[i2].type === 0)
              continue;
            j = i2;
            if (j != dad[j])
              do {
                j = dad[j];
                FP[i2] = FP[j] + "/" + FP[i2];
              } while (j !== 0 && dad[j] !== -1 && j != dad[j]);
            dad[i2] = -1;
          }
          FP[0] += "/";
          for (i2 = 1; i2 < pl; ++i2) {
            if (FI[i2].type !== 2)
              FP[i2] += "/";
          }
        }
        function get_mfat_entry(entry, payload, mini) {
          var start = entry.start, size = entry.size;
          var o = [];
          var idx = start;
          while (mini && size > 0 && idx >= 0) {
            o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
            size -= MSSZ;
            idx = __readInt32LE(mini, idx * 4);
          }
          if (o.length === 0)
            return new_buf(0);
          return bconcat(o).slice(0, entry.size);
        }
        function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
          var q2 = ENDOFCHAIN;
          if (idx === ENDOFCHAIN) {
            if (cnt !== 0)
              throw new Error("DIFAT chain shorter than expected");
          } else if (idx !== -1) {
            var sector = sectors[idx], m = (ssz >>> 2) - 1;
            if (!sector)
              return;
            for (var i2 = 0; i2 < m; ++i2) {
              if ((q2 = __readInt32LE(sector, i2 * 4)) === ENDOFCHAIN)
                break;
              fat_addrs.push(q2);
            }
            sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);
          }
        }
        function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {
          var buf = [], buf_chain = [];
          if (!chkd)
            chkd = [];
          var modulus = ssz - 1, j = 0, jj = 0;
          for (j = start; j >= 0; ) {
            chkd[j] = true;
            buf[buf.length] = j;
            buf_chain.push(sectors[j]);
            var addr = fat_addrs[Math.floor(j * 4 / ssz)];
            jj = j * 4 & modulus;
            if (ssz < 4 + jj)
              throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
            if (!sectors[addr])
              break;
            j = __readInt32LE(sectors[addr], jj);
          }
          return { nodes: buf, data: __toBuffer([buf_chain]) };
        }
        function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
          var sl = sectors.length, sector_list = [];
          var chkd = [], buf = [], buf_chain = [];
          var modulus = ssz - 1, i2 = 0, j = 0, k = 0, jj = 0;
          for (i2 = 0; i2 < sl; ++i2) {
            buf = [];
            k = i2 + dir_start;
            if (k >= sl)
              k -= sl;
            if (chkd[k])
              continue;
            buf_chain = [];
            var seen = [];
            for (j = k; j >= 0; ) {
              seen[j] = true;
              chkd[j] = true;
              buf[buf.length] = j;
              buf_chain.push(sectors[j]);
              var addr = fat_addrs[Math.floor(j * 4 / ssz)];
              jj = j * 4 & modulus;
              if (ssz < 4 + jj)
                throw new Error("FAT boundary crossed: " + j + " 4 " + ssz);
              if (!sectors[addr])
                break;
              j = __readInt32LE(sectors[addr], jj);
              if (seen[j])
                break;
            }
            sector_list[k] = { nodes: buf, data: __toBuffer([buf_chain]) };
          }
          return sector_list;
        }
        function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {
          var minifat_store = 0, pl = Paths.length ? 2 : 0;
          var sector = sector_list[dir_start].data;
          var i2 = 0, namelen = 0, name;
          for (; i2 < sector.length; i2 += 128) {
            var blob = sector.slice(i2, i2 + 128);
            prep_blob(blob, 64);
            namelen = blob.read_shift(2);
            name = __utf16le(blob, 0, namelen - pl);
            Paths.push(name);
            var o = {
              name,
              type: blob.read_shift(1),
              color: blob.read_shift(1),
              L: blob.read_shift(4, "i"),
              R: blob.read_shift(4, "i"),
              C: blob.read_shift(4, "i"),
              clsid: blob.read_shift(16),
              state: blob.read_shift(4, "i"),
              start: 0,
              size: 0
            };
            var ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if (ctime !== 0)
              o.ct = read_date(blob, blob.l - 8);
            var mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if (mtime !== 0)
              o.mt = read_date(blob, blob.l - 8);
            o.start = blob.read_shift(4, "i");
            o.size = blob.read_shift(4, "i");
            if (o.size < 0 && o.start < 0) {
              o.size = o.type = 0;
              o.start = ENDOFCHAIN;
              o.name = "";
            }
            if (o.type === 5) {
              minifat_store = o.start;
              if (nmfs > 0 && minifat_store !== ENDOFCHAIN)
                sector_list[minifat_store].name = "!StreamData";
            } else if (o.size >= 4096) {
              o.storage = "fat";
              if (sector_list[o.start] === void 0)
                sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
              sector_list[o.start].name = o.name;
              o.content = sector_list[o.start].data.slice(0, o.size);
            } else {
              o.storage = "minifat";
              if (o.size < 0)
                o.size = 0;
              else if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {
                o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini] || {}).data);
              }
            }
            if (o.content)
              prep_blob(o.content, 0);
            files[name] = o;
            FileIndex.push(o);
          }
        }
        function read_date(blob, offset) {
          return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1e3);
        }
        function read_file(filename2, options) {
          get_fs();
          return parse(fs.readFileSync(filename2), options);
        }
        function read(blob, options) {
          var type = options && options.type;
          if (!type) {
            if (has_buf && Buffer.isBuffer(blob))
              type = "buffer";
          }
          switch (type || "base64") {
            case "file":
              return read_file(blob, options);
            case "base64":
              return parse(s2a(Base64_decode(blob)), options);
            case "binary":
              return parse(s2a(blob), options);
          }
          return parse(blob, options);
        }
        function init_cfb(cfb, opts) {
          var o = opts || {}, root = o.root || "Root Entry";
          if (!cfb.FullPaths)
            cfb.FullPaths = [];
          if (!cfb.FileIndex)
            cfb.FileIndex = [];
          if (cfb.FullPaths.length !== cfb.FileIndex.length)
            throw new Error("inconsistent CFB structure");
          if (cfb.FullPaths.length === 0) {
            cfb.FullPaths[0] = root + "/";
            cfb.FileIndex[0] = { name: root, type: 5 };
          }
          if (o.CLSID)
            cfb.FileIndex[0].clsid = o.CLSID;
          seed_cfb(cfb);
        }
        function seed_cfb(cfb) {
          var nm = "Sh33tJ5";
          if (CFB.find(cfb, "/" + nm))
            return;
          var p = new_buf(4);
          p[0] = 55;
          p[1] = p[3] = 50;
          p[2] = 54;
          cfb.FileIndex.push({ name: nm, type: 2, content: p, size: 4, L: 69, R: 69, C: 69 });
          cfb.FullPaths.push(cfb.FullPaths[0] + nm);
          rebuild_cfb(cfb);
        }
        function rebuild_cfb(cfb, f) {
          init_cfb(cfb);
          var gc = false, s = false;
          for (var i2 = cfb.FullPaths.length - 1; i2 >= 0; --i2) {
            var _file = cfb.FileIndex[i2];
            switch (_file.type) {
              case 0:
                if (s)
                  gc = true;
                else {
                  cfb.FileIndex.pop();
                  cfb.FullPaths.pop();
                }
                break;
              case 1:
              case 2:
              case 5:
                s = true;
                if (isNaN(_file.R * _file.L * _file.C))
                  gc = true;
                if (_file.R > -1 && _file.L > -1 && _file.R == _file.L)
                  gc = true;
                break;
              default:
                gc = true;
                break;
            }
          }
          if (!gc && !f)
            return;
          var now = new Date(1987, 1, 19), j = 0;
          var fullPaths = Object.create ? /* @__PURE__ */ Object.create(null) : {};
          var data = [];
          for (i2 = 0; i2 < cfb.FullPaths.length; ++i2) {
            fullPaths[cfb.FullPaths[i2]] = true;
            if (cfb.FileIndex[i2].type === 0)
              continue;
            data.push([cfb.FullPaths[i2], cfb.FileIndex[i2]]);
          }
          for (i2 = 0; i2 < data.length; ++i2) {
            var dad = dirname(data[i2][0]);
            s = fullPaths[dad];
            if (!s) {
              data.push([dad, {
                name: filename(dad).replace("/", ""),
                type: 1,
                clsid: HEADER_CLSID,
                ct: now,
                mt: now,
                content: null
              }]);
              fullPaths[dad] = true;
            }
          }
          data.sort(function(x, y) {
            return namecmp(x[0], y[0]);
          });
          cfb.FullPaths = [];
          cfb.FileIndex = [];
          for (i2 = 0; i2 < data.length; ++i2) {
            cfb.FullPaths[i2] = data[i2][0];
            cfb.FileIndex[i2] = data[i2][1];
          }
          for (i2 = 0; i2 < data.length; ++i2) {
            var elt = cfb.FileIndex[i2];
            var nm = cfb.FullPaths[i2];
            elt.name = filename(nm).replace("/", "");
            elt.L = elt.R = elt.C = -(elt.color = 1);
            elt.size = elt.content ? elt.content.length : 0;
            elt.start = 0;
            elt.clsid = elt.clsid || HEADER_CLSID;
            if (i2 === 0) {
              elt.C = data.length > 1 ? 1 : -1;
              elt.size = 0;
              elt.type = 5;
            } else if (nm.slice(-1) == "/") {
              for (j = i2 + 1; j < data.length; ++j)
                if (dirname(cfb.FullPaths[j]) == nm)
                  break;
              elt.C = j >= data.length ? -1 : j;
              for (j = i2 + 1; j < data.length; ++j)
                if (dirname(cfb.FullPaths[j]) == dirname(nm))
                  break;
              elt.R = j >= data.length ? -1 : j;
              elt.type = 1;
            } else {
              if (dirname(cfb.FullPaths[i2 + 1] || "") == dirname(nm))
                elt.R = i2 + 1;
              elt.type = 2;
            }
          }
        }
        function _write(cfb, options) {
          var _opts = options || {};
          if (_opts.fileType == "mad")
            return write_mad(cfb, _opts);
          rebuild_cfb(cfb);
          switch (_opts.fileType) {
            case "zip":
              return write_zip2(cfb, _opts);
          }
          var L = function(cfb2) {
            var mini_size = 0, fat_size = 0;
            for (var i3 = 0; i3 < cfb2.FileIndex.length; ++i3) {
              var file2 = cfb2.FileIndex[i3];
              if (!file2.content)
                continue;
              var flen2 = file2.content.length;
              if (flen2 > 0) {
                if (flen2 < 4096)
                  mini_size += flen2 + 63 >> 6;
                else
                  fat_size += flen2 + 511 >> 9;
              }
            }
            var dir_cnt = cfb2.FullPaths.length + 3 >> 2;
            var mini_cnt = mini_size + 7 >> 3;
            var mfat_cnt = mini_size + 127 >> 7;
            var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
            var fat_cnt = fat_base + 127 >> 7;
            var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
            while (fat_base + fat_cnt + difat_cnt + 127 >> 7 > fat_cnt)
              difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
            var L2 = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
            cfb2.FileIndex[0].size = mini_size << 6;
            L2[7] = (cfb2.FileIndex[0].start = L2[0] + L2[1] + L2[2] + L2[3] + L2[4] + L2[5]) + (L2[6] + 7 >> 3);
            return L2;
          }(cfb);
          var o = new_buf(L[7] << 9);
          var i2 = 0, T = 0;
          {
            for (i2 = 0; i2 < 8; ++i2)
              o.write_shift(1, HEADER_SIG[i2]);
            for (i2 = 0; i2 < 8; ++i2)
              o.write_shift(2, 0);
            o.write_shift(2, 62);
            o.write_shift(2, 3);
            o.write_shift(2, 65534);
            o.write_shift(2, 9);
            o.write_shift(2, 6);
            for (i2 = 0; i2 < 3; ++i2)
              o.write_shift(2, 0);
            o.write_shift(4, 0);
            o.write_shift(4, L[2]);
            o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
            o.write_shift(4, 0);
            o.write_shift(4, 1 << 12);
            o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);
            o.write_shift(4, L[3]);
            o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);
            o.write_shift(4, L[1]);
            for (i2 = 0; i2 < 109; ++i2)
              o.write_shift(-4, i2 < L[2] ? L[1] + i2 : -1);
          }
          if (L[1]) {
            for (T = 0; T < L[1]; ++T) {
              for (; i2 < 236 + T * 127; ++i2)
                o.write_shift(-4, i2 < L[2] ? L[1] + i2 : -1);
              o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
            }
          }
          var chainit = function(w) {
            for (T += w; i2 < T - 1; ++i2)
              o.write_shift(-4, i2 + 1);
            if (w) {
              ++i2;
              o.write_shift(-4, ENDOFCHAIN);
            }
          };
          T = i2 = 0;
          for (T += L[1]; i2 < T; ++i2)
            o.write_shift(-4, consts.DIFSECT);
          for (T += L[2]; i2 < T; ++i2)
            o.write_shift(-4, consts.FATSECT);
          chainit(L[3]);
          chainit(L[4]);
          var j = 0, flen = 0;
          var file = cfb.FileIndex[0];
          for (; j < cfb.FileIndex.length; ++j) {
            file = cfb.FileIndex[j];
            if (!file.content)
              continue;
            flen = file.content.length;
            if (flen < 4096)
              continue;
            file.start = T;
            chainit(flen + 511 >> 9);
          }
          chainit(L[6] + 7 >> 3);
          while (o.l & 511)
            o.write_shift(-4, consts.ENDOFCHAIN);
          T = i2 = 0;
          for (j = 0; j < cfb.FileIndex.length; ++j) {
            file = cfb.FileIndex[j];
            if (!file.content)
              continue;
            flen = file.content.length;
            if (!flen || flen >= 4096)
              continue;
            file.start = T;
            chainit(flen + 63 >> 6);
          }
          while (o.l & 511)
            o.write_shift(-4, consts.ENDOFCHAIN);
          for (i2 = 0; i2 < L[4] << 2; ++i2) {
            var nm = cfb.FullPaths[i2];
            if (!nm || nm.length === 0) {
              for (j = 0; j < 17; ++j)
                o.write_shift(4, 0);
              for (j = 0; j < 3; ++j)
                o.write_shift(4, -1);
              for (j = 0; j < 12; ++j)
                o.write_shift(4, 0);
              continue;
            }
            file = cfb.FileIndex[i2];
            if (i2 === 0)
              file.start = file.size ? file.start - 1 : ENDOFCHAIN;
            var _nm = i2 === 0 && _opts.root || file.name;
            flen = 2 * (_nm.length + 1);
            o.write_shift(64, _nm, "utf16le");
            o.write_shift(2, flen);
            o.write_shift(1, file.type);
            o.write_shift(1, file.color);
            o.write_shift(-4, file.L);
            o.write_shift(-4, file.R);
            o.write_shift(-4, file.C);
            if (!file.clsid)
              for (j = 0; j < 4; ++j)
                o.write_shift(4, 0);
            else
              o.write_shift(16, file.clsid, "hex");
            o.write_shift(4, file.state || 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(4, file.start);
            o.write_shift(4, file.size);
            o.write_shift(4, 0);
          }
          for (i2 = 1; i2 < cfb.FileIndex.length; ++i2) {
            file = cfb.FileIndex[i2];
            if (file.size >= 4096) {
              o.l = file.start + 1 << 9;
              if (has_buf && Buffer.isBuffer(file.content)) {
                file.content.copy(o, o.l, 0, file.size);
                o.l += file.size + 511 & -512;
              } else {
                for (j = 0; j < file.size; ++j)
                  o.write_shift(1, file.content[j]);
                for (; j & 511; ++j)
                  o.write_shift(1, 0);
              }
            }
          }
          for (i2 = 1; i2 < cfb.FileIndex.length; ++i2) {
            file = cfb.FileIndex[i2];
            if (file.size > 0 && file.size < 4096) {
              if (has_buf && Buffer.isBuffer(file.content)) {
                file.content.copy(o, o.l, 0, file.size);
                o.l += file.size + 63 & -64;
              } else {
                for (j = 0; j < file.size; ++j)
                  o.write_shift(1, file.content[j]);
                for (; j & 63; ++j)
                  o.write_shift(1, 0);
              }
            }
          }
          if (has_buf) {
            o.l = o.length;
          } else {
            while (o.l < o.length)
              o.write_shift(1, 0);
          }
          return o;
        }
        function find(cfb, path) {
          var UCFullPaths = cfb.FullPaths.map(function(x) {
            return x.toUpperCase();
          });
          var UCPaths = UCFullPaths.map(function(x) {
            var y = x.split("/");
            return y[y.length - (x.slice(-1) == "/" ? 2 : 1)];
          });
          var k = false;
          if (path.charCodeAt(0) === 47) {
            k = true;
            path = UCFullPaths[0].slice(0, -1) + path;
          } else
            k = path.indexOf("/") !== -1;
          var UCPath = path.toUpperCase();
          var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
          if (w !== -1)
            return cfb.FileIndex[w];
          var m = !UCPath.match(chr1);
          UCPath = UCPath.replace(chr0, "");
          if (m)
            UCPath = UCPath.replace(chr1, "!");
          for (w = 0; w < UCFullPaths.length; ++w) {
            if ((m ? UCFullPaths[w].replace(chr1, "!") : UCFullPaths[w]).replace(chr0, "") == UCPath)
              return cfb.FileIndex[w];
            if ((m ? UCPaths[w].replace(chr1, "!") : UCPaths[w]).replace(chr0, "") == UCPath)
              return cfb.FileIndex[w];
          }
          return null;
        }
        var MSSZ = 64;
        var ENDOFCHAIN = -2;
        var HEADER_SIGNATURE = "d0cf11e0a1b11ae1";
        var HEADER_SIG = [208, 207, 17, 224, 161, 177, 26, 225];
        var HEADER_CLSID = "00000000000000000000000000000000";
        var consts = {
          MAXREGSECT: -6,
          DIFSECT: -4,
          FATSECT: -3,
          ENDOFCHAIN,
          FREESECT: -1,
          HEADER_SIGNATURE,
          HEADER_MINOR_VERSION: "3e00",
          MAXREGSID: -6,
          NOSTREAM: -1,
          HEADER_CLSID,
          EntryTypes: ["unknown", "storage", "stream", "lockbytes", "property", "root"]
        };
        function write_file(cfb, filename2, options) {
          get_fs();
          var o = _write(cfb, options);
          fs.writeFileSync(filename2, o);
        }
        function a2s2(o) {
          var out = new Array(o.length);
          for (var i2 = 0; i2 < o.length; ++i2)
            out[i2] = String.fromCharCode(o[i2]);
          return out.join("");
        }
        function write(cfb, options) {
          var o = _write(cfb, options);
          switch (options && options.type || "buffer") {
            case "file":
              get_fs();
              fs.writeFileSync(options.filename, o);
              return o;
            case "binary":
              return typeof o == "string" ? o : a2s2(o);
            case "base64":
              return Base64_encode(typeof o == "string" ? o : a2s2(o));
            case "buffer":
              if (has_buf)
                return Buffer.isBuffer(o) ? o : Buffer_from(o);
            case "array":
              return typeof o == "string" ? s2a(o) : o;
          }
          return o;
        }
        var _zlib;
        function use_zlib(zlib) {
          try {
            var InflateRaw = zlib.InflateRaw;
            var InflRaw = new InflateRaw();
            InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);
            if (InflRaw.bytesRead)
              _zlib = zlib;
            else
              throw new Error("zlib does not expose bytesRead");
          } catch (e) {
            console.error("cannot use native zlib: " + (e.message || e));
          }
        }
        function _inflateRawSync(payload, usz) {
          if (!_zlib)
            return _inflate(payload, usz);
          var InflateRaw = _zlib.InflateRaw;
          var InflRaw = new InflateRaw();
          var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
          payload.l += InflRaw.bytesRead;
          return out;
        }
        function _deflateRawSync(payload) {
          return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
        }
        var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
        var LEN_LN = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
        var DST_LN = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
        function bit_swap_8(n) {
          var t = (n << 1 | n << 11) & 139536 | (n << 5 | n << 15) & 558144;
          return (t >> 16 | t >> 8 | t) & 255;
        }
        var use_typed_arrays = typeof Uint8Array !== "undefined";
        var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];
        for (var q = 0; q < 1 << 8; ++q)
          bitswap8[q] = bit_swap_8(q);
        function bit_swap_n(n, b) {
          var rev = bitswap8[n & 255];
          if (b <= 8)
            return rev >>> 8 - b;
          rev = rev << 8 | bitswap8[n >> 8 & 255];
          if (b <= 16)
            return rev >>> 16 - b;
          rev = rev << 8 | bitswap8[n >> 16 & 255];
          return rev >>> 24 - b;
        }
        function read_bits_2(buf, bl) {
          var w = bl & 7, h = bl >>> 3;
          return (buf[h] | (w <= 6 ? 0 : buf[h + 1] << 8)) >>> w & 3;
        }
        function read_bits_3(buf, bl) {
          var w = bl & 7, h = bl >>> 3;
          return (buf[h] | (w <= 5 ? 0 : buf[h + 1] << 8)) >>> w & 7;
        }
        function read_bits_4(buf, bl) {
          var w = bl & 7, h = bl >>> 3;
          return (buf[h] | (w <= 4 ? 0 : buf[h + 1] << 8)) >>> w & 15;
        }
        function read_bits_5(buf, bl) {
          var w = bl & 7, h = bl >>> 3;
          return (buf[h] | (w <= 3 ? 0 : buf[h + 1] << 8)) >>> w & 31;
        }
        function read_bits_7(buf, bl) {
          var w = bl & 7, h = bl >>> 3;
          return (buf[h] | (w <= 1 ? 0 : buf[h + 1] << 8)) >>> w & 127;
        }
        function read_bits_n(buf, bl, n) {
          var w = bl & 7, h = bl >>> 3, f = (1 << n) - 1;
          var v = buf[h] >>> w;
          if (n < 8 - w)
            return v & f;
          v |= buf[h + 1] << 8 - w;
          if (n < 16 - w)
            return v & f;
          v |= buf[h + 2] << 16 - w;
          if (n < 24 - w)
            return v & f;
          v |= buf[h + 3] << 24 - w;
          return v & f;
        }
        function write_bits_3(buf, bl, v) {
          var w = bl & 7, h = bl >>> 3;
          if (w <= 5)
            buf[h] |= (v & 7) << w;
          else {
            buf[h] |= v << w & 255;
            buf[h + 1] = (v & 7) >> 8 - w;
          }
          return bl + 3;
        }
        function write_bits_1(buf, bl, v) {
          var w = bl & 7, h = bl >>> 3;
          v = (v & 1) << w;
          buf[h] |= v;
          return bl + 1;
        }
        function write_bits_8(buf, bl, v) {
          var w = bl & 7, h = bl >>> 3;
          v <<= w;
          buf[h] |= v & 255;
          v >>>= 8;
          buf[h + 1] = v;
          return bl + 8;
        }
        function write_bits_16(buf, bl, v) {
          var w = bl & 7, h = bl >>> 3;
          v <<= w;
          buf[h] |= v & 255;
          v >>>= 8;
          buf[h + 1] = v & 255;
          buf[h + 2] = v >>> 8;
          return bl + 16;
        }
        function realloc(b, sz) {
          var L = b.length, M = 2 * L > sz ? 2 * L : sz + 5, i2 = 0;
          if (L >= sz)
            return b;
          if (has_buf) {
            var o = new_unsafe_buf(M);
            if (b.copy)
              b.copy(o);
            else
              for (; i2 < b.length; ++i2)
                o[i2] = b[i2];
            return o;
          } else if (use_typed_arrays) {
            var a = new Uint8Array(M);
            if (a.set)
              a.set(b);
            else
              for (; i2 < L; ++i2)
                a[i2] = b[i2];
            return a;
          }
          b.length = M;
          return b;
        }
        function zero_fill_array(n) {
          var o = new Array(n);
          for (var i2 = 0; i2 < n; ++i2)
            o[i2] = 0;
          return o;
        }
        function build_tree(clens, cmap, MAX) {
          var maxlen = 1, w = 0, i2 = 0, j = 0, ccode = 0, L = clens.length;
          var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
          for (i2 = 0; i2 < 32; ++i2)
            bl_count[i2] = 0;
          for (i2 = L; i2 < MAX; ++i2)
            clens[i2] = 0;
          L = clens.length;
          var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L);
          for (i2 = 0; i2 < L; ++i2) {
            bl_count[w = clens[i2]]++;
            if (maxlen < w)
              maxlen = w;
            ctree[i2] = 0;
          }
          bl_count[0] = 0;
          for (i2 = 1; i2 <= maxlen; ++i2)
            bl_count[i2 + 16] = ccode = ccode + bl_count[i2 - 1] << 1;
          for (i2 = 0; i2 < L; ++i2) {
            ccode = clens[i2];
            if (ccode != 0)
              ctree[i2] = bl_count[ccode + 16]++;
          }
          var cleni = 0;
          for (i2 = 0; i2 < L; ++i2) {
            cleni = clens[i2];
            if (cleni != 0) {
              ccode = bit_swap_n(ctree[i2], maxlen) >> maxlen - cleni;
              for (j = (1 << maxlen + 4 - cleni) - 1; j >= 0; --j)
                cmap[ccode | j << cleni] = cleni & 15 | i2 << 4;
            }
          }
          return maxlen;
        }
        var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
        var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
        if (!use_typed_arrays) {
          for (var i = 0; i < 512; ++i)
            fix_lmap[i] = 0;
          for (i = 0; i < 32; ++i)
            fix_dmap[i] = 0;
        }
        (function() {
          var dlens = [];
          var i2 = 0;
          for (; i2 < 32; i2++)
            dlens.push(5);
          build_tree(dlens, fix_dmap, 32);
          var clens = [];
          i2 = 0;
          for (; i2 <= 143; i2++)
            clens.push(8);
          for (; i2 <= 255; i2++)
            clens.push(9);
          for (; i2 <= 279; i2++)
            clens.push(7);
          for (; i2 <= 287; i2++)
            clens.push(8);
          build_tree(clens, fix_lmap, 288);
        })();
        var _deflateRaw = function _deflateRawIIFE() {
          var DST_LN_RE = use_typed_arrays ? new Uint8Array(32768) : [];
          var j = 0, k = 0;
          for (; j < DST_LN.length - 1; ++j) {
            for (; k < DST_LN[j + 1]; ++k)
              DST_LN_RE[k] = j;
          }
          for (; k < 32768; ++k)
            DST_LN_RE[k] = 29;
          var LEN_LN_RE = use_typed_arrays ? new Uint8Array(259) : [];
          for (j = 0, k = 0; j < LEN_LN.length - 1; ++j) {
            for (; k < LEN_LN[j + 1]; ++k)
              LEN_LN_RE[k] = j;
          }
          function write_stored(data, out) {
            var boff = 0;
            while (boff < data.length) {
              var L = Math.min(65535, data.length - boff);
              var h = boff + L == data.length;
              out.write_shift(1, +h);
              out.write_shift(2, L);
              out.write_shift(2, ~L & 65535);
              while (L-- > 0)
                out[out.l++] = data[boff++];
            }
            return out.l;
          }
          function write_huff_fixed(data, out) {
            var bl = 0;
            var boff = 0;
            var addrs = use_typed_arrays ? new Uint16Array(32768) : [];
            while (boff < data.length) {
              var L = Math.min(65535, data.length - boff);
              if (L < 10) {
                bl = write_bits_3(out, bl, +!!(boff + L == data.length));
                if (bl & 7)
                  bl += 8 - (bl & 7);
                out.l = bl / 8 | 0;
                out.write_shift(2, L);
                out.write_shift(2, ~L & 65535);
                while (L-- > 0)
                  out[out.l++] = data[boff++];
                bl = out.l * 8;
                continue;
              }
              bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2);
              var hash = 0;
              while (L-- > 0) {
                var d = data[boff];
                hash = (hash << 5 ^ d) & 32767;
                var match = -1, mlen = 0;
                if (match = addrs[hash]) {
                  match |= boff & ~32767;
                  if (match > boff)
                    match -= 32768;
                  if (match < boff)
                    while (data[match + mlen] == data[boff + mlen] && mlen < 250)
                      ++mlen;
                }
                if (mlen > 2) {
                  d = LEN_LN_RE[mlen];
                  if (d <= 22)
                    bl = write_bits_8(out, bl, bitswap8[d + 1] >> 1) - 1;
                  else {
                    write_bits_8(out, bl, 3);
                    bl += 5;
                    write_bits_8(out, bl, bitswap8[d - 23] >> 5);
                    bl += 3;
                  }
                  var len_eb = d < 8 ? 0 : d - 4 >> 2;
                  if (len_eb > 0) {
                    write_bits_16(out, bl, mlen - LEN_LN[d]);
                    bl += len_eb;
                  }
                  d = DST_LN_RE[boff - match];
                  bl = write_bits_8(out, bl, bitswap8[d] >> 3);
                  bl -= 3;
                  var dst_eb = d < 4 ? 0 : d - 2 >> 1;
                  if (dst_eb > 0) {
                    write_bits_16(out, bl, boff - match - DST_LN[d]);
                    bl += dst_eb;
                  }
                  for (var q2 = 0; q2 < mlen; ++q2) {
                    addrs[hash] = boff & 32767;
                    hash = (hash << 5 ^ data[boff]) & 32767;
                    ++boff;
                  }
                  L -= mlen - 1;
                } else {
                  if (d <= 143)
                    d = d + 48;
                  else
                    bl = write_bits_1(out, bl, 1);
                  bl = write_bits_8(out, bl, bitswap8[d]);
                  addrs[hash] = boff & 32767;
                  ++boff;
                }
              }
              bl = write_bits_8(out, bl, 0) - 1;
            }
            out.l = (bl + 7) / 8 | 0;
            return out.l;
          }
          return function _deflateRaw2(data, out) {
            if (data.length < 8)
              return write_stored(data, out);
            return write_huff_fixed(data, out);
          };
        }();
        function _deflate(data) {
          var buf = new_buf(50 + Math.floor(data.length * 1.1));
          var off = _deflateRaw(data, buf);
          return buf.slice(0, off);
        }
        var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
        var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
        var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);
        var dyn_len_1 = 1, dyn_len_2 = 1;
        function dyn(data, boff) {
          var _HLIT = read_bits_5(data, boff) + 257;
          boff += 5;
          var _HDIST = read_bits_5(data, boff) + 1;
          boff += 5;
          var _HCLEN = read_bits_4(data, boff) + 4;
          boff += 4;
          var w = 0;
          var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
          var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          var maxlen = 1;
          var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
          var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
          var L = clens.length;
          for (var i2 = 0; i2 < _HCLEN; ++i2) {
            clens[CLEN_ORDER[i2]] = w = read_bits_3(data, boff);
            if (maxlen < w)
              maxlen = w;
            bl_count[w]++;
            boff += 3;
          }
          var ccode = 0;
          bl_count[0] = 0;
          for (i2 = 1; i2 <= maxlen; ++i2)
            next_code[i2] = ccode = ccode + bl_count[i2 - 1] << 1;
          for (i2 = 0; i2 < L; ++i2)
            if ((ccode = clens[i2]) != 0)
              ctree[i2] = next_code[ccode]++;
          var cleni = 0;
          for (i2 = 0; i2 < L; ++i2) {
            cleni = clens[i2];
            if (cleni != 0) {
              ccode = bitswap8[ctree[i2]] >> 8 - cleni;
              for (var j = (1 << 7 - cleni) - 1; j >= 0; --j)
                dyn_cmap[ccode | j << cleni] = cleni & 7 | i2 << 3;
            }
          }
          var hcodes = [];
          maxlen = 1;
          for (; hcodes.length < _HLIT + _HDIST; ) {
            ccode = dyn_cmap[read_bits_7(data, boff)];
            boff += ccode & 7;
            switch (ccode >>>= 3) {
              case 16:
                w = 3 + read_bits_2(data, boff);
                boff += 2;
                ccode = hcodes[hcodes.length - 1];
                while (w-- > 0)
                  hcodes.push(ccode);
                break;
              case 17:
                w = 3 + read_bits_3(data, boff);
                boff += 3;
                while (w-- > 0)
                  hcodes.push(0);
                break;
              case 18:
                w = 11 + read_bits_7(data, boff);
                boff += 7;
                while (w-- > 0)
                  hcodes.push(0);
                break;
              default:
                hcodes.push(ccode);
                if (maxlen < ccode)
                  maxlen = ccode;
                break;
            }
          }
          var h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);
          for (i2 = _HLIT; i2 < 286; ++i2)
            h1[i2] = 0;
          for (i2 = _HDIST; i2 < 30; ++i2)
            h2[i2] = 0;
          dyn_len_1 = build_tree(h1, dyn_lmap, 286);
          dyn_len_2 = build_tree(h2, dyn_dmap, 30);
          return boff;
        }
        function inflate(data, usz) {
          if (data[0] == 3 && !(data[1] & 3)) {
            return [new_raw_buf(usz), 2];
          }
          var boff = 0;
          var header = 0;
          var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);
          var woff = 0;
          var OL = outbuf.length >>> 0;
          var max_len_1 = 0, max_len_2 = 0;
          while ((header & 1) == 0) {
            header = read_bits_3(data, boff);
            boff += 3;
            if (header >>> 1 == 0) {
              if (boff & 7)
                boff += 8 - (boff & 7);
              var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;
              boff += 32;
              if (sz > 0) {
                if (!usz && OL < woff + sz) {
                  outbuf = realloc(outbuf, woff + sz);
                  OL = outbuf.length;
                }
                while (sz-- > 0) {
                  outbuf[woff++] = data[boff >>> 3];
                  boff += 8;
                }
              }
              continue;
            } else if (header >> 1 == 1) {
              max_len_1 = 9;
              max_len_2 = 5;
            } else {
              boff = dyn(data, boff);
              max_len_1 = dyn_len_1;
              max_len_2 = dyn_len_2;
            }
            for (; ; ) {
              if (!usz && OL < woff + 32767) {
                outbuf = realloc(outbuf, woff + 32767);
                OL = outbuf.length;
              }
              var bits = read_bits_n(data, boff, max_len_1);
              var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];
              boff += code & 15;
              code >>>= 4;
              if ((code >>> 8 & 255) === 0)
                outbuf[woff++] = code;
              else if (code == 256)
                break;
              else {
                code -= 257;
                var len_eb = code < 8 ? 0 : code - 4 >> 2;
                if (len_eb > 5)
                  len_eb = 0;
                var tgt = woff + LEN_LN[code];
                if (len_eb > 0) {
                  tgt += read_bits_n(data, boff, len_eb);
                  boff += len_eb;
                }
                bits = read_bits_n(data, boff, max_len_2);
                code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];
                boff += code & 15;
                code >>>= 4;
                var dst_eb = code < 4 ? 0 : code - 2 >> 1;
                var dst = DST_LN[code];
                if (dst_eb > 0) {
                  dst += read_bits_n(data, boff, dst_eb);
                  boff += dst_eb;
                }
                if (!usz && OL < tgt) {
                  outbuf = realloc(outbuf, tgt + 100);
                  OL = outbuf.length;
                }
                while (woff < tgt) {
                  outbuf[woff] = outbuf[woff - dst];
                  ++woff;
                }
              }
            }
          }
          if (usz)
            return [outbuf, boff + 7 >>> 3];
          return [outbuf.slice(0, woff), boff + 7 >>> 3];
        }
        function _inflate(payload, usz) {
          var data = payload.slice(payload.l || 0);
          var out = inflate(data, usz);
          payload.l += out[1];
          return out[0];
        }
        function warn_or_throw(wrn, msg) {
          if (wrn) {
            if (typeof console !== "undefined")
              console.error(msg);
          } else
            throw new Error(msg);
        }
        function parse_zip2(file, options) {
          var blob = file;
          prep_blob(blob, 0);
          var FileIndex = [], FullPaths = [];
          var o = {
            FileIndex,
            FullPaths
          };
          init_cfb(o, { root: options.root });
          var i2 = blob.length - 4;
          while ((blob[i2] != 80 || blob[i2 + 1] != 75 || blob[i2 + 2] != 5 || blob[i2 + 3] != 6) && i2 >= 0)
            --i2;
          blob.l = i2 + 4;
          blob.l += 4;
          var fcnt = blob.read_shift(2);
          blob.l += 6;
          var start_cd = blob.read_shift(4);
          blob.l = start_cd;
          for (i2 = 0; i2 < fcnt; ++i2) {
            blob.l += 20;
            var csz = blob.read_shift(4);
            var usz = blob.read_shift(4);
            var namelen = blob.read_shift(2);
            var efsz = blob.read_shift(2);
            var fcsz = blob.read_shift(2);
            blob.l += 8;
            var offset = blob.read_shift(4);
            var EF = parse_extra_field(blob.slice(blob.l + namelen, blob.l + namelen + efsz));
            blob.l += namelen + efsz + fcsz;
            var L = blob.l;
            blob.l = offset + 4;
            parse_local_file(blob, csz, usz, o, EF);
            blob.l = L;
          }
          return o;
        }
        function parse_local_file(blob, csz, usz, o, EF) {
          blob.l += 2;
          var flags = blob.read_shift(2);
          var meth = blob.read_shift(2);
          var date = parse_dos_date(blob);
          if (flags & 8257)
            throw new Error("Unsupported ZIP encryption");
          var crc32 = blob.read_shift(4);
          var _csz = blob.read_shift(4);
          var _usz = blob.read_shift(4);
          var namelen = blob.read_shift(2);
          var efsz = blob.read_shift(2);
          var name = "";
          for (var i2 = 0; i2 < namelen; ++i2)
            name += String.fromCharCode(blob[blob.l++]);
          if (efsz) {
            var ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));
            if ((ef[21589] || {}).mt)
              date = ef[21589].mt;
            if (((EF || {})[21589] || {}).mt)
              date = EF[21589].mt;
          }
          blob.l += efsz;
          var data = blob.slice(blob.l, blob.l + _csz);
          switch (meth) {
            case 8:
              data = _inflateRawSync(blob, _usz);
              break;
            case 0:
              break;
            default:
              throw new Error("Unsupported ZIP Compression method " + meth);
          }
          var wrn = false;
          if (flags & 8) {
            crc32 = blob.read_shift(4);
            if (crc32 == 134695760) {
              crc32 = blob.read_shift(4);
              wrn = true;
            }
            _csz = blob.read_shift(4);
            _usz = blob.read_shift(4);
          }
          if (_csz != csz)
            warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
          if (_usz != usz)
            warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
          cfb_add(o, name, data, { unsafe: true, mt: date });
        }
        function write_zip2(cfb, options) {
          var _opts = options || {};
          var out = [], cdirs = [];
          var o = new_buf(1);
          var method = _opts.compression ? 8 : 0, flags = 0;
          var desc = false;
          if (desc)
            flags |= 8;
          var i2 = 0, j = 0;
          var start_cd = 0, fcnt = 0;
          var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
          var crcs = [];
          var sz_cd = 0;
          for (i2 = 1; i2 < cfb.FullPaths.length; ++i2) {
            fp = cfb.FullPaths[i2].slice(root.length);
            fi = cfb.FileIndex[i2];
            if (!fi.size || !fi.content || fp == "Sh33tJ5")
              continue;
            var start = start_cd;
            var namebuf = new_buf(fp.length);
            for (j = 0; j < fp.length; ++j)
              namebuf.write_shift(1, fp.charCodeAt(j) & 127);
            namebuf = namebuf.slice(0, namebuf.l);
            crcs[fcnt] = CRC32.buf(fi.content, 0);
            var outbuf = fi.content;
            if (method == 8)
              outbuf = _deflateRawSync(outbuf);
            o = new_buf(30);
            o.write_shift(4, 67324752);
            o.write_shift(2, 20);
            o.write_shift(2, flags);
            o.write_shift(2, method);
            if (fi.mt)
              write_dos_date(o, fi.mt);
            else
              o.write_shift(4, 0);
            o.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);
            o.write_shift(4, flags & 8 ? 0 : outbuf.length);
            o.write_shift(4, flags & 8 ? 0 : fi.content.length);
            o.write_shift(2, namebuf.length);
            o.write_shift(2, 0);
            start_cd += o.length;
            out.push(o);
            start_cd += namebuf.length;
            out.push(namebuf);
            start_cd += outbuf.length;
            out.push(outbuf);
            if (flags & 8) {
              o = new_buf(12);
              o.write_shift(-4, crcs[fcnt]);
              o.write_shift(4, outbuf.length);
              o.write_shift(4, fi.content.length);
              start_cd += o.l;
              out.push(o);
            }
            o = new_buf(46);
            o.write_shift(4, 33639248);
            o.write_shift(2, 0);
            o.write_shift(2, 20);
            o.write_shift(2, flags);
            o.write_shift(2, method);
            o.write_shift(4, 0);
            o.write_shift(-4, crcs[fcnt]);
            o.write_shift(4, outbuf.length);
            o.write_shift(4, fi.content.length);
            o.write_shift(2, namebuf.length);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(2, 0);
            o.write_shift(4, 0);
            o.write_shift(4, start);
            sz_cd += o.l;
            cdirs.push(o);
            sz_cd += namebuf.length;
            cdirs.push(namebuf);
            ++fcnt;
          }
          o = new_buf(22);
          o.write_shift(4, 101010256);
          o.write_shift(2, 0);
          o.write_shift(2, 0);
          o.write_shift(2, fcnt);
          o.write_shift(2, fcnt);
          o.write_shift(4, sz_cd);
          o.write_shift(4, start_cd);
          o.write_shift(2, 0);
          return bconcat([bconcat(out), bconcat(cdirs), o]);
        }
        var ContentTypeMap = {
          "htm": "text/html",
          "xml": "text/xml",
          "gif": "image/gif",
          "jpg": "image/jpeg",
          "png": "image/png",
          "mso": "application/x-mso",
          "thmx": "application/vnd.ms-officetheme",
          "sh33tj5": "application/octet-stream"
        };
        function get_content_type(fi, fp) {
          if (fi.ctype)
            return fi.ctype;
          var ext = fi.name || "", m = ext.match(/\.([^\.]+)$/);
          if (m && ContentTypeMap[m[1]])
            return ContentTypeMap[m[1]];
          if (fp) {
            m = (ext = fp).match(/[\.\\]([^\.\\])+$/);
            if (m && ContentTypeMap[m[1]])
              return ContentTypeMap[m[1]];
          }
          return "application/octet-stream";
        }
        function write_base64_76(bstr) {
          var data = Base64_encode(bstr);
          var o = [];
          for (var i2 = 0; i2 < data.length; i2 += 76)
            o.push(data.slice(i2, i2 + 76));
          return o.join("\r\n") + "\r\n";
        }
        function write_quoted_printable(text) {
          var encoded = text.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g, function(c) {
            var w = c.charCodeAt(0).toString(16).toUpperCase();
            return "=" + (w.length == 1 ? "0" + w : w);
          });
          encoded = encoded.replace(/ $/mg, "=20").replace(/\t$/mg, "=09");
          if (encoded.charAt(0) == "\n")
            encoded = "=0D" + encoded.slice(1);
          encoded = encoded.replace(/\r(?!\n)/mg, "=0D").replace(/\n\n/mg, "\n=0A").replace(/([^\r\n])\n/mg, "$1=0A");
          var o = [], split = encoded.split("\r\n");
          for (var si = 0; si < split.length; ++si) {
            var str = split[si];
            if (str.length == 0) {
              o.push("");
              continue;
            }
            for (var i2 = 0; i2 < str.length; ) {
              var end = 76;
              var tmp = str.slice(i2, i2 + end);
              if (tmp.charAt(end - 1) == "=")
                end--;
              else if (tmp.charAt(end - 2) == "=")
                end -= 2;
              else if (tmp.charAt(end - 3) == "=")
                end -= 3;
              tmp = str.slice(i2, i2 + end);
              i2 += end;
              if (i2 < str.length)
                tmp += "=";
              o.push(tmp);
            }
          }
          return o.join("\r\n");
        }
        function parse_quoted_printable(data) {
          var o = [];
          for (var di = 0; di < data.length; ++di) {
            var line = data[di];
            while (di <= data.length && line.charAt(line.length - 1) == "=")
              line = line.slice(0, line.length - 1) + data[++di];
            o.push(line);
          }
          for (var oi = 0; oi < o.length; ++oi)
            o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function($$) {
              return String.fromCharCode(parseInt($$.slice(1), 16));
            });
          return s2a(o.join("\r\n"));
        }
        function parse_mime(cfb, data, root) {
          var fname = "", cte = "", ctype = "", fdata;
          var di = 0;
          for (; di < 10; ++di) {
            var line = data[di];
            if (!line || line.match(/^\s*$/))
              break;
            var m = line.match(/^(.*?):\s*([^\s].*)$/);
            if (m)
              switch (m[1].toLowerCase()) {
                case "content-location":
                  fname = m[2].trim();
                  break;
                case "content-type":
                  ctype = m[2].trim();
                  break;
                case "content-transfer-encoding":
                  cte = m[2].trim();
                  break;
              }
          }
          ++di;
          switch (cte.toLowerCase()) {
            case "base64":
              fdata = s2a(Base64_decode(data.slice(di).join("")));
              break;
            case "quoted-printable":
              fdata = parse_quoted_printable(data.slice(di));
              break;
            default:
              throw new Error("Unsupported Content-Transfer-Encoding " + cte);
          }
          var file = cfb_add(cfb, fname.slice(root.length), fdata, { unsafe: true });
          if (ctype)
            file.ctype = ctype;
        }
        function parse_mad(file, options) {
          if (a2s2(file.slice(0, 13)).toLowerCase() != "mime-version:")
            throw new Error("Unsupported MAD header");
          var root = options && options.root || "";
          var data = (has_buf && Buffer.isBuffer(file) ? file.toString("binary") : a2s2(file)).split("\r\n");
          var di = 0, row = "";
          for (di = 0; di < data.length; ++di) {
            row = data[di];
            if (!/^Content-Location:/i.test(row))
              continue;
            row = row.slice(row.indexOf("file"));
            if (!root)
              root = row.slice(0, row.lastIndexOf("/") + 1);
            if (row.slice(0, root.length) == root)
              continue;
            while (root.length > 0) {
              root = root.slice(0, root.length - 1);
              root = root.slice(0, root.lastIndexOf("/") + 1);
              if (row.slice(0, root.length) == root)
                break;
            }
          }
          var mboundary = (data[1] || "").match(/boundary="(.*?)"/);
          if (!mboundary)
            throw new Error("MAD cannot find boundary");
          var boundary = "--" + (mboundary[1] || "");
          var FileIndex = [], FullPaths = [];
          var o = {
            FileIndex,
            FullPaths
          };
          init_cfb(o);
          var start_di, fcnt = 0;
          for (di = 0; di < data.length; ++di) {
            var line = data[di];
            if (line !== boundary && line !== boundary + "--")
              continue;
            if (fcnt++)
              parse_mime(o, data.slice(start_di, di), root);
            start_di = di;
          }
          return o;
        }
        function write_mad(cfb, options) {
          var opts = options || {};
          var boundary = opts.boundary || "SheetJS";
          boundary = "------=" + boundary;
          var out = [
            "MIME-Version: 1.0",
            'Content-Type: multipart/related; boundary="' + boundary.slice(2) + '"',
            "",
            "",
            ""
          ];
          var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
          for (var i2 = 1; i2 < cfb.FullPaths.length; ++i2) {
            fp = cfb.FullPaths[i2].slice(root.length);
            fi = cfb.FileIndex[i2];
            if (!fi.size || !fi.content || fp == "Sh33tJ5")
              continue;
            fp = fp.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function(c) {
              return "_x" + c.charCodeAt(0).toString(16) + "_";
            }).replace(/[\u0080-\uFFFF]/g, function(u) {
              return "_u" + u.charCodeAt(0).toString(16) + "_";
            });
            var ca = fi.content;
            var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString("binary") : a2s2(ca);
            var dispcnt = 0, L = Math.min(1024, cstr.length), cc = 0;
            for (var csl = 0; csl <= L; ++csl)
              if ((cc = cstr.charCodeAt(csl)) >= 32 && cc < 128)
                ++dispcnt;
            var qp = dispcnt >= L * 4 / 5;
            out.push(boundary);
            out.push("Content-Location: " + (opts.root || "file:///C:/SheetJS/") + fp);
            out.push("Content-Transfer-Encoding: " + (qp ? "quoted-printable" : "base64"));
            out.push("Content-Type: " + get_content_type(fi, fp));
            out.push("");
            out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
          }
          out.push(boundary + "--\r\n");
          return out.join("\r\n");
        }
        function cfb_new(opts) {
          var o = {};
          init_cfb(o, opts);
          return o;
        }
        function cfb_add(cfb, name, content, opts) {
          var unsafe = opts && opts.unsafe;
          if (!unsafe)
            init_cfb(cfb);
          var file = !unsafe && CFB.find(cfb, name);
          if (!file) {
            var fpath = cfb.FullPaths[0];
            if (name.slice(0, fpath.length) == fpath)
              fpath = name;
            else {
              if (fpath.slice(-1) != "/")
                fpath += "/";
              fpath = (fpath + name).replace("//", "/");
            }
            file = { name: filename(name), type: 2 };
            cfb.FileIndex.push(file);
            cfb.FullPaths.push(fpath);
            if (!unsafe)
              CFB.utils.cfb_gc(cfb);
          }
          file.content = content;
          file.size = content ? content.length : 0;
          if (opts) {
            if (opts.CLSID)
              file.clsid = opts.CLSID;
            if (opts.mt)
              file.mt = opts.mt;
            if (opts.ct)
              file.ct = opts.ct;
          }
          return file;
        }
        function cfb_del(cfb, name) {
          init_cfb(cfb);
          var file = CFB.find(cfb, name);
          if (file) {
            for (var j = 0; j < cfb.FileIndex.length; ++j)
              if (cfb.FileIndex[j] == file) {
                cfb.FileIndex.splice(j, 1);
                cfb.FullPaths.splice(j, 1);
                return true;
              }
          }
          return false;
        }
        function cfb_mov(cfb, old_name, new_name) {
          init_cfb(cfb);
          var file = CFB.find(cfb, old_name);
          if (file) {
            for (var j = 0; j < cfb.FileIndex.length; ++j)
              if (cfb.FileIndex[j] == file) {
                cfb.FileIndex[j].name = filename(new_name);
                cfb.FullPaths[j] = new_name;
                return true;
              }
          }
          return false;
        }
        function cfb_gc(cfb) {
          rebuild_cfb(cfb, true);
        }
        exports2.find = find;
        exports2.read = read;
        exports2.parse = parse;
        exports2.write = write;
        exports2.writeFile = write_file;
        exports2.utils = {
          cfb_new,
          cfb_add,
          cfb_del,
          cfb_mov,
          cfb_gc,
          ReadShift,
          CheckField,
          prep_blob,
          bconcat,
          use_zlib,
          _deflateRaw: _deflate,
          _inflateRaw: _inflate,
          consts
        };
        return exports2;
      }();
      var _fs;
      if (typeof require !== "undefined")
        try {
          _fs = require("fs");
        } catch (e) {
        }
      function blobify(data) {
        if (typeof data === "string")
          return s2ab(data);
        if (Array.isArray(data))
          return a2u(data);
        return data;
      }
      function write_dl(fname, payload, enc) {
        if (typeof _fs !== "undefined" && _fs.writeFileSync)
          return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);
        if (typeof Deno !== "undefined") {
          if (enc && typeof payload == "string")
            switch (enc) {
              case "utf8":
                payload = new TextEncoder(enc).encode(payload);
                break;
              case "binary":
                payload = s2ab(payload);
                break;
              default:
                throw new Error("Unsupported encoding " + enc);
            }
          return Deno.writeFileSync(fname, payload);
        }
        var data = enc == "utf8" ? utf8write(payload) : payload;
        if (typeof IE_SaveFile !== "undefined")
          return IE_SaveFile(data, fname);
        if (typeof Blob !== "undefined") {
          var blob = new Blob([blobify(data)], { type: "application/octet-stream" });
          if (typeof navigator !== "undefined" && navigator.msSaveBlob)
            return navigator.msSaveBlob(blob, fname);
          if (typeof saveAs !== "undefined")
            return saveAs(blob, fname);
          if (typeof URL !== "undefined" && typeof document !== "undefined" && document.createElement && URL.createObjectURL) {
            var url = URL.createObjectURL(blob);
            if (typeof chrome === "object" && typeof (chrome.downloads || {}).download == "function") {
              if (URL.revokeObjectURL && typeof setTimeout !== "undefined")
                setTimeout(function() {
                  URL.revokeObjectURL(url);
                }, 6e4);
              return chrome.downloads.download({ url, filename: fname, saveAs: true });
            }
            var a = document.createElement("a");
            if (a.download != null) {
              a.download = fname;
              a.href = url;
              document.body.appendChild(a);
              a.click();
              document.body.removeChild(a);
              if (URL.revokeObjectURL && typeof setTimeout !== "undefined")
                setTimeout(function() {
                  URL.revokeObjectURL(url);
                }, 6e4);
              return url;
            }
          }
        }
        if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined")
          try {
            var out = File(fname);
            out.open("w");
            out.encoding = "binary";
            if (Array.isArray(payload))
              payload = a2s(payload);
            out.write(payload);
            out.close();
            return payload;
          } catch (e) {
            if (!e.message || !e.message.match(/onstruct/))
              throw e;
          }
        throw new Error("cannot save file " + fname);
      }
      function read_binary(path) {
        if (typeof _fs !== "undefined")
          return _fs.readFileSync(path);
        if (typeof Deno !== "undefined")
          return Deno.readFileSync(path);
        if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined")
          try {
            var infile = File(path);
            infile.open("r");
            infile.encoding = "binary";
            var data = infile.read();
            infile.close();
            return data;
          } catch (e) {
            if (!e.message || !e.message.match(/onstruct/))
              throw e;
          }
        throw new Error("Cannot access file " + path);
      }
      function keys(o) {
        var ks = Object.keys(o), o2 = [];
        for (var i = 0; i < ks.length; ++i)
          if (Object.prototype.hasOwnProperty.call(o, ks[i]))
            o2.push(ks[i]);
        return o2;
      }
      function evert_key(obj, key) {
        var o = [], K = keys(obj);
        for (var i = 0; i !== K.length; ++i)
          if (o[obj[K[i]][key]] == null)
            o[obj[K[i]][key]] = K[i];
        return o;
      }
      function evert(obj) {
        var o = [], K = keys(obj);
        for (var i = 0; i !== K.length; ++i)
          o[obj[K[i]]] = K[i];
        return o;
      }
      function evert_num(obj) {
        var o = [], K = keys(obj);
        for (var i = 0; i !== K.length; ++i)
          o[obj[K[i]]] = parseInt(K[i], 10);
        return o;
      }
      function evert_arr(obj) {
        var o = [], K = keys(obj);
        for (var i = 0; i !== K.length; ++i) {
          if (o[obj[K[i]]] == null)
            o[obj[K[i]]] = [];
          o[obj[K[i]]].push(K[i]);
        }
        return o;
      }
      var basedate = new Date(1899, 11, 30, 0, 0, 0);
      function datenum(v, date1904) {
        var epoch = v.getTime();
        if (date1904)
          epoch -= 1462 * 24 * 60 * 60 * 1e3;
        var dnthresh2 = basedate.getTime() + (v.getTimezoneOffset() - basedate.getTimezoneOffset()) * 6e4;
        return (epoch - dnthresh2) / (24 * 60 * 60 * 1e3);
      }
      var refdate = new Date();
      var dnthresh = basedate.getTime() + (refdate.getTimezoneOffset() - basedate.getTimezoneOffset()) * 6e4;
      var refoffset = refdate.getTimezoneOffset();
      function numdate(v) {
        var out = new Date();
        out.setTime(v * 24 * 60 * 60 * 1e3 + dnthresh);
        if (out.getTimezoneOffset() !== refoffset) {
          out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 6e4);
        }
        return out;
      }
      function parse_isodur(s) {
        var sec = 0, mt = 0, time = false;
        var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
        if (!m)
          throw new Error("|" + s + "| is not an ISO8601 Duration");
        for (var i = 1; i != m.length; ++i) {
          if (!m[i])
            continue;
          mt = 1;
          if (i > 3)
            time = true;
          switch (m[i].slice(m[i].length - 1)) {
            case "Y":
              throw new Error("Unsupported ISO Duration Field: " + m[i].slice(m[i].length - 1));
            case "D":
              mt *= 24;
            case "H":
              mt *= 60;
            case "M":
              if (!time)
                throw new Error("Unsupported ISO Duration Field: M");
              else
                mt *= 60;
            case "S":
              break;
          }
          sec += mt * parseInt(m[i], 10);
        }
        return sec;
      }
      var good_pd_date_1 = new Date("2017-02-19T19:06:09.000Z");
      var good_pd_date = isNaN(good_pd_date_1.getFullYear()) ? new Date("2/19/17") : good_pd_date_1;
      var good_pd = good_pd_date.getFullYear() == 2017;
      function parseDate(str, fixdate) {
        var d = new Date(str);
        if (good_pd) {
          if (fixdate > 0)
            d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1e3);
          else if (fixdate < 0)
            d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1e3);
          return d;
        }
        if (str instanceof Date)
          return str;
        if (good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {
          var s = d.getFullYear();
          if (str.indexOf("" + s) > -1)
            return d;
          d.setFullYear(d.getFullYear() + 100);
          return d;
        }
        var n = str.match(/\d+/g) || ["2017", "2", "19", "0", "0", "0"];
        var out = new Date(+n[0], +n[1] - 1, +n[2], +n[3] || 0, +n[4] || 0, +n[5] || 0);
        if (str.indexOf("Z") > -1)
          out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1e3);
        return out;
      }
      function cc2str(arr, debomit) {
        if (has_buf && Buffer.isBuffer(arr)) {
          if (debomit) {
            if (arr[0] == 255 && arr[1] == 254)
              return utf8write(arr.slice(2).toString("utf16le"));
            if (arr[1] == 254 && arr[2] == 255)
              return utf8write(utf16beread(arr.slice(2).toString("binary")));
          }
          return arr.toString("binary");
        }
        if (typeof TextDecoder !== "undefined")
          try {
            if (debomit) {
              if (arr[0] == 255 && arr[1] == 254)
                return utf8write(new TextDecoder("utf-16le").decode(arr.slice(2)));
              if (arr[0] == 254 && arr[1] == 255)
                return utf8write(new TextDecoder("utf-16be").decode(arr.slice(2)));
            }
            var rev = {
              "\u20AC": "\x80",
              "\u201A": "\x82",
              "\u0192": "\x83",
              "\u201E": "\x84",
              "\u2026": "\x85",
              "\u2020": "\x86",
              "\u2021": "\x87",
              "\u02C6": "\x88",
              "\u2030": "\x89",
              "\u0160": "\x8A",
              "\u2039": "\x8B",
              "\u0152": "\x8C",
              "\u017D": "\x8E",
              "\u2018": "\x91",
              "\u2019": "\x92",
              "\u201C": "\x93",
              "\u201D": "\x94",
              "\u2022": "\x95",
              "\u2013": "\x96",
              "\u2014": "\x97",
              "\u02DC": "\x98",
              "\u2122": "\x99",
              "\u0161": "\x9A",
              "\u203A": "\x9B",
              "\u0153": "\x9C",
              "\u017E": "\x9E",
              "\u0178": "\x9F"
            };
            if (Array.isArray(arr))
              arr = new Uint8Array(arr);
            return new TextDecoder("latin1").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function(c) {
              return rev[c] || c;
            });
          } catch (e) {
          }
        var o = [];
        for (var i = 0; i != arr.length; ++i)
          o.push(String.fromCharCode(arr[i]));
        return o.join("");
      }
      function dup(o) {
        if (typeof JSON != "undefined" && !Array.isArray(o))
          return JSON.parse(JSON.stringify(o));
        if (typeof o != "object" || o == null)
          return o;
        if (o instanceof Date)
          return new Date(o.getTime());
        var out = {};
        for (var k in o)
          if (Object.prototype.hasOwnProperty.call(o, k))
            out[k] = dup(o[k]);
        return out;
      }
      function fill(c, l) {
        var o = "";
        while (o.length < l)
          o += c;
        return o;
      }
      function fuzzynum(s) {
        var v = Number(s);
        if (!isNaN(v))
          return isFinite(v) ? v : NaN;
        if (!/\d/.test(s))
          return v;
        var wt = 1;
        var ss = s.replace(/([\d]),([\d])/g, "$1$2").replace(/[$]/g, "").replace(/[%]/g, function() {
          wt *= 100;
          return "";
        });
        if (!isNaN(v = Number(ss)))
          return v / wt;
        ss = ss.replace(/[(](.*)[)]/, function($$, $1) {
          wt = -wt;
          return $1;
        });
        if (!isNaN(v = Number(ss)))
          return v / wt;
        return v;
      }
      var lower_months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
      function fuzzydate(s) {
        var o = new Date(s), n = new Date(NaN);
        var y = o.getYear(), m = o.getMonth(), d = o.getDate();
        if (isNaN(d))
          return n;
        var lower = s.toLowerCase();
        if (lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
          lower = lower.replace(/[^a-z]/g, "").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/, "");
          if (lower.length > 3 && lower_months.indexOf(lower) == -1)
            return n;
        } else if (lower.match(/[a-z]/))
          return n;
        if (y < 0 || y > 8099)
          return n;
        if ((m > 0 || d > 1) && y != 101)
          return o;
        if (s.match(/[^-0-9:,\/\\]/))
          return n;
        return o;
      }
      var split_regex = function() {
        var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
        return function split_regex2(str, re, def) {
          if (safe_split_regex || typeof re == "string")
            return str.split(re);
          var p = str.split(re), o = [p[0]];
          for (var i = 1; i < p.length; ++i) {
            o.push(def);
            o.push(p[i]);
          }
          return o;
        };
      }();
      function getdatastr(data) {
        if (!data)
          return null;
        if (data.content && data.type)
          return cc2str(data.content, true);
        if (data.data)
          return debom(data.data);
        if (data.asNodeBuffer && has_buf)
          return debom(data.asNodeBuffer().toString("binary"));
        if (data.asBinary)
          return debom(data.asBinary());
        if (data._data && data._data.getContent)
          return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));
        return null;
      }
      function getdatabin(data) {
        if (!data)
          return null;
        if (data.data)
          return char_codes(data.data);
        if (data.asNodeBuffer && has_buf)
          return data.asNodeBuffer();
        if (data._data && data._data.getContent) {
          var o = data._data.getContent();
          if (typeof o == "string")
            return char_codes(o);
          return Array.prototype.slice.call(o);
        }
        if (data.content && data.type)
          return data.content;
        return null;
      }
      function getdata(data) {
        return data && data.name.slice(-4) === ".bin" ? getdatabin(data) : getdatastr(data);
      }
      function safegetzipfile(zip, file) {
        var k = zip.FullPaths || keys(zip.files);
        var f = file.toLowerCase().replace(/[\/]/g, "\\"), g = f.replace(/\\/g, "/");
        for (var i = 0; i < k.length; ++i) {
          var n = k[i].replace(/^Root Entry[\/]/, "").toLowerCase();
          if (f == n || g == n)
            return zip.files ? zip.files[k[i]] : zip.FileIndex[i];
        }
        return null;
      }
      function getzipfile(zip, file) {
        var o = safegetzipfile(zip, file);
        if (o == null)
          throw new Error("Cannot find file " + file + " in zip");
        return o;
      }
      function getzipdata(zip, file, safe) {
        if (!safe)
          return getdata(getzipfile(zip, file));
        if (!file)
          return null;
        try {
          return getzipdata(zip, file);
        } catch (e) {
          return null;
        }
      }
      function getzipstr(zip, file, safe) {
        if (!safe)
          return getdatastr(getzipfile(zip, file));
        if (!file)
          return null;
        try {
          return getzipstr(zip, file);
        } catch (e) {
          return null;
        }
      }
      function getzipbin(zip, file, safe) {
        if (!safe)
          return getdatabin(getzipfile(zip, file));
        if (!file)
          return null;
        try {
          return getzipbin(zip, file);
        } catch (e) {
          return null;
        }
      }
      function zipentries(zip) {
        var k = zip.FullPaths || keys(zip.files), o = [];
        for (var i = 0; i < k.length; ++i)
          if (k[i].slice(-1) != "/")
            o.push(k[i].replace(/^Root Entry[\/]/, ""));
        return o.sort();
      }
      function zip_add_file(zip, path, content) {
        if (zip.FullPaths) {
          if (typeof content == "string") {
            var res;
            if (has_buf)
              res = Buffer_from(content);
            else
              res = utf8decode(content);
            return CFB.utils.cfb_add(zip, path, res);
          }
          CFB.utils.cfb_add(zip, path, content);
        } else
          zip.file(path, content);
      }
      function zip_new() {
        return CFB.utils.cfb_new();
      }
      function zip_read(d, o) {
        switch (o.type) {
          case "base64":
            return CFB.read(d, { type: "base64" });
          case "binary":
            return CFB.read(d, { type: "binary" });
          case "buffer":
          case "array":
            return CFB.read(d, { type: "buffer" });
        }
        throw new Error("Unrecognized type " + o.type);
      }
      function resolve_path(path, base) {
        if (path.charAt(0) == "/")
          return path.slice(1);
        var result = base.split("/");
        if (base.slice(-1) != "/")
          result.pop();
        var target = path.split("/");
        while (target.length !== 0) {
          var step = target.shift();
          if (step === "..")
            result.pop();
          else if (step !== ".")
            result.push(step);
        }
        return result.join("/");
      }
      var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
      var attregexg = /([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
      var tagregex1 = /<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg, tagregex2 = /<[^>]*>/g;
      var tagregex = XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
      var nsregex = /<\w*:/, nsregex2 = /<(\/?)\w+:/;
      function parsexmltag(tag, skip_root, skip_LC) {
        var z = {};
        var eq = 0, c = 0;
        for (; eq !== tag.length; ++eq)
          if ((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13)
            break;
        if (!skip_root)
          z[0] = tag.slice(0, eq);
        if (eq === tag.length)
          return z;
        var m = tag.match(attregexg), j = 0, v = "", i = 0, q = "", cc = "", quot = 1;
        if (m)
          for (i = 0; i != m.length; ++i) {
            cc = m[i];
            for (c = 0; c != cc.length; ++c)
              if (cc.charCodeAt(c) === 61)
                break;
            q = cc.slice(0, c).trim();
            while (cc.charCodeAt(c + 1) == 32)
              ++c;
            quot = (eq = cc.charCodeAt(c + 1)) == 34 || eq == 39 ? 1 : 0;
            v = cc.slice(c + 1 + quot, cc.length - quot);
            for (j = 0; j != q.length; ++j)
              if (q.charCodeAt(j) === 58)
                break;
            if (j === q.length) {
              if (q.indexOf("_") > 0)
                q = q.slice(0, q.indexOf("_"));
              z[q] = v;
              if (!skip_LC)
                z[q.toLowerCase()] = v;
            } else {
              var k = (j === 5 && q.slice(0, 5) === "xmlns" ? "xmlns" : "") + q.slice(j + 1);
              if (z[k] && q.slice(j - 3, j) == "ext")
                continue;
              z[k] = v;
              if (!skip_LC)
                z[k.toLowerCase()] = v;
            }
          }
        return z;
      }
      function strip_ns(x) {
        return x.replace(nsregex2, "<$1");
      }
      var encodings = {
        "&quot;": '"',
        "&apos;": "'",
        "&gt;": ">",
        "&lt;": "<",
        "&amp;": "&"
      };
      var rencoding = evert(encodings);
      var unescapexml = function() {
        var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
        return function unescapexml2(text) {
          var s = text + "", i = s.indexOf("<![CDATA[");
          if (i == -1)
            return s.replace(encregex, function($$, $1) {
              return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf("x") > -1 ? 16 : 10)) || $$;
            }).replace(coderegex, function(m, c) {
              return String.fromCharCode(parseInt(c, 16));
            });
          var j = s.indexOf("]]>");
          return unescapexml2(s.slice(0, i)) + s.slice(i + 9, j) + unescapexml2(s.slice(j + 3));
        };
      }();
      var decregex = /[&<>'"]/g, charegex = /[\u0000-\u0008\u000b-\u001f]/g;
      function escapexml(text) {
        var s = text + "";
        return s.replace(decregex, function(y) {
          return rencoding[y];
        }).replace(charegex, function(s2) {
          return "_x" + ("000" + s2.charCodeAt(0).toString(16)).slice(-4) + "_";
        });
      }
      function escapexmltag(text) {
        return escapexml(text).replace(/ /g, "_x0020_");
      }
      var htmlcharegex = /[\u0000-\u001f]/g;
      function escapehtml(text) {
        var s = text + "";
        return s.replace(decregex, function(y) {
          return rencoding[y];
        }).replace(/\n/g, "<br/>").replace(htmlcharegex, function(s2) {
          return "&#x" + ("000" + s2.charCodeAt(0).toString(16)).slice(-4) + ";";
        });
      }
      function escapexlml(text) {
        var s = text + "";
        return s.replace(decregex, function(y) {
          return rencoding[y];
        }).replace(htmlcharegex, function(s2) {
          return "&#x" + s2.charCodeAt(0).toString(16).toUpperCase() + ";";
        });
      }
      var xlml_fixstr = function() {
        var entregex = /&#(\d+);/g;
        function entrepl($$, $1) {
          return String.fromCharCode(parseInt($1, 10));
        }
        return function xlml_fixstr2(str) {
          return str.replace(entregex, entrepl);
        };
      }();
      function xlml_unfixstr(str) {
        return str.replace(/(\r\n|[\r\n])/g, "&#10;");
      }
      function parsexmlbool(value) {
        switch (value) {
          case 1:
          case true:
          case "1":
          case "true":
          case "TRUE":
            return true;
          default:
            return false;
        }
      }
      function utf8reada(orig) {
        var out = "", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;
        while (i < orig.length) {
          c = orig.charCodeAt(i++);
          if (c < 128) {
            out += String.fromCharCode(c);
            continue;
          }
          d = orig.charCodeAt(i++);
          if (c > 191 && c < 224) {
            f = (c & 31) << 6;
            f |= d & 63;
            out += String.fromCharCode(f);
            continue;
          }
          e = orig.charCodeAt(i++);
          if (c < 240) {
            out += String.fromCharCode((c & 15) << 12 | (d & 63) << 6 | e & 63);
            continue;
          }
          f = orig.charCodeAt(i++);
          w = ((c & 7) << 18 | (d & 63) << 12 | (e & 63) << 6 | f & 63) - 65536;
          out += String.fromCharCode(55296 + (w >>> 10 & 1023));
          out += String.fromCharCode(56320 + (w & 1023));
        }
        return out;
      }
      function utf8readb(data) {
        var out = new_raw_buf(2 * data.length), w, i, j = 1, k = 0, ww = 0, c;
        for (i = 0; i < data.length; i += j) {
          j = 1;
          if ((c = data.charCodeAt(i)) < 128)
            w = c;
          else if (c < 224) {
            w = (c & 31) * 64 + (data.charCodeAt(i + 1) & 63);
            j = 2;
          } else if (c < 240) {
            w = (c & 15) * 4096 + (data.charCodeAt(i + 1) & 63) * 64 + (data.charCodeAt(i + 2) & 63);
            j = 3;
          } else {
            j = 4;
            w = (c & 7) * 262144 + (data.charCodeAt(i + 1) & 63) * 4096 + (data.charCodeAt(i + 2) & 63) * 64 + (data.charCodeAt(i + 3) & 63);
            w -= 65536;
            ww = 55296 + (w >>> 10 & 1023);
            w = 56320 + (w & 1023);
          }
          if (ww !== 0) {
            out[k++] = ww & 255;
            out[k++] = ww >>> 8;
            ww = 0;
          }
          out[k++] = w % 256;
          out[k++] = w >>> 8;
        }
        return out.slice(0, k).toString("ucs2");
      }
      function utf8readc(data) {
        return Buffer_from(data, "binary").toString("utf8");
      }
      var utf8corpus = "foo bar baz\xE2\x98\x83\xF0\x9F\x8D\xA3";
      var utf8read = has_buf && (utf8readc(utf8corpus) == utf8reada(utf8corpus) && utf8readc || utf8readb(utf8corpus) == utf8reada(utf8corpus) && utf8readb) || utf8reada;
      var utf8write = has_buf ? function(data) {
        return Buffer_from(data, "utf8").toString("binary");
      } : function(orig) {
        var out = [], i = 0, c = 0, d = 0;
        while (i < orig.length) {
          c = orig.charCodeAt(i++);
          switch (true) {
            case c < 128:
              out.push(String.fromCharCode(c));
              break;
            case c < 2048:
              out.push(String.fromCharCode(192 + (c >> 6)));
              out.push(String.fromCharCode(128 + (c & 63)));
              break;
            case (c >= 55296 && c < 57344):
              c -= 55296;
              d = orig.charCodeAt(i++) - 56320 + (c << 10);
              out.push(String.fromCharCode(240 + (d >> 18 & 7)));
              out.push(String.fromCharCode(144 + (d >> 12 & 63)));
              out.push(String.fromCharCode(128 + (d >> 6 & 63)));
              out.push(String.fromCharCode(128 + (d & 63)));
              break;
            default:
              out.push(String.fromCharCode(224 + (c >> 12)));
              out.push(String.fromCharCode(128 + (c >> 6 & 63)));
              out.push(String.fromCharCode(128 + (c & 63)));
          }
        }
        return out.join("");
      };
      var matchtag = function() {
        var mtcache = {};
        return function matchtag2(f, g) {
          var t = f + "|" + (g || "");
          if (mtcache[t])
            return mtcache[t];
          return mtcache[t] = new RegExp("<(?:\\w+:)?" + f + '(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?' + f + ">", g || "");
        };
      }();
      var htmldecode = function() {
        var entities = [
          ["nbsp", " "],
          ["middot", "\xB7"],
          ["quot", '"'],
          ["apos", "'"],
          ["gt", ">"],
          ["lt", "<"],
          ["amp", "&"]
        ].map(function(x) {
          return [new RegExp("&" + x[0] + ";", "ig"), x[1]];
        });
        return function htmldecode2(str) {
          var o = str.replace(/^[\t\n\r ]+/, "").replace(/[\t\n\r ]+$/, "").replace(/>\s+/g, ">").replace(/\s+</g, "<").replace(/[\t\n\r ]+/g, " ").replace(/<\s*[bB][rR]\s*\/?>/g, "\n").replace(/<[^>]*>/g, "");
          for (var i = 0; i < entities.length; ++i)
            o = o.replace(entities[i][0], entities[i][1]);
          return o;
        };
      }();
      var vtregex = function() {
        var vt_cache = {};
        return function vt_regex(bt) {
          if (vt_cache[bt] !== void 0)
            return vt_cache[bt];
          return vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", "g");
        };
      }();
      var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
      function parseVector(data, opts) {
        var h = parsexmltag(data);
        var matches = data.match(vtregex(h.baseType)) || [];
        var res = [];
        if (matches.length != h.size) {
          if (opts.WTF)
            throw new Error("unexpected vector length " + matches.length + " != " + h.size);
          return res;
        }
        matches.forEach(function(x) {
          var v = x.replace(vtvregex, "").match(vtmregex);
          if (v)
            res.push({ v: utf8read(v[2]), t: v[1] });
        });
        return res;
      }
      var wtregex = /(^\s|\s$|\n)/;
      function writetag(f, g) {
        return "<" + f + (g.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g + "</" + f + ">";
      }
      function wxt_helper(h) {
        return keys(h).map(function(k) {
          return " " + k + '="' + h[k] + '"';
        }).join("");
      }
      function writextag(f, g, h) {
        return "<" + f + (h != null ? wxt_helper(h) : "") + (g != null ? (g.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g + "</" + f : "/") + ">";
      }
      function write_w3cdtf(d, t) {
        try {
          return d.toISOString().replace(/\.\d*/, "");
        } catch (e) {
          if (t)
            throw e;
        }
        return "";
      }
      function write_vt(s, xlsx) {
        switch (typeof s) {
          case "string":
            var o = writextag("vt:lpwstr", escapexml(s));
            if (xlsx)
              o = o.replace(/&quot;/g, "_x0022_");
            return o;
          case "number":
            return writextag((s | 0) == s ? "vt:i4" : "vt:r8", escapexml(String(s)));
          case "boolean":
            return writextag("vt:bool", s ? "true" : "false");
        }
        if (s instanceof Date)
          return writextag("vt:filetime", write_w3cdtf(s));
        throw new Error("Unable to serialize " + s);
      }
      function xlml_normalize(d) {
        if (has_buf && Buffer.isBuffer(d))
          return d.toString("utf8");
        if (typeof d === "string")
          return d;
        if (typeof Uint8Array !== "undefined" && d instanceof Uint8Array)
          return utf8read(a2s(ab2a(d)));
        throw new Error("Bad input format: expected Buffer or string");
      }
      var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg;
      var XMLNS = {
        CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/metadata/core-properties",
        CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",
        EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",
        CT: "http://schemas.openxmlformats.org/package/2006/content-types",
        RELS: "http://schemas.openxmlformats.org/package/2006/relationships",
        TCMNT: "http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments",
        "dc": "http://purl.org/dc/elements/1.1/",
        "dcterms": "http://purl.org/dc/terms/",
        "dcmitype": "http://purl.org/dc/dcmitype/",
        "mx": "http://schemas.microsoft.com/office/mac/excel/2008/main",
        "r": "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
        "sjs": "http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties",
        "vt": "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",
        "xsi": "http://www.w3.org/2001/XMLSchema-instance",
        "xsd": "http://www.w3.org/2001/XMLSchema"
      };
      var XMLNS_main = [
        "http://schemas.openxmlformats.org/spreadsheetml/2006/main",
        "http://purl.oclc.org/ooxml/spreadsheetml/main",
        "http://schemas.microsoft.com/office/excel/2006/main",
        "http://schemas.microsoft.com/office/excel/2006/2"
      ];
      var XLMLNS = {
        "o": "urn:schemas-microsoft-com:office:office",
        "x": "urn:schemas-microsoft-com:office:excel",
        "ss": "urn:schemas-microsoft-com:office:spreadsheet",
        "dt": "uuid:C2F41010-65B3-11d1-A29F-00AA00C14882",
        "mv": "http://macVmlSchemaUri",
        "v": "urn:schemas-microsoft-com:vml",
        "html": "http://www.w3.org/TR/REC-html40"
      };
      function read_double_le(b, idx) {
        var s = 1 - 2 * (b[idx + 7] >>> 7);
        var e = ((b[idx + 7] & 127) << 4) + (b[idx + 6] >>> 4 & 15);
        var m = b[idx + 6] & 15;
        for (var i = 5; i >= 0; --i)
          m = m * 256 + b[idx + i];
        if (e == 2047)
          return m == 0 ? s * Infinity : NaN;
        if (e == 0)
          e = -1022;
        else {
          e -= 1023;
          m += Math.pow(2, 52);
        }
        return s * Math.pow(2, e - 52) * m;
      }
      function write_double_le(b, v, idx) {
        var bs = (v < 0 || 1 / v == -Infinity ? 1 : 0) << 7, e = 0, m = 0;
        var av = bs ? -v : v;
        if (!isFinite(av)) {
          e = 2047;
          m = isNaN(v) ? 26985 : 0;
        } else if (av == 0)
          e = m = 0;
        else {
          e = Math.floor(Math.log(av) / Math.LN2);
          m = av * Math.pow(2, 52 - e);
          if (e <= -1023 && (!isFinite(m) || m < Math.pow(2, 52))) {
            e = -1022;
          } else {
            m -= Math.pow(2, 52);
            e += 1023;
          }
        }
        for (var i = 0; i <= 5; ++i, m /= 256)
          b[idx + i] = m & 255;
        b[idx + 6] = (e & 15) << 4 | m & 15;
        b[idx + 7] = e >> 4 | bs;
      }
      var ___toBuffer = function(bufs) {
        var x = [], w = 10240;
        for (var i = 0; i < bufs[0].length; ++i)
          if (bufs[0][i])
            for (var j = 0, L = bufs[0][i].length; j < L; j += w)
              x.push.apply(x, bufs[0][i].slice(j, j + w));
        return x;
      };
      var __toBuffer = has_buf ? function(bufs) {
        return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0].map(function(x) {
          return Buffer.isBuffer(x) ? x : Buffer_from(x);
        })) : ___toBuffer(bufs);
      } : ___toBuffer;
      var ___utf16le = function(b, s, e) {
        var ss = [];
        for (var i = s; i < e; i += 2)
          ss.push(String.fromCharCode(__readUInt16LE(b, i)));
        return ss.join("").replace(chr0, "");
      };
      var __utf16le = has_buf ? function(b, s, e) {
        if (!Buffer.isBuffer(b))
          return ___utf16le(b, s, e);
        return b.toString("utf16le", s, e).replace(chr0, "");
      } : ___utf16le;
      var ___hexlify = function(b, s, l) {
        var ss = [];
        for (var i = s; i < s + l; ++i)
          ss.push(("0" + b[i].toString(16)).slice(-2));
        return ss.join("");
      };
      var __hexlify = has_buf ? function(b, s, l) {
        return Buffer.isBuffer(b) ? b.toString("hex", s, s + l) : ___hexlify(b, s, l);
      } : ___hexlify;
      var ___utf8 = function(b, s, e) {
        var ss = [];
        for (var i = s; i < e; i++)
          ss.push(String.fromCharCode(__readUInt8(b, i)));
        return ss.join("");
      };
      var __utf8 = has_buf ? function utf8_b(b, s, e) {
        return Buffer.isBuffer(b) ? b.toString("utf8", s, e) : ___utf8(b, s, e);
      } : ___utf8;
      var ___lpstr = function(b, i) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
      };
      var __lpstr = ___lpstr;
      var ___cpstr = function(b, i) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
      };
      var __cpstr = ___cpstr;
      var ___lpwstr = function(b, i) {
        var len = 2 * __readUInt32LE(b, i);
        return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "";
      };
      var __lpwstr = ___lpwstr;
      var ___lpp4 = function lpp4_(b, i) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? __utf16le(b, i + 4, i + 4 + len) : "";
      };
      var __lpp4 = ___lpp4;
      var ___8lpp4 = function(b, i) {
        var len = __readUInt32LE(b, i);
        return len > 0 ? __utf8(b, i + 4, i + 4 + len) : "";
      };
      var __8lpp4 = ___8lpp4;
      var ___double = function(b, idx) {
        return read_double_le(b, idx);
      };
      var __double = ___double;
      var is_buf = function is_buf_a(a) {
        return Array.isArray(a) || typeof Uint8Array !== "undefined" && a instanceof Uint8Array;
      };
      if (has_buf) {
        __lpstr = function lpstr_b(b, i) {
          if (!Buffer.isBuffer(b))
            return ___lpstr(b, i);
          var len = b.readUInt32LE(i);
          return len > 0 ? b.toString("utf8", i + 4, i + 4 + len - 1) : "";
        };
        __cpstr = function cpstr_b(b, i) {
          if (!Buffer.isBuffer(b))
            return ___cpstr(b, i);
          var len = b.readUInt32LE(i);
          return len > 0 ? b.toString("utf8", i + 4, i + 4 + len - 1) : "";
        };
        __lpwstr = function lpwstr_b(b, i) {
          if (!Buffer.isBuffer(b))
            return ___lpwstr(b, i);
          var len = 2 * b.readUInt32LE(i);
          return b.toString("utf16le", i + 4, i + 4 + len - 1);
        };
        __lpp4 = function lpp4_b(b, i) {
          if (!Buffer.isBuffer(b))
            return ___lpp4(b, i);
          var len = b.readUInt32LE(i);
          return b.toString("utf16le", i + 4, i + 4 + len);
        };
        __8lpp4 = function lpp4_8b(b, i) {
          if (!Buffer.isBuffer(b))
            return ___8lpp4(b, i);
          var len = b.readUInt32LE(i);
          return b.toString("utf8", i + 4, i + 4 + len);
        };
        __double = function double_(b, i) {
          if (Buffer.isBuffer(b))
            return b.readDoubleLE(i);
          return ___double(b, i);
        };
        is_buf = function is_buf_b(a) {
          return Buffer.isBuffer(a) || Array.isArray(a) || typeof Uint8Array !== "undefined" && a instanceof Uint8Array;
        };
      }
      function cpdoit() {
        __utf16le = function(b, s, e) {
          return $cptable.utils.decode(1200, b.slice(s, e)).replace(chr0, "");
        };
        __utf8 = function(b, s, e) {
          return $cptable.utils.decode(65001, b.slice(s, e));
        };
        __lpstr = function(b, i) {
          var len = __readUInt32LE(b, i);
          return len > 0 ? $cptable.utils.decode(current_ansi, b.slice(i + 4, i + 4 + len - 1)) : "";
        };
        __cpstr = function(b, i) {
          var len = __readUInt32LE(b, i);
          return len > 0 ? $cptable.utils.decode(current_codepage, b.slice(i + 4, i + 4 + len - 1)) : "";
        };
        __lpwstr = function(b, i) {
          var len = 2 * __readUInt32LE(b, i);
          return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len - 1)) : "";
        };
        __lpp4 = function(b, i) {
          var len = __readUInt32LE(b, i);
          return len > 0 ? $cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len)) : "";
        };
        __8lpp4 = function(b, i) {
          var len = __readUInt32LE(b, i);
          return len > 0 ? $cptable.utils.decode(65001, b.slice(i + 4, i + 4 + len)) : "";
        };
      }
      if (typeof $cptable !== "undefined")
        cpdoit();
      var __readUInt8 = function(b, idx) {
        return b[idx];
      };
      var __readUInt16LE = function(b, idx) {
        return b[idx + 1] * (1 << 8) + b[idx];
      };
      var __readInt16LE = function(b, idx) {
        var u = b[idx + 1] * (1 << 8) + b[idx];
        return u < 32768 ? u : (65535 - u + 1) * -1;
      };
      var __readUInt32LE = function(b, idx) {
        return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];
      };
      var __readInt32LE = function(b, idx) {
        return b[idx + 3] << 24 | b[idx + 2] << 16 | b[idx + 1] << 8 | b[idx];
      };
      var __readInt32BE = function(b, idx) {
        return b[idx] << 24 | b[idx + 1] << 16 | b[idx + 2] << 8 | b[idx + 3];
      };
      function ReadShift(size, t) {
        var o = "", oI, oR, oo = [], w, vv, i, loc;
        switch (t) {
          case "dbcs":
            loc = this.l;
            if (has_buf && Buffer.isBuffer(this))
              o = this.slice(this.l, this.l + 2 * size).toString("utf16le");
            else
              for (i = 0; i < size; ++i) {
                o += String.fromCharCode(__readUInt16LE(this, loc));
                loc += 2;
              }
            size *= 2;
            break;
          case "utf8":
            o = __utf8(this, this.l, this.l + size);
            break;
          case "utf16le":
            size *= 2;
            o = __utf16le(this, this.l, this.l + size);
            break;
          case "wstr":
            if (typeof $cptable !== "undefined")
              o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size));
            else
              return ReadShift.call(this, size, "dbcs");
            size = 2 * size;
            break;
          case "lpstr-ansi":
            o = __lpstr(this, this.l);
            size = 4 + __readUInt32LE(this, this.l);
            break;
          case "lpstr-cp":
            o = __cpstr(this, this.l);
            size = 4 + __readUInt32LE(this, this.l);
            break;
          case "lpwstr":
            o = __lpwstr(this, this.l);
            size = 4 + 2 * __readUInt32LE(this, this.l);
            break;
          case "lpp4":
            size = 4 + __readUInt32LE(this, this.l);
            o = __lpp4(this, this.l);
            if (size & 2)
              size += 2;
            break;
          case "8lpp4":
            size = 4 + __readUInt32LE(this, this.l);
            o = __8lpp4(this, this.l);
            if (size & 3)
              size += 4 - (size & 3);
            break;
          case "cstr":
            size = 0;
            o = "";
            while ((w = __readUInt8(this, this.l + size++)) !== 0)
              oo.push(_getchar(w));
            o = oo.join("");
            break;
          case "_wstr":
            size = 0;
            o = "";
            while ((w = __readUInt16LE(this, this.l + size)) !== 0) {
              oo.push(_getchar(w));
              size += 2;
            }
            size += 2;
            o = oo.join("");
            break;
          case "dbcs-cont":
            o = "";
            loc = this.l;
            for (i = 0; i < size; ++i) {
              if (this.lens && this.lens.indexOf(loc) !== -1) {
                w = __readUInt8(this, loc);
                this.l = loc + 1;
                vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont");
                return oo.join("") + vv;
              }
              oo.push(_getchar(__readUInt16LE(this, loc)));
              loc += 2;
            }
            o = oo.join("");
            size *= 2;
            break;
          case "cpstr":
            if (typeof $cptable !== "undefined") {
              o = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));
              break;
            }
          case "sbcs-cont":
            o = "";
            loc = this.l;
            for (i = 0; i != size; ++i) {
              if (this.lens && this.lens.indexOf(loc) !== -1) {
                w = __readUInt8(this, loc);
                this.l = loc + 1;
                vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont");
                return oo.join("") + vv;
              }
              oo.push(_getchar(__readUInt8(this, loc)));
              loc += 1;
            }
            o = oo.join("");
            break;
          default:
            switch (size) {
              case 1:
                oI = __readUInt8(this, this.l);
                this.l++;
                return oI;
              case 2:
                oI = (t === "i" ? __readInt16LE : __readUInt16LE)(this, this.l);
                this.l += 2;
                return oI;
              case 4:
              case -4:
                if (t === "i" || (this[this.l + 3] & 128) === 0) {
                  oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);
                  this.l += 4;
                  return oI;
                } else {
                  oR = __readUInt32LE(this, this.l);
                  this.l += 4;
                }
                return oR;
              case 8:
              case -8:
                if (t === "f") {
                  if (size == 8)
                    oR = __double(this, this.l);
                  else
                    oR = __double([this[this.l + 7], this[this.l + 6], this[this.l + 5], this[this.l + 4], this[this.l + 3], this[this.l + 2], this[this.l + 1], this[this.l + 0]], 0);
                  this.l += 8;
                  return oR;
                } else
                  size = 8;
              case 16:
                o = __hexlify(this, this.l, size);
                break;
            }
        }
        this.l += size;
        return o;
      }
      var __writeUInt32LE = function(b, val, idx) {
        b[idx] = val & 255;
        b[idx + 1] = val >>> 8 & 255;
        b[idx + 2] = val >>> 16 & 255;
        b[idx + 3] = val >>> 24 & 255;
      };
      var __writeInt32LE = function(b, val, idx) {
        b[idx] = val & 255;
        b[idx + 1] = val >> 8 & 255;
        b[idx + 2] = val >> 16 & 255;
        b[idx + 3] = val >> 24 & 255;
      };
      var __writeUInt16LE = function(b, val, idx) {
        b[idx] = val & 255;
        b[idx + 1] = val >>> 8 & 255;
      };
      function WriteShift(t, val, f) {
        var size = 0, i = 0;
        if (f === "dbcs") {
          for (i = 0; i != val.length; ++i)
            __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);
          size = 2 * val.length;
        } else if (f === "sbcs") {
          if (typeof $cptable !== "undefined" && current_ansi == 874) {
            for (i = 0; i != val.length; ++i) {
              var cppayload = $cptable.utils.encode(current_ansi, val.charAt(i));
              this[this.l + i] = cppayload[0];
            }
          } else {
            val = val.replace(/[^\x00-\x7F]/g, "_");
            for (i = 0; i != val.length; ++i)
              this[this.l + i] = val.charCodeAt(i) & 255;
          }
          size = val.length;
        } else if (f === "hex") {
          for (; i < t; ++i) {
            this[this.l++] = parseInt(val.slice(2 * i, 2 * i + 2), 16) || 0;
          }
          return this;
        } else if (f === "utf16le") {
          var end = Math.min(this.l + t, this.length);
          for (i = 0; i < Math.min(val.length, t); ++i) {
            var cc = val.charCodeAt(i);
            this[this.l++] = cc & 255;
            this[this.l++] = cc >> 8;
          }
          while (this.l < end)
            this[this.l++] = 0;
          return this;
        } else
          switch (t) {
            case 1:
              size = 1;
              this[this.l] = val & 255;
              break;
            case 2:
              size = 2;
              this[this.l] = val & 255;
              val >>>= 8;
              this[this.l + 1] = val & 255;
              break;
            case 3:
              size = 3;
              this[this.l] = val & 255;
              val >>>= 8;
              this[this.l + 1] = val & 255;
              val >>>= 8;
              this[this.l + 2] = val & 255;
              break;
            case 4:
              size = 4;
              __writeUInt32LE(this, val, this.l);
              break;
            case 8:
              size = 8;
              if (f === "f") {
                write_double_le(this, val, this.l);
                break;
              }
            case 16:
              break;
            case -4:
              size = 4;
              __writeInt32LE(this, val, this.l);
              break;
          }
        this.l += size;
        return this;
      }
      function CheckField(hexstr, fld) {
        var m = __hexlify(this, this.l, hexstr.length >> 1);
        if (m !== hexstr)
          throw new Error(fld + "Expected " + hexstr + " saw " + m);
        this.l += hexstr.length >> 1;
      }
      function prep_blob(blob, pos) {
        blob.l = pos;
        blob.read_shift = ReadShift;
        blob.chk = CheckField;
        blob.write_shift = WriteShift;
      }
      function parsenoop(blob, length) {
        blob.l += length;
      }
      function new_buf(sz) {
        var o = new_raw_buf(sz);
        prep_blob(o, 0);
        return o;
      }
      function recordhopper(data, cb, opts) {
        if (!data)
          return;
        var tmpbyte, cntbyte, length;
        prep_blob(data, data.l || 0);
        var L = data.length, RT = 0, tgt = 0;
        while (data.l < L) {
          RT = data.read_shift(1);
          if (RT & 128)
            RT = (RT & 127) + ((data.read_shift(1) & 127) << 7);
          var R = XLSBRecordEnum[RT] || XLSBRecordEnum[65535];
          tmpbyte = data.read_shift(1);
          length = tmpbyte & 127;
          for (cntbyte = 1; cntbyte < 4 && tmpbyte & 128; ++cntbyte)
            length += ((tmpbyte = data.read_shift(1)) & 127) << 7 * cntbyte;
          tgt = data.l + length;
          var d = R.f && R.f(data, length, opts);
          data.l = tgt;
          if (cb(d, R, RT))
            return;
        }
      }
      function buf_array() {
        var bufs = [], blksz = has_buf ? 256 : 2048;
        var newblk = function ba_newblk(sz) {
          var o = new_buf(sz);
          prep_blob(o, 0);
          return o;
        };
        var curbuf = newblk(blksz);
        var endbuf = function ba_endbuf() {
          if (!curbuf)
            return;
          if (curbuf.length > curbuf.l) {
            curbuf = curbuf.slice(0, curbuf.l);
            curbuf.l = curbuf.length;
          }
          if (curbuf.length > 0)
            bufs.push(curbuf);
          curbuf = null;
        };
        var next = function ba_next(sz) {
          if (curbuf && sz < curbuf.length - curbuf.l)
            return curbuf;
          endbuf();
          return curbuf = newblk(Math.max(sz + 1, blksz));
        };
        var end = function ba_end() {
          endbuf();
          return bconcat(bufs);
        };
        var push = function ba_push(buf) {
          endbuf();
          curbuf = buf;
          if (curbuf.l == null)
            curbuf.l = curbuf.length;
          next(blksz);
        };
        return { next, push, end, _bufs: bufs };
      }
      function write_record(ba, type, payload, length) {
        var t = +type, l;
        if (isNaN(t))
          return;
        if (!length)
          length = XLSBRecordEnum[t].p || (payload || []).length || 0;
        l = 1 + (t >= 128 ? 1 : 0) + 1;
        if (length >= 128)
          ++l;
        if (length >= 16384)
          ++l;
        if (length >= 2097152)
          ++l;
        var o = ba.next(l);
        if (t <= 127)
          o.write_shift(1, t);
        else {
          o.write_shift(1, (t & 127) + 128);
          o.write_shift(1, t >> 7);
        }
        for (var i = 0; i != 4; ++i) {
          if (length >= 128) {
            o.write_shift(1, (length & 127) + 128);
            length >>= 7;
          } else {
            o.write_shift(1, length);
            break;
          }
        }
        if (length > 0 && is_buf(payload))
          ba.push(payload);
      }
      function shift_cell_xls(cell, tgt, opts) {
        var out = dup(cell);
        if (tgt.s) {
          if (out.cRel)
            out.c += tgt.s.c;
          if (out.rRel)
            out.r += tgt.s.r;
        } else {
          if (out.cRel)
            out.c += tgt.c;
          if (out.rRel)
            out.r += tgt.r;
        }
        if (!opts || opts.biff < 12) {
          while (out.c >= 256)
            out.c -= 256;
          while (out.r >= 65536)
            out.r -= 65536;
        }
        return out;
      }
      function shift_range_xls(cell, range, opts) {
        var out = dup(cell);
        out.s = shift_cell_xls(out.s, range.s, opts);
        out.e = shift_cell_xls(out.e, range.s, opts);
        return out;
      }
      function encode_cell_xls(c, biff) {
        if (c.cRel && c.c < 0) {
          c = dup(c);
          while (c.c < 0)
            c.c += biff > 8 ? 16384 : 256;
        }
        if (c.rRel && c.r < 0) {
          c = dup(c);
          while (c.r < 0)
            c.r += biff > 8 ? 1048576 : biff > 5 ? 65536 : 16384;
        }
        var s = encode_cell(c);
        if (!c.cRel && c.cRel != null)
          s = fix_col(s);
        if (!c.rRel && c.rRel != null)
          s = fix_row(s);
        return s;
      }
      function encode_range_xls(r, opts) {
        if (r.s.r == 0 && !r.s.rRel) {
          if (r.e.r == (opts.biff >= 12 ? 1048575 : opts.biff >= 8 ? 65536 : 16384) && !r.e.rRel) {
            return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
          }
        }
        if (r.s.c == 0 && !r.s.cRel) {
          if (r.e.c == (opts.biff >= 12 ? 16383 : 255) && !r.e.cRel) {
            return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
          }
        }
        return encode_cell_xls(r.s, opts.biff) + ":" + encode_cell_xls(r.e, opts.biff);
      }
      function decode_row(rowstr) {
        return parseInt(unfix_row(rowstr), 10) - 1;
      }
      function encode_row(row) {
        return "" + (row + 1);
      }
      function fix_row(cstr) {
        return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
      }
      function unfix_row(cstr) {
        return cstr.replace(/\$(\d+)$/, "$1");
      }
      function decode_col(colstr) {
        var c = unfix_col(colstr), d = 0, i = 0;
        for (; i !== c.length; ++i)
          d = 26 * d + c.charCodeAt(i) - 64;
        return d - 1;
      }
      function encode_col(col) {
        if (col < 0)
          throw new Error("invalid column " + col);
        var s = "";
        for (++col; col; col = Math.floor((col - 1) / 26))
          s = String.fromCharCode((col - 1) % 26 + 65) + s;
        return s;
      }
      function fix_col(cstr) {
        return cstr.replace(/^([A-Z])/, "$$$1");
      }
      function unfix_col(cstr) {
        return cstr.replace(/^\$([A-Z])/, "$1");
      }
      function split_cell(cstr) {
        return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
      }
      function decode_cell(cstr) {
        var R = 0, C = 0;
        for (var i = 0; i < cstr.length; ++i) {
          var cc = cstr.charCodeAt(i);
          if (cc >= 48 && cc <= 57)
            R = 10 * R + (cc - 48);
          else if (cc >= 65 && cc <= 90)
            C = 26 * C + (cc - 64);
        }
        return { c: C - 1, r: R - 1 };
      }
      function encode_cell(cell) {
        var col = cell.c + 1;
        var s = "";
        for (; col; col = (col - 1) / 26 | 0)
          s = String.fromCharCode((col - 1) % 26 + 65) + s;
        return s + (cell.r + 1);
      }
      function decode_range(range) {
        var idx = range.indexOf(":");
        if (idx == -1)
          return { s: decode_cell(range), e: decode_cell(range) };
        return { s: decode_cell(range.slice(0, idx)), e: decode_cell(range.slice(idx + 1)) };
      }
      function encode_range(cs, ce) {
        if (typeof ce === "undefined" || typeof ce === "number") {
          return encode_range(cs.s, cs.e);
        }
        if (typeof cs !== "string")
          cs = encode_cell(cs);
        if (typeof ce !== "string")
          ce = encode_cell(ce);
        return cs == ce ? cs : cs + ":" + ce;
      }
      function safe_decode_range(range) {
        var o = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
        var idx = 0, i = 0, cc = 0;
        var len = range.length;
        for (idx = 0; i < len; ++i) {
          if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26)
            break;
          idx = 26 * idx + cc;
        }
        o.s.c = --idx;
        for (idx = 0; i < len; ++i) {
          if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9)
            break;
          idx = 10 * idx + cc;
        }
        o.s.r = --idx;
        if (i === len || cc != 10) {
          o.e.c = o.s.c;
          o.e.r = o.s.r;
          return o;
        }
        ++i;
        for (idx = 0; i != len; ++i) {
          if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26)
            break;
          idx = 26 * idx + cc;
        }
        o.e.c = --idx;
        for (idx = 0; i != len; ++i) {
          if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9)
            break;
          idx = 10 * idx + cc;
        }
        o.e.r = --idx;
        return o;
      }
      function safe_format_cell(cell, v) {
        var q = cell.t == "d" && v instanceof Date;
        if (cell.z != null)
          try {
            return cell.w = SSF_format(cell.z, q ? datenum(v) : v);
          } catch (e) {
          }
        try {
          return cell.w = SSF_format((cell.XF || {}).numFmtId || (q ? 14 : 0), q ? datenum(v) : v);
        } catch (e) {
          return "" + v;
        }
      }
      function format_cell(cell, v, o) {
        if (cell == null || cell.t == null || cell.t == "z")
          return "";
        if (cell.w !== void 0)
          return cell.w;
        if (cell.t == "d" && !cell.z && o && o.dateNF)
          cell.z = o.dateNF;
        if (cell.t == "e")
          return BErr[cell.v] || cell.v;
        if (v == void 0)
          return safe_format_cell(cell, cell.v);
        return safe_format_cell(cell, v);
      }
      function sheet_to_workbook(sheet, opts) {
        var n = opts && opts.sheet ? opts.sheet : "Sheet1";
        var sheets = {};
        sheets[n] = sheet;
        return { SheetNames: [n], Sheets: sheets };
      }
      function sheet_add_aoa(_ws, data, opts) {
        var o = opts || {};
        var dense = _ws ? Array.isArray(_ws) : o.dense;
        if (DENSE != null && dense == null)
          dense = DENSE;
        var ws = _ws || (dense ? [] : {});
        var _R = 0, _C = 0;
        if (ws && o.origin != null) {
          if (typeof o.origin == "number")
            _R = o.origin;
          else {
            var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
            _R = _origin.r;
            _C = _origin.c;
          }
          if (!ws["!ref"])
            ws["!ref"] = "A1:A1";
        }
        var range = { s: { c: 1e7, r: 1e7 }, e: { c: 0, r: 0 } };
        if (ws["!ref"]) {
          var _range = safe_decode_range(ws["!ref"]);
          range.s.c = _range.s.c;
          range.s.r = _range.s.r;
          range.e.c = Math.max(range.e.c, _range.e.c);
          range.e.r = Math.max(range.e.r, _range.e.r);
          if (_R == -1)
            range.e.r = _R = _range.e.r + 1;
        }
        for (var R = 0; R != data.length; ++R) {
          if (!data[R])
            continue;
          if (!Array.isArray(data[R]))
            throw new Error("aoa_to_sheet expects an array of arrays");
          for (var C = 0; C != data[R].length; ++C) {
            if (typeof data[R][C] === "undefined")
              continue;
            var cell = { v: data[R][C] };
            var __R = _R + R, __C = _C + C;
            if (range.s.r > __R)
              range.s.r = __R;
            if (range.s.c > __C)
              range.s.c = __C;
            if (range.e.r < __R)
              range.e.r = __R;
            if (range.e.c < __C)
              range.e.c = __C;
            if (data[R][C] && typeof data[R][C] === "object" && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date))
              cell = data[R][C];
            else {
              if (Array.isArray(cell.v)) {
                cell.f = data[R][C][1];
                cell.v = cell.v[0];
              }
              if (cell.v === null) {
                if (cell.f)
                  cell.t = "n";
                else if (o.nullError) {
                  cell.t = "e";
                  cell.v = 0;
                } else if (!o.sheetStubs)
                  continue;
                else
                  cell.t = "z";
              } else if (typeof cell.v === "number")
                cell.t = "n";
              else if (typeof cell.v === "boolean")
                cell.t = "b";
              else if (cell.v instanceof Date) {
                cell.z = o.dateNF || table_fmt[14];
                if (o.cellDates) {
                  cell.t = "d";
                  cell.w = SSF_format(cell.z, datenum(cell.v));
                } else {
                  cell.t = "n";
                  cell.v = datenum(cell.v);
                  cell.w = SSF_format(cell.z, cell.v);
                }
              } else
                cell.t = "s";
            }
            if (dense) {
              if (!ws[__R])
                ws[__R] = [];
              if (ws[__R][__C] && ws[__R][__C].z)
                cell.z = ws[__R][__C].z;
              ws[__R][__C] = cell;
            } else {
              var cell_ref = encode_cell({ c: __C, r: __R });
              if (ws[cell_ref] && ws[cell_ref].z)
                cell.z = ws[cell_ref].z;
              ws[cell_ref] = cell;
            }
          }
        }
        if (range.s.c < 1e7)
          ws["!ref"] = encode_range(range);
        return ws;
      }
      function aoa_to_sheet(data, opts) {
        return sheet_add_aoa(null, data, opts);
      }
      function parse_Int32LE(data) {
        return data.read_shift(4, "i");
      }
      function write_UInt32LE(x, o) {
        if (!o)
          o = new_buf(4);
        o.write_shift(4, x);
        return o;
      }
      function parse_XLWideString(data) {
        var cchCharacters = data.read_shift(4);
        return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "dbcs");
      }
      function write_XLWideString(data, o) {
        var _null = false;
        if (o == null) {
          _null = true;
          o = new_buf(4 + 2 * data.length);
        }
        o.write_shift(4, data.length);
        if (data.length > 0)
          o.write_shift(0, data, "dbcs");
        return _null ? o.slice(0, o.l) : o;
      }
      function parse_StrRun(data) {
        return { ich: data.read_shift(2), ifnt: data.read_shift(2) };
      }
      function write_StrRun(run, o) {
        if (!o)
          o = new_buf(4);
        o.write_shift(2, run.ich || 0);
        o.write_shift(2, run.ifnt || 0);
        return o;
      }
      function parse_RichStr(data, length) {
        var start = data.l;
        var flags = data.read_shift(1);
        var str = parse_XLWideString(data);
        var rgsStrRun = [];
        var z = { t: str, h: str };
        if ((flags & 1) !== 0) {
          var dwSizeStrRun = data.read_shift(4);
          for (var i = 0; i != dwSizeStrRun; ++i)
            rgsStrRun.push(parse_StrRun(data));
          z.r = rgsStrRun;
        } else
          z.r = [{ ich: 0, ifnt: 0 }];
        data.l = start + length;
        return z;
      }
      function write_RichStr(str, o) {
        var _null = false;
        if (o == null) {
          _null = true;
          o = new_buf(15 + 4 * str.t.length);
        }
        o.write_shift(1, 0);
        write_XLWideString(str.t, o);
        return _null ? o.slice(0, o.l) : o;
      }
      var parse_BrtCommentText = parse_RichStr;
      function write_BrtCommentText(str, o) {
        var _null = false;
        if (o == null) {
          _null = true;
          o = new_buf(23 + 4 * str.t.length);
        }
        o.write_shift(1, 1);
        write_XLWideString(str.t, o);
        o.write_shift(4, 1);
        write_StrRun({ ich: 0, ifnt: 0 }, o);
        return _null ? o.slice(0, o.l) : o;
      }
      function parse_XLSBCell(data) {
        var col = data.read_shift(4);
        var iStyleRef = data.read_shift(2);
        iStyleRef += data.read_shift(1) << 16;
        data.l++;
        return { c: col, iStyleRef };
      }
      function write_XLSBCell(cell, o) {
        if (o == null)
          o = new_buf(8);
        o.write_shift(-4, cell.c);
        o.write_shift(3, cell.iStyleRef || cell.s);
        o.write_shift(1, 0);
        return o;
      }
      function parse_XLSBShortCell(data) {
        var iStyleRef = data.read_shift(2);
        iStyleRef += data.read_shift(1) << 16;
        data.l++;
        return { c: -1, iStyleRef };
      }
      function write_XLSBShortCell(cell, o) {
        if (o == null)
          o = new_buf(4);
        o.write_shift(3, cell.iStyleRef || cell.s);
        o.write_shift(1, 0);
        return o;
      }
      var parse_XLSBCodeName = parse_XLWideString;
      var write_XLSBCodeName = write_XLWideString;
      function parse_XLNullableWideString(data) {
        var cchCharacters = data.read_shift(4);
        return cchCharacters === 0 || cchCharacters === 4294967295 ? "" : data.read_shift(cchCharacters, "dbcs");
      }
      function write_XLNullableWideString(data, o) {
        var _null = false;
        if (o == null) {
          _null = true;
          o = new_buf(127);
        }
        o.write_shift(4, data.length > 0 ? data.length : 4294967295);
        if (data.length > 0)
          o.write_shift(0, data, "dbcs");
        return _null ? o.slice(0, o.l) : o;
      }
      var parse_XLNameWideString = parse_XLWideString;
      var parse_RelID = parse_XLNullableWideString;
      var write_RelID = write_XLNullableWideString;
      function parse_RkNumber(data) {
        var b = data.slice(data.l, data.l + 4);
        var fX100 = b[0] & 1, fInt = b[0] & 2;
        data.l += 4;
        var RK = fInt === 0 ? __double([0, 0, 0, 0, b[0] & 252, b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2;
        return fX100 ? RK / 100 : RK;
      }
      function write_RkNumber(data, o) {
        if (o == null)
          o = new_buf(4);
        var fX100 = 0, fInt = 0, d100 = data * 100;
        if (data == (data | 0) && data >= -(1 << 29) && data < 1 << 29) {
          fInt = 1;
        } else if (d100 == (d100 | 0) && d100 >= -(1 << 29) && d100 < 1 << 29) {
          fInt = 1;
          fX100 = 1;
        }
        if (fInt)
          o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));
        else
          throw new Error("unsupported RkNumber " + data);
      }
      function parse_RfX(data) {
        var cell = { s: {}, e: {} };
        cell.s.r = data.read_shift(4);
        cell.e.r = data.read_shift(4);
        cell.s.c = data.read_shift(4);
        cell.e.c = data.read_shift(4);
        return cell;
      }
      function write_RfX(r, o) {
        if (!o)
          o = new_buf(16);
        o.write_shift(4, r.s.r);
        o.write_shift(4, r.e.r);
        o.write_shift(4, r.s.c);
        o.write_shift(4, r.e.c);
        return o;
      }
      var parse_UncheckedRfX = parse_RfX;
      var write_UncheckedRfX = write_RfX;
      function parse_Xnum(data) {
        if (data.length - data.l < 8)
          throw "XLS Xnum Buffer underflow";
        return data.read_shift(8, "f");
      }
      function write_Xnum(data, o) {
        return (o || new_buf(8)).write_shift(8, data, "f");
      }
      function parse_BrtColor(data) {
        var out = {};
        var d = data.read_shift(1);
        var xColorType = d >>> 1;
        var index = data.read_shift(1);
        var nTS = data.read_shift(2, "i");
        var bR = data.read_shift(1);
        var bG = data.read_shift(1);
        var bB = data.read_shift(1);
        data.l++;
        switch (xColorType) {
          case 0:
            out.auto = 1;
            break;
          case 1:
            out.index = index;
            var icv = XLSIcv[index];
            if (icv)
              out.rgb = rgb2Hex(icv);
            break;
          case 2:
            out.rgb = rgb2Hex([bR, bG, bB]);
            break;
          case 3:
            out.theme = index;
            break;
        }
        if (nTS != 0)
          out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
        return out;
      }
      function write_BrtColor(color, o) {
        if (!o)
          o = new_buf(8);
        if (!color || color.auto) {
          o.write_shift(4, 0);
          o.write_shift(4, 0);
          return o;
        }
        if (color.index != null) {
          o.write_shift(1, 2);
          o.write_shift(1, color.index);
        } else if (color.theme != null) {
          o.write_shift(1, 6);
          o.write_shift(1, color.theme);
        } else {
          o.write_shift(1, 5);
          o.write_shift(1, 0);
        }
        var nTS = color.tint || 0;
        if (nTS > 0)
          nTS *= 32767;
        else if (nTS < 0)
          nTS *= 32768;
        o.write_shift(2, nTS);
        if (!color.rgb || color.theme != null) {
          o.write_shift(2, 0);
          o.write_shift(1, 0);
          o.write_shift(1, 0);
        } else {
          var rgb = color.rgb || "FFFFFF";
          if (typeof rgb == "number")
            rgb = ("000000" + rgb.toString(16)).slice(-6);
          o.write_shift(1, parseInt(rgb.slice(0, 2), 16));
          o.write_shift(1, parseInt(rgb.slice(2, 4), 16));
          o.write_shift(1, parseInt(rgb.slice(4, 6), 16));
          o.write_shift(1, 255);
        }
        return o;
      }
      function parse_FontFlags(data) {
        var d = data.read_shift(1);
        data.l++;
        var out = {
          fBold: d & 1,
          fItalic: d & 2,
          fUnderline: d & 4,
          fStrikeout: d & 8,
          fOutline: d & 16,
          fShadow: d & 32,
          fCondense: d & 64,
          fExtend: d & 128
        };
        return out;
      }
      function write_FontFlags(font, o) {
        if (!o)
          o = new_buf(2);
        var grbit = (font.italic ? 2 : 0) | (font.strike ? 8 : 0) | (font.outline ? 16 : 0) | (font.shadow ? 32 : 0) | (font.condense ? 64 : 0) | (font.extend ? 128 : 0);
        o.write_shift(1, grbit);
        o.write_shift(1, 0);
        return o;
      }
      function parse_ClipboardFormatOrString(o, w) {
        var ClipFmt = { 2: "BITMAP", 3: "METAFILEPICT", 8: "DIB", 14: "ENHMETAFILE" };
        var m = o.read_shift(4);
        switch (m) {
          case 0:
            return "";
          case 4294967295:
          case 4294967294:
            return ClipFmt[o.read_shift(4)] || "";
        }
        if (m > 400)
          throw new Error("Unsupported Clipboard: " + m.toString(16));
        o.l -= 4;
        return o.read_shift(0, w == 1 ? "lpstr" : "lpwstr");
      }
      function parse_ClipboardFormatOrAnsiString(o) {
        return parse_ClipboardFormatOrString(o, 1);
      }
      function parse_ClipboardFormatOrUnicodeString(o) {
        return parse_ClipboardFormatOrString(o, 2);
      }
      var VT_I2 = 2;
      var VT_I4 = 3;
      var VT_BOOL = 11;
      var VT_VARIANT = 12;
      var VT_UI4 = 19;
      var VT_LPSTR = 30;
      var VT_FILETIME = 64;
      var VT_BLOB = 65;
      var VT_CF = 71;
      var VT_VECTOR = 4096;
      var VT_VECTOR_VARIANT = 4108;
      var VT_VECTOR_LPSTR = 4126;
      var VT_STRING = 80;
      var VT_USTR = 81;
      var VT_CUSTOM = [VT_STRING, VT_USTR];
      var DocSummaryPIDDSI = {
        1: { n: "CodePage", t: VT_I2 },
        2: { n: "Category", t: VT_STRING },
        3: { n: "PresentationFormat", t: VT_STRING },
        4: { n: "ByteCount", t: VT_I4 },
        5: { n: "LineCount", t: VT_I4 },
        6: { n: "ParagraphCount", t: VT_I4 },
        7: { n: "SlideCount", t: VT_I4 },
        8: { n: "NoteCount", t: VT_I4 },
        9: { n: "HiddenCount", t: VT_I4 },
        10: { n: "MultimediaClipCount", t: VT_I4 },
        11: { n: "ScaleCrop", t: VT_BOOL },
        12: { n: "HeadingPairs", t: VT_VECTOR_VARIANT },
        13: { n: "TitlesOfParts", t: VT_VECTOR_LPSTR },
        14: { n: "Manager", t: VT_STRING },
        15: { n: "Company", t: VT_STRING },
        16: { n: "LinksUpToDate", t: VT_BOOL },
        17: { n: "CharacterCount", t: VT_I4 },
        19: { n: "SharedDoc", t: VT_BOOL },
        22: { n: "HyperlinksChanged", t: VT_BOOL },
        23: { n: "AppVersion", t: VT_I4, p: "version" },
        24: { n: "DigSig", t: VT_BLOB },
        26: { n: "ContentType", t: VT_STRING },
        27: { n: "ContentStatus", t: VT_STRING },
        28: { n: "Language", t: VT_STRING },
        29: { n: "Version", t: VT_STRING },
        255: {},
        2147483648: { n: "Locale", t: VT_UI4 },
        2147483651: { n: "Behavior", t: VT_UI4 },
        1919054434: {}
      };
      var SummaryPIDSI = {
        1: { n: "CodePage", t: VT_I2 },
        2: { n: "Title", t: VT_STRING },
        3: { n: "Subject", t: VT_STRING },
        4: { n: "Author", t: VT_STRING },
        5: { n: "Keywords", t: VT_STRING },
        6: { n: "Comments", t: VT_STRING },
        7: { n: "Template", t: VT_STRING },
        8: { n: "LastAuthor", t: VT_STRING },
        9: { n: "RevNumber", t: VT_STRING },
        10: { n: "EditTime", t: VT_FILETIME },
        11: { n: "LastPrinted", t: VT_FILETIME },
        12: { n: "CreatedDate", t: VT_FILETIME },
        13: { n: "ModifiedDate", t: VT_FILETIME },
        14: { n: "PageCount", t: VT_I4 },
        15: { n: "WordCount", t: VT_I4 },
        16: { n: "CharCount", t: VT_I4 },
        17: { n: "Thumbnail", t: VT_CF },
        18: { n: "Application", t: VT_STRING },
        19: { n: "DocSecurity", t: VT_I4 },
        255: {},
        2147483648: { n: "Locale", t: VT_UI4 },
        2147483651: { n: "Behavior", t: VT_UI4 },
        1919054434: {}
      };
      var CountryEnum = {
        1: "US",
        2: "CA",
        3: "",
        7: "RU",
        20: "EG",
        30: "GR",
        31: "NL",
        32: "BE",
        33: "FR",
        34: "ES",
        36: "HU",
        39: "IT",
        41: "CH",
        43: "AT",
        44: "GB",
        45: "DK",
        46: "SE",
        47: "NO",
        48: "PL",
        49: "DE",
        52: "MX",
        55: "BR",
        61: "AU",
        64: "NZ",
        66: "TH",
        81: "JP",
        82: "KR",
        84: "VN",
        86: "CN",
        90: "TR",
        105: "JS",
        213: "DZ",
        216: "MA",
        218: "LY",
        351: "PT",
        354: "IS",
        358: "FI",
        420: "CZ",
        886: "TW",
        961: "LB",
        962: "JO",
        963: "SY",
        964: "IQ",
        965: "KW",
        966: "SA",
        971: "AE",
        972: "IL",
        974: "QA",
        981: "IR",
        65535: "US"
      };
      var XLSFillPattern = [
        null,
        "solid",
        "mediumGray",
        "darkGray",
        "lightGray",
        "darkHorizontal",
        "darkVertical",
        "darkDown",
        "darkUp",
        "darkGrid",
        "darkTrellis",
        "lightHorizontal",
        "lightVertical",
        "lightDown",
        "lightUp",
        "lightGrid",
        "lightTrellis",
        "gray125",
        "gray0625"
      ];
      function rgbify(arr) {
        return arr.map(function(x) {
          return [x >> 16 & 255, x >> 8 & 255, x & 255];
        });
      }
      var _XLSIcv = rgbify([
        0,
        16777215,
        16711680,
        65280,
        255,
        16776960,
        16711935,
        65535,
        0,
        16777215,
        16711680,
        65280,
        255,
        16776960,
        16711935,
        65535,
        8388608,
        32768,
        128,
        8421376,
        8388736,
        32896,
        12632256,
        8421504,
        10066431,
        10040166,
        16777164,
        13434879,
        6684774,
        16744576,
        26316,
        13421823,
        128,
        16711935,
        16776960,
        65535,
        8388736,
        8388608,
        32896,
        255,
        52479,
        13434879,
        13434828,
        16777113,
        10079487,
        16751052,
        13408767,
        16764057,
        3368703,
        3394764,
        10079232,
        16763904,
        16750848,
        16737792,
        6710937,
        9868950,
        13158,
        3381606,
        13056,
        3355392,
        10040064,
        10040166,
        3355545,
        3355443,
        16777215,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]);
      var XLSIcv = dup(_XLSIcv);
      var BErr = {
        0: "#NULL!",
        7: "#DIV/0!",
        15: "#VALUE!",
        23: "#REF!",
        29: "#NAME?",
        36: "#NUM!",
        42: "#N/A",
        43: "#GETTING_DATA",
        255: "#WTF?"
      };
      var RBErr = {
        "#NULL!": 0,
        "#DIV/0!": 7,
        "#VALUE!": 15,
        "#REF!": 23,
        "#NAME?": 29,
        "#NUM!": 36,
        "#N/A": 42,
        "#GETTING_DATA": 43,
        "#WTF?": 255
      };
      var ct2type = {
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
        "application/vnd.ms-excel.sheet.macroEnabled.main+xml": "workbooks",
        "application/vnd.ms-excel.sheet.binary.macroEnabled.main": "workbooks",
        "application/vnd.ms-excel.addin.macroEnabled.main+xml": "workbooks",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": "workbooks",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": "sheets",
        "application/vnd.ms-excel.worksheet": "sheets",
        "application/vnd.ms-excel.binIndexWs": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "charts",
        "application/vnd.ms-excel.chartsheet": "charts",
        "application/vnd.ms-excel.macrosheet+xml": "macros",
        "application/vnd.ms-excel.macrosheet": "macros",
        "application/vnd.ms-excel.intlmacrosheet": "TODO",
        "application/vnd.ms-excel.binIndexMs": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "dialogs",
        "application/vnd.ms-excel.dialogsheet": "dialogs",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml": "strs",
        "application/vnd.ms-excel.sharedStrings": "strs",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": "styles",
        "application/vnd.ms-excel.styles": "styles",
        "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
        "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
        "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",
        "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
        "application/vnd.ms-excel.comments": "comments",
        "application/vnd.ms-excel.threadedcomments+xml": "threadedcomments",
        "application/vnd.ms-excel.person+xml": "people",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "metadata",
        "application/vnd.ms-excel.sheetMetadata": "metadata",
        "application/vnd.ms-excel.pivotTable": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
        "application/vnd.ms-office.chartcolorstyle+xml": "TODO",
        "application/vnd.ms-office.chartstyle+xml": "TODO",
        "application/vnd.ms-office.chartex+xml": "TODO",
        "application/vnd.ms-excel.calcChain": "calcchains",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",
        "application/vnd.ms-office.activeX": "TODO",
        "application/vnd.ms-office.activeX+xml": "TODO",
        "application/vnd.ms-excel.attachedToolbars": "TODO",
        "application/vnd.ms-excel.connections": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",
        "application/vnd.ms-excel.externalLink": "links",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",
        "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
        "application/vnd.ms-excel.pivotCacheRecords": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",
        "application/vnd.ms-excel.queryTable": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",
        "application/vnd.ms-excel.userNames": "TODO",
        "application/vnd.ms-excel.revisionHeaders": "TODO",
        "application/vnd.ms-excel.revisionLog": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",
        "application/vnd.ms-excel.tableSingleCells": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",
        "application/vnd.ms-excel.slicer": "TODO",
        "application/vnd.ms-excel.slicerCache": "TODO",
        "application/vnd.ms-excel.slicer+xml": "TODO",
        "application/vnd.ms-excel.slicerCache+xml": "TODO",
        "application/vnd.ms-excel.wsSortMap": "TODO",
        "application/vnd.ms-excel.table": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.theme+xml": "themes",
        "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",
        "application/vnd.ms-excel.Timeline+xml": "TODO",
        "application/vnd.ms-excel.TimelineCache+xml": "TODO",
        "application/vnd.ms-office.vbaProject": "vba",
        "application/vnd.ms-office.vbaProjectSignature": "TODO",
        "application/vnd.ms-office.volatileDependencies": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",
        "application/vnd.ms-excel.controlproperties+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.model+data": "TODO",
        "application/vnd.ms-excel.Survey+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
        "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
        "application/vnd.openxmlformats-package.relationships+xml": "rels",
        "application/vnd.openxmlformats-officedocument.oleObject": "TODO",
        "image/png": "TODO",
        "sheet": "js"
      };
      var CT_LIST = {
        workbooks: {
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
          xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
          xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
          xlam: "application/vnd.ms-excel.addin.macroEnabled.main+xml",
          xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
        },
        strs: {
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
          xlsb: "application/vnd.ms-excel.sharedStrings"
        },
        comments: {
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",
          xlsb: "application/vnd.ms-excel.comments"
        },
        sheets: {
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
          xlsb: "application/vnd.ms-excel.worksheet"
        },
        charts: {
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",
          xlsb: "application/vnd.ms-excel.chartsheet"
        },
        dialogs: {
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",
          xlsb: "application/vnd.ms-excel.dialogsheet"
        },
        macros: {
          xlsx: "application/vnd.ms-excel.macrosheet+xml",
          xlsb: "application/vnd.ms-excel.macrosheet"
        },
        metadata: {
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml",
          xlsb: "application/vnd.ms-excel.sheetMetadata"
        },
        styles: {
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
          xlsb: "application/vnd.ms-excel.styles"
        }
      };
      function new_ct() {
        return {
          workbooks: [],
          sheets: [],
          charts: [],
          dialogs: [],
          macros: [],
          rels: [],
          strs: [],
          comments: [],
          threadedcomments: [],
          links: [],
          coreprops: [],
          extprops: [],
          custprops: [],
          themes: [],
          styles: [],
          calcchains: [],
          vba: [],
          drawings: [],
          metadata: [],
          people: [],
          TODO: [],
          xmlns: ""
        };
      }
      function parse_ct(data) {
        var ct = new_ct();
        if (!data || !data.match)
          return ct;
        var ctext = {};
        (data.match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (y[0].replace(nsregex, "<")) {
            case "<?xml":
              break;
            case "<Types":
              ct.xmlns = y["xmlns" + (y[0].match(/<(\w+):/) || ["", ""])[1]];
              break;
            case "<Default":
              ctext[y.Extension] = y.ContentType;
              break;
            case "<Override":
              if (ct[ct2type[y.ContentType]] !== void 0)
                ct[ct2type[y.ContentType]].push(y.PartName);
              break;
          }
        });
        if (ct.xmlns !== XMLNS.CT)
          throw new Error("Unknown Namespace: " + ct.xmlns);
        ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
        ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
        ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
        ct.defaults = ctext;
        delete ct.calcchains;
        return ct;
      }
      function write_ct(ct, opts) {
        var type2ct = evert_arr(ct2type);
        var o = [], v;
        o[o.length] = XML_HEADER;
        o[o.length] = writextag("Types", null, {
          "xmlns": XMLNS.CT,
          "xmlns:xsd": XMLNS.xsd,
          "xmlns:xsi": XMLNS.xsi
        });
        o = o.concat([
          ["xml", "application/xml"],
          ["bin", "application/vnd.ms-excel.sheet.binary.macroEnabled.main"],
          ["vml", "application/vnd.openxmlformats-officedocument.vmlDrawing"],
          ["data", "application/vnd.openxmlformats-officedocument.model+data"],
          ["bmp", "image/bmp"],
          ["png", "image/png"],
          ["gif", "image/gif"],
          ["emf", "image/x-emf"],
          ["wmf", "image/x-wmf"],
          ["jpg", "image/jpeg"],
          ["jpeg", "image/jpeg"],
          ["tif", "image/tiff"],
          ["tiff", "image/tiff"],
          ["pdf", "application/pdf"],
          ["rels", "application/vnd.openxmlformats-package.relationships+xml"]
        ].map(function(x) {
          return writextag("Default", null, { "Extension": x[0], "ContentType": x[1] });
        }));
        var f1 = function(w) {
          if (ct[w] && ct[w].length > 0) {
            v = ct[w][0];
            o[o.length] = writextag("Override", null, {
              "PartName": (v[0] == "/" ? "" : "/") + v,
              "ContentType": CT_LIST[w][opts.bookType] || CT_LIST[w]["xlsx"]
            });
          }
        };
        var f2 = function(w) {
          (ct[w] || []).forEach(function(v2) {
            o[o.length] = writextag("Override", null, {
              "PartName": (v2[0] == "/" ? "" : "/") + v2,
              "ContentType": CT_LIST[w][opts.bookType] || CT_LIST[w]["xlsx"]
            });
          });
        };
        var f3 = function(t) {
          (ct[t] || []).forEach(function(v2) {
            o[o.length] = writextag("Override", null, {
              "PartName": (v2[0] == "/" ? "" : "/") + v2,
              "ContentType": type2ct[t][0]
            });
          });
        };
        f1("workbooks");
        f2("sheets");
        f2("charts");
        f3("themes");
        ["strs", "styles"].forEach(f1);
        ["coreprops", "extprops", "custprops"].forEach(f3);
        f3("vba");
        f3("comments");
        f3("threadedcomments");
        f3("drawings");
        f2("metadata");
        f3("people");
        if (o.length > 2) {
          o[o.length] = "</Types>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      var RELS = {
        WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
        SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
        HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
        VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
        XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
        XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
        XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
        CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
        CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
        CMNT: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",
        CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",
        EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties",
        CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties",
        SST: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",
        STY: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",
        THEME: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",
        CHART: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",
        CHARTEX: "http://schemas.microsoft.com/office/2014/relationships/chartEx",
        CS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",
        WS: [
          "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
          "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
        ],
        DS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",
        MS: "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",
        IMG: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",
        DRAW: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",
        XLMETA: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",
        TCMNT: "http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",
        PEOPLE: "http://schemas.microsoft.com/office/2017/10/relationships/person",
        VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
      };
      function get_rels_path(file) {
        var n = file.lastIndexOf("/");
        return file.slice(0, n + 1) + "_rels/" + file.slice(n + 1) + ".rels";
      }
      function parse_rels(data, currentFilePath) {
        var rels = { "!id": {} };
        if (!data)
          return rels;
        if (currentFilePath.charAt(0) !== "/") {
          currentFilePath = "/" + currentFilePath;
        }
        var hash = {};
        (data.match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          if (y[0] === "<Relationship") {
            var rel = {};
            rel.Type = y.Type;
            rel.Target = y.Target;
            rel.Id = y.Id;
            if (y.TargetMode)
              rel.TargetMode = y.TargetMode;
            var canonictarget = y.TargetMode === "External" ? y.Target : resolve_path(y.Target, currentFilePath);
            rels[canonictarget] = rel;
            hash[y.Id] = rel;
          }
        });
        rels["!id"] = hash;
        return rels;
      }
      function write_rels(rels) {
        var o = [XML_HEADER, writextag("Relationships", null, {
          "xmlns": XMLNS.RELS
        })];
        keys(rels["!id"]).forEach(function(rid) {
          o[o.length] = writextag("Relationship", null, rels["!id"][rid]);
        });
        if (o.length > 2) {
          o[o.length] = "</Relationships>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function add_rels(rels, rId, f, type, relobj, targetmode) {
        if (!relobj)
          relobj = {};
        if (!rels["!id"])
          rels["!id"] = {};
        if (!rels["!idx"])
          rels["!idx"] = 1;
        if (rId < 0)
          for (rId = rels["!idx"]; rels["!id"]["rId" + rId]; ++rId) {
          }
        rels["!idx"] = rId + 1;
        relobj.Id = "rId" + rId;
        relobj.Type = type;
        relobj.Target = f;
        if (targetmode)
          relobj.TargetMode = targetmode;
        else if ([RELS.HLINK, RELS.XPATH, RELS.XMISS].indexOf(relobj.Type) > -1)
          relobj.TargetMode = "External";
        if (rels["!id"][relobj.Id])
          throw new Error("Cannot rewrite rId " + rId);
        rels["!id"][relobj.Id] = relobj;
        rels[("/" + relobj.Target).replace("//", "/")] = relobj;
        return rId;
      }
      var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
      function parse_manifest(d, opts) {
        var str = xlml_normalize(d);
        var Rn;
        var FEtag;
        while (Rn = xlmlregex.exec(str))
          switch (Rn[3]) {
            case "manifest":
              break;
            case "file-entry":
              FEtag = parsexmltag(Rn[0], false);
              if (FEtag.path == "/" && FEtag.type !== CT_ODS)
                throw new Error("This OpenDocument is not a spreadsheet");
              break;
            case "encryption-data":
            case "algorithm":
            case "start-key-generation":
            case "key-derivation":
              throw new Error("Unsupported ODS Encryption");
            default:
              if (opts && opts.WTF)
                throw Rn;
          }
      }
      function write_manifest(manifest) {
        var o = [XML_HEADER];
        o.push('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n');
        o.push('  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n');
        for (var i = 0; i < manifest.length; ++i)
          o.push('  <manifest:file-entry manifest:full-path="' + manifest[i][0] + '" manifest:media-type="' + manifest[i][1] + '"/>\n');
        o.push("</manifest:manifest>");
        return o.join("");
      }
      function write_rdf_type(file, res, tag) {
        return [
          '  <rdf:Description rdf:about="' + file + '">\n',
          '    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || "odf") + "#" + res + '"/>\n',
          "  </rdf:Description>\n"
        ].join("");
      }
      function write_rdf_has(base, file) {
        return [
          '  <rdf:Description rdf:about="' + base + '">\n',
          '    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' + file + '"/>\n',
          "  </rdf:Description>\n"
        ].join("");
      }
      function write_rdf(rdf) {
        var o = [XML_HEADER];
        o.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n');
        for (var i = 0; i != rdf.length; ++i) {
          o.push(write_rdf_type(rdf[i][0], rdf[i][1]));
          o.push(write_rdf_has("", rdf[i][0]));
        }
        o.push(write_rdf_type("", "Document", "pkg"));
        o.push("</rdf:RDF>");
        return o.join("");
      }
      function write_meta_ods() {
        return '<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>SheetJS ' + XLSX3.version + "</meta:generator></office:meta></office:document-meta>";
      }
      var CORE_PROPS = [
        ["cp:category", "Category"],
        ["cp:contentStatus", "ContentStatus"],
        ["cp:keywords", "Keywords"],
        ["cp:lastModifiedBy", "LastAuthor"],
        ["cp:lastPrinted", "LastPrinted"],
        ["cp:revision", "RevNumber"],
        ["cp:version", "Version"],
        ["dc:creator", "Author"],
        ["dc:description", "Comments"],
        ["dc:identifier", "Identifier"],
        ["dc:language", "Language"],
        ["dc:subject", "Subject"],
        ["dc:title", "Title"],
        ["dcterms:created", "CreatedDate", "date"],
        ["dcterms:modified", "ModifiedDate", "date"]
      ];
      var CORE_PROPS_REGEX = function() {
        var r = new Array(CORE_PROPS.length);
        for (var i = 0; i < CORE_PROPS.length; ++i) {
          var f = CORE_PROPS[i];
          var g = "(?:" + f[0].slice(0, f[0].indexOf(":")) + ":)" + f[0].slice(f[0].indexOf(":") + 1);
          r[i] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)</" + g + ">");
        }
        return r;
      }();
      function parse_core_props(data) {
        var p = {};
        data = utf8read(data);
        for (var i = 0; i < CORE_PROPS.length; ++i) {
          var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);
          if (cur != null && cur.length > 0)
            p[f[1]] = unescapexml(cur[1]);
          if (f[2] === "date" && p[f[1]])
            p[f[1]] = parseDate(p[f[1]]);
        }
        return p;
      }
      function cp_doit(f, g, h, o, p) {
        if (p[f] != null || g == null || g === "")
          return;
        p[f] = g;
        g = escapexml(g);
        o[o.length] = h ? writextag(f, g, h) : writetag(f, g);
      }
      function write_core_props(cp, _opts) {
        var opts = _opts || {};
        var o = [XML_HEADER, writextag("cp:coreProperties", null, {
          "xmlns:cp": XMLNS.CORE_PROPS,
          "xmlns:dc": XMLNS.dc,
          "xmlns:dcterms": XMLNS.dcterms,
          "xmlns:dcmitype": XMLNS.dcmitype,
          "xmlns:xsi": XMLNS.xsi
        })], p = {};
        if (!cp && !opts.Props)
          return o.join("");
        if (cp) {
          if (cp.CreatedDate != null)
            cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), { "xsi:type": "dcterms:W3CDTF" }, o, p);
          if (cp.ModifiedDate != null)
            cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), { "xsi:type": "dcterms:W3CDTF" }, o, p);
        }
        for (var i = 0; i != CORE_PROPS.length; ++i) {
          var f = CORE_PROPS[i];
          var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null;
          if (v === true)
            v = "1";
          else if (v === false)
            v = "0";
          else if (typeof v == "number")
            v = String(v);
          if (v != null)
            cp_doit(f[0], v, null, o, p);
        }
        if (o.length > 2) {
          o[o.length] = "</cp:coreProperties>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      var EXT_PROPS = [
        ["Application", "Application", "string"],
        ["AppVersion", "AppVersion", "string"],
        ["Company", "Company", "string"],
        ["DocSecurity", "DocSecurity", "string"],
        ["Manager", "Manager", "string"],
        ["HyperlinksChanged", "HyperlinksChanged", "bool"],
        ["SharedDoc", "SharedDoc", "bool"],
        ["LinksUpToDate", "LinksUpToDate", "bool"],
        ["ScaleCrop", "ScaleCrop", "bool"],
        ["HeadingPairs", "HeadingPairs", "raw"],
        ["TitlesOfParts", "TitlesOfParts", "raw"]
      ];
      var PseudoPropsPairs = [
        "Worksheets",
        "SheetNames",
        "NamedRanges",
        "DefinedNames",
        "Chartsheets",
        "ChartNames"
      ];
      function load_props_pairs(HP, TOP, props, opts) {
        var v = [];
        if (typeof HP == "string")
          v = parseVector(HP, opts);
        else
          for (var j = 0; j < HP.length; ++j)
            v = v.concat(HP[j].map(function(hp) {
              return { v: hp };
            }));
        var parts = typeof TOP == "string" ? parseVector(TOP, opts).map(function(x) {
          return x.v;
        }) : TOP;
        var idx = 0, len = 0;
        if (parts.length > 0)
          for (var i = 0; i !== v.length; i += 2) {
            len = +v[i + 1].v;
            switch (v[i].v) {
              case "Worksheets":
              case "\u5DE5\u4F5C\u8868":
              case "\u041B\u0438\u0441\u0442\u044B":
              case "\u0623\u0648\u0631\u0627\u0642 \u0627\u0644\u0639\u0645\u0644":
              case "\u30EF\u30FC\u30AF\u30B7\u30FC\u30C8":
              case "\u05D2\u05DC\u05D9\u05D5\u05E0\u05D5\u05EA \u05E2\u05D1\u05D5\u05D3\u05D4":
              case "Arbeitsbl\xE4tter":
              case "\xC7al\u0131\u015Fma Sayfalar\u0131":
              case "Feuilles de calcul":
              case "Fogli di lavoro":
              case "Folhas de c\xE1lculo":
              case "Planilhas":
              case "Regneark":
              case "Hojas de c\xE1lculo":
              case "Werkbladen":
                props.Worksheets = len;
                props.SheetNames = parts.slice(idx, idx + len);
                break;
              case "Named Ranges":
              case "Rangos con nombre":
              case "\u540D\u524D\u4ED8\u304D\u4E00\u89A7":
              case "Benannte Bereiche":
              case "Navngivne omr\xE5der":
                props.NamedRanges = len;
                props.DefinedNames = parts.slice(idx, idx + len);
                break;
              case "Charts":
              case "Diagramme":
                props.Chartsheets = len;
                props.ChartNames = parts.slice(idx, idx + len);
                break;
            }
            idx += len;
          }
      }
      function parse_ext_props(data, p, opts) {
        var q = {};
        if (!p)
          p = {};
        data = utf8read(data);
        EXT_PROPS.forEach(function(f) {
          var xml = (data.match(matchtag(f[0])) || [])[1];
          switch (f[2]) {
            case "string":
              if (xml)
                p[f[1]] = unescapexml(xml);
              break;
            case "bool":
              p[f[1]] = xml === "true";
              break;
            case "raw":
              var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)</" + f[0] + ">"));
              if (cur && cur.length > 0)
                q[f[1]] = cur[1];
              break;
          }
        });
        if (q.HeadingPairs && q.TitlesOfParts)
          load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);
        return p;
      }
      function write_ext_props(cp) {
        var o = [], W = writextag;
        if (!cp)
          cp = {};
        cp.Application = "SheetJS";
        o[o.length] = XML_HEADER;
        o[o.length] = writextag("Properties", null, {
          "xmlns": XMLNS.EXT_PROPS,
          "xmlns:vt": XMLNS.vt
        });
        EXT_PROPS.forEach(function(f) {
          if (cp[f[1]] === void 0)
            return;
          var v;
          switch (f[2]) {
            case "string":
              v = escapexml(String(cp[f[1]]));
              break;
            case "bool":
              v = cp[f[1]] ? "true" : "false";
              break;
          }
          if (v !== void 0)
            o[o.length] = W(f[0], v);
        });
        o[o.length] = W("HeadingPairs", W("vt:vector", W("vt:variant", "<vt:lpstr>Worksheets</vt:lpstr>") + W("vt:variant", W("vt:i4", String(cp.Worksheets))), { size: 2, baseType: "variant" }));
        o[o.length] = W("TitlesOfParts", W("vt:vector", cp.SheetNames.map(function(s) {
          return "<vt:lpstr>" + escapexml(s) + "</vt:lpstr>";
        }).join(""), { size: cp.Worksheets, baseType: "lpstr" }));
        if (o.length > 2) {
          o[o.length] = "</Properties>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      var custregex = /<[^>]+>[^<]*/g;
      function parse_cust_props(data, opts) {
        var p = {}, name = "";
        var m = data.match(custregex);
        if (m)
          for (var i = 0; i != m.length; ++i) {
            var x = m[i], y = parsexmltag(x);
            switch (y[0]) {
              case "<?xml":
                break;
              case "<Properties":
                break;
              case "<property":
                name = unescapexml(y.name);
                break;
              case "</property>":
                name = null;
                break;
              default:
                if (x.indexOf("<vt:") === 0) {
                  var toks = x.split(">");
                  var type = toks[0].slice(4), text = toks[1];
                  switch (type) {
                    case "lpstr":
                    case "bstr":
                    case "lpwstr":
                      p[name] = unescapexml(text);
                      break;
                    case "bool":
                      p[name] = parsexmlbool(text);
                      break;
                    case "i1":
                    case "i2":
                    case "i4":
                    case "i8":
                    case "int":
                    case "uint":
                      p[name] = parseInt(text, 10);
                      break;
                    case "r4":
                    case "r8":
                    case "decimal":
                      p[name] = parseFloat(text);
                      break;
                    case "filetime":
                    case "date":
                      p[name] = parseDate(text);
                      break;
                    case "cy":
                    case "error":
                      p[name] = unescapexml(text);
                      break;
                    default:
                      if (type.slice(-1) == "/")
                        break;
                      if (opts.WTF && typeof console !== "undefined")
                        console.warn("Unexpected", x, type, toks);
                  }
                } else if (x.slice(0, 2) === "</") {
                } else if (opts.WTF)
                  throw new Error(x);
            }
          }
        return p;
      }
      function write_cust_props(cp) {
        var o = [XML_HEADER, writextag("Properties", null, {
          "xmlns": XMLNS.CUST_PROPS,
          "xmlns:vt": XMLNS.vt
        })];
        if (!cp)
          return o.join("");
        var pid = 1;
        keys(cp).forEach(function custprop(k) {
          ++pid;
          o[o.length] = writextag("property", write_vt(cp[k], true), {
            "fmtid": "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",
            "pid": pid,
            "name": escapexml(k)
          });
        });
        if (o.length > 2) {
          o[o.length] = "</Properties>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      var XLMLDocPropsMap = {
        Title: "Title",
        Subject: "Subject",
        Author: "Author",
        Keywords: "Keywords",
        Comments: "Description",
        LastAuthor: "LastAuthor",
        RevNumber: "Revision",
        Application: "AppName",
        LastPrinted: "LastPrinted",
        CreatedDate: "Created",
        ModifiedDate: "LastSaved",
        Category: "Category",
        Manager: "Manager",
        Company: "Company",
        AppVersion: "Version",
        ContentStatus: "ContentStatus",
        Identifier: "Identifier",
        Language: "Language"
      };
      var evert_XLMLDPM;
      function xlml_set_prop(Props, tag, val) {
        if (!evert_XLMLDPM)
          evert_XLMLDPM = evert(XLMLDocPropsMap);
        tag = evert_XLMLDPM[tag] || tag;
        Props[tag] = val;
      }
      function xlml_write_docprops(Props, opts) {
        var o = [];
        keys(XLMLDocPropsMap).map(function(m) {
          for (var i = 0; i < CORE_PROPS.length; ++i)
            if (CORE_PROPS[i][1] == m)
              return CORE_PROPS[i];
          for (i = 0; i < EXT_PROPS.length; ++i)
            if (EXT_PROPS[i][1] == m)
              return EXT_PROPS[i];
          throw m;
        }).forEach(function(p) {
          if (Props[p[1]] == null)
            return;
          var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]];
          switch (p[2]) {
            case "date":
              m = new Date(m).toISOString().replace(/\.\d*Z/, "Z");
              break;
          }
          if (typeof m == "number")
            m = String(m);
          else if (m === true || m === false) {
            m = m ? "1" : "0";
          } else if (m instanceof Date)
            m = new Date(m).toISOString().replace(/\.\d*Z/, "");
          o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m));
        });
        return writextag("DocumentProperties", o.join(""), { xmlns: XLMLNS.o });
      }
      function xlml_write_custprops(Props, Custprops) {
        var BLACKLIST = ["Worksheets", "SheetNames"];
        var T = "CustomDocumentProperties";
        var o = [];
        if (Props)
          keys(Props).forEach(function(k) {
            if (!Object.prototype.hasOwnProperty.call(Props, k))
              return;
            for (var i = 0; i < CORE_PROPS.length; ++i)
              if (k == CORE_PROPS[i][1])
                return;
            for (i = 0; i < EXT_PROPS.length; ++i)
              if (k == EXT_PROPS[i][1])
                return;
            for (i = 0; i < BLACKLIST.length; ++i)
              if (k == BLACKLIST[i])
                return;
            var m = Props[k];
            var t = "string";
            if (typeof m == "number") {
              t = "float";
              m = String(m);
            } else if (m === true || m === false) {
              t = "boolean";
              m = m ? "1" : "0";
            } else
              m = String(m);
            o.push(writextag(escapexmltag(k), m, { "dt:dt": t }));
          });
        if (Custprops)
          keys(Custprops).forEach(function(k) {
            if (!Object.prototype.hasOwnProperty.call(Custprops, k))
              return;
            if (Props && Object.prototype.hasOwnProperty.call(Props, k))
              return;
            var m = Custprops[k];
            var t = "string";
            if (typeof m == "number") {
              t = "float";
              m = String(m);
            } else if (m === true || m === false) {
              t = "boolean";
              m = m ? "1" : "0";
            } else if (m instanceof Date) {
              t = "dateTime.tz";
              m = m.toISOString();
            } else
              m = String(m);
            o.push(writextag(escapexmltag(k), m, { "dt:dt": t }));
          });
        return "<" + T + ' xmlns="' + XLMLNS.o + '">' + o.join("") + "</" + T + ">";
      }
      function parse_FILETIME(blob) {
        var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
        return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1e3).toISOString().replace(/\.000/, "");
      }
      function write_FILETIME(time) {
        var date = typeof time == "string" ? new Date(Date.parse(time)) : time;
        var t = date.getTime() / 1e3 + 11644473600;
        var l = t % Math.pow(2, 32), h = (t - l) / Math.pow(2, 32);
        l *= 1e7;
        h *= 1e7;
        var w = l / Math.pow(2, 32) | 0;
        if (w > 0) {
          l = l % Math.pow(2, 32);
          h += w;
        }
        var o = new_buf(8);
        o.write_shift(4, l);
        o.write_shift(4, h);
        return o;
      }
      function parse_lpstr(blob, type, pad) {
        var start = blob.l;
        var str = blob.read_shift(0, "lpstr-cp");
        if (pad)
          while (blob.l - start & 3)
            ++blob.l;
        return str;
      }
      function parse_lpwstr(blob, type, pad) {
        var str = blob.read_shift(0, "lpwstr");
        if (pad)
          blob.l += 4 - (str.length + 1 & 3) & 3;
        return str;
      }
      function parse_VtStringBase(blob, stringType, pad) {
        if (stringType === 31)
          return parse_lpwstr(blob);
        return parse_lpstr(blob, stringType, pad);
      }
      function parse_VtString(blob, t, pad) {
        return parse_VtStringBase(blob, t, pad === false ? 0 : 4);
      }
      function parse_VtUnalignedString(blob, t) {
        if (!t)
          throw new Error("VtUnalignedString must have positive length");
        return parse_VtStringBase(blob, t, 0);
      }
      function parse_VtVecLpwstrValue(blob) {
        var length = blob.read_shift(4);
        var ret = [];
        for (var i = 0; i != length; ++i) {
          var start = blob.l;
          ret[i] = blob.read_shift(0, "lpwstr").replace(chr0, "");
          if (blob.l - start & 2)
            blob.l += 2;
        }
        return ret;
      }
      function parse_VtVecUnalignedLpstrValue(blob) {
        var length = blob.read_shift(4);
        var ret = [];
        for (var i = 0; i != length; ++i)
          ret[i] = blob.read_shift(0, "lpstr-cp").replace(chr0, "");
        return ret;
      }
      function parse_VtHeadingPair(blob) {
        var start = blob.l;
        var headingString = parse_TypedPropertyValue(blob, VT_USTR);
        if (blob[blob.l] == 0 && blob[blob.l + 1] == 0 && blob.l - start & 2)
          blob.l += 2;
        var headerParts = parse_TypedPropertyValue(blob, VT_I4);
        return [headingString, headerParts];
      }
      function parse_VtVecHeadingPairValue(blob) {
        var cElements = blob.read_shift(4);
        var out = [];
        for (var i = 0; i < cElements / 2; ++i)
          out.push(parse_VtHeadingPair(blob));
        return out;
      }
      function parse_dictionary(blob, CodePage) {
        var cnt = blob.read_shift(4);
        var dict = {};
        for (var j = 0; j != cnt; ++j) {
          var pid = blob.read_shift(4);
          var len = blob.read_shift(4);
          dict[pid] = blob.read_shift(len, CodePage === 1200 ? "utf16le" : "utf8").replace(chr0, "").replace(chr1, "!");
          if (CodePage === 1200 && len % 2)
            blob.l += 2;
        }
        if (blob.l & 3)
          blob.l = blob.l >> 2 + 1 << 2;
        return dict;
      }
      function parse_BLOB(blob) {
        var size = blob.read_shift(4);
        var bytes = blob.slice(blob.l, blob.l + size);
        blob.l += size;
        if ((size & 3) > 0)
          blob.l += 4 - (size & 3) & 3;
        return bytes;
      }
      function parse_ClipboardData(blob) {
        var o = {};
        o.Size = blob.read_shift(4);
        blob.l += o.Size + 3 - (o.Size - 1) % 4;
        return o;
      }
      function parse_TypedPropertyValue(blob, type, _opts) {
        var t = blob.read_shift(2), ret, opts = _opts || {};
        blob.l += 2;
        if (type !== VT_VARIANT) {
          if (t !== type && VT_CUSTOM.indexOf(type) === -1 && !((type & 65534) == 4126 && (t & 65534) == 4126))
            throw new Error("Expected type " + type + " saw " + t);
        }
        switch (type === VT_VARIANT ? t : type) {
          case 2:
            ret = blob.read_shift(2, "i");
            if (!opts.raw)
              blob.l += 2;
            return ret;
          case 3:
            ret = blob.read_shift(4, "i");
            return ret;
          case 11:
            return blob.read_shift(4) !== 0;
          case 19:
            ret = blob.read_shift(4);
            return ret;
          case 30:
            return parse_lpstr(blob, t, 4).replace(chr0, "");
          case 31:
            return parse_lpwstr(blob);
          case 64:
            return parse_FILETIME(blob);
          case 65:
            return parse_BLOB(blob);
          case 71:
            return parse_ClipboardData(blob);
          case 80:
            return parse_VtString(blob, t, !opts.raw).replace(chr0, "");
          case 81:
            return parse_VtUnalignedString(blob, t).replace(chr0, "");
          case 4108:
            return parse_VtVecHeadingPairValue(blob);
          case 4126:
          case 4127:
            return t == 4127 ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);
          default:
            throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
        }
      }
      function write_TypedPropertyValue(type, value) {
        var o = new_buf(4), p = new_buf(4);
        o.write_shift(4, type == 80 ? 31 : type);
        switch (type) {
          case 3:
            p.write_shift(-4, value);
            break;
          case 5:
            p = new_buf(8);
            p.write_shift(8, value, "f");
            break;
          case 11:
            p.write_shift(4, value ? 1 : 0);
            break;
          case 64:
            p = write_FILETIME(value);
            break;
          case 31:
          case 80:
            p = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
            p.write_shift(4, value.length + 1);
            p.write_shift(0, value, "dbcs");
            while (p.l != p.length)
              p.write_shift(1, 0);
            break;
          default:
            throw new Error("TypedPropertyValue unrecognized type " + type + " " + value);
        }
        return bconcat([o, p]);
      }
      function parse_PropertySet(blob, PIDSI) {
        var start_addr = blob.l;
        var size = blob.read_shift(4);
        var NumProps = blob.read_shift(4);
        var Props = [], i = 0;
        var CodePage = 0;
        var Dictionary = -1, DictObj = {};
        for (i = 0; i != NumProps; ++i) {
          var PropID = blob.read_shift(4);
          var Offset = blob.read_shift(4);
          Props[i] = [PropID, Offset + start_addr];
        }
        Props.sort(function(x, y) {
          return x[1] - y[1];
        });
        var PropH = {};
        for (i = 0; i != NumProps; ++i) {
          if (blob.l !== Props[i][1]) {
            var fail = true;
            if (i > 0 && PIDSI)
              switch (PIDSI[Props[i - 1][0]].t) {
                case 2:
                  if (blob.l + 2 === Props[i][1]) {
                    blob.l += 2;
                    fail = false;
                  }
                  break;
                case 80:
                  if (blob.l <= Props[i][1]) {
                    blob.l = Props[i][1];
                    fail = false;
                  }
                  break;
                case 4108:
                  if (blob.l <= Props[i][1]) {
                    blob.l = Props[i][1];
                    fail = false;
                  }
                  break;
              }
            if ((!PIDSI || i == 0) && blob.l <= Props[i][1]) {
              fail = false;
              blob.l = Props[i][1];
            }
            if (fail)
              throw new Error("Read Error: Expected address " + Props[i][1] + " at " + blob.l + " :" + i);
          }
          if (PIDSI) {
            var piddsi = PIDSI[Props[i][0]];
            PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, { raw: true });
            if (piddsi.p === "version")
              PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 65535)).slice(-4);
            if (piddsi.n == "CodePage")
              switch (PropH[piddsi.n]) {
                case 0:
                  PropH[piddsi.n] = 1252;
                case 874:
                case 932:
                case 936:
                case 949:
                case 950:
                case 1250:
                case 1251:
                case 1253:
                case 1254:
                case 1255:
                case 1256:
                case 1257:
                case 1258:
                case 1e4:
                case 1200:
                case 1201:
                case 1252:
                case 65e3:
                case -536:
                case 65001:
                case -535:
                  set_cp(CodePage = PropH[piddsi.n] >>> 0 & 65535);
                  break;
                default:
                  throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
              }
          } else {
            if (Props[i][0] === 1) {
              CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
              set_cp(CodePage);
              if (Dictionary !== -1) {
                var oldpos = blob.l;
                blob.l = Props[Dictionary][1];
                DictObj = parse_dictionary(blob, CodePage);
                blob.l = oldpos;
              }
            } else if (Props[i][0] === 0) {
              if (CodePage === 0) {
                Dictionary = i;
                blob.l = Props[i + 1][1];
                continue;
              }
              DictObj = parse_dictionary(blob, CodePage);
            } else {
              var name = DictObj[Props[i][0]];
              var val;
              switch (blob[blob.l]) {
                case 65:
                  blob.l += 4;
                  val = parse_BLOB(blob);
                  break;
                case 30:
                  blob.l += 4;
                  val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
                  break;
                case 31:
                  blob.l += 4;
                  val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
                  break;
                case 3:
                  blob.l += 4;
                  val = blob.read_shift(4, "i");
                  break;
                case 19:
                  blob.l += 4;
                  val = blob.read_shift(4);
                  break;
                case 5:
                  blob.l += 4;
                  val = blob.read_shift(8, "f");
                  break;
                case 11:
                  blob.l += 4;
                  val = parsebool(blob, 4);
                  break;
                case 64:
                  blob.l += 4;
                  val = parseDate(parse_FILETIME(blob));
                  break;
                default:
                  throw new Error("unparsed value: " + blob[blob.l]);
              }
              PropH[name] = val;
            }
          }
        }
        blob.l = start_addr + size;
        return PropH;
      }
      var XLSPSSkip = ["CodePage", "Thumbnail", "_PID_LINKBASE", "_PID_HLINKS", "SystemIdentifier", "FMTID"];
      function guess_property_type(val) {
        switch (typeof val) {
          case "boolean":
            return 11;
          case "number":
            return (val | 0) == val ? 3 : 5;
          case "string":
            return 31;
          case "object":
            if (val instanceof Date)
              return 64;
            break;
        }
        return -1;
      }
      function write_PropertySet(entries, RE, PIDSI) {
        var hdr = new_buf(8), piao = [], prop = [];
        var sz = 8, i = 0;
        var pr = new_buf(8), pio = new_buf(8);
        pr.write_shift(4, 2);
        pr.write_shift(4, 1200);
        pio.write_shift(4, 1);
        prop.push(pr);
        piao.push(pio);
        sz += 8 + pr.length;
        if (!RE) {
          pio = new_buf(8);
          pio.write_shift(4, 0);
          piao.unshift(pio);
          var bufs = [new_buf(4)];
          bufs[0].write_shift(4, entries.length);
          for (i = 0; i < entries.length; ++i) {
            var value = entries[i][0];
            pr = new_buf(4 + 4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
            pr.write_shift(4, i + 2);
            pr.write_shift(4, value.length + 1);
            pr.write_shift(0, value, "dbcs");
            while (pr.l != pr.length)
              pr.write_shift(1, 0);
            bufs.push(pr);
          }
          pr = bconcat(bufs);
          prop.unshift(pr);
          sz += 8 + pr.length;
        }
        for (i = 0; i < entries.length; ++i) {
          if (RE && !RE[entries[i][0]])
            continue;
          if (XLSPSSkip.indexOf(entries[i][0]) > -1 || PseudoPropsPairs.indexOf(entries[i][0]) > -1)
            continue;
          if (entries[i][1] == null)
            continue;
          var val = entries[i][1], idx = 0;
          if (RE) {
            idx = +RE[entries[i][0]];
            var pinfo = PIDSI[idx];
            if (pinfo.p == "version" && typeof val == "string") {
              var arr = val.split(".");
              val = (+arr[0] << 16) + (+arr[1] || 0);
            }
            pr = write_TypedPropertyValue(pinfo.t, val);
          } else {
            var T = guess_property_type(val);
            if (T == -1) {
              T = 31;
              val = String(val);
            }
            pr = write_TypedPropertyValue(T, val);
          }
          prop.push(pr);
          pio = new_buf(8);
          pio.write_shift(4, !RE ? 2 + i : idx);
          piao.push(pio);
          sz += 8 + pr.length;
        }
        var w = 8 * (prop.length + 1);
        for (i = 0; i < prop.length; ++i) {
          piao[i].write_shift(4, w);
          w += prop[i].length;
        }
        hdr.write_shift(4, sz);
        hdr.write_shift(4, prop.length);
        return bconcat([hdr].concat(piao).concat(prop));
      }
      function parse_PropertySetStream(file, PIDSI, clsid) {
        var blob = file.content;
        if (!blob)
          return {};
        prep_blob(blob, 0);
        var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
        blob.chk("feff", "Byte Order: ");
        blob.read_shift(2);
        var SystemIdentifier = blob.read_shift(4);
        var CLSID = blob.read_shift(16);
        if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid)
          throw new Error("Bad PropertySet CLSID " + CLSID);
        NumSets = blob.read_shift(4);
        if (NumSets !== 1 && NumSets !== 2)
          throw new Error("Unrecognized #Sets: " + NumSets);
        FMTID0 = blob.read_shift(16);
        Offset0 = blob.read_shift(4);
        if (NumSets === 1 && Offset0 !== blob.l)
          throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
        else if (NumSets === 2) {
          FMTID1 = blob.read_shift(16);
          Offset1 = blob.read_shift(4);
        }
        var PSet0 = parse_PropertySet(blob, PIDSI);
        var rval = { SystemIdentifier };
        for (var y in PSet0)
          rval[y] = PSet0[y];
        rval.FMTID = FMTID0;
        if (NumSets === 1)
          return rval;
        if (Offset1 - blob.l == 2)
          blob.l += 2;
        if (blob.l !== Offset1)
          throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
        var PSet1;
        try {
          PSet1 = parse_PropertySet(blob, null);
        } catch (e) {
        }
        for (y in PSet1)
          rval[y] = PSet1[y];
        rval.FMTID = [FMTID0, FMTID1];
        return rval;
      }
      function write_PropertySetStream(entries, clsid, RE, PIDSI, entries2, clsid2) {
        var hdr = new_buf(entries2 ? 68 : 48);
        var bufs = [hdr];
        hdr.write_shift(2, 65534);
        hdr.write_shift(2, 0);
        hdr.write_shift(4, 842412599);
        hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, "hex");
        hdr.write_shift(4, entries2 ? 2 : 1);
        hdr.write_shift(16, clsid, "hex");
        hdr.write_shift(4, entries2 ? 68 : 48);
        var ps0 = write_PropertySet(entries, RE, PIDSI);
        bufs.push(ps0);
        if (entries2) {
          var ps1 = write_PropertySet(entries2, null, null);
          hdr.write_shift(16, clsid2, "hex");
          hdr.write_shift(4, 68 + ps0.length);
          bufs.push(ps1);
        }
        return bconcat(bufs);
      }
      function parsenoop2(blob, length) {
        blob.read_shift(length);
        return null;
      }
      function writezeroes(n, o) {
        if (!o)
          o = new_buf(n);
        for (var j = 0; j < n; ++j)
          o.write_shift(1, 0);
        return o;
      }
      function parslurp(blob, length, cb) {
        var arr = [], target = blob.l + length;
        while (blob.l < target)
          arr.push(cb(blob, target - blob.l));
        if (target !== blob.l)
          throw new Error("Slurp error");
        return arr;
      }
      function parsebool(blob, length) {
        return blob.read_shift(length) === 1;
      }
      function writebool(v, o) {
        if (!o)
          o = new_buf(2);
        o.write_shift(2, +!!v);
        return o;
      }
      function parseuint16(blob) {
        return blob.read_shift(2, "u");
      }
      function writeuint16(v, o) {
        if (!o)
          o = new_buf(2);
        o.write_shift(2, v);
        return o;
      }
      function parseuint16a(blob, length) {
        return parslurp(blob, length, parseuint16);
      }
      function parse_Bes(blob) {
        var v = blob.read_shift(1), t = blob.read_shift(1);
        return t === 1 ? v : v === 1;
      }
      function write_Bes(v, t, o) {
        if (!o)
          o = new_buf(2);
        o.write_shift(1, t == "e" ? +v : +!!v);
        o.write_shift(1, t == "e" ? 1 : 0);
        return o;
      }
      function parse_ShortXLUnicodeString(blob, length, opts) {
        var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
        var encoding = "sbcs-cont";
        var cp = current_codepage;
        if (opts && opts.biff >= 8)
          current_codepage = 1200;
        if (!opts || opts.biff == 8) {
          var fHighByte = blob.read_shift(1);
          if (fHighByte) {
            encoding = "dbcs-cont";
          }
        } else if (opts.biff == 12) {
          encoding = "wstr";
        }
        if (opts.biff >= 2 && opts.biff <= 5)
          encoding = "cpstr";
        var o = cch ? blob.read_shift(cch, encoding) : "";
        current_codepage = cp;
        return o;
      }
      function parse_XLUnicodeRichExtendedString(blob) {
        var cp = current_codepage;
        current_codepage = 1200;
        var cch = blob.read_shift(2), flags = blob.read_shift(1);
        var fExtSt = flags & 4, fRichSt = flags & 8;
        var width = 1 + (flags & 1);
        var cRun = 0, cbExtRst;
        var z = {};
        if (fRichSt)
          cRun = blob.read_shift(2);
        if (fExtSt)
          cbExtRst = blob.read_shift(4);
        var encoding = width == 2 ? "dbcs-cont" : "sbcs-cont";
        var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
        if (fRichSt)
          blob.l += 4 * cRun;
        if (fExtSt)
          blob.l += cbExtRst;
        z.t = msg;
        if (!fRichSt) {
          z.raw = "<t>" + z.t + "</t>";
          z.r = z.t;
        }
        current_codepage = cp;
        return z;
      }
      function write_XLUnicodeRichExtendedString(xlstr) {
        var str = xlstr.t || "", nfmts = 1;
        var hdr = new_buf(3 + (nfmts > 1 ? 2 : 0));
        hdr.write_shift(2, str.length);
        hdr.write_shift(1, (nfmts > 1 ? 8 : 0) | 1);
        if (nfmts > 1)
          hdr.write_shift(2, nfmts);
        var otext = new_buf(2 * str.length);
        otext.write_shift(2 * str.length, str, "utf16le");
        var out = [hdr, otext];
        return bconcat(out);
      }
      function parse_XLUnicodeStringNoCch(blob, cch, opts) {
        var retval;
        if (opts) {
          if (opts.biff >= 2 && opts.biff <= 5)
            return blob.read_shift(cch, "cpstr");
          if (opts.biff >= 12)
            return blob.read_shift(cch, "dbcs-cont");
        }
        var fHighByte = blob.read_shift(1);
        if (fHighByte === 0) {
          retval = blob.read_shift(cch, "sbcs-cont");
        } else {
          retval = blob.read_shift(cch, "dbcs-cont");
        }
        return retval;
      }
      function parse_XLUnicodeString(blob, length, opts) {
        var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        if (cch === 0) {
          blob.l++;
          return "";
        }
        return parse_XLUnicodeStringNoCch(blob, cch, opts);
      }
      function parse_XLUnicodeString2(blob, length, opts) {
        if (opts.biff > 5)
          return parse_XLUnicodeString(blob, length, opts);
        var cch = blob.read_shift(1);
        if (cch === 0) {
          blob.l++;
          return "";
        }
        return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? "cpstr" : "sbcs-cont");
      }
      function write_XLUnicodeString(str, opts, o) {
        if (!o)
          o = new_buf(3 + 2 * str.length);
        o.write_shift(2, str.length);
        o.write_shift(1, 1);
        o.write_shift(31, str, "utf16le");
        return o;
      }
      function parse_ControlInfo(blob) {
        var flags = blob.read_shift(1);
        blob.l++;
        var accel = blob.read_shift(2);
        blob.l += 2;
        return [flags, accel];
      }
      function parse_URLMoniker(blob) {
        var len = blob.read_shift(4), start = blob.l;
        var extra = false;
        if (len > 24) {
          blob.l += len - 24;
          if (blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763")
            extra = true;
          blob.l = start;
        }
        var url = blob.read_shift((extra ? len - 24 : len) >> 1, "utf16le").replace(chr0, "");
        if (extra)
          blob.l += 24;
        return url;
      }
      function parse_FileMoniker(blob) {
        var cAnti = blob.read_shift(2);
        var preamble = "";
        while (cAnti-- > 0)
          preamble += "../";
        var ansiPath = blob.read_shift(0, "lpstr-ansi");
        blob.l += 2;
        if (blob.read_shift(2) != 57005)
          throw new Error("Bad FileMoniker");
        var sz = blob.read_shift(4);
        if (sz === 0)
          return preamble + ansiPath.replace(/\\/g, "/");
        var bytes = blob.read_shift(4);
        if (blob.read_shift(2) != 3)
          throw new Error("Bad FileMoniker");
        var unicodePath = blob.read_shift(bytes >> 1, "utf16le").replace(chr0, "");
        return preamble + unicodePath;
      }
      function parse_HyperlinkMoniker(blob, length) {
        var clsid = blob.read_shift(16);
        length -= 16;
        switch (clsid) {
          case "e0c9ea79f9bace118c8200aa004ba90b":
            return parse_URLMoniker(blob, length);
          case "0303000000000000c000000000000046":
            return parse_FileMoniker(blob, length);
          default:
            throw new Error("Unsupported Moniker " + clsid);
        }
      }
      function parse_HyperlinkString(blob) {
        var len = blob.read_shift(4);
        var o = len > 0 ? blob.read_shift(len, "utf16le").replace(chr0, "") : "";
        return o;
      }
      function write_HyperlinkString(str, o) {
        if (!o)
          o = new_buf(6 + str.length * 2);
        o.write_shift(4, 1 + str.length);
        for (var i = 0; i < str.length; ++i)
          o.write_shift(2, str.charCodeAt(i));
        o.write_shift(2, 0);
        return o;
      }
      function parse_Hyperlink(blob, length) {
        var end = blob.l + length;
        var sVer = blob.read_shift(4);
        if (sVer !== 2)
          throw new Error("Unrecognized streamVersion: " + sVer);
        var flags = blob.read_shift(2);
        blob.l += 2;
        var displayName, targetFrameName, moniker, oleMoniker, Loc = "", guid, fileTime;
        if (flags & 16)
          displayName = parse_HyperlinkString(blob, end - blob.l);
        if (flags & 128)
          targetFrameName = parse_HyperlinkString(blob, end - blob.l);
        if ((flags & 257) === 257)
          moniker = parse_HyperlinkString(blob, end - blob.l);
        if ((flags & 257) === 1)
          oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
        if (flags & 8)
          Loc = parse_HyperlinkString(blob, end - blob.l);
        if (flags & 32)
          guid = blob.read_shift(16);
        if (flags & 64)
          fileTime = parse_FILETIME(blob);
        blob.l = end;
        var target = targetFrameName || moniker || oleMoniker || "";
        if (target && Loc)
          target += "#" + Loc;
        if (!target)
          target = "#" + Loc;
        if (flags & 2 && target.charAt(0) == "/" && target.charAt(1) != "/")
          target = "file://" + target;
        var out = { Target: target };
        if (guid)
          out.guid = guid;
        if (fileTime)
          out.time = fileTime;
        if (displayName)
          out.Tooltip = displayName;
        return out;
      }
      function write_Hyperlink(hl) {
        var out = new_buf(512), i = 0;
        var Target = hl.Target;
        if (Target.slice(0, 7) == "file://")
          Target = Target.slice(7);
        var hashidx = Target.indexOf("#");
        var F = hashidx > -1 ? 31 : 23;
        switch (Target.charAt(0)) {
          case "#":
            F = 28;
            break;
          case ".":
            F &= ~2;
            break;
        }
        out.write_shift(4, 2);
        out.write_shift(4, F);
        var data = [8, 6815827, 6619237, 4849780, 83];
        for (i = 0; i < data.length; ++i)
          out.write_shift(4, data[i]);
        if (F == 28) {
          Target = Target.slice(1);
          write_HyperlinkString(Target, out);
        } else if (F & 2) {
          data = "e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
          for (i = 0; i < data.length; ++i)
            out.write_shift(1, parseInt(data[i], 16));
          var Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;
          out.write_shift(4, 2 * (Pretarget.length + 1));
          for (i = 0; i < Pretarget.length; ++i)
            out.write_shift(2, Pretarget.charCodeAt(i));
          out.write_shift(2, 0);
          if (F & 8)
            write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx + 1) : "", out);
        } else {
          data = "03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46".split(" ");
          for (i = 0; i < data.length; ++i)
            out.write_shift(1, parseInt(data[i], 16));
          var P = 0;
          while (Target.slice(P * 3, P * 3 + 3) == "../" || Target.slice(P * 3, P * 3 + 3) == "..\\")
            ++P;
          out.write_shift(2, P);
          out.write_shift(4, Target.length - 3 * P + 1);
          for (i = 0; i < Target.length - 3 * P; ++i)
            out.write_shift(1, Target.charCodeAt(i + 3 * P) & 255);
          out.write_shift(1, 0);
          out.write_shift(2, 65535);
          out.write_shift(2, 57005);
          for (i = 0; i < 6; ++i)
            out.write_shift(4, 0);
        }
        return out.slice(0, out.l);
      }
      function parse_LongRGBA(blob) {
        var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1);
        return [r, g, b, a];
      }
      function parse_LongRGB(blob, length) {
        var x = parse_LongRGBA(blob, length);
        x[3] = 0;
        return x;
      }
      function parse_XLSCell(blob) {
        var rw = blob.read_shift(2);
        var col = blob.read_shift(2);
        var ixfe = blob.read_shift(2);
        return { r: rw, c: col, ixfe };
      }
      function write_XLSCell(R, C, ixfe, o) {
        if (!o)
          o = new_buf(6);
        o.write_shift(2, R);
        o.write_shift(2, C);
        o.write_shift(2, ixfe || 0);
        return o;
      }
      function parse_frtHeader(blob) {
        var rt = blob.read_shift(2);
        var flags = blob.read_shift(2);
        blob.l += 8;
        return { type: rt, flags };
      }
      function parse_OptXLUnicodeString(blob, length, opts) {
        return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts);
      }
      function parse_XTI(blob, length, opts) {
        var w = opts.biff > 8 ? 4 : 2;
        var iSupBook = blob.read_shift(w), itabFirst = blob.read_shift(w, "i"), itabLast = blob.read_shift(w, "i");
        return [iSupBook, itabFirst, itabLast];
      }
      function parse_RkRec(blob) {
        var ixfe = blob.read_shift(2);
        var RK = parse_RkNumber(blob);
        return [ixfe, RK];
      }
      function parse_AddinUdf(blob, length, opts) {
        blob.l += 4;
        length -= 4;
        var l = blob.l + length;
        var udfName = parse_ShortXLUnicodeString(blob, length, opts);
        var cb = blob.read_shift(2);
        l -= blob.l;
        if (cb !== l)
          throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
        blob.l += cb;
        return udfName;
      }
      function parse_Ref8U(blob) {
        var rwFirst = blob.read_shift(2);
        var rwLast = blob.read_shift(2);
        var colFirst = blob.read_shift(2);
        var colLast = blob.read_shift(2);
        return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
      }
      function write_Ref8U(r, o) {
        if (!o)
          o = new_buf(8);
        o.write_shift(2, r.s.r);
        o.write_shift(2, r.e.r);
        o.write_shift(2, r.s.c);
        o.write_shift(2, r.e.c);
        return o;
      }
      function parse_RefU(blob) {
        var rwFirst = blob.read_shift(2);
        var rwLast = blob.read_shift(2);
        var colFirst = blob.read_shift(1);
        var colLast = blob.read_shift(1);
        return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
      }
      var parse_Ref = parse_RefU;
      function parse_FtCmo(blob) {
        blob.l += 4;
        var ot = blob.read_shift(2);
        var id = blob.read_shift(2);
        var flags = blob.read_shift(2);
        blob.l += 12;
        return [id, ot, flags];
      }
      function parse_FtNts(blob) {
        var out = {};
        blob.l += 4;
        blob.l += 16;
        out.fSharedNote = blob.read_shift(2);
        blob.l += 4;
        return out;
      }
      function parse_FtCf(blob) {
        var out = {};
        blob.l += 4;
        blob.cf = blob.read_shift(2);
        return out;
      }
      function parse_FtSkip(blob) {
        blob.l += 2;
        blob.l += blob.read_shift(2);
      }
      var FtTab = {
        0: parse_FtSkip,
        4: parse_FtSkip,
        5: parse_FtSkip,
        6: parse_FtSkip,
        7: parse_FtCf,
        8: parse_FtSkip,
        9: parse_FtSkip,
        10: parse_FtSkip,
        11: parse_FtSkip,
        12: parse_FtSkip,
        13: parse_FtNts,
        14: parse_FtSkip,
        15: parse_FtSkip,
        16: parse_FtSkip,
        17: parse_FtSkip,
        18: parse_FtSkip,
        19: parse_FtSkip,
        20: parse_FtSkip,
        21: parse_FtCmo
      };
      function parse_FtArray(blob, length) {
        var tgt = blob.l + length;
        var fts = [];
        while (blob.l < tgt) {
          var ft = blob.read_shift(2);
          blob.l -= 2;
          try {
            fts.push(FtTab[ft](blob, tgt - blob.l));
          } catch (e) {
            blob.l = tgt;
            return fts;
          }
        }
        if (blob.l != tgt)
          blob.l = tgt;
        return fts;
      }
      function parse_BOF(blob, length) {
        var o = { BIFFVer: 0, dt: 0 };
        o.BIFFVer = blob.read_shift(2);
        length -= 2;
        if (length >= 2) {
          o.dt = blob.read_shift(2);
          blob.l -= 2;
        }
        switch (o.BIFFVer) {
          case 1536:
          case 1280:
          case 1024:
          case 768:
          case 512:
          case 2:
          case 7:
            break;
          default:
            if (length > 6)
              throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
        }
        blob.read_shift(length);
        return o;
      }
      function write_BOF(wb, t, o) {
        var h = 1536, w = 16;
        switch (o.bookType) {
          case "biff8":
            break;
          case "biff5":
            h = 1280;
            w = 8;
            break;
          case "biff4":
            h = 4;
            w = 6;
            break;
          case "biff3":
            h = 3;
            w = 6;
            break;
          case "biff2":
            h = 2;
            w = 4;
            break;
          case "xla":
            break;
          default:
            throw new Error("unsupported BIFF version");
        }
        var out = new_buf(w);
        out.write_shift(2, h);
        out.write_shift(2, t);
        if (w > 4)
          out.write_shift(2, 29282);
        if (w > 6)
          out.write_shift(2, 1997);
        if (w > 8) {
          out.write_shift(2, 49161);
          out.write_shift(2, 1);
          out.write_shift(2, 1798);
          out.write_shift(2, 0);
        }
        return out;
      }
      function parse_InterfaceHdr(blob, length) {
        if (length === 0)
          return 1200;
        if (blob.read_shift(2) !== 1200) {
        }
        return 1200;
      }
      function parse_WriteAccess(blob, length, opts) {
        if (opts.enc) {
          blob.l += length;
          return "";
        }
        var l = blob.l;
        var UserName = parse_XLUnicodeString2(blob, 0, opts);
        blob.read_shift(length + l - blob.l);
        return UserName;
      }
      function write_WriteAccess(s, opts) {
        var b8 = !opts || opts.biff == 8;
        var o = new_buf(b8 ? 112 : 54);
        o.write_shift(opts.biff == 8 ? 2 : 1, 7);
        if (b8)
          o.write_shift(1, 0);
        o.write_shift(4, 859007059);
        o.write_shift(4, 5458548 | (b8 ? 0 : 536870912));
        while (o.l < o.length)
          o.write_shift(1, b8 ? 0 : 32);
        return o;
      }
      function parse_WsBool(blob, length, opts) {
        var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
        return { fDialog: flags & 16, fBelow: flags & 64, fRight: flags & 128 };
      }
      function parse_BoundSheet8(blob, length, opts) {
        var pos = blob.read_shift(4);
        var hidden = blob.read_shift(1) & 3;
        var dt = blob.read_shift(1);
        switch (dt) {
          case 0:
            dt = "Worksheet";
            break;
          case 1:
            dt = "Macrosheet";
            break;
          case 2:
            dt = "Chartsheet";
            break;
          case 6:
            dt = "VBAModule";
            break;
        }
        var name = parse_ShortXLUnicodeString(blob, 0, opts);
        if (name.length === 0)
          name = "Sheet1";
        return { pos, hs: hidden, dt, name };
      }
      function write_BoundSheet8(data, opts) {
        var w = !opts || opts.biff >= 8 ? 2 : 1;
        var o = new_buf(8 + w * data.name.length);
        o.write_shift(4, data.pos);
        o.write_shift(1, data.hs || 0);
        o.write_shift(1, data.dt);
        o.write_shift(1, data.name.length);
        if (opts.biff >= 8)
          o.write_shift(1, 1);
        o.write_shift(w * data.name.length, data.name, opts.biff < 8 ? "sbcs" : "utf16le");
        var out = o.slice(0, o.l);
        out.l = o.l;
        return out;
      }
      function parse_SST(blob, length) {
        var end = blob.l + length;
        var cnt = blob.read_shift(4);
        var ucnt = blob.read_shift(4);
        var strs2 = [];
        for (var i = 0; i != ucnt && blob.l < end; ++i) {
          strs2.push(parse_XLUnicodeRichExtendedString(blob));
        }
        strs2.Count = cnt;
        strs2.Unique = ucnt;
        return strs2;
      }
      function write_SST(sst, opts) {
        var header = new_buf(8);
        header.write_shift(4, sst.Count);
        header.write_shift(4, sst.Unique);
        var strs2 = [];
        for (var j = 0; j < sst.length; ++j)
          strs2[j] = write_XLUnicodeRichExtendedString(sst[j], opts);
        var o = bconcat([header].concat(strs2));
        o.parts = [header.length].concat(strs2.map(function(str) {
          return str.length;
        }));
        return o;
      }
      function parse_ExtSST(blob, length) {
        var extsst = {};
        extsst.dsst = blob.read_shift(2);
        blob.l += length - 2;
        return extsst;
      }
      function parse_Row(blob) {
        var z = {};
        z.r = blob.read_shift(2);
        z.c = blob.read_shift(2);
        z.cnt = blob.read_shift(2) - z.c;
        var miyRw = blob.read_shift(2);
        blob.l += 4;
        var flags = blob.read_shift(1);
        blob.l += 3;
        if (flags & 7)
          z.level = flags & 7;
        if (flags & 32)
          z.hidden = true;
        if (flags & 64)
          z.hpt = miyRw / 20;
        return z;
      }
      function parse_ForceFullCalculation(blob) {
        var header = parse_frtHeader(blob);
        if (header.type != 2211)
          throw new Error("Invalid Future Record " + header.type);
        var fullcalc = blob.read_shift(4);
        return fullcalc !== 0;
      }
      function parse_RecalcId(blob) {
        blob.read_shift(2);
        return blob.read_shift(4);
      }
      function parse_DefaultRowHeight(blob, length, opts) {
        var f = 0;
        if (!(opts && opts.biff == 2)) {
          f = blob.read_shift(2);
        }
        var miyRw = blob.read_shift(2);
        if (opts && opts.biff == 2) {
          f = 1 - (miyRw >> 15);
          miyRw &= 32767;
        }
        var fl = { Unsynced: f & 1, DyZero: (f & 2) >> 1, ExAsc: (f & 4) >> 2, ExDsc: (f & 8) >> 3 };
        return [fl, miyRw];
      }
      function parse_Window1(blob) {
        var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
        var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
        var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
        return {
          Pos: [xWn, yWn],
          Dim: [dxWn, dyWn],
          Flags: flags,
          CurTab: iTabCur,
          FirstTab: iTabFirst,
          Selected: ctabSel,
          TabRatio: wTabRatio
        };
      }
      function write_Window1() {
        var o = new_buf(18);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 29280);
        o.write_shift(2, 17600);
        o.write_shift(2, 56);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 1);
        o.write_shift(2, 500);
        return o;
      }
      function parse_Window2(blob, length, opts) {
        if (opts && opts.biff >= 2 && opts.biff < 5)
          return {};
        var f = blob.read_shift(2);
        return { RTL: f & 64 };
      }
      function write_Window2(view) {
        var o = new_buf(18), f = 1718;
        if (view && view.RTL)
          f |= 64;
        o.write_shift(2, f);
        o.write_shift(4, 0);
        o.write_shift(4, 64);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        return o;
      }
      function parse_Pane() {
      }
      function parse_Font(blob, length, opts) {
        var o = {
          dyHeight: blob.read_shift(2),
          fl: blob.read_shift(2)
        };
        switch (opts && opts.biff || 8) {
          case 2:
            break;
          case 3:
          case 4:
            blob.l += 2;
            break;
          default:
            blob.l += 10;
            break;
        }
        o.name = parse_ShortXLUnicodeString(blob, 0, opts);
        return o;
      }
      function write_Font(data, opts) {
        var name = data.name || "Arial";
        var b5 = opts && opts.biff == 5, w = b5 ? 15 + name.length : 16 + 2 * name.length;
        var o = new_buf(w);
        o.write_shift(2, (data.sz || 12) * 20);
        o.write_shift(4, 0);
        o.write_shift(2, 400);
        o.write_shift(4, 0);
        o.write_shift(2, 0);
        o.write_shift(1, name.length);
        if (!b5)
          o.write_shift(1, 1);
        o.write_shift((b5 ? 1 : 2) * name.length, name, b5 ? "sbcs" : "utf16le");
        return o;
      }
      function parse_LabelSst(blob) {
        var cell = parse_XLSCell(blob);
        cell.isst = blob.read_shift(4);
        return cell;
      }
      function write_LabelSst(R, C, v, os) {
        var o = new_buf(10);
        write_XLSCell(R, C, os, o);
        o.write_shift(4, v);
        return o;
      }
      function parse_Label(blob, length, opts) {
        if (opts.biffguess && opts.biff == 2)
          opts.biff = 5;
        var target = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        if (opts.biff == 2)
          blob.l++;
        var str = parse_XLUnicodeString(blob, target - blob.l, opts);
        cell.val = str;
        return cell;
      }
      function write_Label(R, C, v, os, opts) {
        var b8 = !opts || opts.biff == 8;
        var o = new_buf(6 + 2 + +b8 + (1 + b8) * v.length);
        write_XLSCell(R, C, os, o);
        o.write_shift(2, v.length);
        if (b8)
          o.write_shift(1, 1);
        o.write_shift((1 + b8) * v.length, v, b8 ? "utf16le" : "sbcs");
        return o;
      }
      function parse_Format(blob, length, opts) {
        var numFmtId = blob.read_shift(2);
        var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
        return [numFmtId, fmtstr];
      }
      function write_Format(i, f, opts, o) {
        var b5 = opts && opts.biff == 5;
        if (!o)
          o = new_buf(b5 ? 3 + f.length : 5 + 2 * f.length);
        o.write_shift(2, i);
        o.write_shift(b5 ? 1 : 2, f.length);
        if (!b5)
          o.write_shift(1, 1);
        o.write_shift((b5 ? 1 : 2) * f.length, f, b5 ? "sbcs" : "utf16le");
        var out = o.length > o.l ? o.slice(0, o.l) : o;
        if (out.l == null)
          out.l = out.length;
        return out;
      }
      var parse_BIFF2Format = parse_XLUnicodeString2;
      function parse_Dimensions(blob, length, opts) {
        var end = blob.l + length;
        var w = opts.biff == 8 || !opts.biff ? 4 : 2;
        var r = blob.read_shift(w), R = blob.read_shift(w);
        var c = blob.read_shift(2), C = blob.read_shift(2);
        blob.l = end;
        return { s: { r, c }, e: { r: R, c: C } };
      }
      function write_Dimensions(range, opts) {
        var w = opts.biff == 8 || !opts.biff ? 4 : 2;
        var o = new_buf(2 * w + 6);
        o.write_shift(w, range.s.r);
        o.write_shift(w, range.e.r + 1);
        o.write_shift(2, range.s.c);
        o.write_shift(2, range.e.c + 1);
        o.write_shift(2, 0);
        return o;
      }
      function parse_RK(blob) {
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var rkrec = parse_RkRec(blob);
        return { r: rw, c: col, ixfe: rkrec[0], rknum: rkrec[1] };
      }
      function parse_MulRk(blob, length) {
        var target = blob.l + length - 2;
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var rkrecs = [];
        while (blob.l < target)
          rkrecs.push(parse_RkRec(blob));
        if (blob.l !== target)
          throw new Error("MulRK read error");
        var lastcol = blob.read_shift(2);
        if (rkrecs.length != lastcol - col + 1)
          throw new Error("MulRK length mismatch");
        return { r: rw, c: col, C: lastcol, rkrec: rkrecs };
      }
      function parse_MulBlank(blob, length) {
        var target = blob.l + length - 2;
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var ixfes = [];
        while (blob.l < target)
          ixfes.push(blob.read_shift(2));
        if (blob.l !== target)
          throw new Error("MulBlank read error");
        var lastcol = blob.read_shift(2);
        if (ixfes.length != lastcol - col + 1)
          throw new Error("MulBlank length mismatch");
        return { r: rw, c: col, C: lastcol, ixfe: ixfes };
      }
      function parse_CellStyleXF(blob, length, style, opts) {
        var o = {};
        var a = blob.read_shift(4), b = blob.read_shift(4);
        var c = blob.read_shift(4), d = blob.read_shift(2);
        o.patternType = XLSFillPattern[c >> 26];
        if (!opts.cellStyles)
          return o;
        o.alc = a & 7;
        o.fWrap = a >> 3 & 1;
        o.alcV = a >> 4 & 7;
        o.fJustLast = a >> 7 & 1;
        o.trot = a >> 8 & 255;
        o.cIndent = a >> 16 & 15;
        o.fShrinkToFit = a >> 20 & 1;
        o.iReadOrder = a >> 22 & 2;
        o.fAtrNum = a >> 26 & 1;
        o.fAtrFnt = a >> 27 & 1;
        o.fAtrAlc = a >> 28 & 1;
        o.fAtrBdr = a >> 29 & 1;
        o.fAtrPat = a >> 30 & 1;
        o.fAtrProt = a >> 31 & 1;
        o.dgLeft = b & 15;
        o.dgRight = b >> 4 & 15;
        o.dgTop = b >> 8 & 15;
        o.dgBottom = b >> 12 & 15;
        o.icvLeft = b >> 16 & 127;
        o.icvRight = b >> 23 & 127;
        o.grbitDiag = b >> 30 & 3;
        o.icvTop = c & 127;
        o.icvBottom = c >> 7 & 127;
        o.icvDiag = c >> 14 & 127;
        o.dgDiag = c >> 21 & 15;
        o.icvFore = d & 127;
        o.icvBack = d >> 7 & 127;
        o.fsxButton = d >> 14 & 1;
        return o;
      }
      function parse_XF(blob, length, opts) {
        var o = {};
        o.ifnt = blob.read_shift(2);
        o.numFmtId = blob.read_shift(2);
        o.flags = blob.read_shift(2);
        o.fStyle = o.flags >> 2 & 1;
        length -= 6;
        o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
        return o;
      }
      function write_XF(data, ixfeP, opts, o) {
        var b5 = opts && opts.biff == 5;
        if (!o)
          o = new_buf(b5 ? 16 : 20);
        o.write_shift(2, 0);
        if (data.style) {
          o.write_shift(2, data.numFmtId || 0);
          o.write_shift(2, 65524);
        } else {
          o.write_shift(2, data.numFmtId || 0);
          o.write_shift(2, ixfeP << 4);
        }
        var f = 0;
        if (data.numFmtId > 0 && b5)
          f |= 1024;
        o.write_shift(4, f);
        o.write_shift(4, 0);
        if (!b5)
          o.write_shift(4, 0);
        o.write_shift(2, 0);
        return o;
      }
      function parse_Guts(blob) {
        blob.l += 4;
        var out = [blob.read_shift(2), blob.read_shift(2)];
        if (out[0] !== 0)
          out[0]--;
        if (out[1] !== 0)
          out[1]--;
        if (out[0] > 7 || out[1] > 7)
          throw new Error("Bad Gutters: " + out.join("|"));
        return out;
      }
      function write_Guts(guts) {
        var o = new_buf(8);
        o.write_shift(4, 0);
        o.write_shift(2, guts[0] ? guts[0] + 1 : 0);
        o.write_shift(2, guts[1] ? guts[1] + 1 : 0);
        return o;
      }
      function parse_BoolErr(blob, length, opts) {
        var cell = parse_XLSCell(blob, 6);
        if (opts.biff == 2 || length == 9)
          ++blob.l;
        var val = parse_Bes(blob, 2);
        cell.val = val;
        cell.t = val === true || val === false ? "b" : "e";
        return cell;
      }
      function write_BoolErr(R, C, v, os, opts, t) {
        var o = new_buf(8);
        write_XLSCell(R, C, os, o);
        write_Bes(v, t, o);
        return o;
      }
      function parse_Number(blob, length, opts) {
        if (opts.biffguess && opts.biff == 2)
          opts.biff = 5;
        var cell = parse_XLSCell(blob, 6);
        var xnum = parse_Xnum(blob, 8);
        cell.val = xnum;
        return cell;
      }
      function write_Number(R, C, v, os) {
        var o = new_buf(14);
        write_XLSCell(R, C, os, o);
        write_Xnum(v, o);
        return o;
      }
      var parse_XLHeaderFooter = parse_OptXLUnicodeString;
      function parse_SupBook(blob, length, opts) {
        var end = blob.l + length;
        var ctab = blob.read_shift(2);
        var cch = blob.read_shift(2);
        opts.sbcch = cch;
        if (cch == 1025 || cch == 14849)
          return [cch, ctab];
        if (cch < 1 || cch > 255)
          throw new Error("Unexpected SupBook type: " + cch);
        var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
        var rgst = [];
        while (end > blob.l)
          rgst.push(parse_XLUnicodeString(blob));
        return [cch, ctab, virtPath, rgst];
      }
      function parse_ExternName(blob, length, opts) {
        var flags = blob.read_shift(2);
        var body;
        var o = {
          fBuiltIn: flags & 1,
          fWantAdvise: flags >>> 1 & 1,
          fWantPict: flags >>> 2 & 1,
          fOle: flags >>> 3 & 1,
          fOleLink: flags >>> 4 & 1,
          cf: flags >>> 5 & 1023,
          fIcon: flags >>> 15 & 1
        };
        if (opts.sbcch === 14849)
          body = parse_AddinUdf(blob, length - 2, opts);
        o.body = body || blob.read_shift(length - 2);
        if (typeof body === "string")
          o.Name = body;
        return o;
      }
      var XLSLblBuiltIn = [
        "_xlnm.Consolidate_Area",
        "_xlnm.Auto_Open",
        "_xlnm.Auto_Close",
        "_xlnm.Extract",
        "_xlnm.Database",
        "_xlnm.Criteria",
        "_xlnm.Print_Area",
        "_xlnm.Print_Titles",
        "_xlnm.Recorder",
        "_xlnm.Data_Form",
        "_xlnm.Auto_Activate",
        "_xlnm.Auto_Deactivate",
        "_xlnm.Sheet_Title",
        "_xlnm._FilterDatabase"
      ];
      function parse_Lbl(blob, length, opts) {
        var target = blob.l + length;
        var flags = blob.read_shift(2);
        var chKey = blob.read_shift(1);
        var cch = blob.read_shift(1);
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        var itab = 0;
        if (!opts || opts.biff >= 5) {
          if (opts.biff != 5)
            blob.l += 2;
          itab = blob.read_shift(2);
          if (opts.biff == 5)
            blob.l += 2;
          blob.l += 4;
        }
        var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
        if (flags & 32)
          name = XLSLblBuiltIn[name.charCodeAt(0)];
        var npflen = target - blob.l;
        if (opts && opts.biff == 2)
          --npflen;
        var rgce = target == blob.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
        return {
          chKey,
          Name: name,
          itab,
          rgce
        };
      }
      function parse_ExternSheet(blob, length, opts) {
        if (opts.biff < 8)
          return parse_BIFF5ExternSheet(blob, length, opts);
        var o = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
        while (len-- !== 0)
          o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
        if (blob.l != target)
          throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
        return o;
      }
      function parse_BIFF5ExternSheet(blob, length, opts) {
        if (blob[blob.l + 1] == 3)
          blob[blob.l]++;
        var o = parse_ShortXLUnicodeString(blob, length, opts);
        return o.charCodeAt(0) == 3 ? o.slice(1) : o;
      }
      function parse_NameCmt(blob, length, opts) {
        if (opts.biff < 8) {
          blob.l += length;
          return;
        }
        var cchName = blob.read_shift(2);
        var cchComment = blob.read_shift(2);
        var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
        var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
        return [name, comment];
      }
      function parse_ShrFmla(blob, length, opts) {
        var ref = parse_RefU(blob, 6);
        blob.l++;
        var cUse = blob.read_shift(1);
        length -= 8;
        return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
      }
      function parse_Array(blob, length, opts) {
        var ref = parse_Ref(blob, 6);
        switch (opts.biff) {
          case 2:
            blob.l++;
            length -= 7;
            break;
          case 3:
          case 4:
            blob.l += 2;
            length -= 8;
            break;
          default:
            blob.l += 6;
            length -= 12;
        }
        return [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];
      }
      function parse_MTRSettings(blob) {
        var fMTREnabled = blob.read_shift(4) !== 0;
        var fUserSetThreadCount = blob.read_shift(4) !== 0;
        var cUserThreadCount = blob.read_shift(4);
        return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
      }
      function parse_NoteSh(blob, length, opts) {
        if (opts.biff < 8)
          return;
        var row = blob.read_shift(2), col = blob.read_shift(2);
        var flags = blob.read_shift(2), idObj = blob.read_shift(2);
        var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
        if (opts.biff < 8)
          blob.read_shift(1);
        return [{ r: row, c: col }, stAuthor, idObj, flags];
      }
      function parse_Note(blob, length, opts) {
        return parse_NoteSh(blob, length, opts);
      }
      function parse_MergeCells(blob, length) {
        var merges = [];
        var cmcs = blob.read_shift(2);
        while (cmcs--)
          merges.push(parse_Ref8U(blob, length));
        return merges;
      }
      function write_MergeCells(merges) {
        var o = new_buf(2 + merges.length * 8);
        o.write_shift(2, merges.length);
        for (var i = 0; i < merges.length; ++i)
          write_Ref8U(merges[i], o);
        return o;
      }
      function parse_Obj(blob, length, opts) {
        if (opts && opts.biff < 8)
          return parse_BIFF5Obj(blob, length, opts);
        var cmo = parse_FtCmo(blob, 22);
        var fts = parse_FtArray(blob, length - 22, cmo[1]);
        return { cmo, ft: fts };
      }
      var parse_BIFF5OT = {
        8: function(blob, length) {
          var tgt = blob.l + length;
          blob.l += 10;
          var cf = blob.read_shift(2);
          blob.l += 4;
          blob.l += 2;
          blob.l += 2;
          blob.l += 2;
          blob.l += 4;
          var cchName = blob.read_shift(1);
          blob.l += cchName;
          blob.l = tgt;
          return { fmt: cf };
        }
      };
      function parse_BIFF5Obj(blob, length, opts) {
        blob.l += 4;
        var ot = blob.read_shift(2);
        var id = blob.read_shift(2);
        var grbit = blob.read_shift(2);
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 6;
        length -= 36;
        var fts = [];
        fts.push((parse_BIFF5OT[ot] || parsenoop)(blob, length, opts));
        return { cmo: [id, ot, grbit], ft: fts };
      }
      function parse_TxO(blob, length, opts) {
        var s = blob.l;
        var texts = "";
        try {
          blob.l += 4;
          var ot = (opts.lastobj || { cmo: [0, 0] }).cmo[1];
          var controlInfo;
          if ([0, 5, 7, 11, 12, 14].indexOf(ot) == -1)
            blob.l += 6;
          else
            controlInfo = parse_ControlInfo(blob, 6, opts);
          var cchText = blob.read_shift(2);
          blob.read_shift(2);
          parseuint16(blob, 2);
          var len = blob.read_shift(2);
          blob.l += len;
          for (var i = 1; i < blob.lens.length - 1; ++i) {
            if (blob.l - s != blob.lens[i])
              throw new Error("TxO: bad continue record");
            var hdr = blob[blob.l];
            var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i + 1] - blob.lens[i] - 1);
            texts += t;
            if (texts.length >= (hdr ? cchText : 2 * cchText))
              break;
          }
          if (texts.length !== cchText && texts.length !== cchText * 2) {
            throw new Error("cchText: " + cchText + " != " + texts.length);
          }
          blob.l = s + length;
          return { t: texts };
        } catch (e) {
          blob.l = s + length;
          return { t: texts };
        }
      }
      function parse_HLink(blob, length) {
        var ref = parse_Ref8U(blob, 8);
        blob.l += 16;
        var hlink = parse_Hyperlink(blob, length - 24);
        return [ref, hlink];
      }
      function write_HLink(hl) {
        var O = new_buf(24);
        var ref = decode_cell(hl[0]);
        O.write_shift(2, ref.r);
        O.write_shift(2, ref.r);
        O.write_shift(2, ref.c);
        O.write_shift(2, ref.c);
        var clsid = "d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
        for (var i = 0; i < 16; ++i)
          O.write_shift(1, parseInt(clsid[i], 16));
        return bconcat([O, write_Hyperlink(hl[1])]);
      }
      function parse_HLinkTooltip(blob, length) {
        blob.read_shift(2);
        var ref = parse_Ref8U(blob, 8);
        var wzTooltip = blob.read_shift((length - 10) / 2, "dbcs-cont");
        wzTooltip = wzTooltip.replace(chr0, "");
        return [ref, wzTooltip];
      }
      function write_HLinkTooltip(hl) {
        var TT = hl[1].Tooltip;
        var O = new_buf(10 + 2 * (TT.length + 1));
        O.write_shift(2, 2048);
        var ref = decode_cell(hl[0]);
        O.write_shift(2, ref.r);
        O.write_shift(2, ref.r);
        O.write_shift(2, ref.c);
        O.write_shift(2, ref.c);
        for (var i = 0; i < TT.length; ++i)
          O.write_shift(2, TT.charCodeAt(i));
        O.write_shift(2, 0);
        return O;
      }
      function parse_Country(blob) {
        var o = [0, 0], d;
        d = blob.read_shift(2);
        o[0] = CountryEnum[d] || d;
        d = blob.read_shift(2);
        o[1] = CountryEnum[d] || d;
        return o;
      }
      function write_Country(o) {
        if (!o)
          o = new_buf(4);
        o.write_shift(2, 1);
        o.write_shift(2, 1);
        return o;
      }
      function parse_ClrtClient(blob) {
        var ccv = blob.read_shift(2);
        var o = [];
        while (ccv-- > 0)
          o.push(parse_LongRGB(blob, 8));
        return o;
      }
      function parse_Palette(blob) {
        var ccv = blob.read_shift(2);
        var o = [];
        while (ccv-- > 0)
          o.push(parse_LongRGB(blob, 8));
        return o;
      }
      function parse_XFCRC(blob) {
        blob.l += 2;
        var o = { cxfs: 0, crc: 0 };
        o.cxfs = blob.read_shift(2);
        o.crc = blob.read_shift(4);
        return o;
      }
      function parse_ColInfo(blob, length, opts) {
        if (!opts.cellStyles)
          return parsenoop(blob, length);
        var w = opts && opts.biff >= 12 ? 4 : 2;
        var colFirst = blob.read_shift(w);
        var colLast = blob.read_shift(w);
        var coldx = blob.read_shift(w);
        var ixfe = blob.read_shift(w);
        var flags = blob.read_shift(2);
        if (w == 2)
          blob.l += 2;
        var o = { s: colFirst, e: colLast, w: coldx, ixfe, flags };
        if (opts.biff >= 5 || !opts.biff)
          o.level = flags >> 8 & 7;
        return o;
      }
      function write_ColInfo(col, idx) {
        var o = new_buf(12);
        o.write_shift(2, idx);
        o.write_shift(2, idx);
        o.write_shift(2, col.width * 256);
        o.write_shift(2, 0);
        var f = 0;
        if (col.hidden)
          f |= 1;
        o.write_shift(1, f);
        f = col.level || 0;
        o.write_shift(1, f);
        o.write_shift(2, 0);
        return o;
      }
      function parse_Setup(blob, length) {
        var o = {};
        if (length < 32)
          return o;
        blob.l += 16;
        o.header = parse_Xnum(blob, 8);
        o.footer = parse_Xnum(blob, 8);
        blob.l += 2;
        return o;
      }
      function parse_ShtProps(blob, length, opts) {
        var def = { area: false };
        if (opts.biff != 5) {
          blob.l += length;
          return def;
        }
        var d = blob.read_shift(1);
        blob.l += 3;
        if (d & 16)
          def.area = true;
        return def;
      }
      function write_RRTabId(n) {
        var out = new_buf(2 * n);
        for (var i = 0; i < n; ++i)
          out.write_shift(2, i + 1);
        return out;
      }
      var parse_Blank = parse_XLSCell;
      var parse_Scl = parseuint16a;
      var parse_String = parse_XLUnicodeString;
      function parse_ImData(blob) {
        var cf = blob.read_shift(2);
        var env = blob.read_shift(2);
        var lcb = blob.read_shift(4);
        var o = { fmt: cf, env, len: lcb, data: blob.slice(blob.l, blob.l + lcb) };
        blob.l += lcb;
        return o;
      }
      function parse_BIFF2STR(blob, length, opts) {
        if (opts.biffguess && opts.biff == 5)
          opts.biff = 2;
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var str = parse_XLUnicodeString2(blob, length - 7, opts);
        cell.t = "str";
        cell.val = str;
        return cell;
      }
      function parse_BIFF2NUM(blob) {
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var num = parse_Xnum(blob, 8);
        cell.t = "n";
        cell.val = num;
        return cell;
      }
      function write_BIFF2NUM(r, c, val) {
        var out = new_buf(15);
        write_BIFF2Cell(out, r, c);
        out.write_shift(8, val, "f");
        return out;
      }
      function parse_BIFF2INT(blob) {
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var num = blob.read_shift(2);
        cell.t = "n";
        cell.val = num;
        return cell;
      }
      function write_BIFF2INT(r, c, val) {
        var out = new_buf(9);
        write_BIFF2Cell(out, r, c);
        out.write_shift(2, val);
        return out;
      }
      function parse_BIFF2STRING(blob) {
        var cch = blob.read_shift(1);
        if (cch === 0) {
          blob.l++;
          return "";
        }
        return blob.read_shift(cch, "sbcs-cont");
      }
      function parse_BIFF2FONTXTRA(blob, length) {
        blob.l += 6;
        blob.l += 2;
        blob.l += 1;
        blob.l += 3;
        blob.l += 1;
        blob.l += length - 13;
      }
      function parse_RString(blob, length, opts) {
        var end = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        var cch = blob.read_shift(2);
        var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
        blob.l = end;
        cell.t = "str";
        cell.val = str;
        return cell;
      }
      var DBF_SUPPORTED_VERSIONS = [2, 3, 48, 49, 131, 139, 140, 245];
      var DBF = function() {
        var dbf_codepage_map = {
          1: 437,
          2: 850,
          3: 1252,
          4: 1e4,
          100: 852,
          101: 866,
          102: 865,
          103: 861,
          104: 895,
          105: 620,
          106: 737,
          107: 857,
          120: 950,
          121: 949,
          122: 936,
          123: 932,
          124: 874,
          125: 1255,
          126: 1256,
          150: 10007,
          151: 10029,
          152: 10006,
          200: 1250,
          201: 1251,
          202: 1254,
          203: 1253,
          0: 20127,
          8: 865,
          9: 437,
          10: 850,
          11: 437,
          13: 437,
          14: 850,
          15: 437,
          16: 850,
          17: 437,
          18: 850,
          19: 932,
          20: 850,
          21: 437,
          22: 850,
          23: 865,
          24: 437,
          25: 437,
          26: 850,
          27: 437,
          28: 863,
          29: 850,
          31: 852,
          34: 852,
          35: 852,
          36: 860,
          37: 850,
          38: 866,
          55: 850,
          64: 852,
          77: 936,
          78: 949,
          79: 950,
          80: 874,
          87: 1252,
          88: 1252,
          89: 1252,
          108: 863,
          134: 737,
          135: 852,
          136: 857,
          204: 1257,
          255: 16969
        };
        var dbf_reverse_map = evert({
          1: 437,
          2: 850,
          3: 1252,
          4: 1e4,
          100: 852,
          101: 866,
          102: 865,
          103: 861,
          104: 895,
          105: 620,
          106: 737,
          107: 857,
          120: 950,
          121: 949,
          122: 936,
          123: 932,
          124: 874,
          125: 1255,
          126: 1256,
          150: 10007,
          151: 10029,
          152: 10006,
          200: 1250,
          201: 1251,
          202: 1254,
          203: 1253,
          0: 20127
        });
        function dbf_to_aoa(buf, opts) {
          var out = [];
          var d = new_raw_buf(1);
          switch (opts.type) {
            case "base64":
              d = s2a(Base64_decode(buf));
              break;
            case "binary":
              d = s2a(buf);
              break;
            case "buffer":
            case "array":
              d = buf;
              break;
          }
          prep_blob(d, 0);
          var ft = d.read_shift(1);
          var memo = !!(ft & 136);
          var vfp = false, l7 = false;
          switch (ft) {
            case 2:
              break;
            case 3:
              break;
            case 48:
              vfp = true;
              memo = true;
              break;
            case 49:
              vfp = true;
              memo = true;
              break;
            case 131:
              break;
            case 139:
              break;
            case 140:
              l7 = true;
              break;
            case 245:
              break;
            default:
              throw new Error("DBF Unsupported Version: " + ft.toString(16));
          }
          var nrow = 0, fpos = 521;
          if (ft == 2)
            nrow = d.read_shift(2);
          d.l += 3;
          if (ft != 2)
            nrow = d.read_shift(4);
          if (nrow > 1048576)
            nrow = 1e6;
          if (ft != 2)
            fpos = d.read_shift(2);
          var rlen = d.read_shift(2);
          var current_cp = opts.codepage || 1252;
          if (ft != 2) {
            d.l += 16;
            d.read_shift(1);
            if (d[d.l] !== 0)
              current_cp = dbf_codepage_map[d[d.l]];
            d.l += 1;
            d.l += 2;
          }
          if (l7)
            d.l += 36;
          var fields = [], field = {};
          var hend = Math.min(d.length, ft == 2 ? 521 : fpos - 10 - (vfp ? 264 : 0));
          var ww = l7 ? 32 : 11;
          while (d.l < hend && d[d.l] != 13) {
            field = {};
            field.name = $cptable.utils.decode(current_cp, d.slice(d.l, d.l + ww)).replace(/[\u0000\r\n].*$/g, "");
            d.l += ww;
            field.type = String.fromCharCode(d.read_shift(1));
            if (ft != 2 && !l7)
              field.offset = d.read_shift(4);
            field.len = d.read_shift(1);
            if (ft == 2)
              field.offset = d.read_shift(2);
            field.dec = d.read_shift(1);
            if (field.name.length)
              fields.push(field);
            if (ft != 2)
              d.l += l7 ? 13 : 14;
            switch (field.type) {
              case "B":
                if ((!vfp || field.len != 8) && opts.WTF)
                  console.log("Skipping " + field.name + ":" + field.type);
                break;
              case "G":
              case "P":
                if (opts.WTF)
                  console.log("Skipping " + field.name + ":" + field.type);
                break;
              case "+":
              case "0":
              case "@":
              case "C":
              case "D":
              case "F":
              case "I":
              case "L":
              case "M":
              case "N":
              case "O":
              case "T":
              case "Y":
                break;
              default:
                throw new Error("Unknown Field Type: " + field.type);
            }
          }
          if (d[d.l] !== 13)
            d.l = fpos - 1;
          if (d.read_shift(1) !== 13)
            throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
          d.l = fpos;
          var R = 0, C = 0;
          out[0] = [];
          for (C = 0; C != fields.length; ++C)
            out[0][C] = fields[C].name;
          while (nrow-- > 0) {
            if (d[d.l] === 42) {
              d.l += rlen;
              continue;
            }
            ++d.l;
            out[++R] = [];
            C = 0;
            for (C = 0; C != fields.length; ++C) {
              var dd = d.slice(d.l, d.l + fields[C].len);
              d.l += fields[C].len;
              prep_blob(dd, 0);
              var s = $cptable.utils.decode(current_cp, dd);
              switch (fields[C].type) {
                case "C":
                  if (s.trim().length)
                    out[R][C] = s.replace(/\s+$/, "");
                  break;
                case "D":
                  if (s.length === 8)
                    out[R][C] = new Date(+s.slice(0, 4), +s.slice(4, 6) - 1, +s.slice(6, 8));
                  else
                    out[R][C] = s;
                  break;
                case "F":
                  out[R][C] = parseFloat(s.trim());
                  break;
                case "+":
                case "I":
                  out[R][C] = l7 ? dd.read_shift(-4, "i") ^ 2147483648 : dd.read_shift(4, "i");
                  break;
                case "L":
                  switch (s.trim().toUpperCase()) {
                    case "Y":
                    case "T":
                      out[R][C] = true;
                      break;
                    case "N":
                    case "F":
                      out[R][C] = false;
                      break;
                    case "":
                    case "?":
                      break;
                    default:
                      throw new Error("DBF Unrecognized L:|" + s + "|");
                  }
                  break;
                case "M":
                  if (!memo)
                    throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
                  out[R][C] = "##MEMO##" + (l7 ? parseInt(s.trim(), 10) : dd.read_shift(4));
                  break;
                case "N":
                  s = s.replace(/\u0000/g, "").trim();
                  if (s && s != ".")
                    out[R][C] = +s || 0;
                  break;
                case "@":
                  out[R][C] = new Date(dd.read_shift(-8, "f") - 621356832e5);
                  break;
                case "T":
                  out[R][C] = new Date((dd.read_shift(4) - 2440588) * 864e5 + dd.read_shift(4));
                  break;
                case "Y":
                  out[R][C] = dd.read_shift(4, "i") / 1e4 + dd.read_shift(4, "i") / 1e4 * Math.pow(2, 32);
                  break;
                case "O":
                  out[R][C] = -dd.read_shift(-8, "f");
                  break;
                case "B":
                  if (vfp && fields[C].len == 8) {
                    out[R][C] = dd.read_shift(8, "f");
                    break;
                  }
                case "G":
                case "P":
                  dd.l += fields[C].len;
                  break;
                case "0":
                  if (fields[C].name === "_NullFlags")
                    break;
                default:
                  throw new Error("DBF Unsupported data type " + fields[C].type);
              }
            }
          }
          if (ft != 2) {
            if (d.l < d.length && d[d.l++] != 26)
              throw new Error("DBF EOF Marker missing " + (d.l - 1) + " of " + d.length + " " + d[d.l - 1].toString(16));
          }
          if (opts && opts.sheetRows)
            out = out.slice(0, opts.sheetRows);
          opts.DBF = fields;
          return out;
        }
        function dbf_to_sheet(buf, opts) {
          var o = opts || {};
          if (!o.dateNF)
            o.dateNF = "yyyymmdd";
          var ws = aoa_to_sheet(dbf_to_aoa(buf, o), o);
          ws["!cols"] = o.DBF.map(function(field) {
            return {
              wch: field.len,
              DBF: field
            };
          });
          delete o.DBF;
          return ws;
        }
        function dbf_to_workbook(buf, opts) {
          try {
            return sheet_to_workbook(dbf_to_sheet(buf, opts), opts);
          } catch (e) {
            if (opts && opts.WTF)
              throw e;
          }
          return { SheetNames: [], Sheets: {} };
        }
        var _RLEN = { "B": 8, "C": 250, "L": 1, "D": 8, "?": 0, "": 0 };
        function sheet_to_dbf(ws, opts) {
          var o = opts || {};
          if (+o.codepage >= 0)
            set_cp(+o.codepage);
          if (o.type == "string")
            throw new Error("Cannot write DBF to JS string");
          var ba = buf_array();
          var aoa = sheet_to_json(ws, { header: 1, raw: true, cellDates: true });
          var headers = aoa[0], data = aoa.slice(1), cols = ws["!cols"] || [];
          var i = 0, j = 0, hcnt = 0, rlen = 1;
          for (i = 0; i < headers.length; ++i) {
            if (((cols[i] || {}).DBF || {}).name) {
              headers[i] = cols[i].DBF.name;
              ++hcnt;
              continue;
            }
            if (headers[i] == null)
              continue;
            ++hcnt;
            if (typeof headers[i] === "number")
              headers[i] = headers[i].toString(10);
            if (typeof headers[i] !== "string")
              throw new Error("DBF Invalid column name " + headers[i] + " |" + typeof headers[i] + "|");
            if (headers.indexOf(headers[i]) !== i) {
              for (j = 0; j < 1024; ++j)
                if (headers.indexOf(headers[i] + "_" + j) == -1) {
                  headers[i] += "_" + j;
                  break;
                }
            }
          }
          var range = safe_decode_range(ws["!ref"]);
          var coltypes = [];
          var colwidths = [];
          var coldecimals = [];
          for (i = 0; i <= range.e.c - range.s.c; ++i) {
            var guess = "", _guess = "", maxlen = 0;
            var col = [];
            for (j = 0; j < data.length; ++j) {
              if (data[j][i] != null)
                col.push(data[j][i]);
            }
            if (col.length == 0 || headers[i] == null) {
              coltypes[i] = "?";
              continue;
            }
            for (j = 0; j < col.length; ++j) {
              switch (typeof col[j]) {
                case "number":
                  _guess = "B";
                  break;
                case "string":
                  _guess = "C";
                  break;
                case "boolean":
                  _guess = "L";
                  break;
                case "object":
                  _guess = col[j] instanceof Date ? "D" : "C";
                  break;
                default:
                  _guess = "C";
              }
              maxlen = Math.max(maxlen, String(col[j]).length);
              guess = guess && guess != _guess ? "C" : _guess;
            }
            if (maxlen > 250)
              maxlen = 250;
            _guess = ((cols[i] || {}).DBF || {}).type;
            if (_guess == "C") {
              if (cols[i].DBF.len > maxlen)
                maxlen = cols[i].DBF.len;
            }
            if (guess == "B" && _guess == "N") {
              guess = "N";
              coldecimals[i] = cols[i].DBF.dec;
              maxlen = cols[i].DBF.len;
            }
            colwidths[i] = guess == "C" || _guess == "N" ? maxlen : _RLEN[guess] || 0;
            rlen += colwidths[i];
            coltypes[i] = guess;
          }
          var h = ba.next(32);
          h.write_shift(4, 318902576);
          h.write_shift(4, data.length);
          h.write_shift(2, 296 + 32 * hcnt);
          h.write_shift(2, rlen);
          for (i = 0; i < 4; ++i)
            h.write_shift(4, 0);
          h.write_shift(4, 0 | (+dbf_reverse_map[current_ansi] || 3) << 8);
          for (i = 0, j = 0; i < headers.length; ++i) {
            if (headers[i] == null)
              continue;
            var hf = ba.next(32);
            var _f = (headers[i].slice(-10) + "\0\0\0\0\0\0\0\0\0\0\0").slice(0, 11);
            hf.write_shift(1, _f, "sbcs");
            hf.write_shift(1, coltypes[i] == "?" ? "C" : coltypes[i], "sbcs");
            hf.write_shift(4, j);
            hf.write_shift(1, colwidths[i] || _RLEN[coltypes[i]] || 0);
            hf.write_shift(1, coldecimals[i] || 0);
            hf.write_shift(1, 2);
            hf.write_shift(4, 0);
            hf.write_shift(1, 0);
            hf.write_shift(4, 0);
            hf.write_shift(4, 0);
            j += colwidths[i] || _RLEN[coltypes[i]] || 0;
          }
          var hb = ba.next(264);
          hb.write_shift(4, 13);
          for (i = 0; i < 65; ++i)
            hb.write_shift(4, 0);
          for (i = 0; i < data.length; ++i) {
            var rout = ba.next(rlen);
            rout.write_shift(1, 0);
            for (j = 0; j < headers.length; ++j) {
              if (headers[j] == null)
                continue;
              switch (coltypes[j]) {
                case "L":
                  rout.write_shift(1, data[i][j] == null ? 63 : data[i][j] ? 84 : 70);
                  break;
                case "B":
                  rout.write_shift(8, data[i][j] || 0, "f");
                  break;
                case "N":
                  var _n = "0";
                  if (typeof data[i][j] == "number")
                    _n = data[i][j].toFixed(coldecimals[j] || 0);
                  for (hcnt = 0; hcnt < colwidths[j] - _n.length; ++hcnt)
                    rout.write_shift(1, 32);
                  rout.write_shift(1, _n, "sbcs");
                  break;
                case "D":
                  if (!data[i][j])
                    rout.write_shift(8, "00000000", "sbcs");
                  else {
                    rout.write_shift(4, ("0000" + data[i][j].getFullYear()).slice(-4), "sbcs");
                    rout.write_shift(2, ("00" + (data[i][j].getMonth() + 1)).slice(-2), "sbcs");
                    rout.write_shift(2, ("00" + data[i][j].getDate()).slice(-2), "sbcs");
                  }
                  break;
                case "C":
                  var _s = String(data[i][j] != null ? data[i][j] : "").slice(0, colwidths[j]);
                  rout.write_shift(1, _s, "sbcs");
                  for (hcnt = 0; hcnt < colwidths[j] - _s.length; ++hcnt)
                    rout.write_shift(1, 32);
                  break;
              }
            }
          }
          ba.next(1).write_shift(1, 26);
          return ba.end();
        }
        return {
          to_workbook: dbf_to_workbook,
          to_sheet: dbf_to_sheet,
          from_sheet: sheet_to_dbf
        };
      }();
      var SYLK = function() {
        var sylk_escapes = {
          AA: "\xC0",
          BA: "\xC1",
          CA: "\xC2",
          DA: 195,
          HA: "\xC4",
          JA: 197,
          AE: "\xC8",
          BE: "\xC9",
          CE: "\xCA",
          HE: "\xCB",
          AI: "\xCC",
          BI: "\xCD",
          CI: "\xCE",
          HI: "\xCF",
          AO: "\xD2",
          BO: "\xD3",
          CO: "\xD4",
          DO: 213,
          HO: "\xD6",
          AU: "\xD9",
          BU: "\xDA",
          CU: "\xDB",
          HU: "\xDC",
          Aa: "\xE0",
          Ba: "\xE1",
          Ca: "\xE2",
          Da: 227,
          Ha: "\xE4",
          Ja: 229,
          Ae: "\xE8",
          Be: "\xE9",
          Ce: "\xEA",
          He: "\xEB",
          Ai: "\xEC",
          Bi: "\xED",
          Ci: "\xEE",
          Hi: "\xEF",
          Ao: "\xF2",
          Bo: "\xF3",
          Co: "\xF4",
          Do: 245,
          Ho: "\xF6",
          Au: "\xF9",
          Bu: "\xFA",
          Cu: "\xFB",
          Hu: "\xFC",
          KC: "\xC7",
          Kc: "\xE7",
          q: "\xE6",
          z: "\u0153",
          a: "\xC6",
          j: "\u0152",
          DN: 209,
          Dn: 241,
          Hy: 255,
          S: 169,
          c: 170,
          R: 174,
          "B ": 180,
          0: 176,
          1: 177,
          2: 178,
          3: 179,
          5: 181,
          6: 182,
          7: 183,
          Q: 185,
          k: 186,
          b: 208,
          i: 216,
          l: 222,
          s: 240,
          y: 248,
          "!": 161,
          '"': 162,
          "#": 163,
          "(": 164,
          "%": 165,
          "'": 167,
          "H ": 168,
          "+": 171,
          ";": 187,
          "<": 188,
          "=": 189,
          ">": 190,
          "?": 191,
          "{": 223
        };
        var sylk_char_regex = new RegExp("\x1BN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g, "\\$1") + "|\\|)", "gm");
        var sylk_char_fn = function(_, $1) {
          var o = sylk_escapes[$1];
          return typeof o == "number" ? _getansi(o) : o;
        };
        var decode_sylk_char = function($$, $1, $2) {
          var newcc = $1.charCodeAt(0) - 32 << 4 | $2.charCodeAt(0) - 48;
          return newcc == 59 ? $$ : _getansi(newcc);
        };
        sylk_escapes["|"] = 254;
        function sylk_to_aoa(d, opts) {
          switch (opts.type) {
            case "base64":
              return sylk_to_aoa_str(Base64_decode(d), opts);
            case "binary":
              return sylk_to_aoa_str(d, opts);
            case "buffer":
              return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
              return sylk_to_aoa_str(cc2str(d), opts);
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function sylk_to_aoa_str(str, opts) {
          var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr = [];
          var formats = [];
          var next_cell_format = null;
          var sht = {}, rowinfo = [], colinfo = [], cw = [];
          var Mval = 0, j;
          if (+opts.codepage >= 0)
            set_cp(+opts.codepage);
          for (; ri !== records.length; ++ri) {
            Mval = 0;
            var rstr = records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
            var record = rstr.replace(/;;/g, "\0").split(";").map(function(x) {
              return x.replace(/\u0000/g, ";");
            });
            var RT = record[0], val;
            if (rstr.length > 0)
              switch (RT) {
                case "ID":
                  break;
                case "E":
                  break;
                case "B":
                  break;
                case "O":
                  break;
                case "W":
                  break;
                case "P":
                  if (record[1].charAt(0) == "P")
                    formats.push(rstr.slice(3).replace(/;;/g, ";"));
                  break;
                case "C":
                  var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1;
                  for (rj = 1; rj < record.length; ++rj)
                    switch (record[rj].charAt(0)) {
                      case "A":
                        break;
                      case "X":
                        C = parseInt(record[rj].slice(1)) - 1;
                        C_seen_X = true;
                        break;
                      case "Y":
                        R = parseInt(record[rj].slice(1)) - 1;
                        if (!C_seen_X)
                          C = 0;
                        for (j = arr.length; j <= R; ++j)
                          arr[j] = [];
                        break;
                      case "K":
                        val = record[rj].slice(1);
                        if (val.charAt(0) === '"')
                          val = val.slice(1, val.length - 1);
                        else if (val === "TRUE")
                          val = true;
                        else if (val === "FALSE")
                          val = false;
                        else if (!isNaN(fuzzynum(val))) {
                          val = fuzzynum(val);
                          if (next_cell_format !== null && fmt_is_date(next_cell_format))
                            val = numdate(val);
                        } else if (!isNaN(fuzzydate(val).getDate())) {
                          val = parseDate(val);
                        }
                        if (typeof $cptable !== "undefined" && typeof val == "string" && (opts || {}).type != "string" && (opts || {}).codepage)
                          val = $cptable.utils.decode(opts.codepage, val);
                        C_seen_K = true;
                        break;
                      case "E":
                        C_seen_E = true;
                        var formula = rc_to_a1(record[rj].slice(1), { r: R, c: C });
                        arr[R][C] = [arr[R][C], formula];
                        break;
                      case "S":
                        C_seen_S = true;
                        arr[R][C] = [arr[R][C], "S5S"];
                        break;
                      case "G":
                        break;
                      case "R":
                        _R = parseInt(record[rj].slice(1)) - 1;
                        break;
                      case "C":
                        _C = parseInt(record[rj].slice(1)) - 1;
                        break;
                      default:
                        if (opts && opts.WTF)
                          throw new Error("SYLK bad record " + rstr);
                    }
                  if (C_seen_K) {
                    if (arr[R][C] && arr[R][C].length == 2)
                      arr[R][C][0] = val;
                    else
                      arr[R][C] = val;
                    next_cell_format = null;
                  }
                  if (C_seen_S) {
                    if (C_seen_E)
                      throw new Error("SYLK shared formula cannot have own formula");
                    var shrbase = _R > -1 && arr[_R][_C];
                    if (!shrbase || !shrbase[1])
                      throw new Error("SYLK shared formula cannot find base");
                    arr[R][C][1] = shift_formula_str(shrbase[1], { r: R - _R, c: C - _C });
                  }
                  break;
                case "F":
                  var F_seen = 0;
                  for (rj = 1; rj < record.length; ++rj)
                    switch (record[rj].charAt(0)) {
                      case "X":
                        C = parseInt(record[rj].slice(1)) - 1;
                        ++F_seen;
                        break;
                      case "Y":
                        R = parseInt(record[rj].slice(1)) - 1;
                        for (j = arr.length; j <= R; ++j)
                          arr[j] = [];
                        break;
                      case "M":
                        Mval = parseInt(record[rj].slice(1)) / 20;
                        break;
                      case "F":
                        break;
                      case "G":
                        break;
                      case "P":
                        next_cell_format = formats[parseInt(record[rj].slice(1))];
                        break;
                      case "S":
                        break;
                      case "D":
                        break;
                      case "N":
                        break;
                      case "W":
                        cw = record[rj].slice(1).split(" ");
                        for (j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {
                          Mval = parseInt(cw[2], 10);
                          colinfo[j - 1] = Mval === 0 ? { hidden: true } : { wch: Mval };
                          process_col(colinfo[j - 1]);
                        }
                        break;
                      case "C":
                        C = parseInt(record[rj].slice(1)) - 1;
                        if (!colinfo[C])
                          colinfo[C] = {};
                        break;
                      case "R":
                        R = parseInt(record[rj].slice(1)) - 1;
                        if (!rowinfo[R])
                          rowinfo[R] = {};
                        if (Mval > 0) {
                          rowinfo[R].hpt = Mval;
                          rowinfo[R].hpx = pt2px(Mval);
                        } else if (Mval === 0)
                          rowinfo[R].hidden = true;
                        break;
                      default:
                        if (opts && opts.WTF)
                          throw new Error("SYLK bad record " + rstr);
                    }
                  if (F_seen < 1)
                    next_cell_format = null;
                  break;
                default:
                  if (opts && opts.WTF)
                    throw new Error("SYLK bad record " + rstr);
              }
          }
          if (rowinfo.length > 0)
            sht["!rows"] = rowinfo;
          if (colinfo.length > 0)
            sht["!cols"] = colinfo;
          if (opts && opts.sheetRows)
            arr = arr.slice(0, opts.sheetRows);
          return [arr, sht];
        }
        function sylk_to_sheet(d, opts) {
          var aoasht = sylk_to_aoa(d, opts);
          var aoa = aoasht[0], ws = aoasht[1];
          var o = aoa_to_sheet(aoa, opts);
          keys(ws).forEach(function(k) {
            o[k] = ws[k];
          });
          return o;
        }
        function sylk_to_workbook(d, opts) {
          return sheet_to_workbook(sylk_to_sheet(d, opts), opts);
        }
        function write_ws_cell_sylk(cell, ws, R, C) {
          var o = "C;Y" + (R + 1) + ";X" + (C + 1) + ";K";
          switch (cell.t) {
            case "n":
              o += cell.v || 0;
              if (cell.f && !cell.F)
                o += ";E" + a1_to_rc(cell.f, { r: R, c: C });
              break;
            case "b":
              o += cell.v ? "TRUE" : "FALSE";
              break;
            case "e":
              o += cell.w || cell.v;
              break;
            case "d":
              o += '"' + (cell.w || cell.v) + '"';
              break;
            case "s":
              o += '"' + cell.v.replace(/"/g, "").replace(/;/g, ";;") + '"';
              break;
          }
          return o;
        }
        function write_ws_cols_sylk(out, cols) {
          cols.forEach(function(col, i) {
            var rec = "F;W" + (i + 1) + " " + (i + 1) + " ";
            if (col.hidden)
              rec += "0";
            else {
              if (typeof col.width == "number" && !col.wpx)
                col.wpx = width2px(col.width);
              if (typeof col.wpx == "number" && !col.wch)
                col.wch = px2char(col.wpx);
              if (typeof col.wch == "number")
                rec += Math.round(col.wch);
            }
            if (rec.charAt(rec.length - 1) != " ")
              out.push(rec);
          });
        }
        function write_ws_rows_sylk(out, rows) {
          rows.forEach(function(row, i) {
            var rec = "F;";
            if (row.hidden)
              rec += "M0;";
            else if (row.hpt)
              rec += "M" + 20 * row.hpt + ";";
            else if (row.hpx)
              rec += "M" + 20 * px2pt(row.hpx) + ";";
            if (rec.length > 2)
              out.push(rec + "R" + (i + 1));
          });
        }
        function sheet_to_sylk(ws, opts) {
          var preamble = ["ID;PWXL;N;E"], o = [];
          var r = safe_decode_range(ws["!ref"]), cell;
          var dense = Array.isArray(ws);
          var RS = "\r\n";
          preamble.push("P;PGeneral");
          preamble.push("F;P0;DG0G8;M255");
          if (ws["!cols"])
            write_ws_cols_sylk(preamble, ws["!cols"]);
          if (ws["!rows"])
            write_ws_rows_sylk(preamble, ws["!rows"]);
          preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [r.s.c, r.s.r, r.e.c, r.e.r].join(" "));
          for (var R = r.s.r; R <= r.e.r; ++R) {
            for (var C = r.s.c; C <= r.e.c; ++C) {
              var coord = encode_cell({ r: R, c: C });
              cell = dense ? (ws[R] || [])[C] : ws[coord];
              if (!cell || cell.v == null && (!cell.f || cell.F))
                continue;
              o.push(write_ws_cell_sylk(cell, ws, R, C, opts));
            }
          }
          return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
        }
        return {
          to_workbook: sylk_to_workbook,
          to_sheet: sylk_to_sheet,
          from_sheet: sheet_to_sylk
        };
      }();
      var DIF = function() {
        function dif_to_aoa(d, opts) {
          switch (opts.type) {
            case "base64":
              return dif_to_aoa_str(Base64_decode(d), opts);
            case "binary":
              return dif_to_aoa_str(d, opts);
            case "buffer":
              return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
              return dif_to_aoa_str(cc2str(d), opts);
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function dif_to_aoa_str(str, opts) {
          var records = str.split("\n"), R = -1, C = -1, ri = 0, arr = [];
          for (; ri !== records.length; ++ri) {
            if (records[ri].trim() === "BOT") {
              arr[++R] = [];
              C = 0;
              continue;
            }
            if (R < 0)
              continue;
            var metadata = records[ri].trim().split(",");
            var type = metadata[0], value = metadata[1];
            ++ri;
            var data = records[ri] || "";
            while ((data.match(/["]/g) || []).length & 1 && ri < records.length - 1)
              data += "\n" + records[++ri];
            data = data.trim();
            switch (+type) {
              case -1:
                if (data === "BOT") {
                  arr[++R] = [];
                  C = 0;
                  continue;
                } else if (data !== "EOD")
                  throw new Error("Unrecognized DIF special command " + data);
                break;
              case 0:
                if (data === "TRUE")
                  arr[R][C] = true;
                else if (data === "FALSE")
                  arr[R][C] = false;
                else if (!isNaN(fuzzynum(value)))
                  arr[R][C] = fuzzynum(value);
                else if (!isNaN(fuzzydate(value).getDate()))
                  arr[R][C] = parseDate(value);
                else
                  arr[R][C] = value;
                ++C;
                break;
              case 1:
                data = data.slice(1, data.length - 1);
                data = data.replace(/""/g, '"');
                if (DIF_XL && data && data.match(/^=".*"$/))
                  data = data.slice(2, -1);
                arr[R][C++] = data !== "" ? data : null;
                break;
            }
            if (data === "EOD")
              break;
          }
          if (opts && opts.sheetRows)
            arr = arr.slice(0, opts.sheetRows);
          return arr;
        }
        function dif_to_sheet(str, opts) {
          return aoa_to_sheet(dif_to_aoa(str, opts), opts);
        }
        function dif_to_workbook(str, opts) {
          return sheet_to_workbook(dif_to_sheet(str, opts), opts);
        }
        var sheet_to_dif = function() {
          var push_field = function pf(o, topic, v, n, s) {
            o.push(topic);
            o.push(v + "," + n);
            o.push('"' + s.replace(/"/g, '""') + '"');
          };
          var push_value = function po(o, type, v, s) {
            o.push(type + "," + v);
            o.push(type == 1 ? '"' + s.replace(/"/g, '""') + '"' : s);
          };
          return function sheet_to_dif2(ws) {
            var o = [];
            var r = safe_decode_range(ws["!ref"]), cell;
            var dense = Array.isArray(ws);
            push_field(o, "TABLE", 0, 1, "sheetjs");
            push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1, "");
            push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1, "");
            push_field(o, "DATA", 0, 0, "");
            for (var R = r.s.r; R <= r.e.r; ++R) {
              push_value(o, -1, 0, "BOT");
              for (var C = r.s.c; C <= r.e.c; ++C) {
                var coord = encode_cell({ r: R, c: C });
                cell = dense ? (ws[R] || [])[C] : ws[coord];
                if (!cell) {
                  push_value(o, 1, 0, "");
                  continue;
                }
                switch (cell.t) {
                  case "n":
                    var val = DIF_XL ? cell.w : cell.v;
                    if (!val && cell.v != null)
                      val = cell.v;
                    if (val == null) {
                      if (DIF_XL && cell.f && !cell.F)
                        push_value(o, 1, 0, "=" + cell.f);
                      else
                        push_value(o, 1, 0, "");
                    } else
                      push_value(o, 0, val, "V");
                    break;
                  case "b":
                    push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
                    break;
                  case "s":
                    push_value(o, 1, 0, !DIF_XL || isNaN(cell.v) ? cell.v : '="' + cell.v + '"');
                    break;
                  case "d":
                    if (!cell.w)
                      cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));
                    if (DIF_XL)
                      push_value(o, 0, cell.w, "V");
                    else
                      push_value(o, 1, 0, cell.w);
                    break;
                  default:
                    push_value(o, 1, 0, "");
                }
              }
            }
            push_value(o, -1, 0, "EOD");
            var RS = "\r\n";
            var oo = o.join(RS);
            return oo;
          };
        }();
        return {
          to_workbook: dif_to_workbook,
          to_sheet: dif_to_sheet,
          from_sheet: sheet_to_dif
        };
      }();
      var ETH = function() {
        function decode(s) {
          return s.replace(/\\b/g, "\\").replace(/\\c/g, ":").replace(/\\n/g, "\n");
        }
        function encode(s) {
          return s.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g, "\\n");
        }
        function eth_to_aoa(str, opts) {
          var records = str.split("\n"), R = -1, C = -1, ri = 0, arr = [];
          for (; ri !== records.length; ++ri) {
            var record = records[ri].trim().split(":");
            if (record[0] !== "cell")
              continue;
            var addr = decode_cell(record[1]);
            if (arr.length <= addr.r) {
              for (R = arr.length; R <= addr.r; ++R)
                if (!arr[R])
                  arr[R] = [];
            }
            R = addr.r;
            C = addr.c;
            switch (record[2]) {
              case "t":
                arr[R][C] = decode(record[3]);
                break;
              case "v":
                arr[R][C] = +record[3];
                break;
              case "vtf":
                var _f = record[record.length - 1];
              case "vtc":
                switch (record[3]) {
                  case "nl":
                    arr[R][C] = +record[4] ? true : false;
                    break;
                  default:
                    arr[R][C] = +record[4];
                    break;
                }
                if (record[2] == "vtf")
                  arr[R][C] = [arr[R][C], _f];
            }
          }
          if (opts && opts.sheetRows)
            arr = arr.slice(0, opts.sheetRows);
          return arr;
        }
        function eth_to_sheet(d, opts) {
          return aoa_to_sheet(eth_to_aoa(d, opts), opts);
        }
        function eth_to_workbook(d, opts) {
          return sheet_to_workbook(eth_to_sheet(d, opts), opts);
        }
        var header = [
          "socialcalc:version:1.5",
          "MIME-Version: 1.0",
          "Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
        ].join("\n");
        var sep = [
          "--SocialCalcSpreadsheetControlSave",
          "Content-type: text/plain; charset=UTF-8"
        ].join("\n") + "\n";
        var meta = [
          "# SocialCalc Spreadsheet Control Save",
          "part:sheet"
        ].join("\n");
        var end = "--SocialCalcSpreadsheetControlSave--";
        function sheet_to_eth_data(ws) {
          if (!ws || !ws["!ref"])
            return "";
          var o = [], oo = [], cell, coord = "";
          var r = decode_range(ws["!ref"]);
          var dense = Array.isArray(ws);
          for (var R = r.s.r; R <= r.e.r; ++R) {
            for (var C = r.s.c; C <= r.e.c; ++C) {
              coord = encode_cell({ r: R, c: C });
              cell = dense ? (ws[R] || [])[C] : ws[coord];
              if (!cell || cell.v == null || cell.t === "z")
                continue;
              oo = ["cell", coord, "t"];
              switch (cell.t) {
                case "s":
                case "str":
                  oo.push(encode(cell.v));
                  break;
                case "n":
                  if (!cell.f) {
                    oo[2] = "v";
                    oo[3] = cell.v;
                  } else {
                    oo[2] = "vtf";
                    oo[3] = "n";
                    oo[4] = cell.v;
                    oo[5] = encode(cell.f);
                  }
                  break;
                case "b":
                  oo[2] = "vt" + (cell.f ? "f" : "c");
                  oo[3] = "nl";
                  oo[4] = cell.v ? "1" : "0";
                  oo[5] = encode(cell.f || (cell.v ? "TRUE" : "FALSE"));
                  break;
                case "d":
                  var t = datenum(parseDate(cell.v));
                  oo[2] = "vtc";
                  oo[3] = "nd";
                  oo[4] = "" + t;
                  oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t);
                  break;
                case "e":
                  continue;
              }
              o.push(oo.join(":"));
            }
          }
          o.push("sheet:c:" + (r.e.c - r.s.c + 1) + ":r:" + (r.e.r - r.s.r + 1) + ":tvf:1");
          o.push("valueformat:1:text-wiki");
          return o.join("\n");
        }
        function sheet_to_eth(ws) {
          return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join("\n");
        }
        return {
          to_workbook: eth_to_workbook,
          to_sheet: eth_to_sheet,
          from_sheet: sheet_to_eth
        };
      }();
      var PRN = function() {
        function set_text_arr(data, arr, R, C, o) {
          if (o.raw)
            arr[R][C] = data;
          else if (data === "") {
          } else if (data === "TRUE")
            arr[R][C] = true;
          else if (data === "FALSE")
            arr[R][C] = false;
          else if (!isNaN(fuzzynum(data)))
            arr[R][C] = fuzzynum(data);
          else if (!isNaN(fuzzydate(data).getDate()))
            arr[R][C] = parseDate(data);
          else
            arr[R][C] = data;
        }
        function prn_to_aoa_str(f, opts) {
          var o = opts || {};
          var arr = [];
          if (!f || f.length === 0)
            return arr;
          var lines = f.split(/[\r\n]/);
          var L = lines.length - 1;
          while (L >= 0 && lines[L].length === 0)
            --L;
          var start = 10, idx = 0;
          var R = 0;
          for (; R <= L; ++R) {
            idx = lines[R].indexOf(" ");
            if (idx == -1)
              idx = lines[R].length;
            else
              idx++;
            start = Math.max(start, idx);
          }
          for (R = 0; R <= L; ++R) {
            arr[R] = [];
            var C = 0;
            set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);
            for (C = 1; C <= (lines[R].length - start) / 10 + 1; ++C)
              set_text_arr(lines[R].slice(start + (C - 1) * 10, start + C * 10).trim(), arr, R, C, o);
          }
          if (o.sheetRows)
            arr = arr.slice(0, o.sheetRows);
          return arr;
        }
        var guess_seps = {
          44: ",",
          9: "	",
          59: ";",
          124: "|"
        };
        var guess_sep_weights = {
          44: 3,
          9: 2,
          59: 1,
          124: 0
        };
        function guess_sep(str) {
          var cnt = {}, instr = false, end = 0, cc = 0;
          for (; end < str.length; ++end) {
            if ((cc = str.charCodeAt(end)) == 34)
              instr = !instr;
            else if (!instr && cc in guess_seps)
              cnt[cc] = (cnt[cc] || 0) + 1;
          }
          cc = [];
          for (end in cnt)
            if (Object.prototype.hasOwnProperty.call(cnt, end)) {
              cc.push([cnt[end], end]);
            }
          if (!cc.length) {
            cnt = guess_sep_weights;
            for (end in cnt)
              if (Object.prototype.hasOwnProperty.call(cnt, end)) {
                cc.push([cnt[end], end]);
              }
          }
          cc.sort(function(a, b) {
            return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]];
          });
          return guess_seps[cc.pop()[1]] || 44;
        }
        function dsv_to_sheet_str(str, opts) {
          var o = opts || {};
          var sep = "";
          if (DENSE != null && o.dense == null)
            o.dense = DENSE;
          var ws = o.dense ? [] : {};
          var range = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
          if (str.slice(0, 4) == "sep=") {
            if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {
              sep = str.charAt(4);
              str = str.slice(7);
            } else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {
              sep = str.charAt(4);
              str = str.slice(6);
            } else
              sep = guess_sep(str.slice(0, 1024));
          } else if (o && o.FS)
            sep = o.FS;
          else
            sep = guess_sep(str.slice(0, 1024));
          var R = 0, C = 0, v = 0;
          var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc = 0, startcc = str.charCodeAt(0);
          str = str.replace(/\r\n/mg, "\n");
          var _re = o.dateNF != null ? dateNF_regex(o.dateNF) : null;
          function finish_cell() {
            var s = str.slice(start, end);
            var cell = {};
            if (s.charAt(0) == '"' && s.charAt(s.length - 1) == '"')
              s = s.slice(1, -1).replace(/""/g, '"');
            if (s.length === 0)
              cell.t = "z";
            else if (o.raw) {
              cell.t = "s";
              cell.v = s;
            } else if (s.trim().length === 0) {
              cell.t = "s";
              cell.v = s;
            } else if (s.charCodeAt(0) == 61) {
              if (s.charCodeAt(1) == 34 && s.charCodeAt(s.length - 1) == 34) {
                cell.t = "s";
                cell.v = s.slice(2, -1).replace(/""/g, '"');
              } else if (fuzzyfmla(s)) {
                cell.t = "n";
                cell.f = s.slice(1);
              } else {
                cell.t = "s";
                cell.v = s;
              }
            } else if (s == "TRUE") {
              cell.t = "b";
              cell.v = true;
            } else if (s == "FALSE") {
              cell.t = "b";
              cell.v = false;
            } else if (!isNaN(v = fuzzynum(s))) {
              cell.t = "n";
              if (o.cellText !== false)
                cell.w = s;
              cell.v = v;
            } else if (!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {
              cell.z = o.dateNF || table_fmt[14];
              var k = 0;
              if (_re && s.match(_re)) {
                s = dateNF_fix(s, o.dateNF, s.match(_re) || []);
                k = 1;
              }
              if (o.cellDates) {
                cell.t = "d";
                cell.v = parseDate(s, k);
              } else {
                cell.t = "n";
                cell.v = datenum(parseDate(s, k));
              }
              if (o.cellText !== false)
                cell.w = SSF_format(cell.z, cell.v instanceof Date ? datenum(cell.v) : cell.v);
              if (!o.cellNF)
                delete cell.z;
            } else {
              cell.t = "s";
              cell.v = s;
            }
            if (cell.t == "z") {
            } else if (o.dense) {
              if (!ws[R])
                ws[R] = [];
              ws[R][C] = cell;
            } else
              ws[encode_cell({ c: C, r: R })] = cell;
            start = end + 1;
            startcc = str.charCodeAt(start);
            if (range.e.c < C)
              range.e.c = C;
            if (range.e.r < R)
              range.e.r = R;
            if (cc == sepcc)
              ++C;
            else {
              C = 0;
              ++R;
              if (o.sheetRows && o.sheetRows <= R)
                return true;
            }
          }
          outer:
            for (; end < str.length; ++end)
              switch (cc = str.charCodeAt(end)) {
                case 34:
                  if (startcc === 34)
                    instr = !instr;
                  break;
                case sepcc:
                case 10:
                case 13:
                  if (!instr && finish_cell())
                    break outer;
                  break;
                default:
                  break;
              }
          if (end - start > 0)
            finish_cell();
          ws["!ref"] = encode_range(range);
          return ws;
        }
        function prn_to_sheet_str(str, opts) {
          if (!(opts && opts.PRN))
            return dsv_to_sheet_str(str, opts);
          if (opts.FS)
            return dsv_to_sheet_str(str, opts);
          if (str.slice(0, 4) == "sep=")
            return dsv_to_sheet_str(str, opts);
          if (str.indexOf("	") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0)
            return dsv_to_sheet_str(str, opts);
          return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
        }
        function prn_to_sheet(d, opts) {
          var str = "", bytes = opts.type == "string" ? [0, 0, 0, 0] : firstbyte(d, opts);
          switch (opts.type) {
            case "base64":
              str = Base64_decode(d);
              break;
            case "binary":
              str = d;
              break;
            case "buffer":
              if (opts.codepage == 65001)
                str = d.toString("utf8");
              else if (opts.codepage && typeof $cptable !== "undefined")
                str = $cptable.utils.decode(opts.codepage, d);
              else
                str = has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d);
              break;
            case "array":
              str = cc2str(d);
              break;
            case "string":
              str = d;
              break;
            default:
              throw new Error("Unrecognized type " + opts.type);
          }
          if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191)
            str = utf8read(str.slice(3));
          else if (opts.type != "string" && opts.type != "buffer" && opts.codepage == 65001)
            str = utf8read(str);
          else if (opts.type == "binary" && typeof $cptable !== "undefined" && opts.codepage)
            str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591, str));
          if (str.slice(0, 19) == "socialcalc:version:")
            return ETH.to_sheet(opts.type == "string" ? str : utf8read(str), opts);
          return prn_to_sheet_str(str, opts);
        }
        function prn_to_workbook(d, opts) {
          return sheet_to_workbook(prn_to_sheet(d, opts), opts);
        }
        function sheet_to_prn(ws) {
          var o = [];
          var r = safe_decode_range(ws["!ref"]), cell;
          var dense = Array.isArray(ws);
          for (var R = r.s.r; R <= r.e.r; ++R) {
            var oo = [];
            for (var C = r.s.c; C <= r.e.c; ++C) {
              var coord = encode_cell({ r: R, c: C });
              cell = dense ? (ws[R] || [])[C] : ws[coord];
              if (!cell || cell.v == null) {
                oo.push("          ");
                continue;
              }
              var w = (cell.w || (format_cell(cell), cell.w) || "").slice(0, 10);
              while (w.length < 10)
                w += " ";
              oo.push(w + (C === 0 ? " " : ""));
            }
            o.push(oo.join(""));
          }
          return o.join("\n");
        }
        return {
          to_workbook: prn_to_workbook,
          to_sheet: prn_to_sheet,
          from_sheet: sheet_to_prn
        };
      }();
      function read_wb_ID(d, opts) {
        var o = opts || {}, OLD_WTF = !!o.WTF;
        o.WTF = true;
        try {
          var out = SYLK.to_workbook(d, o);
          o.WTF = OLD_WTF;
          return out;
        } catch (e) {
          o.WTF = OLD_WTF;
          if (!e.message.match(/SYLK bad record ID/) && OLD_WTF)
            throw e;
          return PRN.to_workbook(d, opts);
        }
      }
      var WK_ = function() {
        function lotushopper(data, cb, opts) {
          if (!data)
            return;
          prep_blob(data, data.l || 0);
          var Enum = opts.Enum || WK1Enum;
          while (data.l < data.length) {
            var RT = data.read_shift(2);
            var R = Enum[RT] || Enum[65535];
            var length = data.read_shift(2);
            var tgt = data.l + length;
            var d = R.f && R.f(data, length, opts);
            data.l = tgt;
            if (cb(d, R, RT))
              return;
          }
        }
        function lotus_to_workbook(d, opts) {
          switch (opts.type) {
            case "base64":
              return lotus_to_workbook_buf(s2a(Base64_decode(d)), opts);
            case "binary":
              return lotus_to_workbook_buf(s2a(d), opts);
            case "buffer":
            case "array":
              return lotus_to_workbook_buf(d, opts);
          }
          throw "Unsupported type " + opts.type;
        }
        function lotus_to_workbook_buf(d, opts) {
          if (!d)
            return d;
          var o = opts || {};
          if (DENSE != null && o.dense == null)
            o.dense = DENSE;
          var s = o.dense ? [] : {}, n = "Sheet1", next_n = "", sidx = 0;
          var sheets = {}, snames = [], realnames = [];
          var refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
          var sheetRows = o.sheetRows || 0;
          if (d[2] == 0) {
            if (d[3] == 8 || d[3] == 9) {
              if (d.length >= 16 && d[14] == 5 && d[15] === 108)
                throw new Error("Unsupported Works 3 for Mac file");
            }
          }
          if (d[2] == 2) {
            o.Enum = WK1Enum;
            lotushopper(d, function(val, R, RT) {
              switch (RT) {
                case 0:
                  o.vers = val;
                  if (val >= 4096)
                    o.qpro = true;
                  break;
                case 6:
                  refguess = val;
                  break;
                case 204:
                  if (val)
                    next_n = val;
                  break;
                case 222:
                  next_n = val;
                  break;
                case 15:
                case 51:
                  if (!o.qpro)
                    val[1].v = val[1].v.slice(1);
                case 13:
                case 14:
                case 16:
                  if (RT == 14 && (val[2] & 112) == 112 && (val[2] & 15) > 1 && (val[2] & 15) < 15) {
                    val[1].z = o.dateNF || table_fmt[14];
                    if (o.cellDates) {
                      val[1].t = "d";
                      val[1].v = numdate(val[1].v);
                    }
                  }
                  if (o.qpro) {
                    if (val[3] > sidx) {
                      s["!ref"] = encode_range(refguess);
                      sheets[n] = s;
                      snames.push(n);
                      s = o.dense ? [] : {};
                      refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                      sidx = val[3];
                      n = next_n || "Sheet" + (sidx + 1);
                      next_n = "";
                    }
                  }
                  var tmpcell = o.dense ? (s[val[0].r] || [])[val[0].c] : s[encode_cell(val[0])];
                  if (tmpcell) {
                    tmpcell.t = val[1].t;
                    tmpcell.v = val[1].v;
                    if (val[1].z != null)
                      tmpcell.z = val[1].z;
                    if (val[1].f != null)
                      tmpcell.f = val[1].f;
                    break;
                  }
                  if (o.dense) {
                    if (!s[val[0].r])
                      s[val[0].r] = [];
                    s[val[0].r][val[0].c] = val[1];
                  } else
                    s[encode_cell(val[0])] = val[1];
                  break;
                default:
              }
            }, o);
          } else if (d[2] == 26 || d[2] == 14) {
            o.Enum = WK3Enum;
            if (d[2] == 14) {
              o.qpro = true;
              d.l = 0;
            }
            lotushopper(d, function(val, R, RT) {
              switch (RT) {
                case 204:
                  n = val;
                  break;
                case 22:
                  val[1].v = val[1].v.slice(1);
                case 23:
                case 24:
                case 25:
                case 37:
                case 39:
                case 40:
                  if (val[3] > sidx) {
                    s["!ref"] = encode_range(refguess);
                    sheets[n] = s;
                    snames.push(n);
                    s = o.dense ? [] : {};
                    refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                    sidx = val[3];
                    n = "Sheet" + (sidx + 1);
                  }
                  if (sheetRows > 0 && val[0].r >= sheetRows)
                    break;
                  if (o.dense) {
                    if (!s[val[0].r])
                      s[val[0].r] = [];
                    s[val[0].r][val[0].c] = val[1];
                  } else
                    s[encode_cell(val[0])] = val[1];
                  if (refguess.e.c < val[0].c)
                    refguess.e.c = val[0].c;
                  if (refguess.e.r < val[0].r)
                    refguess.e.r = val[0].r;
                  break;
                case 27:
                  if (val[14e3])
                    realnames[val[14e3][0]] = val[14e3][1];
                  break;
                case 1537:
                  realnames[val[0]] = val[1];
                  if (val[0] == sidx)
                    n = val[1];
                  break;
                default:
                  break;
              }
            }, o);
          } else
            throw new Error("Unrecognized LOTUS BOF " + d[2]);
          s["!ref"] = encode_range(refguess);
          sheets[next_n || n] = s;
          snames.push(next_n || n);
          if (!realnames.length)
            return { SheetNames: snames, Sheets: sheets };
          var osheets = {}, rnames = [];
          for (var i = 0; i < realnames.length; ++i)
            if (sheets[snames[i]]) {
              rnames.push(realnames[i] || snames[i]);
              osheets[realnames[i]] = sheets[realnames[i]] || sheets[snames[i]];
            } else {
              rnames.push(realnames[i]);
              osheets[realnames[i]] = { "!ref": "A1" };
            }
          return { SheetNames: rnames, Sheets: osheets };
        }
        function sheet_to_wk1(ws, opts) {
          var o = opts || {};
          if (+o.codepage >= 0)
            set_cp(+o.codepage);
          if (o.type == "string")
            throw new Error("Cannot write WK1 to JS string");
          var ba = buf_array();
          var range = safe_decode_range(ws["!ref"]);
          var dense = Array.isArray(ws);
          var cols = [];
          write_biff_rec(ba, 0, write_BOF_WK1(1030));
          write_biff_rec(ba, 6, write_RANGE(range));
          var max_R = Math.min(range.e.r, 8191);
          for (var R = range.s.r; R <= max_R; ++R) {
            var rr = encode_row(R);
            for (var C = range.s.c; C <= range.e.c; ++C) {
              if (R === range.s.r)
                cols[C] = encode_col(C);
              var ref = cols[C] + rr;
              var cell = dense ? (ws[R] || [])[C] : ws[ref];
              if (!cell || cell.t == "z")
                continue;
              if (cell.t == "n") {
                if ((cell.v | 0) == cell.v && cell.v >= -32768 && cell.v <= 32767)
                  write_biff_rec(ba, 13, write_INTEGER(R, C, cell.v));
                else
                  write_biff_rec(ba, 14, write_NUMBER(R, C, cell.v));
              } else {
                var str = format_cell(cell);
                write_biff_rec(ba, 15, write_LABEL(R, C, str.slice(0, 239)));
              }
            }
          }
          write_biff_rec(ba, 1);
          return ba.end();
        }
        function book_to_wk3(wb, opts) {
          var o = opts || {};
          if (+o.codepage >= 0)
            set_cp(+o.codepage);
          if (o.type == "string")
            throw new Error("Cannot write WK3 to JS string");
          var ba = buf_array();
          write_biff_rec(ba, 0, write_BOF_WK3(wb));
          for (var i = 0, cnt = 0; i < wb.SheetNames.length; ++i)
            if ((wb.Sheets[wb.SheetNames[i]] || {})["!ref"])
              write_biff_rec(ba, 27, write_XFORMAT_SHEETNAME(wb.SheetNames[i], cnt++));
          var wsidx = 0;
          for (i = 0; i < wb.SheetNames.length; ++i) {
            var ws = wb.Sheets[wb.SheetNames[i]];
            if (!ws || !ws["!ref"])
              continue;
            var range = safe_decode_range(ws["!ref"]);
            var dense = Array.isArray(ws);
            var cols = [];
            var max_R = Math.min(range.e.r, 8191);
            for (var R = range.s.r; R <= max_R; ++R) {
              var rr = encode_row(R);
              for (var C = range.s.c; C <= range.e.c; ++C) {
                if (R === range.s.r)
                  cols[C] = encode_col(C);
                var ref = cols[C] + rr;
                var cell = dense ? (ws[R] || [])[C] : ws[ref];
                if (!cell || cell.t == "z")
                  continue;
                if (cell.t == "n") {
                  write_biff_rec(ba, 23, write_NUMBER_17(R, C, wsidx, cell.v));
                } else {
                  var str = format_cell(cell);
                  write_biff_rec(ba, 22, write_LABEL_16(R, C, wsidx, str.slice(0, 239)));
                }
              }
            }
            ++wsidx;
          }
          write_biff_rec(ba, 1);
          return ba.end();
        }
        function write_BOF_WK1(v) {
          var out = new_buf(2);
          out.write_shift(2, v);
          return out;
        }
        function write_BOF_WK3(wb) {
          var out = new_buf(26);
          out.write_shift(2, 4096);
          out.write_shift(2, 4);
          out.write_shift(4, 0);
          var rows = 0, cols = 0, wscnt = 0;
          for (var i = 0; i < wb.SheetNames.length; ++i) {
            var name = wb.SheetNames[i];
            var ws = wb.Sheets[name];
            if (!ws || !ws["!ref"])
              continue;
            ++wscnt;
            var range = decode_range(ws["!ref"]);
            if (rows < range.e.r)
              rows = range.e.r;
            if (cols < range.e.c)
              cols = range.e.c;
          }
          if (rows > 8191)
            rows = 8191;
          out.write_shift(2, rows);
          out.write_shift(1, wscnt);
          out.write_shift(1, cols);
          out.write_shift(2, 0);
          out.write_shift(2, 0);
          out.write_shift(1, 1);
          out.write_shift(1, 2);
          out.write_shift(4, 0);
          out.write_shift(4, 0);
          return out;
        }
        function parse_RANGE(blob, length, opts) {
          var o = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
          if (length == 8 && opts.qpro) {
            o.s.c = blob.read_shift(1);
            blob.l++;
            o.s.r = blob.read_shift(2);
            o.e.c = blob.read_shift(1);
            blob.l++;
            o.e.r = blob.read_shift(2);
            return o;
          }
          o.s.c = blob.read_shift(2);
          o.s.r = blob.read_shift(2);
          if (length == 12 && opts.qpro)
            blob.l += 2;
          o.e.c = blob.read_shift(2);
          o.e.r = blob.read_shift(2);
          if (length == 12 && opts.qpro)
            blob.l += 2;
          if (o.s.c == 65535)
            o.s.c = o.e.c = o.s.r = o.e.r = 0;
          return o;
        }
        function write_RANGE(range) {
          var out = new_buf(8);
          out.write_shift(2, range.s.c);
          out.write_shift(2, range.s.r);
          out.write_shift(2, range.e.c);
          out.write_shift(2, range.e.r);
          return out;
        }
        function parse_cell(blob, length, opts) {
          var o = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0, 0];
          if (opts.qpro && opts.vers != 20768) {
            o[0].c = blob.read_shift(1);
            o[3] = blob.read_shift(1);
            o[0].r = blob.read_shift(2);
            blob.l += 2;
          } else {
            o[2] = blob.read_shift(1);
            o[0].c = blob.read_shift(2);
            o[0].r = blob.read_shift(2);
          }
          return o;
        }
        function parse_LABEL(blob, length, opts) {
          var tgt = blob.l + length;
          var o = parse_cell(blob, length, opts);
          o[1].t = "s";
          if (opts.vers == 20768) {
            blob.l++;
            var len = blob.read_shift(1);
            o[1].v = blob.read_shift(len, "utf8");
            return o;
          }
          if (opts.qpro)
            blob.l++;
          o[1].v = blob.read_shift(tgt - blob.l, "cstr");
          return o;
        }
        function write_LABEL(R, C, s) {
          var o = new_buf(7 + s.length);
          o.write_shift(1, 255);
          o.write_shift(2, C);
          o.write_shift(2, R);
          o.write_shift(1, 39);
          for (var i = 0; i < o.length; ++i) {
            var cc = s.charCodeAt(i);
            o.write_shift(1, cc >= 128 ? 95 : cc);
          }
          o.write_shift(1, 0);
          return o;
        }
        function parse_INTEGER(blob, length, opts) {
          var o = parse_cell(blob, length, opts);
          o[1].v = blob.read_shift(2, "i");
          return o;
        }
        function write_INTEGER(R, C, v) {
          var o = new_buf(7);
          o.write_shift(1, 255);
          o.write_shift(2, C);
          o.write_shift(2, R);
          o.write_shift(2, v, "i");
          return o;
        }
        function parse_NUMBER(blob, length, opts) {
          var o = parse_cell(blob, length, opts);
          o[1].v = blob.read_shift(8, "f");
          return o;
        }
        function write_NUMBER(R, C, v) {
          var o = new_buf(13);
          o.write_shift(1, 255);
          o.write_shift(2, C);
          o.write_shift(2, R);
          o.write_shift(8, v, "f");
          return o;
        }
        function parse_FORMULA(blob, length, opts) {
          var tgt = blob.l + length;
          var o = parse_cell(blob, length, opts);
          o[1].v = blob.read_shift(8, "f");
          if (opts.qpro)
            blob.l = tgt;
          else {
            var flen = blob.read_shift(2);
            wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o);
            blob.l += flen;
          }
          return o;
        }
        function wk1_parse_rc(B, V, col) {
          var rel = V & 32768;
          V &= ~32768;
          V = (rel ? B : 0) + (V >= 8192 ? V - 16384 : V);
          return (rel ? "" : "$") + (col ? encode_col(V) : encode_row(V));
        }
        var FuncTab = {
          51: ["FALSE", 0],
          52: ["TRUE", 0],
          70: ["LEN", 1],
          80: ["SUM", 69],
          81: ["AVERAGEA", 69],
          82: ["COUNTA", 69],
          83: ["MINA", 69],
          84: ["MAXA", 69],
          111: ["T", 1]
        };
        var BinOpTab = [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "+",
          "-",
          "*",
          "/",
          "^",
          "=",
          "<>",
          "<=",
          ">=",
          "<",
          ">",
          "",
          "",
          "",
          "",
          "&",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
        ];
        function wk1_fmla_to_csf(blob, o) {
          prep_blob(blob, 0);
          var out = [], argc = 0, R = "", C = "", argL = "", argR = "";
          while (blob.l < blob.length) {
            var cc = blob[blob.l++];
            switch (cc) {
              case 0:
                out.push(blob.read_shift(8, "f"));
                break;
              case 1:
                {
                  C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                  R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                  out.push(C + R);
                }
                break;
              case 2:
                {
                  var c = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                  var r = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                  C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                  R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                  out.push(c + r + ":" + C + R);
                }
                break;
              case 3:
                if (blob.l < blob.length) {
                  console.error("WK1 premature formula end");
                  return;
                }
                break;
              case 4:
                out.push("(" + out.pop() + ")");
                break;
              case 5:
                out.push(blob.read_shift(2));
                break;
              case 6:
                {
                  var Z = "";
                  while (cc = blob[blob.l++])
                    Z += String.fromCharCode(cc);
                  out.push('"' + Z.replace(/"/g, '""') + '"');
                }
                break;
              case 8:
                out.push("-" + out.pop());
                break;
              case 23:
                out.push("+" + out.pop());
                break;
              case 22:
                out.push("NOT(" + out.pop() + ")");
                break;
              case 20:
              case 21:
                {
                  argR = out.pop();
                  argL = out.pop();
                  out.push(["AND", "OR"][cc - 20] + "(" + argL + "," + argR + ")");
                }
                break;
              default:
                if (cc < 32 && BinOpTab[cc]) {
                  argR = out.pop();
                  argL = out.pop();
                  out.push(argL + BinOpTab[cc] + argR);
                } else if (FuncTab[cc]) {
                  argc = FuncTab[cc][1];
                  if (argc == 69)
                    argc = blob[blob.l++];
                  if (argc > out.length) {
                    console.error("WK1 bad formula parse 0x" + cc.toString(16) + ":|" + out.join("|") + "|");
                    return;
                  }
                  var args = out.slice(-argc);
                  out.length -= argc;
                  out.push(FuncTab[cc][0] + "(" + args.join(",") + ")");
                } else if (cc <= 7)
                  return console.error("WK1 invalid opcode " + cc.toString(16));
                else if (cc <= 24)
                  return console.error("WK1 unsupported op " + cc.toString(16));
                else if (cc <= 30)
                  return console.error("WK1 invalid opcode " + cc.toString(16));
                else if (cc <= 115)
                  return console.error("WK1 unsupported function opcode " + cc.toString(16));
                else
                  return console.error("WK1 unrecognized opcode " + cc.toString(16));
            }
          }
          if (out.length == 1)
            o[1].f = "" + out[0];
          else
            console.error("WK1 bad formula parse |" + out.join("|") + "|");
        }
        function parse_cell_3(blob) {
          var o = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0];
          o[0].r = blob.read_shift(2);
          o[3] = blob[blob.l++];
          o[0].c = blob[blob.l++];
          return o;
        }
        function parse_LABEL_16(blob, length) {
          var o = parse_cell_3(blob, length);
          o[1].t = "s";
          o[1].v = blob.read_shift(length - 4, "cstr");
          return o;
        }
        function write_LABEL_16(R, C, wsidx, s) {
          var o = new_buf(6 + s.length);
          o.write_shift(2, R);
          o.write_shift(1, wsidx);
          o.write_shift(1, C);
          o.write_shift(1, 39);
          for (var i = 0; i < s.length; ++i) {
            var cc = s.charCodeAt(i);
            o.write_shift(1, cc >= 128 ? 95 : cc);
          }
          o.write_shift(1, 0);
          return o;
        }
        function parse_NUMBER_18(blob, length) {
          var o = parse_cell_3(blob, length);
          o[1].v = blob.read_shift(2);
          var v = o[1].v >> 1;
          if (o[1].v & 1) {
            switch (v & 7) {
              case 0:
                v = (v >> 3) * 5e3;
                break;
              case 1:
                v = (v >> 3) * 500;
                break;
              case 2:
                v = (v >> 3) / 20;
                break;
              case 3:
                v = (v >> 3) / 200;
                break;
              case 4:
                v = (v >> 3) / 2e3;
                break;
              case 5:
                v = (v >> 3) / 2e4;
                break;
              case 6:
                v = (v >> 3) / 16;
                break;
              case 7:
                v = (v >> 3) / 64;
                break;
            }
          }
          o[1].v = v;
          return o;
        }
        function parse_NUMBER_17(blob, length) {
          var o = parse_cell_3(blob, length);
          var v1 = blob.read_shift(4);
          var v2 = blob.read_shift(4);
          var e = blob.read_shift(2);
          if (e == 65535) {
            if (v1 === 0 && v2 === 3221225472) {
              o[1].t = "e";
              o[1].v = 15;
            } else if (v1 === 0 && v2 === 3489660928) {
              o[1].t = "e";
              o[1].v = 42;
            } else
              o[1].v = 0;
            return o;
          }
          var s = e & 32768;
          e = (e & 32767) - 16446;
          o[1].v = (1 - s * 2) * (v2 * Math.pow(2, e + 32) + v1 * Math.pow(2, e));
          return o;
        }
        function write_NUMBER_17(R, C, wsidx, v) {
          var o = new_buf(14);
          o.write_shift(2, R);
          o.write_shift(1, wsidx);
          o.write_shift(1, C);
          if (v == 0) {
            o.write_shift(4, 0);
            o.write_shift(4, 0);
            o.write_shift(2, 65535);
            return o;
          }
          var s = 0, e = 0, v1 = 0, v2 = 0;
          if (v < 0) {
            s = 1;
            v = -v;
          }
          e = Math.log2(v) | 0;
          v /= Math.pow(2, e - 31);
          v2 = v >>> 0;
          if ((v2 & 2147483648) == 0) {
            v /= 2;
            ++e;
            v2 = v >>> 0;
          }
          v -= v2;
          v2 |= 2147483648;
          v2 >>>= 0;
          v *= Math.pow(2, 32);
          v1 = v >>> 0;
          o.write_shift(4, v1);
          o.write_shift(4, v2);
          e += 16383 + (s ? 32768 : 0);
          o.write_shift(2, e);
          return o;
        }
        function parse_FORMULA_19(blob, length) {
          var o = parse_NUMBER_17(blob, 14);
          blob.l += length - 14;
          return o;
        }
        function parse_NUMBER_25(blob, length) {
          var o = parse_cell_3(blob, length);
          var v1 = blob.read_shift(4);
          o[1].v = v1 >> 6;
          return o;
        }
        function parse_NUMBER_27(blob, length) {
          var o = parse_cell_3(blob, length);
          var v1 = blob.read_shift(8, "f");
          o[1].v = v1;
          return o;
        }
        function parse_FORMULA_28(blob, length) {
          var o = parse_NUMBER_27(blob, 14);
          blob.l += length - 10;
          return o;
        }
        function parse_SHEETNAMECS(blob, length) {
          return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, "cstr") : "";
        }
        function parse_SHEETNAMELP(blob, length) {
          var len = blob[blob.l++];
          if (len > length - 1)
            len = length - 1;
          var o = "";
          while (o.length < len)
            o += String.fromCharCode(blob[blob.l++]);
          return o;
        }
        function parse_SHEETINFOQP(blob, length, opts) {
          if (!opts.qpro || length < 21)
            return;
          var id = blob.read_shift(1);
          blob.l += 17;
          blob.l += 1;
          blob.l += 2;
          var nm = blob.read_shift(length - 21, "cstr");
          return [id, nm];
        }
        function parse_XFORMAT(blob, length) {
          var o = {}, tgt = blob.l + length;
          while (blob.l < tgt) {
            var dt = blob.read_shift(2);
            if (dt == 14e3) {
              o[dt] = [0, ""];
              o[dt][0] = blob.read_shift(2);
              while (blob[blob.l]) {
                o[dt][1] += String.fromCharCode(blob[blob.l]);
                blob.l++;
              }
              blob.l++;
            }
          }
          return o;
        }
        function write_XFORMAT_SHEETNAME(name, wsidx) {
          var out = new_buf(5 + name.length);
          out.write_shift(2, 14e3);
          out.write_shift(2, wsidx);
          for (var i = 0; i < name.length; ++i) {
            var cc = name.charCodeAt(i);
            out[out.l++] = cc > 127 ? 95 : cc;
          }
          out[out.l++] = 0;
          return out;
        }
        var WK1Enum = {
          0: { n: "BOF", f: parseuint16 },
          1: { n: "EOF" },
          2: { n: "CALCMODE" },
          3: { n: "CALCORDER" },
          4: { n: "SPLIT" },
          5: { n: "SYNC" },
          6: { n: "RANGE", f: parse_RANGE },
          7: { n: "WINDOW1" },
          8: { n: "COLW1" },
          9: { n: "WINTWO" },
          10: { n: "COLW2" },
          11: { n: "NAME" },
          12: { n: "BLANK" },
          13: { n: "INTEGER", f: parse_INTEGER },
          14: { n: "NUMBER", f: parse_NUMBER },
          15: { n: "LABEL", f: parse_LABEL },
          16: { n: "FORMULA", f: parse_FORMULA },
          24: { n: "TABLE" },
          25: { n: "ORANGE" },
          26: { n: "PRANGE" },
          27: { n: "SRANGE" },
          28: { n: "FRANGE" },
          29: { n: "KRANGE1" },
          32: { n: "HRANGE" },
          35: { n: "KRANGE2" },
          36: { n: "PROTEC" },
          37: { n: "FOOTER" },
          38: { n: "HEADER" },
          39: { n: "SETUP" },
          40: { n: "MARGINS" },
          41: { n: "LABELFMT" },
          42: { n: "TITLES" },
          43: { n: "SHEETJS" },
          45: { n: "GRAPH" },
          46: { n: "NGRAPH" },
          47: { n: "CALCCOUNT" },
          48: { n: "UNFORMATTED" },
          49: { n: "CURSORW12" },
          50: { n: "WINDOW" },
          51: { n: "STRING", f: parse_LABEL },
          55: { n: "PASSWORD" },
          56: { n: "LOCKED" },
          60: { n: "QUERY" },
          61: { n: "QUERYNAME" },
          62: { n: "PRINT" },
          63: { n: "PRINTNAME" },
          64: { n: "GRAPH2" },
          65: { n: "GRAPHNAME" },
          66: { n: "ZOOM" },
          67: { n: "SYMSPLIT" },
          68: { n: "NSROWS" },
          69: { n: "NSCOLS" },
          70: { n: "RULER" },
          71: { n: "NNAME" },
          72: { n: "ACOMM" },
          73: { n: "AMACRO" },
          74: { n: "PARSE" },
          102: { n: "PRANGES??" },
          103: { n: "RRANGES??" },
          104: { n: "FNAME??" },
          105: { n: "MRANGES??" },
          204: { n: "SHEETNAMECS", f: parse_SHEETNAMECS },
          222: { n: "SHEETNAMELP", f: parse_SHEETNAMELP },
          65535: { n: "" }
        };
        var WK3Enum = {
          0: { n: "BOF" },
          1: { n: "EOF" },
          2: { n: "PASSWORD" },
          3: { n: "CALCSET" },
          4: { n: "WINDOWSET" },
          5: { n: "SHEETCELLPTR" },
          6: { n: "SHEETLAYOUT" },
          7: { n: "COLUMNWIDTH" },
          8: { n: "HIDDENCOLUMN" },
          9: { n: "USERRANGE" },
          10: { n: "SYSTEMRANGE" },
          11: { n: "ZEROFORCE" },
          12: { n: "SORTKEYDIR" },
          13: { n: "FILESEAL" },
          14: { n: "DATAFILLNUMS" },
          15: { n: "PRINTMAIN" },
          16: { n: "PRINTSTRING" },
          17: { n: "GRAPHMAIN" },
          18: { n: "GRAPHSTRING" },
          19: { n: "??" },
          20: { n: "ERRCELL" },
          21: { n: "NACELL" },
          22: { n: "LABEL16", f: parse_LABEL_16 },
          23: { n: "NUMBER17", f: parse_NUMBER_17 },
          24: { n: "NUMBER18", f: parse_NUMBER_18 },
          25: { n: "FORMULA19", f: parse_FORMULA_19 },
          26: { n: "FORMULA1A" },
          27: { n: "XFORMAT", f: parse_XFORMAT },
          28: { n: "DTLABELMISC" },
          29: { n: "DTLABELCELL" },
          30: { n: "GRAPHWINDOW" },
          31: { n: "CPA" },
          32: { n: "LPLAUTO" },
          33: { n: "QUERY" },
          34: { n: "HIDDENSHEET" },
          35: { n: "??" },
          37: { n: "NUMBER25", f: parse_NUMBER_25 },
          38: { n: "??" },
          39: { n: "NUMBER27", f: parse_NUMBER_27 },
          40: { n: "FORMULA28", f: parse_FORMULA_28 },
          142: { n: "??" },
          147: { n: "??" },
          150: { n: "??" },
          151: { n: "??" },
          152: { n: "??" },
          153: { n: "??" },
          154: { n: "??" },
          155: { n: "??" },
          156: { n: "??" },
          163: { n: "??" },
          174: { n: "??" },
          175: { n: "??" },
          176: { n: "??" },
          177: { n: "??" },
          184: { n: "??" },
          185: { n: "??" },
          186: { n: "??" },
          187: { n: "??" },
          188: { n: "??" },
          195: { n: "??" },
          201: { n: "??" },
          204: { n: "SHEETNAMECS", f: parse_SHEETNAMECS },
          205: { n: "??" },
          206: { n: "??" },
          207: { n: "??" },
          208: { n: "??" },
          256: { n: "??" },
          259: { n: "??" },
          260: { n: "??" },
          261: { n: "??" },
          262: { n: "??" },
          263: { n: "??" },
          265: { n: "??" },
          266: { n: "??" },
          267: { n: "??" },
          268: { n: "??" },
          270: { n: "??" },
          271: { n: "??" },
          384: { n: "??" },
          389: { n: "??" },
          390: { n: "??" },
          393: { n: "??" },
          396: { n: "??" },
          512: { n: "??" },
          514: { n: "??" },
          513: { n: "??" },
          516: { n: "??" },
          517: { n: "??" },
          640: { n: "??" },
          641: { n: "??" },
          642: { n: "??" },
          643: { n: "??" },
          644: { n: "??" },
          645: { n: "??" },
          646: { n: "??" },
          647: { n: "??" },
          648: { n: "??" },
          658: { n: "??" },
          659: { n: "??" },
          660: { n: "??" },
          661: { n: "??" },
          662: { n: "??" },
          665: { n: "??" },
          666: { n: "??" },
          768: { n: "??" },
          772: { n: "??" },
          1537: { n: "SHEETINFOQP", f: parse_SHEETINFOQP },
          1600: { n: "??" },
          1602: { n: "??" },
          1793: { n: "??" },
          1794: { n: "??" },
          1795: { n: "??" },
          1796: { n: "??" },
          1920: { n: "??" },
          2048: { n: "??" },
          2049: { n: "??" },
          2052: { n: "??" },
          2688: { n: "??" },
          10998: { n: "??" },
          12849: { n: "??" },
          28233: { n: "??" },
          28484: { n: "??" },
          65535: { n: "" }
        };
        return {
          sheet_to_wk1,
          book_to_wk3,
          to_workbook: lotus_to_workbook
        };
      }();
      function parse_rpr(rpr) {
        var font = {}, m = rpr.match(tagregex), i = 0;
        var pass = false;
        if (m)
          for (; i != m.length; ++i) {
            var y = parsexmltag(m[i]);
            switch (y[0].replace(/\w*:/g, "")) {
              case "<condense":
                break;
              case "<extend":
                break;
              case "<shadow":
                if (!y.val)
                  break;
              case "<shadow>":
              case "<shadow/>":
                font.shadow = 1;
                break;
              case "</shadow>":
                break;
              case "<charset":
                if (y.val == "1")
                  break;
                font.cp = CS2CP[parseInt(y.val, 10)];
                break;
              case "<outline":
                if (!y.val)
                  break;
              case "<outline>":
              case "<outline/>":
                font.outline = 1;
                break;
              case "</outline>":
                break;
              case "<rFont":
                font.name = y.val;
                break;
              case "<sz":
                font.sz = y.val;
                break;
              case "<strike":
                if (!y.val)
                  break;
              case "<strike>":
              case "<strike/>":
                font.strike = 1;
                break;
              case "</strike>":
                break;
              case "<u":
                if (!y.val)
                  break;
                switch (y.val) {
                  case "double":
                    font.uval = "double";
                    break;
                  case "singleAccounting":
                    font.uval = "single-accounting";
                    break;
                  case "doubleAccounting":
                    font.uval = "double-accounting";
                    break;
                }
              case "<u>":
              case "<u/>":
                font.u = 1;
                break;
              case "</u>":
                break;
              case "<b":
                if (y.val == "0")
                  break;
              case "<b>":
              case "<b/>":
                font.b = 1;
                break;
              case "</b>":
                break;
              case "<i":
                if (y.val == "0")
                  break;
              case "<i>":
              case "<i/>":
                font.i = 1;
                break;
              case "</i>":
                break;
              case "<color":
                if (y.rgb)
                  font.color = y.rgb.slice(2, 8);
                break;
              case "<color>":
              case "<color/>":
              case "</color>":
                break;
              case "<family":
                font.family = y.val;
                break;
              case "<family>":
              case "<family/>":
              case "</family>":
                break;
              case "<vertAlign":
                font.valign = y.val;
                break;
              case "<vertAlign>":
              case "<vertAlign/>":
              case "</vertAlign>":
                break;
              case "<scheme":
                break;
              case "<scheme>":
              case "<scheme/>":
              case "</scheme>":
                break;
              case "<extLst":
              case "<extLst>":
              case "</extLst>":
                break;
              case "<ext":
                pass = true;
                break;
              case "</ext>":
                pass = false;
                break;
              default:
                if (y[0].charCodeAt(1) !== 47 && !pass)
                  throw new Error("Unrecognized rich format " + y[0]);
            }
          }
        return font;
      }
      var parse_rs = function() {
        var tregex = matchtag("t"), rpregex = matchtag("rPr");
        function parse_r(r) {
          var t = r.match(tregex);
          if (!t)
            return { t: "s", v: "" };
          var o = { t: "s", v: unescapexml(t[1]) };
          var rpr = r.match(rpregex);
          if (rpr)
            o.s = parse_rpr(rpr[1]);
          return o;
        }
        var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
        return function parse_rs2(rs) {
          return rs.replace(rregex, "").split(rend).map(parse_r).filter(function(r) {
            return r.v;
          });
        };
      }();
      var rs_to_html = function parse_rs_factory() {
        var nlregex = /(\r\n|\n)/g;
        function parse_rpr2(font, intro, outro) {
          var style = [];
          if (font.u)
            style.push("text-decoration: underline;");
          if (font.uval)
            style.push("text-underline-style:" + font.uval + ";");
          if (font.sz)
            style.push("font-size:" + font.sz + "pt;");
          if (font.outline)
            style.push("text-effect: outline;");
          if (font.shadow)
            style.push("text-shadow: auto;");
          intro.push('<span style="' + style.join("") + '">');
          if (font.b) {
            intro.push("<b>");
            outro.push("</b>");
          }
          if (font.i) {
            intro.push("<i>");
            outro.push("</i>");
          }
          if (font.strike) {
            intro.push("<s>");
            outro.push("</s>");
          }
          var align = font.valign || "";
          if (align == "superscript" || align == "super")
            align = "sup";
          else if (align == "subscript")
            align = "sub";
          if (align != "") {
            intro.push("<" + align + ">");
            outro.push("</" + align + ">");
          }
          outro.push("</span>");
          return font;
        }
        function r_to_html(r) {
          var terms = [[], r.v, []];
          if (!r.v)
            return "";
          if (r.s)
            parse_rpr2(r.s, terms[0], terms[2]);
          return terms[0].join("") + terms[1].replace(nlregex, "<br/>") + terms[2].join("");
        }
        return function parse_rs2(rs) {
          return rs.map(r_to_html).join("");
        };
      }();
      var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/;
      var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
      function parse_si(x, opts) {
        var html = opts ? opts.cellHTML : true;
        var z = {};
        if (!x)
          return { t: "" };
        if (x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
          z.t = unescapexml(utf8read(x.slice(x.indexOf(">") + 1).split(/<\/(?:\w+:)?t>/)[0] || ""));
          z.r = utf8read(x);
          if (html)
            z.h = escapehtml(z.t);
        } else if (x.match(sirregex)) {
          z.r = utf8read(x);
          z.t = unescapexml(utf8read((x.replace(sirphregex, "").match(sitregex) || []).join("").replace(tagregex, "")));
          if (html)
            z.h = rs_to_html(parse_rs(z.r));
        }
        return z;
      }
      var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
      var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
      var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
      function parse_sst_xml(data, opts) {
        var s = [], ss = "";
        if (!data)
          return s;
        var sst = data.match(sstr0);
        if (sst) {
          ss = sst[2].replace(sstr1, "").split(sstr2);
          for (var i = 0; i != ss.length; ++i) {
            var o = parse_si(ss[i].trim(), opts);
            if (o != null)
              s[s.length] = o;
          }
          sst = parsexmltag(sst[1]);
          s.Count = sst.count;
          s.Unique = sst.uniqueCount;
        }
        return s;
      }
      var straywsregex = /^\s|\s$|[\t\n\r]/;
      function write_sst_xml(sst, opts) {
        if (!opts.bookSST)
          return "";
        var o = [XML_HEADER];
        o[o.length] = writextag("sst", null, {
          xmlns: XMLNS_main[0],
          count: sst.Count,
          uniqueCount: sst.Unique
        });
        for (var i = 0; i != sst.length; ++i) {
          if (sst[i] == null)
            continue;
          var s = sst[i];
          var sitag = "<si>";
          if (s.r)
            sitag += s.r;
          else {
            sitag += "<t";
            if (!s.t)
              s.t = "";
            if (s.t.match(straywsregex))
              sitag += ' xml:space="preserve"';
            sitag += ">" + escapexml(s.t) + "</t>";
          }
          sitag += "</si>";
          o[o.length] = sitag;
        }
        if (o.length > 2) {
          o[o.length] = "</sst>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_BrtBeginSst(data) {
        return [data.read_shift(4), data.read_shift(4)];
      }
      function parse_sst_bin(data, opts) {
        var s = [];
        var pass = false;
        recordhopper(data, function hopper_sst(val, R, RT) {
          switch (RT) {
            case 159:
              s.Count = val[0];
              s.Unique = val[1];
              break;
            case 19:
              s.push(val);
              break;
            case 160:
              return true;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            default:
              if (R.T) {
              }
              if (!pass || opts.WTF)
                throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        });
        return s;
      }
      function write_BrtBeginSst(sst, o) {
        if (!o)
          o = new_buf(8);
        o.write_shift(4, sst.Count);
        o.write_shift(4, sst.Unique);
        return o;
      }
      var write_BrtSSTItem = write_RichStr;
      function write_sst_bin(sst) {
        var ba = buf_array();
        write_record(ba, 159, write_BrtBeginSst(sst));
        for (var i = 0; i < sst.length; ++i)
          write_record(ba, 19, write_BrtSSTItem(sst[i]));
        write_record(ba, 160);
        return ba.end();
      }
      function _JS2ANSI(str) {
        if (typeof $cptable !== "undefined")
          return $cptable.utils.encode(current_ansi, str);
        var o = [], oo = str.split("");
        for (var i = 0; i < oo.length; ++i)
          o[i] = oo[i].charCodeAt(0);
        return o;
      }
      function parse_CRYPTOVersion(blob, length) {
        var o = {};
        o.Major = blob.read_shift(2);
        o.Minor = blob.read_shift(2);
        if (length >= 4)
          blob.l += length - 4;
        return o;
      }
      function parse_DataSpaceVersionInfo(blob) {
        var o = {};
        o.id = blob.read_shift(0, "lpp4");
        o.R = parse_CRYPTOVersion(blob, 4);
        o.U = parse_CRYPTOVersion(blob, 4);
        o.W = parse_CRYPTOVersion(blob, 4);
        return o;
      }
      function parse_DataSpaceMapEntry(blob) {
        var len = blob.read_shift(4);
        var end = blob.l + len - 4;
        var o = {};
        var cnt = blob.read_shift(4);
        var comps = [];
        while (cnt-- > 0)
          comps.push({ t: blob.read_shift(4), v: blob.read_shift(0, "lpp4") });
        o.name = blob.read_shift(0, "lpp4");
        o.comps = comps;
        if (blob.l != end)
          throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
        return o;
      }
      function parse_DataSpaceMap(blob) {
        var o = [];
        blob.l += 4;
        var cnt = blob.read_shift(4);
        while (cnt-- > 0)
          o.push(parse_DataSpaceMapEntry(blob));
        return o;
      }
      function parse_DataSpaceDefinition(blob) {
        var o = [];
        blob.l += 4;
        var cnt = blob.read_shift(4);
        while (cnt-- > 0)
          o.push(blob.read_shift(0, "lpp4"));
        return o;
      }
      function parse_TransformInfoHeader(blob) {
        var o = {};
        blob.read_shift(4);
        blob.l += 4;
        o.id = blob.read_shift(0, "lpp4");
        o.name = blob.read_shift(0, "lpp4");
        o.R = parse_CRYPTOVersion(blob, 4);
        o.U = parse_CRYPTOVersion(blob, 4);
        o.W = parse_CRYPTOVersion(blob, 4);
        return o;
      }
      function parse_Primary(blob) {
        var hdr = parse_TransformInfoHeader(blob);
        hdr.ename = blob.read_shift(0, "8lpp4");
        hdr.blksz = blob.read_shift(4);
        hdr.cmode = blob.read_shift(4);
        if (blob.read_shift(4) != 4)
          throw new Error("Bad !Primary record");
        return hdr;
      }
      function parse_EncryptionHeader(blob, length) {
        var tgt = blob.l + length;
        var o = {};
        o.Flags = blob.read_shift(4) & 63;
        blob.l += 4;
        o.AlgID = blob.read_shift(4);
        var valid = false;
        switch (o.AlgID) {
          case 26126:
          case 26127:
          case 26128:
            valid = o.Flags == 36;
            break;
          case 26625:
            valid = o.Flags == 4;
            break;
          case 0:
            valid = o.Flags == 16 || o.Flags == 4 || o.Flags == 36;
            break;
          default:
            throw "Unrecognized encryption algorithm: " + o.AlgID;
        }
        if (!valid)
          throw new Error("Encryption Flags/AlgID mismatch");
        o.AlgIDHash = blob.read_shift(4);
        o.KeySize = blob.read_shift(4);
        o.ProviderType = blob.read_shift(4);
        blob.l += 8;
        o.CSPName = blob.read_shift(tgt - blob.l >> 1, "utf16le");
        blob.l = tgt;
        return o;
      }
      function parse_EncryptionVerifier(blob, length) {
        var o = {}, tgt = blob.l + length;
        blob.l += 4;
        o.Salt = blob.slice(blob.l, blob.l + 16);
        blob.l += 16;
        o.Verifier = blob.slice(blob.l, blob.l + 16);
        blob.l += 16;
        blob.read_shift(4);
        o.VerifierHash = blob.slice(blob.l, tgt);
        blob.l = tgt;
        return o;
      }
      function parse_EncryptionInfo(blob) {
        var vers = parse_CRYPTOVersion(blob);
        switch (vers.Minor) {
          case 2:
            return [vers.Minor, parse_EncInfoStd(blob, vers)];
          case 3:
            return [vers.Minor, parse_EncInfoExt(blob, vers)];
          case 4:
            return [vers.Minor, parse_EncInfoAgl(blob, vers)];
        }
        throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
      }
      function parse_EncInfoStd(blob) {
        var flags = blob.read_shift(4);
        if ((flags & 63) != 36)
          throw new Error("EncryptionInfo mismatch");
        var sz = blob.read_shift(4);
        var hdr = parse_EncryptionHeader(blob, sz);
        var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
        return { t: "Std", h: hdr, v: verifier };
      }
      function parse_EncInfoExt() {
        throw new Error("File is password-protected: ECMA-376 Extensible");
      }
      function parse_EncInfoAgl(blob) {
        var KeyData = ["saltSize", "blockSize", "keyBits", "hashSize", "cipherAlgorithm", "cipherChaining", "hashAlgorithm", "saltValue"];
        blob.l += 4;
        var xml = blob.read_shift(blob.length - blob.l, "utf8");
        var o = {};
        xml.replace(tagregex, function xml_agile(x) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<?xml":
              break;
            case "<encryption":
            case "</encryption>":
              break;
            case "<keyData":
              KeyData.forEach(function(k) {
                o[k] = y[k];
              });
              break;
            case "<dataIntegrity":
              o.encryptedHmacKey = y.encryptedHmacKey;
              o.encryptedHmacValue = y.encryptedHmacValue;
              break;
            case "<keyEncryptors>":
            case "<keyEncryptors":
              o.encs = [];
              break;
            case "</keyEncryptors>":
              break;
            case "<keyEncryptor":
              o.uri = y.uri;
              break;
            case "</keyEncryptor>":
              break;
            case "<encryptedKey":
              o.encs.push(y);
              break;
            default:
              throw y[0];
          }
        });
        return o;
      }
      function parse_RC4CryptoHeader(blob, length) {
        var o = {};
        var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
        length -= 4;
        if (vers.Minor != 2)
          throw new Error("unrecognized minor version code: " + vers.Minor);
        if (vers.Major > 4 || vers.Major < 2)
          throw new Error("unrecognized major version code: " + vers.Major);
        o.Flags = blob.read_shift(4);
        length -= 4;
        var sz = blob.read_shift(4);
        length -= 4;
        o.EncryptionHeader = parse_EncryptionHeader(blob, sz);
        length -= sz;
        o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
        return o;
      }
      function parse_RC4Header(blob) {
        var o = {};
        var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
        if (vers.Major != 1 || vers.Minor != 1)
          throw "unrecognized version code " + vers.Major + " : " + vers.Minor;
        o.Salt = blob.read_shift(16);
        o.EncryptedVerifier = blob.read_shift(16);
        o.EncryptedVerifierHash = blob.read_shift(16);
        return o;
      }
      function crypto_CreatePasswordVerifier_Method1(Password) {
        var Verifier = 0, PasswordArray;
        var PasswordDecoded = _JS2ANSI(Password);
        var len = PasswordDecoded.length + 1, i, PasswordByte;
        var Intermediate1, Intermediate2, Intermediate3;
        PasswordArray = new_raw_buf(len);
        PasswordArray[0] = PasswordDecoded.length;
        for (i = 1; i != len; ++i)
          PasswordArray[i] = PasswordDecoded[i - 1];
        for (i = len - 1; i >= 0; --i) {
          PasswordByte = PasswordArray[i];
          Intermediate1 = (Verifier & 16384) === 0 ? 0 : 1;
          Intermediate2 = Verifier << 1 & 32767;
          Intermediate3 = Intermediate1 | Intermediate2;
          Verifier = Intermediate3 ^ PasswordByte;
        }
        return Verifier ^ 52811;
      }
      var crypto_CreateXorArray_Method1 = function() {
        var PadArray = [187, 255, 255, 186, 255, 255, 185, 128, 0, 190, 15, 0, 191, 15, 0];
        var InitialCode = [57840, 7439, 52380, 33984, 4364, 3600, 61902, 12606, 6258, 57657, 54287, 34041, 10252, 43370, 20163];
        var XorMatrix = [44796, 19929, 39858, 10053, 20106, 40212, 10761, 31585, 63170, 64933, 60267, 50935, 40399, 11199, 17763, 35526, 1453, 2906, 5812, 11624, 23248, 885, 1770, 3540, 7080, 14160, 28320, 56640, 55369, 41139, 20807, 41614, 21821, 43642, 17621, 28485, 56970, 44341, 19019, 38038, 14605, 29210, 60195, 50791, 40175, 10751, 21502, 43004, 24537, 18387, 36774, 3949, 7898, 15796, 31592, 63184, 47201, 24803, 49606, 37805, 14203, 28406, 56812, 17824, 35648, 1697, 3394, 6788, 13576, 27152, 43601, 17539, 35078, 557, 1114, 2228, 4456, 30388, 60776, 51953, 34243, 7079, 14158, 28316, 14128, 28256, 56512, 43425, 17251, 34502, 7597, 13105, 26210, 52420, 35241, 883, 1766, 3532, 4129, 8258, 16516, 33032, 4657, 9314, 18628];
        var Ror = function(Byte) {
          return (Byte / 2 | Byte * 128) & 255;
        };
        var XorRor = function(byte1, byte2) {
          return Ror(byte1 ^ byte2);
        };
        var CreateXorKey_Method1 = function(Password) {
          var XorKey = InitialCode[Password.length - 1];
          var CurrentElement = 104;
          for (var i = Password.length - 1; i >= 0; --i) {
            var Char = Password[i];
            for (var j = 0; j != 7; ++j) {
              if (Char & 64)
                XorKey ^= XorMatrix[CurrentElement];
              Char *= 2;
              --CurrentElement;
            }
          }
          return XorKey;
        };
        return function(password) {
          var Password = _JS2ANSI(password);
          var XorKey = CreateXorKey_Method1(Password);
          var Index = Password.length;
          var ObfuscationArray = new_raw_buf(16);
          for (var i = 0; i != 16; ++i)
            ObfuscationArray[i] = 0;
          var Temp, PasswordLastChar, PadIndex;
          if ((Index & 1) === 1) {
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
            --Index;
            Temp = XorKey & 255;
            PasswordLastChar = Password[Password.length - 1];
            ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
          }
          while (Index > 0) {
            --Index;
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            --Index;
            Temp = XorKey & 255;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
          }
          Index = 15;
          PadIndex = 15 - Password.length;
          while (PadIndex > 0) {
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
            --Index;
            --PadIndex;
            Temp = XorKey & 255;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            --Index;
            --PadIndex;
          }
          return ObfuscationArray;
        };
      }();
      var crypto_DecryptData_Method1 = function(password, Data, XorArrayIndex, XorArray, O) {
        if (!O)
          O = Data;
        if (!XorArray)
          XorArray = crypto_CreateXorArray_Method1(password);
        var Index, Value;
        for (Index = 0; Index != Data.length; ++Index) {
          Value = Data[Index];
          Value ^= XorArray[XorArrayIndex];
          Value = (Value >> 5 | Value << 3) & 255;
          O[Index] = Value;
          ++XorArrayIndex;
        }
        return [O, XorArrayIndex, XorArray];
      };
      var crypto_MakeXorDecryptor = function(password) {
        var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
        return function(Data) {
          var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
          XorArrayIndex = O[1];
          return O[0];
        };
      };
      function parse_XORObfuscation(blob, length, opts, out) {
        var o = { key: parseuint16(blob), verificationBytes: parseuint16(blob) };
        if (opts.password)
          o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
        out.valid = o.verificationBytes === o.verifier;
        if (out.valid)
          out.insitu = crypto_MakeXorDecryptor(opts.password);
        return o;
      }
      function parse_FilePassHeader(blob, length, oo) {
        var o = oo || {};
        o.Info = blob.read_shift(2);
        blob.l -= 2;
        if (o.Info === 1)
          o.Data = parse_RC4Header(blob, length);
        else
          o.Data = parse_RC4CryptoHeader(blob, length);
        return o;
      }
      function parse_FilePass(blob, length, opts) {
        var o = { Type: opts.biff >= 8 ? blob.read_shift(2) : 0 };
        if (o.Type)
          parse_FilePassHeader(blob, length - 2, o);
        else
          parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);
        return o;
      }
      var RTF = function() {
        function rtf_to_sheet(d, opts) {
          switch (opts.type) {
            case "base64":
              return rtf_to_sheet_str(Base64_decode(d), opts);
            case "binary":
              return rtf_to_sheet_str(d, opts);
            case "buffer":
              return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString("binary") : a2s(d), opts);
            case "array":
              return rtf_to_sheet_str(cc2str(d), opts);
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function rtf_to_sheet_str(str, opts) {
          var o = opts || {};
          var ws = o.dense ? [] : {};
          var rows = str.match(/\\trowd.*?\\row\b/g);
          if (!rows.length)
            throw new Error("RTF missing table");
          var range = { s: { c: 0, r: 0 }, e: { c: 0, r: rows.length - 1 } };
          rows.forEach(function(rowtf, R) {
            if (Array.isArray(ws))
              ws[R] = [];
            var rtfre = /\\\w+\b/g;
            var last_index = 0;
            var res;
            var C = -1;
            while (res = rtfre.exec(rowtf)) {
              switch (res[0]) {
                case "\\cell":
                  var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
                  if (data[0] == " ")
                    data = data.slice(1);
                  ++C;
                  if (data.length) {
                    var cell = { v: data, t: "s" };
                    if (Array.isArray(ws))
                      ws[R][C] = cell;
                    else
                      ws[encode_cell({ r: R, c: C })] = cell;
                  }
                  break;
              }
              last_index = rtfre.lastIndex;
            }
            if (C > range.e.c)
              range.e.c = C;
          });
          ws["!ref"] = encode_range(range);
          return ws;
        }
        function rtf_to_workbook(d, opts) {
          return sheet_to_workbook(rtf_to_sheet(d, opts), opts);
        }
        function sheet_to_rtf(ws) {
          var o = ["{\\rtf1\\ansi"];
          var r = safe_decode_range(ws["!ref"]), cell;
          var dense = Array.isArray(ws);
          for (var R = r.s.r; R <= r.e.r; ++R) {
            o.push("\\trowd\\trautofit1");
            for (var C = r.s.c; C <= r.e.c; ++C)
              o.push("\\cellx" + (C + 1));
            o.push("\\pard\\intbl");
            for (C = r.s.c; C <= r.e.c; ++C) {
              var coord = encode_cell({ r: R, c: C });
              cell = dense ? (ws[R] || [])[C] : ws[coord];
              if (!cell || cell.v == null && (!cell.f || cell.F))
                continue;
              o.push(" " + (cell.w || (format_cell(cell), cell.w)));
              o.push("\\cell");
            }
            o.push("\\pard\\intbl\\row");
          }
          return o.join("") + "}";
        }
        return {
          to_workbook: rtf_to_workbook,
          to_sheet: rtf_to_sheet,
          from_sheet: sheet_to_rtf
        };
      }();
      function hex2RGB(h) {
        var o = h.slice(h[0] === "#" ? 1 : 0).slice(0, 6);
        return [parseInt(o.slice(0, 2), 16), parseInt(o.slice(2, 4), 16), parseInt(o.slice(4, 6), 16)];
      }
      function rgb2Hex(rgb) {
        for (var i = 0, o = 1; i != 3; ++i)
          o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]);
        return o.toString(16).toUpperCase().slice(1);
      }
      function rgb2HSL(rgb) {
        var R = rgb[0] / 255, G = rgb[1] / 255, B = rgb[2] / 255;
        var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;
        if (C === 0)
          return [0, 0, R];
        var H6 = 0, S = 0, L2 = M + m;
        S = C / (L2 > 1 ? 2 - L2 : L2);
        switch (M) {
          case R:
            H6 = ((G - B) / C + 6) % 6;
            break;
          case G:
            H6 = (B - R) / C + 2;
            break;
          case B:
            H6 = (R - G) / C + 4;
            break;
        }
        return [H6 / 6, S, L2 / 2];
      }
      function hsl2RGB(hsl) {
        var H = hsl[0], S = hsl[1], L = hsl[2];
        var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C / 2;
        var rgb = [m, m, m], h6 = 6 * H;
        var X;
        if (S !== 0)
          switch (h6 | 0) {
            case 0:
            case 6:
              X = C * h6;
              rgb[0] += C;
              rgb[1] += X;
              break;
            case 1:
              X = C * (2 - h6);
              rgb[0] += X;
              rgb[1] += C;
              break;
            case 2:
              X = C * (h6 - 2);
              rgb[1] += C;
              rgb[2] += X;
              break;
            case 3:
              X = C * (4 - h6);
              rgb[1] += X;
              rgb[2] += C;
              break;
            case 4:
              X = C * (h6 - 4);
              rgb[2] += C;
              rgb[0] += X;
              break;
            case 5:
              X = C * (6 - h6);
              rgb[2] += X;
              rgb[0] += C;
              break;
          }
        for (var i = 0; i != 3; ++i)
          rgb[i] = Math.round(rgb[i] * 255);
        return rgb;
      }
      function rgb_tint(hex, tint) {
        if (tint === 0)
          return hex;
        var hsl = rgb2HSL(hex2RGB(hex));
        if (tint < 0)
          hsl[2] = hsl[2] * (1 + tint);
        else
          hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
        return rgb2Hex(hsl2RGB(hsl));
      }
      var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
      function width2px(width) {
        return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);
      }
      function px2char(px) {
        return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;
      }
      function char2width(chr) {
        return Math.round((chr * MDW + 5) / MDW * 256) / 256;
      }
      function cycle_width(collw) {
        return char2width(px2char(width2px(collw)));
      }
      function find_mdw_colw(collw) {
        var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
        if (delta > 5e-3) {
          for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW)
            if (Math.abs(collw - cycle_width(collw)) <= delta) {
              delta = Math.abs(collw - cycle_width(collw));
              _MDW = MDW;
            }
        }
        MDW = _MDW;
      }
      function process_col(coll) {
        if (coll.width) {
          coll.wpx = width2px(coll.width);
          coll.wch = px2char(coll.wpx);
          coll.MDW = MDW;
        } else if (coll.wpx) {
          coll.wch = px2char(coll.wpx);
          coll.width = char2width(coll.wch);
          coll.MDW = MDW;
        } else if (typeof coll.wch == "number") {
          coll.width = char2width(coll.wch);
          coll.wpx = width2px(coll.width);
          coll.MDW = MDW;
        }
        if (coll.customWidth)
          delete coll.customWidth;
      }
      var DEF_PPI = 96, PPI = DEF_PPI;
      function px2pt(px) {
        return px * 96 / PPI;
      }
      function pt2px(pt) {
        return pt * PPI / 96;
      }
      var XLMLPatternTypeMap = {
        "None": "none",
        "Solid": "solid",
        "Gray50": "mediumGray",
        "Gray75": "darkGray",
        "Gray25": "lightGray",
        "HorzStripe": "darkHorizontal",
        "VertStripe": "darkVertical",
        "ReverseDiagStripe": "darkDown",
        "DiagStripe": "darkUp",
        "DiagCross": "darkGrid",
        "ThickDiagCross": "darkTrellis",
        "ThinHorzStripe": "lightHorizontal",
        "ThinVertStripe": "lightVertical",
        "ThinReverseDiagStripe": "lightDown",
        "ThinHorzCross": "lightGrid"
      };
      function parse_borders(t, styles, themes, opts) {
        styles.Borders = [];
        var border = {};
        var pass = false;
        (t[0].match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<borders":
            case "<borders>":
            case "</borders>":
              break;
            case "<border":
            case "<border>":
            case "<border/>":
              border = {};
              if (y.diagonalUp)
                border.diagonalUp = parsexmlbool(y.diagonalUp);
              if (y.diagonalDown)
                border.diagonalDown = parsexmlbool(y.diagonalDown);
              styles.Borders.push(border);
              break;
            case "</border>":
              break;
            case "<left/>":
              break;
            case "<left":
            case "<left>":
              break;
            case "</left>":
              break;
            case "<right/>":
              break;
            case "<right":
            case "<right>":
              break;
            case "</right>":
              break;
            case "<top/>":
              break;
            case "<top":
            case "<top>":
              break;
            case "</top>":
              break;
            case "<bottom/>":
              break;
            case "<bottom":
            case "<bottom>":
              break;
            case "</bottom>":
              break;
            case "<diagonal":
            case "<diagonal>":
            case "<diagonal/>":
              break;
            case "</diagonal>":
              break;
            case "<horizontal":
            case "<horizontal>":
            case "<horizontal/>":
              break;
            case "</horizontal>":
              break;
            case "<vertical":
            case "<vertical>":
            case "<vertical/>":
              break;
            case "</vertical>":
              break;
            case "<start":
            case "<start>":
            case "<start/>":
              break;
            case "</start>":
              break;
            case "<end":
            case "<end>":
            case "<end/>":
              break;
            case "</end>":
              break;
            case "<color":
            case "<color>":
              break;
            case "<color/>":
            case "</color>":
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass)
                  throw new Error("unrecognized " + y[0] + " in borders");
              }
          }
        });
      }
      function parse_fills(t, styles, themes, opts) {
        styles.Fills = [];
        var fill2 = {};
        var pass = false;
        (t[0].match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<fills":
            case "<fills>":
            case "</fills>":
              break;
            case "<fill>":
            case "<fill":
            case "<fill/>":
              fill2 = {};
              styles.Fills.push(fill2);
              break;
            case "</fill>":
              break;
            case "<gradientFill>":
              break;
            case "<gradientFill":
            case "</gradientFill>":
              styles.Fills.push(fill2);
              fill2 = {};
              break;
            case "<patternFill":
            case "<patternFill>":
              if (y.patternType)
                fill2.patternType = y.patternType;
              break;
            case "<patternFill/>":
            case "</patternFill>":
              break;
            case "<bgColor":
              if (!fill2.bgColor)
                fill2.bgColor = {};
              if (y.indexed)
                fill2.bgColor.indexed = parseInt(y.indexed, 10);
              if (y.theme)
                fill2.bgColor.theme = parseInt(y.theme, 10);
              if (y.tint)
                fill2.bgColor.tint = parseFloat(y.tint);
              if (y.rgb)
                fill2.bgColor.rgb = y.rgb.slice(-6);
              break;
            case "<bgColor/>":
            case "</bgColor>":
              break;
            case "<fgColor":
              if (!fill2.fgColor)
                fill2.fgColor = {};
              if (y.theme)
                fill2.fgColor.theme = parseInt(y.theme, 10);
              if (y.tint)
                fill2.fgColor.tint = parseFloat(y.tint);
              if (y.rgb != null)
                fill2.fgColor.rgb = y.rgb.slice(-6);
              break;
            case "<fgColor/>":
            case "</fgColor>":
              break;
            case "<stop":
            case "<stop/>":
              break;
            case "</stop>":
              break;
            case "<color":
            case "<color/>":
              break;
            case "</color>":
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass)
                  throw new Error("unrecognized " + y[0] + " in fills");
              }
          }
        });
      }
      function parse_fonts(t, styles, themes, opts) {
        styles.Fonts = [];
        var font = {};
        var pass = false;
        (t[0].match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<fonts":
            case "<fonts>":
            case "</fonts>":
              break;
            case "<font":
            case "<font>":
              break;
            case "</font>":
            case "<font/>":
              styles.Fonts.push(font);
              font = {};
              break;
            case "<name":
              if (y.val)
                font.name = utf8read(y.val);
              break;
            case "<name/>":
            case "</name>":
              break;
            case "<b":
              font.bold = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<b/>":
              font.bold = 1;
              break;
            case "<i":
              font.italic = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<i/>":
              font.italic = 1;
              break;
            case "<u":
              switch (y.val) {
                case "none":
                  font.underline = 0;
                  break;
                case "single":
                  font.underline = 1;
                  break;
                case "double":
                  font.underline = 2;
                  break;
                case "singleAccounting":
                  font.underline = 33;
                  break;
                case "doubleAccounting":
                  font.underline = 34;
                  break;
              }
              break;
            case "<u/>":
              font.underline = 1;
              break;
            case "<strike":
              font.strike = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<strike/>":
              font.strike = 1;
              break;
            case "<outline":
              font.outline = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<outline/>":
              font.outline = 1;
              break;
            case "<shadow":
              font.shadow = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<shadow/>":
              font.shadow = 1;
              break;
            case "<condense":
              font.condense = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<condense/>":
              font.condense = 1;
              break;
            case "<extend":
              font.extend = y.val ? parsexmlbool(y.val) : 1;
              break;
            case "<extend/>":
              font.extend = 1;
              break;
            case "<sz":
              if (y.val)
                font.sz = +y.val;
              break;
            case "<sz/>":
            case "</sz>":
              break;
            case "<vertAlign":
              if (y.val)
                font.vertAlign = y.val;
              break;
            case "<vertAlign/>":
            case "</vertAlign>":
              break;
            case "<family":
              if (y.val)
                font.family = parseInt(y.val, 10);
              break;
            case "<family/>":
            case "</family>":
              break;
            case "<scheme":
              if (y.val)
                font.scheme = y.val;
              break;
            case "<scheme/>":
            case "</scheme>":
              break;
            case "<charset":
              if (y.val == "1")
                break;
              y.codepage = CS2CP[parseInt(y.val, 10)];
              break;
            case "<color":
              if (!font.color)
                font.color = {};
              if (y.auto)
                font.color.auto = parsexmlbool(y.auto);
              if (y.rgb)
                font.color.rgb = y.rgb.slice(-6);
              else if (y.indexed) {
                font.color.index = parseInt(y.indexed, 10);
                var icv = XLSIcv[font.color.index];
                if (font.color.index == 81)
                  icv = XLSIcv[1];
                if (!icv)
                  icv = XLSIcv[1];
                font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
              } else if (y.theme) {
                font.color.theme = parseInt(y.theme, 10);
                if (y.tint)
                  font.color.tint = parseFloat(y.tint);
                if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {
                  font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
                }
              }
              break;
            case "<color/>":
            case "</color>":
              break;
            case "<AlternateContent":
              pass = true;
              break;
            case "</AlternateContent>":
              pass = false;
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass)
                  throw new Error("unrecognized " + y[0] + " in fonts");
              }
          }
        });
      }
      function parse_numFmts(t, styles, opts) {
        styles.NumberFmt = [];
        var k = keys(table_fmt);
        for (var i = 0; i < k.length; ++i)
          styles.NumberFmt[k[i]] = table_fmt[k[i]];
        var m = t[0].match(tagregex);
        if (!m)
          return;
        for (i = 0; i < m.length; ++i) {
          var y = parsexmltag(m[i]);
          switch (strip_ns(y[0])) {
            case "<numFmts":
            case "</numFmts>":
            case "<numFmts/>":
            case "<numFmts>":
              break;
            case "<numFmt":
              {
                var f = unescapexml(utf8read(y.formatCode)), j = parseInt(y.numFmtId, 10);
                styles.NumberFmt[j] = f;
                if (j > 0) {
                  if (j > 392) {
                    for (j = 392; j > 60; --j)
                      if (styles.NumberFmt[j] == null)
                        break;
                    styles.NumberFmt[j] = f;
                  }
                  SSF_load(f, j);
                }
              }
              break;
            case "</numFmt>":
              break;
            default:
              if (opts.WTF)
                throw new Error("unrecognized " + y[0] + " in numFmts");
          }
        }
      }
      function write_numFmts(NF) {
        var o = ["<numFmts>"];
        [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r) {
          for (var i = r[0]; i <= r[1]; ++i)
            if (NF[i] != null)
              o[o.length] = writextag("numFmt", null, { numFmtId: i, formatCode: escapexml(NF[i]) });
        });
        if (o.length === 1)
          return "";
        o[o.length] = "</numFmts>";
        o[0] = writextag("numFmts", null, { count: o.length - 2 }).replace("/>", ">");
        return o.join("");
      }
      var cellXF_uint = ["numFmtId", "fillId", "fontId", "borderId", "xfId"];
      var cellXF_bool = ["applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix"];
      function parse_cellXfs(t, styles, opts) {
        styles.CellXf = [];
        var xf;
        var pass = false;
        (t[0].match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x), i = 0;
          switch (strip_ns(y[0])) {
            case "<cellXfs":
            case "<cellXfs>":
            case "<cellXfs/>":
            case "</cellXfs>":
              break;
            case "<xf":
            case "<xf/>":
              xf = y;
              delete xf[0];
              for (i = 0; i < cellXF_uint.length; ++i)
                if (xf[cellXF_uint[i]])
                  xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);
              for (i = 0; i < cellXF_bool.length; ++i)
                if (xf[cellXF_bool[i]])
                  xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);
              if (styles.NumberFmt && xf.numFmtId > 392) {
                for (i = 392; i > 60; --i)
                  if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) {
                    xf.numFmtId = i;
                    break;
                  }
              }
              styles.CellXf.push(xf);
              break;
            case "</xf>":
              break;
            case "<alignment":
            case "<alignment/>":
              var alignment = {};
              if (y.vertical)
                alignment.vertical = y.vertical;
              if (y.horizontal)
                alignment.horizontal = y.horizontal;
              if (y.textRotation != null)
                alignment.textRotation = y.textRotation;
              if (y.indent)
                alignment.indent = y.indent;
              if (y.wrapText)
                alignment.wrapText = parsexmlbool(y.wrapText);
              xf.alignment = alignment;
              break;
            case "</alignment>":
              break;
            case "<protection":
              break;
            case "</protection>":
            case "<protection/>":
              break;
            case "<AlternateContent":
              pass = true;
              break;
            case "</AlternateContent>":
              pass = false;
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass)
                  throw new Error("unrecognized " + y[0] + " in cellXfs");
              }
          }
        });
      }
      function write_cellXfs(cellXfs) {
        var o = [];
        o[o.length] = writextag("cellXfs", null);
        cellXfs.forEach(function(c) {
          o[o.length] = writextag("xf", null, c);
        });
        o[o.length] = "</cellXfs>";
        if (o.length === 2)
          return "";
        o[0] = writextag("cellXfs", null, { count: o.length - 2 }).replace("/>", ">");
        return o.join("");
      }
      var parse_sty_xml = function make_pstyx() {
        var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
        var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
        var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
        var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
        var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;
        return function parse_sty_xml2(data, themes, opts) {
          var styles = {};
          if (!data)
            return styles;
          data = data.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
          var t;
          if (t = data.match(numFmtRegex))
            parse_numFmts(t, styles, opts);
          if (t = data.match(fontsRegex))
            parse_fonts(t, styles, themes, opts);
          if (t = data.match(fillsRegex))
            parse_fills(t, styles, themes, opts);
          if (t = data.match(bordersRegex))
            parse_borders(t, styles, themes, opts);
          if (t = data.match(cellXfRegex))
            parse_cellXfs(t, styles, opts);
          return styles;
        };
      }();
      function write_sty_xml(wb, opts) {
        var o = [XML_HEADER, writextag("styleSheet", null, {
          "xmlns": XMLNS_main[0],
          "xmlns:vt": XMLNS.vt
        })], w;
        if (wb.SSF && (w = write_numFmts(wb.SSF)) != null)
          o[o.length] = w;
        o[o.length] = '<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>';
        o[o.length] = '<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>';
        o[o.length] = '<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>';
        o[o.length] = '<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>';
        if (w = write_cellXfs(opts.cellXfs))
          o[o.length] = w;
        o[o.length] = '<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>';
        o[o.length] = '<dxfs count="0"/>';
        o[o.length] = '<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>';
        if (o.length > 2) {
          o[o.length] = "</styleSheet>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_BrtFmt(data, length) {
        var numFmtId = data.read_shift(2);
        var stFmtCode = parse_XLWideString(data, length - 2);
        return [numFmtId, stFmtCode];
      }
      function write_BrtFmt(i, f, o) {
        if (!o)
          o = new_buf(6 + 4 * f.length);
        o.write_shift(2, i);
        write_XLWideString(f, o);
        var out = o.length > o.l ? o.slice(0, o.l) : o;
        if (o.l == null)
          o.l = o.length;
        return out;
      }
      function parse_BrtFont(data, length, opts) {
        var out = {};
        out.sz = data.read_shift(2) / 20;
        var grbit = parse_FontFlags(data, 2, opts);
        if (grbit.fItalic)
          out.italic = 1;
        if (grbit.fCondense)
          out.condense = 1;
        if (grbit.fExtend)
          out.extend = 1;
        if (grbit.fShadow)
          out.shadow = 1;
        if (grbit.fOutline)
          out.outline = 1;
        if (grbit.fStrikeout)
          out.strike = 1;
        var bls = data.read_shift(2);
        if (bls === 700)
          out.bold = 1;
        switch (data.read_shift(2)) {
          case 1:
            out.vertAlign = "superscript";
            break;
          case 2:
            out.vertAlign = "subscript";
            break;
        }
        var underline = data.read_shift(1);
        if (underline != 0)
          out.underline = underline;
        var family = data.read_shift(1);
        if (family > 0)
          out.family = family;
        var bCharSet = data.read_shift(1);
        if (bCharSet > 0)
          out.charset = bCharSet;
        data.l++;
        out.color = parse_BrtColor(data, 8);
        switch (data.read_shift(1)) {
          case 1:
            out.scheme = "major";
            break;
          case 2:
            out.scheme = "minor";
            break;
        }
        out.name = parse_XLWideString(data, length - 21);
        return out;
      }
      function write_BrtFont(font, o) {
        if (!o)
          o = new_buf(25 + 4 * 32);
        o.write_shift(2, font.sz * 20);
        write_FontFlags(font, o);
        o.write_shift(2, font.bold ? 700 : 400);
        var sss = 0;
        if (font.vertAlign == "superscript")
          sss = 1;
        else if (font.vertAlign == "subscript")
          sss = 2;
        o.write_shift(2, sss);
        o.write_shift(1, font.underline || 0);
        o.write_shift(1, font.family || 0);
        o.write_shift(1, font.charset || 0);
        o.write_shift(1, 0);
        write_BrtColor(font.color, o);
        var scheme = 0;
        if (font.scheme == "major")
          scheme = 1;
        if (font.scheme == "minor")
          scheme = 2;
        o.write_shift(1, scheme);
        write_XLWideString(font.name, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      var XLSBFillPTNames = [
        "none",
        "solid",
        "mediumGray",
        "darkGray",
        "lightGray",
        "darkHorizontal",
        "darkVertical",
        "darkDown",
        "darkUp",
        "darkGrid",
        "darkTrellis",
        "lightHorizontal",
        "lightVertical",
        "lightDown",
        "lightUp",
        "lightGrid",
        "lightTrellis",
        "gray125",
        "gray0625"
      ];
      var rev_XLSBFillPTNames;
      var parse_BrtFill = parsenoop;
      function write_BrtFill(fill2, o) {
        if (!o)
          o = new_buf(4 * 3 + 8 * 7 + 16 * 1);
        if (!rev_XLSBFillPTNames)
          rev_XLSBFillPTNames = evert(XLSBFillPTNames);
        var fls = rev_XLSBFillPTNames[fill2.patternType];
        if (fls == null)
          fls = 40;
        o.write_shift(4, fls);
        var j = 0;
        if (fls != 40) {
          write_BrtColor({ auto: 1 }, o);
          write_BrtColor({ auto: 1 }, o);
          for (; j < 12; ++j)
            o.write_shift(4, 0);
        } else {
          for (; j < 4; ++j)
            o.write_shift(4, 0);
          for (; j < 12; ++j)
            o.write_shift(4, 0);
        }
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function parse_BrtXF(data, length) {
        var tgt = data.l + length;
        var ixfeParent = data.read_shift(2);
        var ifmt = data.read_shift(2);
        data.l = tgt;
        return { ixfe: ixfeParent, numFmtId: ifmt };
      }
      function write_BrtXF(data, ixfeP, o) {
        if (!o)
          o = new_buf(16);
        o.write_shift(2, ixfeP || 0);
        o.write_shift(2, data.numFmtId || 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
        var flow = 0;
        o.write_shift(1, flow);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
        return o;
      }
      function write_Blxf(data, o) {
        if (!o)
          o = new_buf(10);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        return o;
      }
      var parse_BrtBorder = parsenoop;
      function write_BrtBorder(border, o) {
        if (!o)
          o = new_buf(51);
        o.write_shift(1, 0);
        write_Blxf(null, o);
        write_Blxf(null, o);
        write_Blxf(null, o);
        write_Blxf(null, o);
        write_Blxf(null, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function write_BrtStyle(style, o) {
        if (!o)
          o = new_buf(12 + 4 * 10);
        o.write_shift(4, style.xfId);
        o.write_shift(2, 1);
        o.write_shift(1, +style.builtinId);
        o.write_shift(1, 0);
        write_XLNullableWideString(style.name || "", o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
        var o = new_buf(4 + 256 * 2 * 4);
        o.write_shift(4, cnt);
        write_XLNullableWideString(defTableStyle, o);
        write_XLNullableWideString(defPivotStyle, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function parse_sty_bin(data, themes, opts) {
        var styles = {};
        styles.NumberFmt = [];
        for (var y in table_fmt)
          styles.NumberFmt[y] = table_fmt[y];
        styles.CellXf = [];
        styles.Fonts = [];
        var state = [];
        var pass = false;
        recordhopper(data, function hopper_sty(val, R, RT) {
          switch (RT) {
            case 44:
              styles.NumberFmt[val[0]] = val[1];
              SSF_load(val[1], val[0]);
              break;
            case 43:
              styles.Fonts.push(val);
              if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
                val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
              }
              break;
            case 1025:
              break;
            case 45:
              break;
            case 46:
              break;
            case 47:
              if (state[state.length - 1] == 617) {
                styles.CellXf.push(val);
              }
              break;
            case 48:
            case 507:
            case 572:
            case 475:
              break;
            case 1171:
            case 2102:
            case 1130:
            case 512:
            case 2095:
            case 3072:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              state.push(RT);
              pass = true;
              break;
            case 38:
              state.pop();
              pass = false;
              break;
            default:
              if (R.T > 0)
                state.push(RT);
              else if (R.T < 0)
                state.pop();
              else if (!pass || opts.WTF && state[state.length - 1] != 37)
                throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        });
        return styles;
      }
      function write_FMTS_bin(ba, NF) {
        if (!NF)
          return;
        var cnt = 0;
        [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r) {
          for (var i = r[0]; i <= r[1]; ++i)
            if (NF[i] != null)
              ++cnt;
        });
        if (cnt == 0)
          return;
        write_record(ba, 615, write_UInt32LE(cnt));
        [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r) {
          for (var i = r[0]; i <= r[1]; ++i)
            if (NF[i] != null)
              write_record(ba, 44, write_BrtFmt(i, NF[i]));
        });
        write_record(ba, 616);
      }
      function write_FONTS_bin(ba) {
        var cnt = 1;
        if (cnt == 0)
          return;
        write_record(ba, 611, write_UInt32LE(cnt));
        write_record(ba, 43, write_BrtFont({
          sz: 12,
          color: { theme: 1 },
          name: "Calibri",
          family: 2,
          scheme: "minor"
        }));
        write_record(ba, 612);
      }
      function write_FILLS_bin(ba) {
        var cnt = 2;
        if (cnt == 0)
          return;
        write_record(ba, 603, write_UInt32LE(cnt));
        write_record(ba, 45, write_BrtFill({ patternType: "none" }));
        write_record(ba, 45, write_BrtFill({ patternType: "gray125" }));
        write_record(ba, 604);
      }
      function write_BORDERS_bin(ba) {
        var cnt = 1;
        if (cnt == 0)
          return;
        write_record(ba, 613, write_UInt32LE(cnt));
        write_record(ba, 46, write_BrtBorder({}));
        write_record(ba, 614);
      }
      function write_CELLSTYLEXFS_bin(ba) {
        var cnt = 1;
        write_record(ba, 626, write_UInt32LE(cnt));
        write_record(ba, 47, write_BrtXF({
          numFmtId: 0,
          fontId: 0,
          fillId: 0,
          borderId: 0
        }, 65535));
        write_record(ba, 627);
      }
      function write_CELLXFS_bin(ba, data) {
        write_record(ba, 617, write_UInt32LE(data.length));
        data.forEach(function(c) {
          write_record(ba, 47, write_BrtXF(c, 0));
        });
        write_record(ba, 618);
      }
      function write_STYLES_bin(ba) {
        var cnt = 1;
        write_record(ba, 619, write_UInt32LE(cnt));
        write_record(ba, 48, write_BrtStyle({
          xfId: 0,
          builtinId: 0,
          name: "Normal"
        }));
        write_record(ba, 620);
      }
      function write_DXFS_bin(ba) {
        var cnt = 0;
        write_record(ba, 505, write_UInt32LE(cnt));
        write_record(ba, 506);
      }
      function write_TABLESTYLES_bin(ba) {
        var cnt = 0;
        write_record(ba, 508, write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4"));
        write_record(ba, 509);
      }
      function write_COLORPALETTE_bin() {
        return;
      }
      function write_sty_bin(wb, opts) {
        var ba = buf_array();
        write_record(ba, 278);
        write_FMTS_bin(ba, wb.SSF);
        write_FONTS_bin(ba, wb);
        write_FILLS_bin(ba, wb);
        write_BORDERS_bin(ba, wb);
        write_CELLSTYLEXFS_bin(ba, wb);
        write_CELLXFS_bin(ba, opts.cellXfs);
        write_STYLES_bin(ba, wb);
        write_DXFS_bin(ba, wb);
        write_TABLESTYLES_bin(ba, wb);
        write_COLORPALETTE_bin(ba, wb);
        write_record(ba, 279);
        return ba.end();
      }
      var XLSXThemeClrScheme = [
        "</a:lt1>",
        "</a:dk1>",
        "</a:lt2>",
        "</a:dk2>",
        "</a:accent1>",
        "</a:accent2>",
        "</a:accent3>",
        "</a:accent4>",
        "</a:accent5>",
        "</a:accent6>",
        "</a:hlink>",
        "</a:folHlink>"
      ];
      function parse_clrScheme(t, themes, opts) {
        themes.themeElements.clrScheme = [];
        var color = {};
        (t[0].match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (y[0]) {
            case "<a:clrScheme":
            case "</a:clrScheme>":
              break;
            case "<a:srgbClr":
              color.rgb = y.val;
              break;
            case "<a:sysClr":
              color.rgb = y.lastClr;
              break;
            case "<a:dk1>":
            case "</a:dk1>":
            case "<a:lt1>":
            case "</a:lt1>":
            case "<a:dk2>":
            case "</a:dk2>":
            case "<a:lt2>":
            case "</a:lt2>":
            case "<a:accent1>":
            case "</a:accent1>":
            case "<a:accent2>":
            case "</a:accent2>":
            case "<a:accent3>":
            case "</a:accent3>":
            case "<a:accent4>":
            case "</a:accent4>":
            case "<a:accent5>":
            case "</a:accent5>":
            case "<a:accent6>":
            case "</a:accent6>":
            case "<a:hlink>":
            case "</a:hlink>":
            case "<a:folHlink>":
            case "</a:folHlink>":
              if (y[0].charAt(1) === "/") {
                themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;
                color = {};
              } else {
                color.name = y[0].slice(3, y[0].length - 1);
              }
              break;
            default:
              if (opts && opts.WTF)
                throw new Error("Unrecognized " + y[0] + " in clrScheme");
          }
        });
      }
      function parse_fontScheme() {
      }
      function parse_fmtScheme() {
      }
      var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
      var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
      var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;
      function parse_themeElements(data, themes, opts) {
        themes.themeElements = {};
        var t;
        [
          ["clrScheme", clrsregex, parse_clrScheme],
          ["fontScheme", fntsregex, parse_fontScheme],
          ["fmtScheme", fmtsregex, parse_fmtScheme]
        ].forEach(function(m) {
          if (!(t = data.match(m[1])))
            throw new Error(m[0] + " not found in themeElements");
          m[2](t, themes, opts);
        });
      }
      var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;
      function parse_theme_xml(data, opts) {
        if (!data || data.length === 0)
          data = write_theme();
        var t;
        var themes = {};
        if (!(t = data.match(themeltregex)))
          throw new Error("themeElements not found in theme");
        parse_themeElements(t[0], themes, opts);
        themes.raw = data;
        return themes;
      }
      function write_theme(Themes, opts) {
        if (opts && opts.themeXLSX)
          return opts.themeXLSX;
        if (Themes && typeof Themes.raw == "string")
          return Themes.raw;
        var o = [XML_HEADER];
        o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
        o[o.length] = "<a:themeElements>";
        o[o.length] = '<a:clrScheme name="Office">';
        o[o.length] = '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
        o[o.length] = '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
        o[o.length] = '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
        o[o.length] = '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
        o[o.length] = '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
        o[o.length] = '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
        o[o.length] = '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
        o[o.length] = '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
        o[o.length] = '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
        o[o.length] = '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
        o[o.length] = '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
        o[o.length] = '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
        o[o.length] = "</a:clrScheme>";
        o[o.length] = '<a:fontScheme name="Office">';
        o[o.length] = "<a:majorFont>";
        o[o.length] = '<a:latin typeface="Cambria"/>';
        o[o.length] = '<a:ea typeface=""/>';
        o[o.length] = '<a:cs typeface=""/>';
        o[o.length] = '<a:font script="Jpan" typeface="\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF"/>';
        o[o.length] = '<a:font script="Hang" typeface="\uB9D1\uC740 \uACE0\uB515"/>';
        o[o.length] = '<a:font script="Hans" typeface="\u5B8B\u4F53"/>';
        o[o.length] = '<a:font script="Hant" typeface="\u65B0\u7D30\u660E\u9AD4"/>';
        o[o.length] = '<a:font script="Arab" typeface="Times New Roman"/>';
        o[o.length] = '<a:font script="Hebr" typeface="Times New Roman"/>';
        o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
        o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
        o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
        o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
        o[o.length] = '<a:font script="Khmr" typeface="MoolBoran"/>';
        o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
        o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
        o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
        o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
        o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
        o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
        o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
        o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
        o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
        o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
        o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
        o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
        o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
        o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
        o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
        o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
        o[o.length] = '<a:font script="Viet" typeface="Times New Roman"/>';
        o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
        o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
        o[o.length] = "</a:majorFont>";
        o[o.length] = "<a:minorFont>";
        o[o.length] = '<a:latin typeface="Calibri"/>';
        o[o.length] = '<a:ea typeface=""/>';
        o[o.length] = '<a:cs typeface=""/>';
        o[o.length] = '<a:font script="Jpan" typeface="\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF"/>';
        o[o.length] = '<a:font script="Hang" typeface="\uB9D1\uC740 \uACE0\uB515"/>';
        o[o.length] = '<a:font script="Hans" typeface="\u5B8B\u4F53"/>';
        o[o.length] = '<a:font script="Hant" typeface="\u65B0\u7D30\u660E\u9AD4"/>';
        o[o.length] = '<a:font script="Arab" typeface="Arial"/>';
        o[o.length] = '<a:font script="Hebr" typeface="Arial"/>';
        o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
        o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
        o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
        o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
        o[o.length] = '<a:font script="Khmr" typeface="DaunPenh"/>';
        o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
        o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
        o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
        o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
        o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
        o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
        o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
        o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
        o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
        o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
        o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
        o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
        o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
        o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
        o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
        o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
        o[o.length] = '<a:font script="Viet" typeface="Arial"/>';
        o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
        o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
        o[o.length] = "</a:minorFont>";
        o[o.length] = "</a:fontScheme>";
        o[o.length] = '<a:fmtScheme name="Office">';
        o[o.length] = "<a:fillStyleLst>";
        o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
        o[o.length] = '<a:gradFill rotWithShape="1">';
        o[o.length] = "<a:gsLst>";
        o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] = "</a:gsLst>";
        o[o.length] = '<a:lin ang="16200000" scaled="1"/>';
        o[o.length] = "</a:gradFill>";
        o[o.length] = '<a:gradFill rotWithShape="1">';
        o[o.length] = "<a:gsLst>";
        o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] = "</a:gsLst>";
        o[o.length] = '<a:lin ang="16200000" scaled="0"/>';
        o[o.length] = "</a:gradFill>";
        o[o.length] = "</a:fillStyleLst>";
        o[o.length] = "<a:lnStyleLst>";
        o[o.length] = '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o[o.length] = '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o[o.length] = '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o[o.length] = "</a:lnStyleLst>";
        o[o.length] = "<a:effectStyleLst>";
        o[o.length] = "<a:effectStyle>";
        o[o.length] = "<a:effectLst>";
        o[o.length] = '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
        o[o.length] = "</a:effectLst>";
        o[o.length] = "</a:effectStyle>";
        o[o.length] = "<a:effectStyle>";
        o[o.length] = "<a:effectLst>";
        o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
        o[o.length] = "</a:effectLst>";
        o[o.length] = "</a:effectStyle>";
        o[o.length] = "<a:effectStyle>";
        o[o.length] = "<a:effectLst>";
        o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
        o[o.length] = "</a:effectLst>";
        o[o.length] = '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
        o[o.length] = '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
        o[o.length] = "</a:effectStyle>";
        o[o.length] = "</a:effectStyleLst>";
        o[o.length] = "<a:bgFillStyleLst>";
        o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
        o[o.length] = '<a:gradFill rotWithShape="1">';
        o[o.length] = "<a:gsLst>";
        o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
        o[o.length] = "</a:gsLst>";
        o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
        o[o.length] = "</a:gradFill>";
        o[o.length] = '<a:gradFill rotWithShape="1">';
        o[o.length] = "<a:gsLst>";
        o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
        o[o.length] = "</a:gsLst>";
        o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
        o[o.length] = "</a:gradFill>";
        o[o.length] = "</a:bgFillStyleLst>";
        o[o.length] = "</a:fmtScheme>";
        o[o.length] = "</a:themeElements>";
        o[o.length] = "<a:objectDefaults>";
        o[o.length] = "<a:spDef>";
        o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
        o[o.length] = "</a:spDef>";
        o[o.length] = "<a:lnDef>";
        o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
        o[o.length] = "</a:lnDef>";
        o[o.length] = "</a:objectDefaults>";
        o[o.length] = "<a:extraClrSchemeLst/>";
        o[o.length] = "</a:theme>";
        return o.join("");
      }
      function parse_Theme(blob, length, opts) {
        var end = blob.l + length;
        var dwThemeVersion = blob.read_shift(4);
        if (dwThemeVersion === 124226)
          return;
        if (!opts.cellStyles) {
          blob.l = end;
          return;
        }
        var data = blob.slice(blob.l);
        blob.l = end;
        var zip;
        try {
          zip = zip_read(data, { type: "array" });
        } catch (e) {
          return;
        }
        var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
        if (!themeXML)
          return;
        return parse_theme_xml(themeXML, opts);
      }
      function parse_ColorTheme(blob) {
        return blob.read_shift(4);
      }
      function parse_FullColorExt(blob) {
        var o = {};
        o.xclrType = blob.read_shift(2);
        o.nTintShade = blob.read_shift(2);
        switch (o.xclrType) {
          case 0:
            blob.l += 4;
            break;
          case 1:
            o.xclrValue = parse_IcvXF(blob, 4);
            break;
          case 2:
            o.xclrValue = parse_LongRGBA(blob, 4);
            break;
          case 3:
            o.xclrValue = parse_ColorTheme(blob, 4);
            break;
          case 4:
            blob.l += 4;
            break;
        }
        blob.l += 8;
        return o;
      }
      function parse_IcvXF(blob, length) {
        return parsenoop(blob, length);
      }
      function parse_XFExtGradient(blob, length) {
        return parsenoop(blob, length);
      }
      function parse_ExtProp(blob) {
        var extType = blob.read_shift(2);
        var cb = blob.read_shift(2) - 4;
        var o = [extType];
        switch (extType) {
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
            o[1] = parse_FullColorExt(blob, cb);
            break;
          case 6:
            o[1] = parse_XFExtGradient(blob, cb);
            break;
          case 14:
          case 15:
            o[1] = blob.read_shift(cb === 1 ? 1 : 2);
            break;
          default:
            throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
        }
        return o;
      }
      function parse_XFExt(blob, length) {
        var end = blob.l + length;
        blob.l += 2;
        var ixfe = blob.read_shift(2);
        blob.l += 2;
        var cexts = blob.read_shift(2);
        var ext = [];
        while (cexts-- > 0)
          ext.push(parse_ExtProp(blob, end - blob.l));
        return { ixfe, ext };
      }
      function update_xfext(xf, xfext) {
        xfext.forEach(function(xfe) {
          switch (xfe[0]) {
            case 4:
              break;
            case 5:
              break;
            case 6:
              break;
            case 7:
              break;
            case 8:
              break;
            case 9:
              break;
            case 10:
              break;
            case 11:
              break;
            case 13:
              break;
            case 14:
              break;
            case 15:
              break;
          }
        });
      }
      function parse_BrtMdtinfo(data, length) {
        return {
          flags: data.read_shift(4),
          version: data.read_shift(4),
          name: parse_XLWideString(data, length - 8)
        };
      }
      function write_BrtMdtinfo(data) {
        var o = new_buf(12 + 2 * data.name.length);
        o.write_shift(4, data.flags);
        o.write_shift(4, data.version);
        write_XLWideString(data.name, o);
        return o.slice(0, o.l);
      }
      function parse_BrtMdb(data) {
        var out = [];
        var cnt = data.read_shift(4);
        while (cnt-- > 0)
          out.push([data.read_shift(4), data.read_shift(4)]);
        return out;
      }
      function write_BrtMdb(mdb) {
        var o = new_buf(4 + 8 * mdb.length);
        o.write_shift(4, mdb.length);
        for (var i = 0; i < mdb.length; ++i) {
          o.write_shift(4, mdb[i][0]);
          o.write_shift(4, mdb[i][1]);
        }
        return o;
      }
      function write_BrtBeginEsfmd(cnt, name) {
        var o = new_buf(8 + 2 * name.length);
        o.write_shift(4, cnt);
        write_XLWideString(name, o);
        return o.slice(0, o.l);
      }
      function parse_BrtBeginEsmdb(data) {
        data.l += 4;
        return data.read_shift(4) != 0;
      }
      function write_BrtBeginEsmdb(cnt, cm) {
        var o = new_buf(8);
        o.write_shift(4, cnt);
        o.write_shift(4, cm ? 1 : 0);
        return o;
      }
      function parse_xlmeta_bin(data, name, _opts) {
        var out = { Types: [], Cell: [], Value: [] };
        var opts = _opts || {};
        var state = [];
        var pass = false;
        var metatype = 2;
        recordhopper(data, function(val, R, RT) {
          switch (RT) {
            case 335:
              out.Types.push({ name: val.name });
              break;
            case 51:
              val.forEach(function(r) {
                if (metatype == 1)
                  out.Cell.push({ type: out.Types[r[0] - 1].name, index: r[1] });
                else if (metatype == 0)
                  out.Value.push({ type: out.Types[r[0] - 1].name, index: r[1] });
              });
              break;
            case 337:
              metatype = val ? 1 : 0;
              break;
            case 338:
              metatype = 2;
              break;
            case 35:
              state.push(RT);
              pass = true;
              break;
            case 36:
              state.pop();
              pass = false;
              break;
            default:
              if (R.T) {
              } else if (!pass || opts.WTF && state[state.length - 1] != 35)
                throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        });
        return out;
      }
      function write_xlmeta_bin() {
        var ba = buf_array();
        write_record(ba, 332);
        write_record(ba, 334, write_UInt32LE(1));
        write_record(ba, 335, write_BrtMdtinfo({
          name: "XLDAPR",
          version: 12e4,
          flags: 3496657072
        }));
        write_record(ba, 336);
        write_record(ba, 339, write_BrtBeginEsfmd(1, "XLDAPR"));
        write_record(ba, 52);
        write_record(ba, 35, write_UInt32LE(514));
        write_record(ba, 4096, write_UInt32LE(0));
        write_record(ba, 4097, writeuint16(1));
        write_record(ba, 36);
        write_record(ba, 53);
        write_record(ba, 340);
        write_record(ba, 337, write_BrtBeginEsmdb(1, true));
        write_record(ba, 51, write_BrtMdb([[1, 0]]));
        write_record(ba, 338);
        write_record(ba, 333);
        return ba.end();
      }
      function parse_xlmeta_xml(data, name, opts) {
        var out = { Types: [], Cell: [], Value: [] };
        if (!data)
          return out;
        var pass = false;
        var metatype = 2;
        var lastmeta;
        data.replace(tagregex, function(x) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<?xml":
              break;
            case "<metadata":
            case "</metadata>":
              break;
            case "<metadataTypes":
            case "</metadataTypes>":
              break;
            case "<metadataType":
              out.Types.push({ name: y.name });
              break;
            case "</metadataType>":
              break;
            case "<futureMetadata":
              for (var j = 0; j < out.Types.length; ++j)
                if (out.Types[j].name == y.name)
                  lastmeta = out.Types[j];
              break;
            case "</futureMetadata>":
              break;
            case "<bk>":
              break;
            case "</bk>":
              break;
            case "<rc":
              if (metatype == 1)
                out.Cell.push({ type: out.Types[y.t - 1].name, index: +y.v });
              else if (metatype == 0)
                out.Value.push({ type: out.Types[y.t - 1].name, index: +y.v });
              break;
            case "</rc>":
              break;
            case "<cellMetadata":
              metatype = 1;
              break;
            case "</cellMetadata>":
              metatype = 2;
              break;
            case "<valueMetadata":
              metatype = 0;
              break;
            case "</valueMetadata>":
              metatype = 2;
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            case "<rvb":
              if (!lastmeta)
                break;
              if (!lastmeta.offsets)
                lastmeta.offsets = [];
              lastmeta.offsets.push(+y.i);
              break;
            default:
              if (!pass && opts.WTF)
                throw new Error("unrecognized " + y[0] + " in metadata");
          }
          return x;
        });
        return out;
      }
      function write_xlmeta_xml() {
        var o = [XML_HEADER];
        o.push('<metadata xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:xlrd="http://schemas.microsoft.com/office/spreadsheetml/2017/richdata" xmlns:xda="http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray">\n  <metadataTypes count="1">\n    <metadataType name="XLDAPR" minSupportedVersion="120000" copy="1" pasteAll="1" pasteValues="1" merge="1" splitFirst="1" rowColShift="1" clearFormats="1" clearComments="1" assign="1" coerce="1" cellMeta="1"/>\n  </metadataTypes>\n  <futureMetadata name="XLDAPR" count="1">\n    <bk>\n      <extLst>\n        <ext uri="{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}">\n          <xda:dynamicArrayProperties fDynamic="1" fCollapsed="0"/>\n        </ext>\n      </extLst>\n    </bk>\n  </futureMetadata>\n  <cellMetadata count="1">\n    <bk>\n      <rc t="1" v="0"/>\n    </bk>\n  </cellMetadata>\n</metadata>');
        return o.join("");
      }
      function parse_cc_xml(data) {
        var d = [];
        if (!data)
          return d;
        var i = 1;
        (data.match(tagregex) || []).forEach(function(x) {
          var y = parsexmltag(x);
          switch (y[0]) {
            case "<?xml":
              break;
            case "<calcChain":
            case "<calcChain>":
            case "</calcChain>":
              break;
            case "<c":
              delete y[0];
              if (y.i)
                i = y.i;
              else
                y.i = i;
              d.push(y);
              break;
          }
        });
        return d;
      }
      function parse_BrtCalcChainItem$(data) {
        var out = {};
        out.i = data.read_shift(4);
        var cell = {};
        cell.r = data.read_shift(4);
        cell.c = data.read_shift(4);
        out.r = encode_cell(cell);
        var flags = data.read_shift(1);
        if (flags & 2)
          out.l = "1";
        if (flags & 8)
          out.a = "1";
        return out;
      }
      function parse_cc_bin(data, name, opts) {
        var out = [];
        var pass = false;
        recordhopper(data, function hopper_cc(val, R, RT) {
          switch (RT) {
            case 63:
              out.push(val);
              break;
            default:
              if (R.T) {
              } else if (!pass || opts.WTF)
                throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        });
        return out;
      }
      function parse_xlink_xml() {
      }
      function parse_xlink_bin(data, rel, name, _opts) {
        if (!data)
          return data;
        var opts = _opts || {};
        var pass = false, end = false;
        recordhopper(data, function xlink_parse(val, R, RT) {
          if (end)
            return;
          switch (RT) {
            case 359:
            case 363:
            case 364:
            case 366:
            case 367:
            case 368:
            case 369:
            case 370:
            case 371:
            case 472:
            case 577:
            case 578:
            case 579:
            case 580:
            case 581:
            case 582:
            case 583:
            case 584:
            case 585:
            case 586:
            case 587:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            default:
              if (R.T) {
              } else if (!pass || opts.WTF)
                throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        }, opts);
      }
      function parse_drawing(data, rels) {
        if (!data)
          return "??";
        var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/) || ["", ""])[1];
        return rels["!id"][id].Target;
      }
      var _shapeid = 1024;
      function write_comments_vml(rId, comments) {
        var csize = [21600, 21600];
        var bbox = ["m0,0l0", csize[1], csize[0], csize[1], csize[0], "0xe"].join(",");
        var o = [
          writextag("xml", null, { "xmlns:v": XLMLNS.v, "xmlns:o": XLMLNS.o, "xmlns:x": XLMLNS.x, "xmlns:mv": XLMLNS.mv }).replace(/\/>/, ">"),
          writextag("o:shapelayout", writextag("o:idmap", null, { "v:ext": "edit", "data": rId }), { "v:ext": "edit" }),
          writextag("v:shapetype", [
            writextag("v:stroke", null, { joinstyle: "miter" }),
            writextag("v:path", null, { gradientshapeok: "t", "o:connecttype": "rect" })
          ].join(""), { id: "_x0000_t202", "o:spt": 202, coordsize: csize.join(","), path: bbox })
        ];
        while (_shapeid < rId * 1e3)
          _shapeid += 1e3;
        comments.forEach(function(x) {
          var c = decode_cell(x[0]);
          var fillopts = { "color2": "#BEFF82", "type": "gradient" };
          if (fillopts.type == "gradient")
            fillopts.angle = "-180";
          var fillparm = fillopts.type == "gradient" ? writextag("o:fill", null, { type: "gradientUnscaled", "v:ext": "view" }) : null;
          var fillxml = writextag("v:fill", fillparm, fillopts);
          var shadata = { on: "t", "obscured": "t" };
          ++_shapeid;
          o = o.concat([
            "<v:shape" + wxt_helper({
              id: "_x0000_s" + _shapeid,
              type: "#_x0000_t202",
              style: "position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10" + (x[1].hidden ? ";visibility:hidden" : ""),
              fillcolor: "#ECFAD4",
              strokecolor: "#edeaa1"
            }) + ">",
            fillxml,
            writextag("v:shadow", null, shadata),
            writextag("v:path", null, { "o:connecttype": "none" }),
            '<v:textbox><div style="text-align:left"></div></v:textbox>',
            '<x:ClientData ObjectType="Note">',
            "<x:MoveWithCells/>",
            "<x:SizeWithCells/>",
            writetag("x:Anchor", [c.c + 1, 0, c.r + 1, 0, c.c + 3, 20, c.r + 5, 20].join(",")),
            writetag("x:AutoFill", "False"),
            writetag("x:Row", String(c.r)),
            writetag("x:Column", String(c.c)),
            x[1].hidden ? "" : "<x:Visible/>",
            "</x:ClientData>",
            "</v:shape>"
          ]);
        });
        o.push("</xml>");
        return o.join("");
      }
      function sheet_insert_comments(sheet, comments, threaded, people) {
        var dense = Array.isArray(sheet);
        var cell;
        comments.forEach(function(comment) {
          var r = decode_cell(comment.ref);
          if (dense) {
            if (!sheet[r.r])
              sheet[r.r] = [];
            cell = sheet[r.r][r.c];
          } else
            cell = sheet[comment.ref];
          if (!cell) {
            cell = { t: "z" };
            if (dense)
              sheet[r.r][r.c] = cell;
            else
              sheet[comment.ref] = cell;
            var range = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1");
            if (range.s.r > r.r)
              range.s.r = r.r;
            if (range.e.r < r.r)
              range.e.r = r.r;
            if (range.s.c > r.c)
              range.s.c = r.c;
            if (range.e.c < r.c)
              range.e.c = r.c;
            var encoded = encode_range(range);
            if (encoded !== sheet["!ref"])
              sheet["!ref"] = encoded;
          }
          if (!cell.c)
            cell.c = [];
          var o = { a: comment.author, t: comment.t, r: comment.r, T: threaded };
          if (comment.h)
            o.h = comment.h;
          for (var i = cell.c.length - 1; i >= 0; --i) {
            if (!threaded && cell.c[i].T)
              return;
            if (threaded && !cell.c[i].T)
              cell.c.splice(i, 1);
          }
          if (threaded && people)
            for (i = 0; i < people.length; ++i) {
              if (o.a == people[i].id) {
                o.a = people[i].name || o.a;
                break;
              }
            }
          cell.c.push(o);
        });
      }
      function parse_comments_xml(data, opts) {
        if (data.match(/<(?:\w+:)?comments *\/>/))
          return [];
        var authors = [];
        var commentList = [];
        var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
        if (authtag && authtag[1])
          authtag[1].split(/<\/\w*:?author>/).forEach(function(x) {
            if (x === "" || x.trim() === "")
              return;
            var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
            if (a)
              authors.push(a[1]);
          });
        var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
        if (cmnttag && cmnttag[1])
          cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x) {
            if (x === "" || x.trim() === "")
              return;
            var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
            if (!cm)
              return;
            var y = parsexmltag(cm[0]);
            var comment = { author: y.authorId && authors[y.authorId] || "sheetjsghost", ref: y.ref, guid: y.guid };
            var cell = decode_cell(y.ref);
            if (opts.sheetRows && opts.sheetRows <= cell.r)
              return;
            var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
            var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || { r: "", t: "", h: "" };
            comment.r = rt.r;
            if (rt.r == "<t></t>")
              rt.t = rt.h = "";
            comment.t = (rt.t || "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
            if (opts.cellHTML)
              comment.h = rt.h;
            commentList.push(comment);
          });
        return commentList;
      }
      function write_comments_xml(data) {
        var o = [XML_HEADER, writextag("comments", null, { "xmlns": XMLNS_main[0] })];
        var iauthor = [];
        o.push("<authors>");
        data.forEach(function(x) {
          x[1].forEach(function(w) {
            var a = escapexml(w.a);
            if (iauthor.indexOf(a) == -1) {
              iauthor.push(a);
              o.push("<author>" + a + "</author>");
            }
            if (w.T && w.ID && iauthor.indexOf("tc=" + w.ID) == -1) {
              iauthor.push("tc=" + w.ID);
              o.push("<author>tc=" + w.ID + "</author>");
            }
          });
        });
        if (iauthor.length == 0) {
          iauthor.push("SheetJ5");
          o.push("<author>SheetJ5</author>");
        }
        o.push("</authors>");
        o.push("<commentList>");
        data.forEach(function(d) {
          var lastauthor = 0, ts = [];
          if (d[1][0] && d[1][0].T && d[1][0].ID)
            lastauthor = iauthor.indexOf("tc=" + d[1][0].ID);
          else
            d[1].forEach(function(c) {
              if (c.a)
                lastauthor = iauthor.indexOf(escapexml(c.a));
              ts.push(c.t || "");
            });
          o.push('<comment ref="' + d[0] + '" authorId="' + lastauthor + '"><text>');
          if (ts.length <= 1)
            o.push(writetag("t", escapexml(ts[0] || "")));
          else {
            var t = "Comment:\n    " + ts[0] + "\n";
            for (var i = 1; i < ts.length; ++i)
              t += "Reply:\n    " + ts[i] + "\n";
            o.push(writetag("t", escapexml(t)));
          }
          o.push("</text></comment>");
        });
        o.push("</commentList>");
        if (o.length > 2) {
          o[o.length] = "</comments>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_tcmnt_xml(data, opts) {
        var out = [];
        var pass = false, comment = {}, tidx = 0;
        data.replace(tagregex, function xml_tcmnt(x, idx) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<?xml":
              break;
            case "<ThreadedComments":
              break;
            case "</ThreadedComments>":
              break;
            case "<threadedComment":
              comment = { author: y.personId, guid: y.id, ref: y.ref, T: 1 };
              break;
            case "</threadedComment>":
              if (comment.t != null)
                out.push(comment);
              break;
            case "<text>":
            case "<text":
              tidx = idx + x.length;
              break;
            case "</text>":
              comment.t = data.slice(tidx, idx).replace(/\r\n/g, "\n").replace(/\r/g, "\n");
              break;
            case "<mentions":
            case "<mentions>":
              pass = true;
              break;
            case "</mentions>":
              pass = false;
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (!pass && opts.WTF)
                throw new Error("unrecognized " + y[0] + " in threaded comments");
          }
          return x;
        });
        return out;
      }
      function write_tcmnt_xml(comments, people, opts) {
        var o = [XML_HEADER, writextag("ThreadedComments", null, { "xmlns": XMLNS.TCMNT }).replace(/[\/]>/, ">")];
        comments.forEach(function(carr) {
          var rootid = "";
          (carr[1] || []).forEach(function(c, idx) {
            if (!c.T) {
              delete c.ID;
              return;
            }
            if (c.a && people.indexOf(c.a) == -1)
              people.push(c.a);
            var tcopts = {
              ref: carr[0],
              id: "{54EE7951-7262-4200-6969-" + ("000000000000" + opts.tcid++).slice(-12) + "}"
            };
            if (idx == 0)
              rootid = tcopts.id;
            else
              tcopts.parentId = rootid;
            c.ID = tcopts.id;
            if (c.a)
              tcopts.personId = "{54EE7950-7262-4200-6969-" + ("000000000000" + people.indexOf(c.a)).slice(-12) + "}";
            o.push(writextag("threadedComment", writetag("text", c.t || ""), tcopts));
          });
        });
        o.push("</ThreadedComments>");
        return o.join("");
      }
      function parse_people_xml(data, opts) {
        var out = [];
        var pass = false;
        data.replace(tagregex, function xml_tcmnt(x) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<?xml":
              break;
            case "<personList":
              break;
            case "</personList>":
              break;
            case "<person":
              out.push({ name: y.displayname, id: y.id });
              break;
            case "</person>":
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (!pass && opts.WTF)
                throw new Error("unrecognized " + y[0] + " in threaded comments");
          }
          return x;
        });
        return out;
      }
      function write_people_xml(people) {
        var o = [XML_HEADER, writextag("personList", null, {
          "xmlns": XMLNS.TCMNT,
          "xmlns:x": XMLNS_main[0]
        }).replace(/[\/]>/, ">")];
        people.forEach(function(person, idx) {
          o.push(writextag("person", null, {
            displayName: person,
            id: "{54EE7950-7262-4200-6969-" + ("000000000000" + idx).slice(-12) + "}",
            userId: person,
            providerId: "None"
          }));
        });
        o.push("</personList>");
        return o.join("");
      }
      function parse_BrtBeginComment(data) {
        var out = {};
        out.iauthor = data.read_shift(4);
        var rfx = parse_UncheckedRfX(data, 16);
        out.rfx = rfx.s;
        out.ref = encode_cell(rfx.s);
        data.l += 16;
        return out;
      }
      function write_BrtBeginComment(data, o) {
        if (o == null)
          o = new_buf(36);
        o.write_shift(4, data[1].iauthor);
        write_UncheckedRfX(data[0], o);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        return o;
      }
      var parse_BrtCommentAuthor = parse_XLWideString;
      function write_BrtCommentAuthor(data) {
        return write_XLWideString(data.slice(0, 54));
      }
      function parse_comments_bin(data, opts) {
        var out = [];
        var authors = [];
        var c = {};
        var pass = false;
        recordhopper(data, function hopper_cmnt(val, R, RT) {
          switch (RT) {
            case 632:
              authors.push(val);
              break;
            case 635:
              c = val;
              break;
            case 637:
              c.t = val.t;
              c.h = val.h;
              c.r = val.r;
              break;
            case 636:
              c.author = authors[c.iauthor];
              delete c.iauthor;
              if (opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r)
                break;
              if (!c.t)
                c.t = "";
              delete c.rfx;
              out.push(c);
              break;
            case 3072:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              break;
            case 38:
              break;
            default:
              if (R.T) {
              } else if (!pass || opts.WTF)
                throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        });
        return out;
      }
      function write_comments_bin(data) {
        var ba = buf_array();
        var iauthor = [];
        write_record(ba, 628);
        write_record(ba, 630);
        data.forEach(function(comment) {
          comment[1].forEach(function(c) {
            if (iauthor.indexOf(c.a) > -1)
              return;
            iauthor.push(c.a.slice(0, 54));
            write_record(ba, 632, write_BrtCommentAuthor(c.a));
          });
        });
        write_record(ba, 631);
        write_record(ba, 633);
        data.forEach(function(comment) {
          comment[1].forEach(function(c) {
            c.iauthor = iauthor.indexOf(c.a);
            var range = { s: decode_cell(comment[0]), e: decode_cell(comment[0]) };
            write_record(ba, 635, write_BrtBeginComment([range, c]));
            if (c.t && c.t.length > 0)
              write_record(ba, 637, write_BrtCommentText(c));
            write_record(ba, 636);
            delete c.iauthor;
          });
        });
        write_record(ba, 634);
        write_record(ba, 629);
        return ba.end();
      }
      var CT_VBA = "application/vnd.ms-office.vbaProject";
      function make_vba_xls(cfb) {
        var newcfb = CFB.utils.cfb_new({ root: "R" });
        cfb.FullPaths.forEach(function(p, i) {
          if (p.slice(-1) === "/" || !p.match(/_VBA_PROJECT_CUR/))
            return;
          var newpath = p.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
          CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);
        });
        return CFB.write(newcfb);
      }
      function fill_vba_xls(cfb, vba) {
        vba.FullPaths.forEach(function(p, i) {
          if (i == 0)
            return;
          var newpath = p.replace(/[^\/]*[\/]/, "/_VBA_PROJECT_CUR/");
          if (newpath.slice(-1) !== "/")
            CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i].content);
        });
      }
      var VBAFMTS = ["xlsb", "xlsm", "xlam", "biff8", "xla"];
      function parse_ds_bin() {
        return { "!type": "dialog" };
      }
      function parse_ds_xml() {
        return { "!type": "dialog" };
      }
      function parse_ms_bin() {
        return { "!type": "macro" };
      }
      function parse_ms_xml() {
        return { "!type": "macro" };
      }
      var rc_to_a1 = function() {
        var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
        var rcbase = { r: 0, c: 0 };
        function rcfunc($$, $1, $2, $3) {
          var cRel = false, rRel = false;
          if ($2.length == 0)
            rRel = true;
          else if ($2.charAt(0) == "[") {
            rRel = true;
            $2 = $2.slice(1, -1);
          }
          if ($3.length == 0)
            cRel = true;
          else if ($3.charAt(0) == "[") {
            cRel = true;
            $3 = $3.slice(1, -1);
          }
          var R = $2.length > 0 ? parseInt($2, 10) | 0 : 0, C = $3.length > 0 ? parseInt($3, 10) | 0 : 0;
          if (cRel)
            C += rcbase.c;
          else
            --C;
          if (rRel)
            R += rcbase.r;
          else
            --R;
          return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
        }
        return function rc_to_a12(fstr, base) {
          rcbase = base;
          return fstr.replace(rcregex, rcfunc);
        };
      }();
      var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
      var a1_to_rc = function() {
        return function a1_to_rc2(fstr, base) {
          return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
            var c = decode_col($3) - ($2 ? 0 : base.c);
            var r = decode_row($5) - ($4 ? 0 : base.r);
            var R = r == 0 ? "" : !$4 ? "[" + r + "]" : r + 1;
            var C = c == 0 ? "" : !$2 ? "[" + c + "]" : c + 1;
            return $1 + "R" + R + "C" + C;
          });
        };
      }();
      function shift_formula_str(f, delta) {
        return f.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
          return $1 + ($2 == "$" ? $2 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == "$" ? $4 + $5 : encode_row(decode_row($5) + delta.r));
        });
      }
      function shift_formula_xlsx(f, range, cell) {
        var r = decode_range(range), s = r.s, c = decode_cell(cell);
        var delta = { r: c.r - s.r, c: c.c - s.c };
        return shift_formula_str(f, delta);
      }
      function fuzzyfmla(f) {
        if (f.length == 1)
          return false;
        return true;
      }
      function _xlfn(f) {
        return f.replace(/_xlfn\./g, "");
      }
      function parseread1(blob) {
        blob.l += 1;
        return;
      }
      function parse_ColRelU(blob, length) {
        var c = blob.read_shift(length == 1 ? 1 : 2);
        return [c & 16383, c >> 14 & 1, c >> 15 & 1];
      }
      function parse_RgceArea(blob, length, opts) {
        var w = 2;
        if (opts) {
          if (opts.biff >= 2 && opts.biff <= 5)
            return parse_RgceArea_BIFF2(blob, length, opts);
          else if (opts.biff == 12)
            w = 4;
        }
        var r = blob.read_shift(w), R = blob.read_shift(w);
        var c = parse_ColRelU(blob, 2);
        var C = parse_ColRelU(blob, 2);
        return { s: { r, c: c[0], cRel: c[1], rRel: c[2] }, e: { r: R, c: C[0], cRel: C[1], rRel: C[2] } };
      }
      function parse_RgceArea_BIFF2(blob) {
        var r = parse_ColRelU(blob, 2), R = parse_ColRelU(blob, 2);
        var c = blob.read_shift(1);
        var C = blob.read_shift(1);
        return { s: { r: r[0], c, cRel: r[1], rRel: r[2] }, e: { r: R[0], c: C, cRel: R[1], rRel: R[2] } };
      }
      function parse_RgceAreaRel(blob, length, opts) {
        if (opts.biff < 8)
          return parse_RgceArea_BIFF2(blob, length, opts);
        var r = blob.read_shift(opts.biff == 12 ? 4 : 2), R = blob.read_shift(opts.biff == 12 ? 4 : 2);
        var c = parse_ColRelU(blob, 2);
        var C = parse_ColRelU(blob, 2);
        return { s: { r, c: c[0], cRel: c[1], rRel: c[2] }, e: { r: R, c: C[0], cRel: C[1], rRel: C[2] } };
      }
      function parse_RgceLoc(blob, length, opts) {
        if (opts && opts.biff >= 2 && opts.biff <= 5)
          return parse_RgceLoc_BIFF2(blob, length, opts);
        var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
        var c = parse_ColRelU(blob, 2);
        return { r, c: c[0], cRel: c[1], rRel: c[2] };
      }
      function parse_RgceLoc_BIFF2(blob) {
        var r = parse_ColRelU(blob, 2);
        var c = blob.read_shift(1);
        return { r: r[0], c, cRel: r[1], rRel: r[2] };
      }
      function parse_RgceElfLoc(blob) {
        var r = blob.read_shift(2);
        var c = blob.read_shift(2);
        return { r, c: c & 255, fQuoted: !!(c & 16384), cRel: c >> 15, rRel: c >> 15 };
      }
      function parse_RgceLocRel(blob, length, opts) {
        var biff = opts && opts.biff ? opts.biff : 8;
        if (biff >= 2 && biff <= 5)
          return parse_RgceLocRel_BIFF2(blob, length, opts);
        var r = blob.read_shift(biff >= 12 ? 4 : 2);
        var cl = blob.read_shift(2);
        var cRel = (cl & 16384) >> 14, rRel = (cl & 32768) >> 15;
        cl &= 16383;
        if (rRel == 1)
          while (r > 524287)
            r -= 1048576;
        if (cRel == 1)
          while (cl > 8191)
            cl = cl - 16384;
        return { r, c: cl, cRel, rRel };
      }
      function parse_RgceLocRel_BIFF2(blob) {
        var rl = blob.read_shift(2);
        var c = blob.read_shift(1);
        var rRel = (rl & 32768) >> 15, cRel = (rl & 16384) >> 14;
        rl &= 16383;
        if (rRel == 1 && rl >= 8192)
          rl = rl - 16384;
        if (cRel == 1 && c >= 128)
          c = c - 256;
        return { r: rl, c, cRel, rRel };
      }
      function parse_PtgArea(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
        return [type, area];
      }
      function parse_PtgArea3d(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var ixti = blob.read_shift(2, "i");
        var w = 8;
        if (opts)
          switch (opts.biff) {
            case 5:
              blob.l += 12;
              w = 6;
              break;
            case 12:
              w = 12;
              break;
          }
        var area = parse_RgceArea(blob, w, opts);
        return [type, ixti, area];
      }
      function parse_PtgAreaErr(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;
        return [type];
      }
      function parse_PtgAreaErr3d(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var ixti = blob.read_shift(2);
        var w = 8;
        if (opts)
          switch (opts.biff) {
            case 5:
              blob.l += 12;
              w = 6;
              break;
            case 12:
              w = 12;
              break;
          }
        blob.l += w;
        return [type, ixti];
      }
      function parse_PtgAreaN(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var area = parse_RgceAreaRel(blob, length - 1, opts);
        return [type, area];
      }
      function parse_PtgArray(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
        return [type];
      }
      function parse_PtgAttrBaxcel(blob) {
        var bitSemi = blob[blob.l + 1] & 1;
        var bitBaxcel = 1;
        blob.l += 4;
        return [bitSemi, bitBaxcel];
      }
      function parse_PtgAttrChoose(blob, length, opts) {
        blob.l += 2;
        var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        var o = [];
        for (var i = 0; i <= offset; ++i)
          o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
        return o;
      }
      function parse_PtgAttrGoto(blob, length, opts) {
        var bitGoto = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += 2;
        return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
      }
      function parse_PtgAttrIf(blob, length, opts) {
        var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += 2;
        return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
      }
      function parse_PtgAttrIfError(blob) {
        var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += 2;
        return [bitIf, blob.read_shift(2)];
      }
      function parse_PtgAttrSemi(blob, length, opts) {
        var bitSemi = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += opts && opts.biff == 2 ? 3 : 4;
        return [bitSemi];
      }
      function parse_PtgAttrSpaceType(blob) {
        var type = blob.read_shift(1), cch = blob.read_shift(1);
        return [type, cch];
      }
      function parse_PtgAttrSpace(blob) {
        blob.read_shift(2);
        return parse_PtgAttrSpaceType(blob, 2);
      }
      function parse_PtgAttrSpaceSemi(blob) {
        blob.read_shift(2);
        return parse_PtgAttrSpaceType(blob, 2);
      }
      function parse_PtgRef(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var loc = parse_RgceLoc(blob, 0, opts);
        return [type, loc];
      }
      function parse_PtgRefN(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var loc = parse_RgceLocRel(blob, 0, opts);
        return [type, loc];
      }
      function parse_PtgRef3d(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var ixti = blob.read_shift(2);
        if (opts && opts.biff == 5)
          blob.l += 12;
        var loc = parse_RgceLoc(blob, 0, opts);
        return [type, ixti, loc];
      }
      function parse_PtgFunc(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
        return [FtabArgc[iftab], Ftab[iftab], type];
      }
      function parse_PtgFuncVar(blob, length, opts) {
        var type = blob[blob.l++];
        var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [type == 88 ? -1 : 0, blob.read_shift(1)] : parsetab(blob);
        return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
      }
      function parsetab(blob) {
        return [blob[blob.l + 1] >> 7, blob.read_shift(2) & 32767];
      }
      function parse_PtgAttrSum(blob, length, opts) {
        blob.l += opts && opts.biff == 2 ? 3 : 4;
        return;
      }
      function parse_PtgExp(blob, length, opts) {
        blob.l++;
        if (opts && opts.biff == 12)
          return [blob.read_shift(4, "i"), 0];
        var row = blob.read_shift(2);
        var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [row, col];
      }
      function parse_PtgErr(blob) {
        blob.l++;
        return BErr[blob.read_shift(1)];
      }
      function parse_PtgInt(blob) {
        blob.l++;
        return blob.read_shift(2);
      }
      function parse_PtgBool(blob) {
        blob.l++;
        return blob.read_shift(1) !== 0;
      }
      function parse_PtgNum(blob) {
        blob.l++;
        return parse_Xnum(blob, 8);
      }
      function parse_PtgStr(blob, length, opts) {
        blob.l++;
        return parse_ShortXLUnicodeString(blob, length - 1, opts);
      }
      function parse_SerAr(blob, biff) {
        var val = [blob.read_shift(1)];
        if (biff == 12)
          switch (val[0]) {
            case 2:
              val[0] = 4;
              break;
            case 4:
              val[0] = 16;
              break;
            case 0:
              val[0] = 1;
              break;
            case 1:
              val[0] = 2;
              break;
          }
        switch (val[0]) {
          case 4:
            val[1] = parsebool(blob, 1) ? "TRUE" : "FALSE";
            if (biff != 12)
              blob.l += 7;
            break;
          case 37:
          case 16:
            val[1] = BErr[blob[blob.l]];
            blob.l += biff == 12 ? 4 : 8;
            break;
          case 0:
            blob.l += 8;
            break;
          case 1:
            val[1] = parse_Xnum(blob, 8);
            break;
          case 2:
            val[1] = parse_XLUnicodeString2(blob, 0, { biff: biff > 0 && biff < 8 ? 2 : biff });
            break;
          default:
            throw new Error("Bad SerAr: " + val[0]);
        }
        return val;
      }
      function parse_PtgExtraMem(blob, cce, opts) {
        var count = blob.read_shift(opts.biff == 12 ? 4 : 2);
        var out = [];
        for (var i = 0; i != count; ++i)
          out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob, 8));
        return out;
      }
      function parse_PtgExtraArray(blob, length, opts) {
        var rows = 0, cols = 0;
        if (opts.biff == 12) {
          rows = blob.read_shift(4);
          cols = blob.read_shift(4);
        } else {
          cols = 1 + blob.read_shift(1);
          rows = 1 + blob.read_shift(2);
        }
        if (opts.biff >= 2 && opts.biff < 8) {
          --rows;
          if (--cols == 0)
            cols = 256;
        }
        for (var i = 0, o = []; i != rows && (o[i] = []); ++i)
          for (var j = 0; j != cols; ++j)
            o[i][j] = parse_SerAr(blob, opts.biff);
        return o;
      }
      function parse_PtgName(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var w = !opts || opts.biff >= 8 ? 4 : 2;
        var nameindex = blob.read_shift(w);
        switch (opts.biff) {
          case 2:
            blob.l += 5;
            break;
          case 3:
          case 4:
            blob.l += 8;
            break;
          case 5:
            blob.l += 12;
            break;
        }
        return [type, 0, nameindex];
      }
      function parse_PtgNameX(blob, length, opts) {
        if (opts.biff == 5)
          return parse_PtgNameX_BIFF5(blob, length, opts);
        var type = blob.read_shift(1) >>> 5 & 3;
        var ixti = blob.read_shift(2);
        var nameindex = blob.read_shift(4);
        return [type, ixti, nameindex];
      }
      function parse_PtgNameX_BIFF5(blob) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var ixti = blob.read_shift(2, "i");
        blob.l += 8;
        var nameindex = blob.read_shift(2);
        blob.l += 12;
        return [type, ixti, nameindex];
      }
      function parse_PtgMemArea(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        blob.l += opts && opts.biff == 2 ? 3 : 4;
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [type, cce];
      }
      function parse_PtgMemFunc(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [type, cce];
      }
      function parse_PtgRefErr(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        blob.l += 4;
        if (opts.biff < 8)
          blob.l--;
        if (opts.biff == 12)
          blob.l += 2;
        return [type];
      }
      function parse_PtgRefErr3d(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var ixti = blob.read_shift(2);
        var w = 4;
        if (opts)
          switch (opts.biff) {
            case 5:
              w = 15;
              break;
            case 12:
              w = 6;
              break;
          }
        blob.l += w;
        return [type, ixti];
      }
      var parse_PtgMemErr = parsenoop;
      var parse_PtgMemNoMem = parsenoop;
      var parse_PtgTbl = parsenoop;
      function parse_PtgElfLoc(blob, length, opts) {
        blob.l += 2;
        return [parse_RgceElfLoc(blob, 4, opts)];
      }
      function parse_PtgElfNoop(blob) {
        blob.l += 6;
        return [];
      }
      var parse_PtgElfCol = parse_PtgElfLoc;
      var parse_PtgElfColS = parse_PtgElfNoop;
      var parse_PtgElfColSV = parse_PtgElfNoop;
      var parse_PtgElfColV = parse_PtgElfLoc;
      function parse_PtgElfLel(blob) {
        blob.l += 2;
        return [parseuint16(blob), blob.read_shift(2) & 1];
      }
      var parse_PtgElfRadical = parse_PtgElfLoc;
      var parse_PtgElfRadicalLel = parse_PtgElfLel;
      var parse_PtgElfRadicalS = parse_PtgElfNoop;
      var parse_PtgElfRw = parse_PtgElfLoc;
      var parse_PtgElfRwV = parse_PtgElfLoc;
      var PtgListRT = [
        "Data",
        "All",
        "Headers",
        "??",
        "?Data2",
        "??",
        "?DataHeaders",
        "??",
        "Totals",
        "??",
        "??",
        "??",
        "?DataTotals",
        "??",
        "??",
        "??",
        "?Current"
      ];
      function parse_PtgList(blob) {
        blob.l += 2;
        var ixti = blob.read_shift(2);
        var flags = blob.read_shift(2);
        var idx = blob.read_shift(4);
        var c = blob.read_shift(2);
        var C = blob.read_shift(2);
        var rt = PtgListRT[flags >> 2 & 31];
        return { ixti, coltype: flags & 3, rt, idx, c, C };
      }
      function parse_PtgSxName(blob) {
        blob.l += 2;
        return [blob.read_shift(4)];
      }
      function parse_PtgSheet(blob, length, opts) {
        blob.l += 5;
        blob.l += 2;
        blob.l += opts.biff == 2 ? 1 : 4;
        return ["PTGSHEET"];
      }
      function parse_PtgEndSheet(blob, length, opts) {
        blob.l += opts.biff == 2 ? 4 : 5;
        return ["PTGENDSHEET"];
      }
      function parse_PtgMemAreaN(blob) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var cce = blob.read_shift(2);
        return [type, cce];
      }
      function parse_PtgMemNoMemN(blob) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var cce = blob.read_shift(2);
        return [type, cce];
      }
      function parse_PtgAttrNoop(blob) {
        blob.l += 4;
        return [0, 0];
      }
      var PtgTypes = {
        1: { n: "PtgExp", f: parse_PtgExp },
        2: { n: "PtgTbl", f: parse_PtgTbl },
        3: { n: "PtgAdd", f: parseread1 },
        4: { n: "PtgSub", f: parseread1 },
        5: { n: "PtgMul", f: parseread1 },
        6: { n: "PtgDiv", f: parseread1 },
        7: { n: "PtgPower", f: parseread1 },
        8: { n: "PtgConcat", f: parseread1 },
        9: { n: "PtgLt", f: parseread1 },
        10: { n: "PtgLe", f: parseread1 },
        11: { n: "PtgEq", f: parseread1 },
        12: { n: "PtgGe", f: parseread1 },
        13: { n: "PtgGt", f: parseread1 },
        14: { n: "PtgNe", f: parseread1 },
        15: { n: "PtgIsect", f: parseread1 },
        16: { n: "PtgUnion", f: parseread1 },
        17: { n: "PtgRange", f: parseread1 },
        18: { n: "PtgUplus", f: parseread1 },
        19: { n: "PtgUminus", f: parseread1 },
        20: { n: "PtgPercent", f: parseread1 },
        21: { n: "PtgParen", f: parseread1 },
        22: { n: "PtgMissArg", f: parseread1 },
        23: { n: "PtgStr", f: parse_PtgStr },
        26: { n: "PtgSheet", f: parse_PtgSheet },
        27: { n: "PtgEndSheet", f: parse_PtgEndSheet },
        28: { n: "PtgErr", f: parse_PtgErr },
        29: { n: "PtgBool", f: parse_PtgBool },
        30: { n: "PtgInt", f: parse_PtgInt },
        31: { n: "PtgNum", f: parse_PtgNum },
        32: { n: "PtgArray", f: parse_PtgArray },
        33: { n: "PtgFunc", f: parse_PtgFunc },
        34: { n: "PtgFuncVar", f: parse_PtgFuncVar },
        35: { n: "PtgName", f: parse_PtgName },
        36: { n: "PtgRef", f: parse_PtgRef },
        37: { n: "PtgArea", f: parse_PtgArea },
        38: { n: "PtgMemArea", f: parse_PtgMemArea },
        39: { n: "PtgMemErr", f: parse_PtgMemErr },
        40: { n: "PtgMemNoMem", f: parse_PtgMemNoMem },
        41: { n: "PtgMemFunc", f: parse_PtgMemFunc },
        42: { n: "PtgRefErr", f: parse_PtgRefErr },
        43: { n: "PtgAreaErr", f: parse_PtgAreaErr },
        44: { n: "PtgRefN", f: parse_PtgRefN },
        45: { n: "PtgAreaN", f: parse_PtgAreaN },
        46: { n: "PtgMemAreaN", f: parse_PtgMemAreaN },
        47: { n: "PtgMemNoMemN", f: parse_PtgMemNoMemN },
        57: { n: "PtgNameX", f: parse_PtgNameX },
        58: { n: "PtgRef3d", f: parse_PtgRef3d },
        59: { n: "PtgArea3d", f: parse_PtgArea3d },
        60: { n: "PtgRefErr3d", f: parse_PtgRefErr3d },
        61: { n: "PtgAreaErr3d", f: parse_PtgAreaErr3d },
        255: {}
      };
      var PtgDupes = {
        64: 32,
        96: 32,
        65: 33,
        97: 33,
        66: 34,
        98: 34,
        67: 35,
        99: 35,
        68: 36,
        100: 36,
        69: 37,
        101: 37,
        70: 38,
        102: 38,
        71: 39,
        103: 39,
        72: 40,
        104: 40,
        73: 41,
        105: 41,
        74: 42,
        106: 42,
        75: 43,
        107: 43,
        76: 44,
        108: 44,
        77: 45,
        109: 45,
        78: 46,
        110: 46,
        79: 47,
        111: 47,
        88: 34,
        120: 34,
        89: 57,
        121: 57,
        90: 58,
        122: 58,
        91: 59,
        123: 59,
        92: 60,
        124: 60,
        93: 61,
        125: 61
      };
      var Ptg18 = {
        1: { n: "PtgElfLel", f: parse_PtgElfLel },
        2: { n: "PtgElfRw", f: parse_PtgElfRw },
        3: { n: "PtgElfCol", f: parse_PtgElfCol },
        6: { n: "PtgElfRwV", f: parse_PtgElfRwV },
        7: { n: "PtgElfColV", f: parse_PtgElfColV },
        10: { n: "PtgElfRadical", f: parse_PtgElfRadical },
        11: { n: "PtgElfRadicalS", f: parse_PtgElfRadicalS },
        13: { n: "PtgElfColS", f: parse_PtgElfColS },
        15: { n: "PtgElfColSV", f: parse_PtgElfColSV },
        16: { n: "PtgElfRadicalLel", f: parse_PtgElfRadicalLel },
        25: { n: "PtgList", f: parse_PtgList },
        29: { n: "PtgSxName", f: parse_PtgSxName },
        255: {}
      };
      var Ptg19 = {
        0: { n: "PtgAttrNoop", f: parse_PtgAttrNoop },
        1: { n: "PtgAttrSemi", f: parse_PtgAttrSemi },
        2: { n: "PtgAttrIf", f: parse_PtgAttrIf },
        4: { n: "PtgAttrChoose", f: parse_PtgAttrChoose },
        8: { n: "PtgAttrGoto", f: parse_PtgAttrGoto },
        16: { n: "PtgAttrSum", f: parse_PtgAttrSum },
        32: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel },
        33: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel },
        64: { n: "PtgAttrSpace", f: parse_PtgAttrSpace },
        65: { n: "PtgAttrSpaceSemi", f: parse_PtgAttrSpaceSemi },
        128: { n: "PtgAttrIfError", f: parse_PtgAttrIfError },
        255: {}
      };
      function parse_RgbExtra(blob, length, rgce, opts) {
        if (opts.biff < 8)
          return parsenoop(blob, length);
        var target = blob.l + length;
        var o = [];
        for (var i = 0; i !== rgce.length; ++i) {
          switch (rgce[i][0]) {
            case "PtgArray":
              rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);
              o.push(rgce[i][1]);
              break;
            case "PtgMemArea":
              rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1], opts);
              o.push(rgce[i][2]);
              break;
            case "PtgExp":
              if (opts && opts.biff == 12) {
                rgce[i][1][1] = blob.read_shift(4);
                o.push(rgce[i][1]);
              }
              break;
            case "PtgList":
            case "PtgElfRadicalS":
            case "PtgElfColS":
            case "PtgElfColSV":
              throw "Unsupported " + rgce[i][0];
            default:
              break;
          }
        }
        length = target - blob.l;
        if (length !== 0)
          o.push(parsenoop(blob, length));
        return o;
      }
      function parse_Rgce(blob, length, opts) {
        var target = blob.l + length;
        var R, id, ptgs = [];
        while (target != blob.l) {
          length = target - blob.l;
          id = blob[blob.l];
          R = PtgTypes[id] || PtgTypes[PtgDupes[id]];
          if (id === 24 || id === 25)
            R = (id === 24 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
          if (!R || !R.f) {
            parsenoop(blob, length);
          } else {
            ptgs.push([R.n, R.f(blob, length, opts)]);
          }
        }
        return ptgs;
      }
      function stringify_array(f) {
        var o = [];
        for (var i = 0; i < f.length; ++i) {
          var x = f[i], r = [];
          for (var j = 0; j < x.length; ++j) {
            var y = x[j];
            if (y)
              switch (y[0]) {
                case 2:
                  r.push('"' + y[1].replace(/"/g, '""') + '"');
                  break;
                default:
                  r.push(y[1]);
              }
            else
              r.push("");
          }
          o.push(r.join(","));
        }
        return o.join(";");
      }
      var PtgBinOp = {
        PtgAdd: "+",
        PtgConcat: "&",
        PtgDiv: "/",
        PtgEq: "=",
        PtgGe: ">=",
        PtgGt: ">",
        PtgLe: "<=",
        PtgLt: "<",
        PtgMul: "*",
        PtgNe: "<>",
        PtgPower: "^",
        PtgSub: "-"
      };
      function formula_quote_sheet_name(sname, opts) {
        if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2))
          throw new Error("empty sheet name");
        if (/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(sname))
          return "'" + sname + "'";
        return sname;
      }
      function get_ixti_raw(supbooks, ixti, opts) {
        if (!supbooks)
          return "SH33TJSERR0";
        if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti]))
          return supbooks.SheetNames[ixti];
        if (!supbooks.XTI)
          return "SH33TJSERR6";
        var XTI = supbooks.XTI[ixti];
        if (opts.biff < 8) {
          if (ixti > 1e4)
            ixti -= 65536;
          if (ixti < 0)
            ixti = -ixti;
          return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
        }
        if (!XTI)
          return "SH33TJSERR1";
        var o = "";
        if (opts.biff > 8)
          switch (supbooks[XTI[0]][0]) {
            case 357:
              o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
              return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
            case 358:
              if (opts.SID != null)
                return supbooks.SheetNames[opts.SID];
              return "SH33TJSSAME" + supbooks[XTI[0]][0];
            case 355:
            default:
              return "SH33TJSSRC" + supbooks[XTI[0]][0];
          }
        switch (supbooks[XTI[0]][0][0]) {
          case 1025:
            o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]] || "SH33TJSERR3";
            return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
          case 14849:
            return supbooks[XTI[0]].slice(1).map(function(name) {
              return name.Name;
            }).join(";;");
          default:
            if (!supbooks[XTI[0]][0][3])
              return "SH33TJSERR2";
            o = XTI[1] == -1 ? "#REF" : supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4";
            return XTI[1] == XTI[2] ? o : o + ":" + supbooks[XTI[0]][0][3][XTI[2]];
        }
      }
      function get_ixti(supbooks, ixti, opts) {
        var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
        return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
      }
      function stringify_formula(formula, range, cell, supbooks, opts) {
        var biff = opts && opts.biff || 8;
        var _range = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
        var stack = [], e1, e2, c, ixti = 0, nameidx = 0, r, sname = "";
        if (!formula[0] || !formula[0][0])
          return "";
        var last_sp = -1, sp = "";
        for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
          var f = formula[0][ff];
          switch (f[0]) {
            case "PtgUminus":
              stack.push("-" + stack.pop());
              break;
            case "PtgUplus":
              stack.push("+" + stack.pop());
              break;
            case "PtgPercent":
              stack.push(stack.pop() + "%");
              break;
            case "PtgAdd":
            case "PtgConcat":
            case "PtgDiv":
            case "PtgEq":
            case "PtgGe":
            case "PtgGt":
            case "PtgLe":
            case "PtgLt":
            case "PtgMul":
            case "PtgNe":
            case "PtgPower":
            case "PtgSub":
              e1 = stack.pop();
              e2 = stack.pop();
              if (last_sp >= 0) {
                switch (formula[0][last_sp][1][0]) {
                  case 0:
                    sp = fill(" ", formula[0][last_sp][1][1]);
                    break;
                  case 1:
                    sp = fill("\r", formula[0][last_sp][1][1]);
                    break;
                  default:
                    sp = "";
                    if (opts.WTF)
                      throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                }
                e2 = e2 + sp;
                last_sp = -1;
              }
              stack.push(e2 + PtgBinOp[f[0]] + e1);
              break;
            case "PtgIsect":
              e1 = stack.pop();
              e2 = stack.pop();
              stack.push(e2 + " " + e1);
              break;
            case "PtgUnion":
              e1 = stack.pop();
              e2 = stack.pop();
              stack.push(e2 + "," + e1);
              break;
            case "PtgRange":
              e1 = stack.pop();
              e2 = stack.pop();
              stack.push(e2 + ":" + e1);
              break;
            case "PtgAttrChoose":
              break;
            case "PtgAttrGoto":
              break;
            case "PtgAttrIf":
              break;
            case "PtgAttrIfError":
              break;
            case "PtgRef":
              c = shift_cell_xls(f[1][1], _range, opts);
              stack.push(encode_cell_xls(c, biff));
              break;
            case "PtgRefN":
              c = cell ? shift_cell_xls(f[1][1], cell, opts) : f[1][1];
              stack.push(encode_cell_xls(c, biff));
              break;
            case "PtgRef3d":
              ixti = f[1][1];
              c = shift_cell_xls(f[1][2], _range, opts);
              sname = get_ixti(supbooks, ixti, opts);
              var w = sname;
              stack.push(sname + "!" + encode_cell_xls(c, biff));
              break;
            case "PtgFunc":
            case "PtgFuncVar":
              var argc = f[1][0], func = f[1][1];
              if (!argc)
                argc = 0;
              argc &= 127;
              var args = argc == 0 ? [] : stack.slice(-argc);
              stack.length -= argc;
              if (func === "User")
                func = args.shift();
              stack.push(func + "(" + args.join(",") + ")");
              break;
            case "PtgBool":
              stack.push(f[1] ? "TRUE" : "FALSE");
              break;
            case "PtgInt":
              stack.push(f[1]);
              break;
            case "PtgNum":
              stack.push(String(f[1]));
              break;
            case "PtgStr":
              stack.push('"' + f[1].replace(/"/g, '""') + '"');
              break;
            case "PtgErr":
              stack.push(f[1]);
              break;
            case "PtgAreaN":
              r = shift_range_xls(f[1][1], cell ? { s: cell } : _range, opts);
              stack.push(encode_range_xls(r, opts));
              break;
            case "PtgArea":
              r = shift_range_xls(f[1][1], _range, opts);
              stack.push(encode_range_xls(r, opts));
              break;
            case "PtgArea3d":
              ixti = f[1][1];
              r = f[1][2];
              sname = get_ixti(supbooks, ixti, opts);
              stack.push(sname + "!" + encode_range_xls(r, opts));
              break;
            case "PtgAttrSum":
              stack.push("SUM(" + stack.pop() + ")");
              break;
            case "PtgAttrBaxcel":
            case "PtgAttrSemi":
              break;
            case "PtgName":
              nameidx = f[1][2];
              var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];
              var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
              if (name && name.slice(0, 6) == "_xlfn." && !opts.xlfn)
                name = name.slice(6);
              stack.push(name);
              break;
            case "PtgNameX":
              var bookidx = f[1][1];
              nameidx = f[1][2];
              var externbook;
              if (opts.biff <= 5) {
                if (bookidx < 0)
                  bookidx = -bookidx;
                if (supbooks[bookidx])
                  externbook = supbooks[bookidx][nameidx];
              } else {
                var o = "";
                if (((supbooks[bookidx] || [])[0] || [])[0] == 14849) {
                } else if (((supbooks[bookidx] || [])[0] || [])[0] == 1025) {
                  if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
                    o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + "!";
                  }
                } else
                  o = supbooks.SheetNames[nameidx - 1] + "!";
                if (supbooks[bookidx] && supbooks[bookidx][nameidx])
                  o += supbooks[bookidx][nameidx].Name;
                else if (supbooks[0] && supbooks[0][nameidx])
                  o += supbooks[0][nameidx].Name;
                else {
                  var ixtidata = (get_ixti_raw(supbooks, bookidx, opts) || "").split(";;");
                  if (ixtidata[nameidx - 1])
                    o = ixtidata[nameidx - 1];
                  else
                    o += "SH33TJSERRX";
                }
                stack.push(o);
                break;
              }
              if (!externbook)
                externbook = { Name: "SH33TJSERRY" };
              stack.push(externbook.Name);
              break;
            case "PtgParen":
              var lp = "(", rp = ")";
              if (last_sp >= 0) {
                sp = "";
                switch (formula[0][last_sp][1][0]) {
                  case 2:
                    lp = fill(" ", formula[0][last_sp][1][1]) + lp;
                    break;
                  case 3:
                    lp = fill("\r", formula[0][last_sp][1][1]) + lp;
                    break;
                  case 4:
                    rp = fill(" ", formula[0][last_sp][1][1]) + rp;
                    break;
                  case 5:
                    rp = fill("\r", formula[0][last_sp][1][1]) + rp;
                    break;
                  default:
                    if (opts.WTF)
                      throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                }
                last_sp = -1;
              }
              stack.push(lp + stack.pop() + rp);
              break;
            case "PtgRefErr":
              stack.push("#REF!");
              break;
            case "PtgRefErr3d":
              stack.push("#REF!");
              break;
            case "PtgExp":
              c = { c: f[1][1], r: f[1][0] };
              var q = { c: cell.c, r: cell.r };
              if (supbooks.sharedf[encode_cell(c)]) {
                var parsedf = supbooks.sharedf[encode_cell(c)];
                stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
              } else {
                var fnd = false;
                for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {
                  e2 = supbooks.arrayf[e1];
                  if (c.c < e2[0].s.c || c.c > e2[0].e.c)
                    continue;
                  if (c.r < e2[0].s.r || c.r > e2[0].e.r)
                    continue;
                  stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
                  fnd = true;
                  break;
                }
                if (!fnd)
                  stack.push(f[1]);
              }
              break;
            case "PtgArray":
              stack.push("{" + stringify_array(f[1]) + "}");
              break;
            case "PtgMemArea":
              break;
            case "PtgAttrSpace":
            case "PtgAttrSpaceSemi":
              last_sp = ff;
              break;
            case "PtgTbl":
              break;
            case "PtgMemErr":
              break;
            case "PtgMissArg":
              stack.push("");
              break;
            case "PtgAreaErr":
              stack.push("#REF!");
              break;
            case "PtgAreaErr3d":
              stack.push("#REF!");
              break;
            case "PtgList":
              stack.push("Table" + f[1].idx + "[#" + f[1].rt + "]");
              break;
            case "PtgMemAreaN":
            case "PtgMemNoMemN":
            case "PtgAttrNoop":
            case "PtgSheet":
            case "PtgEndSheet":
              break;
            case "PtgMemFunc":
              break;
            case "PtgMemNoMem":
              break;
            case "PtgElfCol":
            case "PtgElfColS":
            case "PtgElfColSV":
            case "PtgElfColV":
            case "PtgElfLel":
            case "PtgElfRadical":
            case "PtgElfRadicalLel":
            case "PtgElfRadicalS":
            case "PtgElfRw":
            case "PtgElfRwV":
              throw new Error("Unsupported ELFs");
            case "PtgSxName":
              throw new Error("Unrecognized Formula Token: " + String(f));
            default:
              throw new Error("Unrecognized Formula Token: " + String(f));
          }
          var PtgNonDisp = ["PtgAttrSpace", "PtgAttrSpaceSemi", "PtgAttrGoto"];
          if (opts.biff != 3) {
            if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
              f = formula[0][last_sp];
              var _left = true;
              switch (f[1][0]) {
                case 4:
                  _left = false;
                case 0:
                  sp = fill(" ", f[1][1]);
                  break;
                case 5:
                  _left = false;
                case 1:
                  sp = fill("\r", f[1][1]);
                  break;
                default:
                  sp = "";
                  if (opts.WTF)
                    throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
              }
              stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
              last_sp = -1;
            }
          }
        }
        if (stack.length > 1 && opts.WTF)
          throw new Error("bad formula stack");
        return stack[0];
      }
      function parse_ArrayParsedFormula(blob, length, opts) {
        var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
        var rgcb, cce = blob.read_shift(len);
        if (cce == 65535)
          return [[], parsenoop(blob, length - 2)];
        var rgce = parse_Rgce(blob, cce, opts);
        if (length !== cce + len)
          rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
        blob.l = target;
        return [rgce, rgcb];
      }
      function parse_XLSCellParsedFormula(blob, length, opts) {
        var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
        var rgcb, cce = blob.read_shift(len);
        if (cce == 65535)
          return [[], parsenoop(blob, length - 2)];
        var rgce = parse_Rgce(blob, cce, opts);
        if (length !== cce + len)
          rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
        blob.l = target;
        return [rgce, rgcb];
      }
      function parse_NameParsedFormula(blob, length, opts, cce) {
        var target = blob.l + length;
        var rgce = parse_Rgce(blob, cce, opts);
        var rgcb;
        if (target !== blob.l)
          rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
        return [rgce, rgcb];
      }
      function parse_SharedParsedFormula(blob, length, opts) {
        var target = blob.l + length;
        var rgcb, cce = blob.read_shift(2);
        var rgce = parse_Rgce(blob, cce, opts);
        if (cce == 65535)
          return [[], parsenoop(blob, length - 2)];
        if (length !== cce + 2)
          rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
        return [rgce, rgcb];
      }
      function parse_FormulaValue(blob) {
        var b;
        if (__readUInt16LE(blob, blob.l + 6) !== 65535)
          return [parse_Xnum(blob), "n"];
        switch (blob[blob.l]) {
          case 0:
            blob.l += 8;
            return ["String", "s"];
          case 1:
            b = blob[blob.l + 2] === 1;
            blob.l += 8;
            return [b, "b"];
          case 2:
            b = blob[blob.l + 2];
            blob.l += 8;
            return [b, "e"];
          case 3:
            blob.l += 8;
            return ["", "s"];
        }
        return [];
      }
      function write_FormulaValue(value) {
        if (value == null) {
          var o = new_buf(8);
          o.write_shift(1, 3);
          o.write_shift(1, 0);
          o.write_shift(2, 0);
          o.write_shift(2, 0);
          o.write_shift(2, 65535);
          return o;
        } else if (typeof value == "number")
          return write_Xnum(value);
        return write_Xnum(0);
      }
      function parse_Formula(blob, length, opts) {
        var end = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        if (opts.biff == 2)
          ++blob.l;
        var val = parse_FormulaValue(blob, 8);
        var flags = blob.read_shift(1);
        if (opts.biff != 2) {
          blob.read_shift(1);
          if (opts.biff >= 5) {
            blob.read_shift(4);
          }
        }
        var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
        return { cell, val: val[0], formula: cbf, shared: flags >> 3 & 1, tt: val[1] };
      }
      function write_Formula(cell, R, C, opts, os) {
        var o1 = write_XLSCell(R, C, os);
        var o2 = write_FormulaValue(cell.v);
        var o3 = new_buf(6);
        var flags = 1 | 32;
        o3.write_shift(2, flags);
        o3.write_shift(4, 0);
        var bf = new_buf(cell.bf.length);
        for (var i = 0; i < cell.bf.length; ++i)
          bf[i] = cell.bf[i];
        var out = bconcat([o1, o2, o3, bf]);
        return out;
      }
      function parse_XLSBParsedFormula(data, length, opts) {
        var cce = data.read_shift(4);
        var rgce = parse_Rgce(data, cce, opts);
        var cb = data.read_shift(4);
        var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
        return [rgce, rgcb];
      }
      var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
      var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
      var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
      var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
      var Cetab = {
        0: "BEEP",
        1: "OPEN",
        2: "OPEN.LINKS",
        3: "CLOSE.ALL",
        4: "SAVE",
        5: "SAVE.AS",
        6: "FILE.DELETE",
        7: "PAGE.SETUP",
        8: "PRINT",
        9: "PRINTER.SETUP",
        10: "QUIT",
        11: "NEW.WINDOW",
        12: "ARRANGE.ALL",
        13: "WINDOW.SIZE",
        14: "WINDOW.MOVE",
        15: "FULL",
        16: "CLOSE",
        17: "RUN",
        22: "SET.PRINT.AREA",
        23: "SET.PRINT.TITLES",
        24: "SET.PAGE.BREAK",
        25: "REMOVE.PAGE.BREAK",
        26: "FONT",
        27: "DISPLAY",
        28: "PROTECT.DOCUMENT",
        29: "PRECISION",
        30: "A1.R1C1",
        31: "CALCULATE.NOW",
        32: "CALCULATION",
        34: "DATA.FIND",
        35: "EXTRACT",
        36: "DATA.DELETE",
        37: "SET.DATABASE",
        38: "SET.CRITERIA",
        39: "SORT",
        40: "DATA.SERIES",
        41: "TABLE",
        42: "FORMAT.NUMBER",
        43: "ALIGNMENT",
        44: "STYLE",
        45: "BORDER",
        46: "CELL.PROTECTION",
        47: "COLUMN.WIDTH",
        48: "UNDO",
        49: "CUT",
        50: "COPY",
        51: "PASTE",
        52: "CLEAR",
        53: "PASTE.SPECIAL",
        54: "EDIT.DELETE",
        55: "INSERT",
        56: "FILL.RIGHT",
        57: "FILL.DOWN",
        61: "DEFINE.NAME",
        62: "CREATE.NAMES",
        63: "FORMULA.GOTO",
        64: "FORMULA.FIND",
        65: "SELECT.LAST.CELL",
        66: "SHOW.ACTIVE.CELL",
        67: "GALLERY.AREA",
        68: "GALLERY.BAR",
        69: "GALLERY.COLUMN",
        70: "GALLERY.LINE",
        71: "GALLERY.PIE",
        72: "GALLERY.SCATTER",
        73: "COMBINATION",
        74: "PREFERRED",
        75: "ADD.OVERLAY",
        76: "GRIDLINES",
        77: "SET.PREFERRED",
        78: "AXES",
        79: "LEGEND",
        80: "ATTACH.TEXT",
        81: "ADD.ARROW",
        82: "SELECT.CHART",
        83: "SELECT.PLOT.AREA",
        84: "PATTERNS",
        85: "MAIN.CHART",
        86: "OVERLAY",
        87: "SCALE",
        88: "FORMAT.LEGEND",
        89: "FORMAT.TEXT",
        90: "EDIT.REPEAT",
        91: "PARSE",
        92: "JUSTIFY",
        93: "HIDE",
        94: "UNHIDE",
        95: "WORKSPACE",
        96: "FORMULA",
        97: "FORMULA.FILL",
        98: "FORMULA.ARRAY",
        99: "DATA.FIND.NEXT",
        100: "DATA.FIND.PREV",
        101: "FORMULA.FIND.NEXT",
        102: "FORMULA.FIND.PREV",
        103: "ACTIVATE",
        104: "ACTIVATE.NEXT",
        105: "ACTIVATE.PREV",
        106: "UNLOCKED.NEXT",
        107: "UNLOCKED.PREV",
        108: "COPY.PICTURE",
        109: "SELECT",
        110: "DELETE.NAME",
        111: "DELETE.FORMAT",
        112: "VLINE",
        113: "HLINE",
        114: "VPAGE",
        115: "HPAGE",
        116: "VSCROLL",
        117: "HSCROLL",
        118: "ALERT",
        119: "NEW",
        120: "CANCEL.COPY",
        121: "SHOW.CLIPBOARD",
        122: "MESSAGE",
        124: "PASTE.LINK",
        125: "APP.ACTIVATE",
        126: "DELETE.ARROW",
        127: "ROW.HEIGHT",
        128: "FORMAT.MOVE",
        129: "FORMAT.SIZE",
        130: "FORMULA.REPLACE",
        131: "SEND.KEYS",
        132: "SELECT.SPECIAL",
        133: "APPLY.NAMES",
        134: "REPLACE.FONT",
        135: "FREEZE.PANES",
        136: "SHOW.INFO",
        137: "SPLIT",
        138: "ON.WINDOW",
        139: "ON.DATA",
        140: "DISABLE.INPUT",
        142: "OUTLINE",
        143: "LIST.NAMES",
        144: "FILE.CLOSE",
        145: "SAVE.WORKBOOK",
        146: "DATA.FORM",
        147: "COPY.CHART",
        148: "ON.TIME",
        149: "WAIT",
        150: "FORMAT.FONT",
        151: "FILL.UP",
        152: "FILL.LEFT",
        153: "DELETE.OVERLAY",
        155: "SHORT.MENUS",
        159: "SET.UPDATE.STATUS",
        161: "COLOR.PALETTE",
        162: "DELETE.STYLE",
        163: "WINDOW.RESTORE",
        164: "WINDOW.MAXIMIZE",
        166: "CHANGE.LINK",
        167: "CALCULATE.DOCUMENT",
        168: "ON.KEY",
        169: "APP.RESTORE",
        170: "APP.MOVE",
        171: "APP.SIZE",
        172: "APP.MINIMIZE",
        173: "APP.MAXIMIZE",
        174: "BRING.TO.FRONT",
        175: "SEND.TO.BACK",
        185: "MAIN.CHART.TYPE",
        186: "OVERLAY.CHART.TYPE",
        187: "SELECT.END",
        188: "OPEN.MAIL",
        189: "SEND.MAIL",
        190: "STANDARD.FONT",
        191: "CONSOLIDATE",
        192: "SORT.SPECIAL",
        193: "GALLERY.3D.AREA",
        194: "GALLERY.3D.COLUMN",
        195: "GALLERY.3D.LINE",
        196: "GALLERY.3D.PIE",
        197: "VIEW.3D",
        198: "GOAL.SEEK",
        199: "WORKGROUP",
        200: "FILL.GROUP",
        201: "UPDATE.LINK",
        202: "PROMOTE",
        203: "DEMOTE",
        204: "SHOW.DETAIL",
        206: "UNGROUP",
        207: "OBJECT.PROPERTIES",
        208: "SAVE.NEW.OBJECT",
        209: "SHARE",
        210: "SHARE.NAME",
        211: "DUPLICATE",
        212: "APPLY.STYLE",
        213: "ASSIGN.TO.OBJECT",
        214: "OBJECT.PROTECTION",
        215: "HIDE.OBJECT",
        216: "SET.EXTRACT",
        217: "CREATE.PUBLISHER",
        218: "SUBSCRIBE.TO",
        219: "ATTRIBUTES",
        220: "SHOW.TOOLBAR",
        222: "PRINT.PREVIEW",
        223: "EDIT.COLOR",
        224: "SHOW.LEVELS",
        225: "FORMAT.MAIN",
        226: "FORMAT.OVERLAY",
        227: "ON.RECALC",
        228: "EDIT.SERIES",
        229: "DEFINE.STYLE",
        240: "LINE.PRINT",
        243: "ENTER.DATA",
        249: "GALLERY.RADAR",
        250: "MERGE.STYLES",
        251: "EDITION.OPTIONS",
        252: "PASTE.PICTURE",
        253: "PASTE.PICTURE.LINK",
        254: "SPELLING",
        256: "ZOOM",
        259: "INSERT.OBJECT",
        260: "WINDOW.MINIMIZE",
        265: "SOUND.NOTE",
        266: "SOUND.PLAY",
        267: "FORMAT.SHAPE",
        268: "EXTEND.POLYGON",
        269: "FORMAT.AUTO",
        272: "GALLERY.3D.BAR",
        273: "GALLERY.3D.SURFACE",
        274: "FILL.AUTO",
        276: "CUSTOMIZE.TOOLBAR",
        277: "ADD.TOOL",
        278: "EDIT.OBJECT",
        279: "ON.DOUBLECLICK",
        280: "ON.ENTRY",
        281: "WORKBOOK.ADD",
        282: "WORKBOOK.MOVE",
        283: "WORKBOOK.COPY",
        284: "WORKBOOK.OPTIONS",
        285: "SAVE.WORKSPACE",
        288: "CHART.WIZARD",
        289: "DELETE.TOOL",
        290: "MOVE.TOOL",
        291: "WORKBOOK.SELECT",
        292: "WORKBOOK.ACTIVATE",
        293: "ASSIGN.TO.TOOL",
        295: "COPY.TOOL",
        296: "RESET.TOOL",
        297: "CONSTRAIN.NUMERIC",
        298: "PASTE.TOOL",
        302: "WORKBOOK.NEW",
        305: "SCENARIO.CELLS",
        306: "SCENARIO.DELETE",
        307: "SCENARIO.ADD",
        308: "SCENARIO.EDIT",
        309: "SCENARIO.SHOW",
        310: "SCENARIO.SHOW.NEXT",
        311: "SCENARIO.SUMMARY",
        312: "PIVOT.TABLE.WIZARD",
        313: "PIVOT.FIELD.PROPERTIES",
        314: "PIVOT.FIELD",
        315: "PIVOT.ITEM",
        316: "PIVOT.ADD.FIELDS",
        318: "OPTIONS.CALCULATION",
        319: "OPTIONS.EDIT",
        320: "OPTIONS.VIEW",
        321: "ADDIN.MANAGER",
        322: "MENU.EDITOR",
        323: "ATTACH.TOOLBARS",
        324: "VBAActivate",
        325: "OPTIONS.CHART",
        328: "VBA.INSERT.FILE",
        330: "VBA.PROCEDURE.DEFINITION",
        336: "ROUTING.SLIP",
        338: "ROUTE.DOCUMENT",
        339: "MAIL.LOGON",
        342: "INSERT.PICTURE",
        343: "EDIT.TOOL",
        344: "GALLERY.DOUGHNUT",
        350: "CHART.TREND",
        352: "PIVOT.ITEM.PROPERTIES",
        354: "WORKBOOK.INSERT",
        355: "OPTIONS.TRANSITION",
        356: "OPTIONS.GENERAL",
        370: "FILTER.ADVANCED",
        373: "MAIL.ADD.MAILER",
        374: "MAIL.DELETE.MAILER",
        375: "MAIL.REPLY",
        376: "MAIL.REPLY.ALL",
        377: "MAIL.FORWARD",
        378: "MAIL.NEXT.LETTER",
        379: "DATA.LABEL",
        380: "INSERT.TITLE",
        381: "FONT.PROPERTIES",
        382: "MACRO.OPTIONS",
        383: "WORKBOOK.HIDE",
        384: "WORKBOOK.UNHIDE",
        385: "WORKBOOK.DELETE",
        386: "WORKBOOK.NAME",
        388: "GALLERY.CUSTOM",
        390: "ADD.CHART.AUTOFORMAT",
        391: "DELETE.CHART.AUTOFORMAT",
        392: "CHART.ADD.DATA",
        393: "AUTO.OUTLINE",
        394: "TAB.ORDER",
        395: "SHOW.DIALOG",
        396: "SELECT.ALL",
        397: "UNGROUP.SHEETS",
        398: "SUBTOTAL.CREATE",
        399: "SUBTOTAL.REMOVE",
        400: "RENAME.OBJECT",
        412: "WORKBOOK.SCROLL",
        413: "WORKBOOK.NEXT",
        414: "WORKBOOK.PREV",
        415: "WORKBOOK.TAB.SPLIT",
        416: "FULL.SCREEN",
        417: "WORKBOOK.PROTECT",
        420: "SCROLLBAR.PROPERTIES",
        421: "PIVOT.SHOW.PAGES",
        422: "TEXT.TO.COLUMNS",
        423: "FORMAT.CHARTTYPE",
        424: "LINK.FORMAT",
        425: "TRACER.DISPLAY",
        430: "TRACER.NAVIGATE",
        431: "TRACER.CLEAR",
        432: "TRACER.ERROR",
        433: "PIVOT.FIELD.GROUP",
        434: "PIVOT.FIELD.UNGROUP",
        435: "CHECKBOX.PROPERTIES",
        436: "LABEL.PROPERTIES",
        437: "LISTBOX.PROPERTIES",
        438: "EDITBOX.PROPERTIES",
        439: "PIVOT.REFRESH",
        440: "LINK.COMBO",
        441: "OPEN.TEXT",
        442: "HIDE.DIALOG",
        443: "SET.DIALOG.FOCUS",
        444: "ENABLE.OBJECT",
        445: "PUSHBUTTON.PROPERTIES",
        446: "SET.DIALOG.DEFAULT",
        447: "FILTER",
        448: "FILTER.SHOW.ALL",
        449: "CLEAR.OUTLINE",
        450: "FUNCTION.WIZARD",
        451: "ADD.LIST.ITEM",
        452: "SET.LIST.ITEM",
        453: "REMOVE.LIST.ITEM",
        454: "SELECT.LIST.ITEM",
        455: "SET.CONTROL.VALUE",
        456: "SAVE.COPY.AS",
        458: "OPTIONS.LISTS.ADD",
        459: "OPTIONS.LISTS.DELETE",
        460: "SERIES.AXES",
        461: "SERIES.X",
        462: "SERIES.Y",
        463: "ERRORBAR.X",
        464: "ERRORBAR.Y",
        465: "FORMAT.CHART",
        466: "SERIES.ORDER",
        467: "MAIL.LOGOFF",
        468: "CLEAR.ROUTING.SLIP",
        469: "APP.ACTIVATE.MICROSOFT",
        470: "MAIL.EDIT.MAILER",
        471: "ON.SHEET",
        472: "STANDARD.WIDTH",
        473: "SCENARIO.MERGE",
        474: "SUMMARY.INFO",
        475: "FIND.FILE",
        476: "ACTIVE.CELL.FONT",
        477: "ENABLE.TIPWIZARD",
        478: "VBA.MAKE.ADDIN",
        480: "INSERTDATATABLE",
        481: "WORKGROUP.OPTIONS",
        482: "MAIL.SEND.MAILER",
        485: "AUTOCORRECT",
        489: "POST.DOCUMENT",
        491: "PICKLIST",
        493: "VIEW.SHOW",
        494: "VIEW.DEFINE",
        495: "VIEW.DELETE",
        509: "SHEET.BACKGROUND",
        510: "INSERT.MAP.OBJECT",
        511: "OPTIONS.MENONO",
        517: "MSOCHECKS",
        518: "NORMAL",
        519: "LAYOUT",
        520: "RM.PRINT.AREA",
        521: "CLEAR.PRINT.AREA",
        522: "ADD.PRINT.AREA",
        523: "MOVE.BRK",
        545: "HIDECURR.NOTE",
        546: "HIDEALL.NOTES",
        547: "DELETE.NOTE",
        548: "TRAVERSE.NOTES",
        549: "ACTIVATE.NOTES",
        620: "PROTECT.REVISIONS",
        621: "UNPROTECT.REVISIONS",
        647: "OPTIONS.ME",
        653: "WEB.PUBLISH",
        667: "NEWWEBQUERY",
        673: "PIVOT.TABLE.CHART",
        753: "OPTIONS.SAVE",
        755: "OPTIONS.SPELL",
        808: "HIDEALL.INKANNOTS"
      };
      var Ftab = {
        0: "COUNT",
        1: "IF",
        2: "ISNA",
        3: "ISERROR",
        4: "SUM",
        5: "AVERAGE",
        6: "MIN",
        7: "MAX",
        8: "ROW",
        9: "COLUMN",
        10: "NA",
        11: "NPV",
        12: "STDEV",
        13: "DOLLAR",
        14: "FIXED",
        15: "SIN",
        16: "COS",
        17: "TAN",
        18: "ATAN",
        19: "PI",
        20: "SQRT",
        21: "EXP",
        22: "LN",
        23: "LOG10",
        24: "ABS",
        25: "INT",
        26: "SIGN",
        27: "ROUND",
        28: "LOOKUP",
        29: "INDEX",
        30: "REPT",
        31: "MID",
        32: "LEN",
        33: "VALUE",
        34: "TRUE",
        35: "FALSE",
        36: "AND",
        37: "OR",
        38: "NOT",
        39: "MOD",
        40: "DCOUNT",
        41: "DSUM",
        42: "DAVERAGE",
        43: "DMIN",
        44: "DMAX",
        45: "DSTDEV",
        46: "VAR",
        47: "DVAR",
        48: "TEXT",
        49: "LINEST",
        50: "TREND",
        51: "LOGEST",
        52: "GROWTH",
        53: "GOTO",
        54: "HALT",
        55: "RETURN",
        56: "PV",
        57: "FV",
        58: "NPER",
        59: "PMT",
        60: "RATE",
        61: "MIRR",
        62: "IRR",
        63: "RAND",
        64: "MATCH",
        65: "DATE",
        66: "TIME",
        67: "DAY",
        68: "MONTH",
        69: "YEAR",
        70: "WEEKDAY",
        71: "HOUR",
        72: "MINUTE",
        73: "SECOND",
        74: "NOW",
        75: "AREAS",
        76: "ROWS",
        77: "COLUMNS",
        78: "OFFSET",
        79: "ABSREF",
        80: "RELREF",
        81: "ARGUMENT",
        82: "SEARCH",
        83: "TRANSPOSE",
        84: "ERROR",
        85: "STEP",
        86: "TYPE",
        87: "ECHO",
        88: "SET.NAME",
        89: "CALLER",
        90: "DEREF",
        91: "WINDOWS",
        92: "SERIES",
        93: "DOCUMENTS",
        94: "ACTIVE.CELL",
        95: "SELECTION",
        96: "RESULT",
        97: "ATAN2",
        98: "ASIN",
        99: "ACOS",
        100: "CHOOSE",
        101: "HLOOKUP",
        102: "VLOOKUP",
        103: "LINKS",
        104: "INPUT",
        105: "ISREF",
        106: "GET.FORMULA",
        107: "GET.NAME",
        108: "SET.VALUE",
        109: "LOG",
        110: "EXEC",
        111: "CHAR",
        112: "LOWER",
        113: "UPPER",
        114: "PROPER",
        115: "LEFT",
        116: "RIGHT",
        117: "EXACT",
        118: "TRIM",
        119: "REPLACE",
        120: "SUBSTITUTE",
        121: "CODE",
        122: "NAMES",
        123: "DIRECTORY",
        124: "FIND",
        125: "CELL",
        126: "ISERR",
        127: "ISTEXT",
        128: "ISNUMBER",
        129: "ISBLANK",
        130: "T",
        131: "N",
        132: "FOPEN",
        133: "FCLOSE",
        134: "FSIZE",
        135: "FREADLN",
        136: "FREAD",
        137: "FWRITELN",
        138: "FWRITE",
        139: "FPOS",
        140: "DATEVALUE",
        141: "TIMEVALUE",
        142: "SLN",
        143: "SYD",
        144: "DDB",
        145: "GET.DEF",
        146: "REFTEXT",
        147: "TEXTREF",
        148: "INDIRECT",
        149: "REGISTER",
        150: "CALL",
        151: "ADD.BAR",
        152: "ADD.MENU",
        153: "ADD.COMMAND",
        154: "ENABLE.COMMAND",
        155: "CHECK.COMMAND",
        156: "RENAME.COMMAND",
        157: "SHOW.BAR",
        158: "DELETE.MENU",
        159: "DELETE.COMMAND",
        160: "GET.CHART.ITEM",
        161: "DIALOG.BOX",
        162: "CLEAN",
        163: "MDETERM",
        164: "MINVERSE",
        165: "MMULT",
        166: "FILES",
        167: "IPMT",
        168: "PPMT",
        169: "COUNTA",
        170: "CANCEL.KEY",
        171: "FOR",
        172: "WHILE",
        173: "BREAK",
        174: "NEXT",
        175: "INITIATE",
        176: "REQUEST",
        177: "POKE",
        178: "EXECUTE",
        179: "TERMINATE",
        180: "RESTART",
        181: "HELP",
        182: "GET.BAR",
        183: "PRODUCT",
        184: "FACT",
        185: "GET.CELL",
        186: "GET.WORKSPACE",
        187: "GET.WINDOW",
        188: "GET.DOCUMENT",
        189: "DPRODUCT",
        190: "ISNONTEXT",
        191: "GET.NOTE",
        192: "NOTE",
        193: "STDEVP",
        194: "VARP",
        195: "DSTDEVP",
        196: "DVARP",
        197: "TRUNC",
        198: "ISLOGICAL",
        199: "DCOUNTA",
        200: "DELETE.BAR",
        201: "UNREGISTER",
        204: "USDOLLAR",
        205: "FINDB",
        206: "SEARCHB",
        207: "REPLACEB",
        208: "LEFTB",
        209: "RIGHTB",
        210: "MIDB",
        211: "LENB",
        212: "ROUNDUP",
        213: "ROUNDDOWN",
        214: "ASC",
        215: "DBCS",
        216: "RANK",
        219: "ADDRESS",
        220: "DAYS360",
        221: "TODAY",
        222: "VDB",
        223: "ELSE",
        224: "ELSE.IF",
        225: "END.IF",
        226: "FOR.CELL",
        227: "MEDIAN",
        228: "SUMPRODUCT",
        229: "SINH",
        230: "COSH",
        231: "TANH",
        232: "ASINH",
        233: "ACOSH",
        234: "ATANH",
        235: "DGET",
        236: "CREATE.OBJECT",
        237: "VOLATILE",
        238: "LAST.ERROR",
        239: "CUSTOM.UNDO",
        240: "CUSTOM.REPEAT",
        241: "FORMULA.CONVERT",
        242: "GET.LINK.INFO",
        243: "TEXT.BOX",
        244: "INFO",
        245: "GROUP",
        246: "GET.OBJECT",
        247: "DB",
        248: "PAUSE",
        251: "RESUME",
        252: "FREQUENCY",
        253: "ADD.TOOLBAR",
        254: "DELETE.TOOLBAR",
        255: "User",
        256: "RESET.TOOLBAR",
        257: "EVALUATE",
        258: "GET.TOOLBAR",
        259: "GET.TOOL",
        260: "SPELLING.CHECK",
        261: "ERROR.TYPE",
        262: "APP.TITLE",
        263: "WINDOW.TITLE",
        264: "SAVE.TOOLBAR",
        265: "ENABLE.TOOL",
        266: "PRESS.TOOL",
        267: "REGISTER.ID",
        268: "GET.WORKBOOK",
        269: "AVEDEV",
        270: "BETADIST",
        271: "GAMMALN",
        272: "BETAINV",
        273: "BINOMDIST",
        274: "CHIDIST",
        275: "CHIINV",
        276: "COMBIN",
        277: "CONFIDENCE",
        278: "CRITBINOM",
        279: "EVEN",
        280: "EXPONDIST",
        281: "FDIST",
        282: "FINV",
        283: "FISHER",
        284: "FISHERINV",
        285: "FLOOR",
        286: "GAMMADIST",
        287: "GAMMAINV",
        288: "CEILING",
        289: "HYPGEOMDIST",
        290: "LOGNORMDIST",
        291: "LOGINV",
        292: "NEGBINOMDIST",
        293: "NORMDIST",
        294: "NORMSDIST",
        295: "NORMINV",
        296: "NORMSINV",
        297: "STANDARDIZE",
        298: "ODD",
        299: "PERMUT",
        300: "POISSON",
        301: "TDIST",
        302: "WEIBULL",
        303: "SUMXMY2",
        304: "SUMX2MY2",
        305: "SUMX2PY2",
        306: "CHITEST",
        307: "CORREL",
        308: "COVAR",
        309: "FORECAST",
        310: "FTEST",
        311: "INTERCEPT",
        312: "PEARSON",
        313: "RSQ",
        314: "STEYX",
        315: "SLOPE",
        316: "TTEST",
        317: "PROB",
        318: "DEVSQ",
        319: "GEOMEAN",
        320: "HARMEAN",
        321: "SUMSQ",
        322: "KURT",
        323: "SKEW",
        324: "ZTEST",
        325: "LARGE",
        326: "SMALL",
        327: "QUARTILE",
        328: "PERCENTILE",
        329: "PERCENTRANK",
        330: "MODE",
        331: "TRIMMEAN",
        332: "TINV",
        334: "MOVIE.COMMAND",
        335: "GET.MOVIE",
        336: "CONCATENATE",
        337: "POWER",
        338: "PIVOT.ADD.DATA",
        339: "GET.PIVOT.TABLE",
        340: "GET.PIVOT.FIELD",
        341: "GET.PIVOT.ITEM",
        342: "RADIANS",
        343: "DEGREES",
        344: "SUBTOTAL",
        345: "SUMIF",
        346: "COUNTIF",
        347: "COUNTBLANK",
        348: "SCENARIO.GET",
        349: "OPTIONS.LISTS.GET",
        350: "ISPMT",
        351: "DATEDIF",
        352: "DATESTRING",
        353: "NUMBERSTRING",
        354: "ROMAN",
        355: "OPEN.DIALOG",
        356: "SAVE.DIALOG",
        357: "VIEW.GET",
        358: "GETPIVOTDATA",
        359: "HYPERLINK",
        360: "PHONETIC",
        361: "AVERAGEA",
        362: "MAXA",
        363: "MINA",
        364: "STDEVPA",
        365: "VARPA",
        366: "STDEVA",
        367: "VARA",
        368: "BAHTTEXT",
        369: "THAIDAYOFWEEK",
        370: "THAIDIGIT",
        371: "THAIMONTHOFYEAR",
        372: "THAINUMSOUND",
        373: "THAINUMSTRING",
        374: "THAISTRINGLENGTH",
        375: "ISTHAIDIGIT",
        376: "ROUNDBAHTDOWN",
        377: "ROUNDBAHTUP",
        378: "THAIYEAR",
        379: "RTD",
        380: "CUBEVALUE",
        381: "CUBEMEMBER",
        382: "CUBEMEMBERPROPERTY",
        383: "CUBERANKEDMEMBER",
        384: "HEX2BIN",
        385: "HEX2DEC",
        386: "HEX2OCT",
        387: "DEC2BIN",
        388: "DEC2HEX",
        389: "DEC2OCT",
        390: "OCT2BIN",
        391: "OCT2HEX",
        392: "OCT2DEC",
        393: "BIN2DEC",
        394: "BIN2OCT",
        395: "BIN2HEX",
        396: "IMSUB",
        397: "IMDIV",
        398: "IMPOWER",
        399: "IMABS",
        400: "IMSQRT",
        401: "IMLN",
        402: "IMLOG2",
        403: "IMLOG10",
        404: "IMSIN",
        405: "IMCOS",
        406: "IMEXP",
        407: "IMARGUMENT",
        408: "IMCONJUGATE",
        409: "IMAGINARY",
        410: "IMREAL",
        411: "COMPLEX",
        412: "IMSUM",
        413: "IMPRODUCT",
        414: "SERIESSUM",
        415: "FACTDOUBLE",
        416: "SQRTPI",
        417: "QUOTIENT",
        418: "DELTA",
        419: "GESTEP",
        420: "ISEVEN",
        421: "ISODD",
        422: "MROUND",
        423: "ERF",
        424: "ERFC",
        425: "BESSELJ",
        426: "BESSELK",
        427: "BESSELY",
        428: "BESSELI",
        429: "XIRR",
        430: "XNPV",
        431: "PRICEMAT",
        432: "YIELDMAT",
        433: "INTRATE",
        434: "RECEIVED",
        435: "DISC",
        436: "PRICEDISC",
        437: "YIELDDISC",
        438: "TBILLEQ",
        439: "TBILLPRICE",
        440: "TBILLYIELD",
        441: "PRICE",
        442: "YIELD",
        443: "DOLLARDE",
        444: "DOLLARFR",
        445: "NOMINAL",
        446: "EFFECT",
        447: "CUMPRINC",
        448: "CUMIPMT",
        449: "EDATE",
        450: "EOMONTH",
        451: "YEARFRAC",
        452: "COUPDAYBS",
        453: "COUPDAYS",
        454: "COUPDAYSNC",
        455: "COUPNCD",
        456: "COUPNUM",
        457: "COUPPCD",
        458: "DURATION",
        459: "MDURATION",
        460: "ODDLPRICE",
        461: "ODDLYIELD",
        462: "ODDFPRICE",
        463: "ODDFYIELD",
        464: "RANDBETWEEN",
        465: "WEEKNUM",
        466: "AMORDEGRC",
        467: "AMORLINC",
        468: "CONVERT",
        724: "SHEETJS",
        469: "ACCRINT",
        470: "ACCRINTM",
        471: "WORKDAY",
        472: "NETWORKDAYS",
        473: "GCD",
        474: "MULTINOMIAL",
        475: "LCM",
        476: "FVSCHEDULE",
        477: "CUBEKPIMEMBER",
        478: "CUBESET",
        479: "CUBESETCOUNT",
        480: "IFERROR",
        481: "COUNTIFS",
        482: "SUMIFS",
        483: "AVERAGEIF",
        484: "AVERAGEIFS"
      };
      var FtabArgc = {
        2: 1,
        3: 1,
        10: 0,
        15: 1,
        16: 1,
        17: 1,
        18: 1,
        19: 0,
        20: 1,
        21: 1,
        22: 1,
        23: 1,
        24: 1,
        25: 1,
        26: 1,
        27: 2,
        30: 2,
        31: 3,
        32: 1,
        33: 1,
        34: 0,
        35: 0,
        38: 1,
        39: 2,
        40: 3,
        41: 3,
        42: 3,
        43: 3,
        44: 3,
        45: 3,
        47: 3,
        48: 2,
        53: 1,
        61: 3,
        63: 0,
        65: 3,
        66: 3,
        67: 1,
        68: 1,
        69: 1,
        70: 1,
        71: 1,
        72: 1,
        73: 1,
        74: 0,
        75: 1,
        76: 1,
        77: 1,
        79: 2,
        80: 2,
        83: 1,
        85: 0,
        86: 1,
        89: 0,
        90: 1,
        94: 0,
        95: 0,
        97: 2,
        98: 1,
        99: 1,
        101: 3,
        102: 3,
        105: 1,
        106: 1,
        108: 2,
        111: 1,
        112: 1,
        113: 1,
        114: 1,
        117: 2,
        118: 1,
        119: 4,
        121: 1,
        126: 1,
        127: 1,
        128: 1,
        129: 1,
        130: 1,
        131: 1,
        133: 1,
        134: 1,
        135: 1,
        136: 2,
        137: 2,
        138: 2,
        140: 1,
        141: 1,
        142: 3,
        143: 4,
        144: 4,
        161: 1,
        162: 1,
        163: 1,
        164: 1,
        165: 2,
        172: 1,
        175: 2,
        176: 2,
        177: 3,
        178: 2,
        179: 1,
        184: 1,
        186: 1,
        189: 3,
        190: 1,
        195: 3,
        196: 3,
        197: 1,
        198: 1,
        199: 3,
        201: 1,
        207: 4,
        210: 3,
        211: 1,
        212: 2,
        213: 2,
        214: 1,
        215: 1,
        225: 0,
        229: 1,
        230: 1,
        231: 1,
        232: 1,
        233: 1,
        234: 1,
        235: 3,
        244: 1,
        247: 4,
        252: 2,
        257: 1,
        261: 1,
        271: 1,
        273: 4,
        274: 2,
        275: 2,
        276: 2,
        277: 3,
        278: 3,
        279: 1,
        280: 3,
        281: 3,
        282: 3,
        283: 1,
        284: 1,
        285: 2,
        286: 4,
        287: 3,
        288: 2,
        289: 4,
        290: 3,
        291: 3,
        292: 3,
        293: 4,
        294: 1,
        295: 3,
        296: 1,
        297: 3,
        298: 1,
        299: 2,
        300: 3,
        301: 3,
        302: 4,
        303: 2,
        304: 2,
        305: 2,
        306: 2,
        307: 2,
        308: 2,
        309: 3,
        310: 2,
        311: 2,
        312: 2,
        313: 2,
        314: 2,
        315: 2,
        316: 4,
        325: 2,
        326: 2,
        327: 2,
        328: 2,
        331: 2,
        332: 2,
        337: 2,
        342: 1,
        343: 1,
        346: 2,
        347: 1,
        350: 4,
        351: 3,
        352: 1,
        353: 2,
        360: 1,
        368: 1,
        369: 1,
        370: 1,
        371: 1,
        372: 1,
        373: 1,
        374: 1,
        375: 1,
        376: 1,
        377: 1,
        378: 1,
        382: 3,
        385: 1,
        392: 1,
        393: 1,
        396: 2,
        397: 2,
        398: 2,
        399: 1,
        400: 1,
        401: 1,
        402: 1,
        403: 1,
        404: 1,
        405: 1,
        406: 1,
        407: 1,
        408: 1,
        409: 1,
        410: 1,
        414: 4,
        415: 1,
        416: 1,
        417: 2,
        420: 1,
        421: 1,
        422: 2,
        424: 1,
        425: 2,
        426: 2,
        427: 2,
        428: 2,
        430: 3,
        438: 3,
        439: 3,
        440: 3,
        443: 2,
        444: 2,
        445: 2,
        446: 2,
        447: 6,
        448: 6,
        449: 2,
        450: 2,
        464: 2,
        468: 3,
        476: 2,
        479: 1,
        480: 2,
        65535: 0
      };
      function ods_to_csf_formula(f) {
        if (f.slice(0, 3) == "of:")
          f = f.slice(3);
        if (f.charCodeAt(0) == 61) {
          f = f.slice(1);
          if (f.charCodeAt(0) == 61)
            f = f.slice(1);
        }
        f = f.replace(/COM\.MICROSOFT\./g, "");
        f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) {
          return $1.replace(/\./g, "");
        });
        f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
        return f.replace(/[;~]/g, ",").replace(/\|/g, ";");
      }
      function csf_to_ods_formula(f) {
        var o = "of:=" + f.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g, ":");
        return o.replace(/;/g, "|").replace(/,/g, ";");
      }
      function ods_to_csf_3D(r) {
        var a = r.split(":");
        var s = a[0].split(".")[0];
        return [s, a[0].split(".")[1] + (a.length > 1 ? ":" + (a[1].split(".")[1] || a[1].split(".")[0]) : "")];
      }
      function csf_to_ods_3D(r) {
        return r.replace(/\./, "!");
      }
      var strs = {};
      var _ssfopts = {};
      var browser_has_Map = typeof Map !== "undefined";
      function get_sst_id(sst, str, rev) {
        var i = 0, len = sst.length;
        if (rev) {
          if (browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {
            var revarr = browser_has_Map ? rev.get(str) : rev[str];
            for (; i < revarr.length; ++i) {
              if (sst[revarr[i]].t === str) {
                sst.Count++;
                return revarr[i];
              }
            }
          }
        } else
          for (; i < len; ++i) {
            if (sst[i].t === str) {
              sst.Count++;
              return i;
            }
          }
        sst[len] = { t: str };
        sst.Count++;
        sst.Unique++;
        if (rev) {
          if (browser_has_Map) {
            if (!rev.has(str))
              rev.set(str, []);
            rev.get(str).push(len);
          } else {
            if (!Object.prototype.hasOwnProperty.call(rev, str))
              rev[str] = [];
            rev[str].push(len);
          }
        }
        return len;
      }
      function col_obj_w(C, col) {
        var p = { min: C + 1, max: C + 1 };
        var wch = -1;
        if (col.MDW)
          MDW = col.MDW;
        if (col.width != null)
          p.customWidth = 1;
        else if (col.wpx != null)
          wch = px2char(col.wpx);
        else if (col.wch != null)
          wch = col.wch;
        if (wch > -1) {
          p.width = char2width(wch);
          p.customWidth = 1;
        } else if (col.width != null)
          p.width = col.width;
        if (col.hidden)
          p.hidden = true;
        if (col.level != null) {
          p.outlineLevel = p.level = col.level;
        }
        return p;
      }
      function default_margins(margins, mode) {
        if (!margins)
          return;
        var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
        if (mode == "xlml")
          defs = [1, 1, 1, 1, 0.5, 0.5];
        if (margins.left == null)
          margins.left = defs[0];
        if (margins.right == null)
          margins.right = defs[1];
        if (margins.top == null)
          margins.top = defs[2];
        if (margins.bottom == null)
          margins.bottom = defs[3];
        if (margins.header == null)
          margins.header = defs[4];
        if (margins.footer == null)
          margins.footer = defs[5];
      }
      function get_cell_style(styles, cell, opts) {
        var z = opts.revssf[cell.z != null ? cell.z : "General"];
        var i = 60, len = styles.length;
        if (z == null && opts.ssf) {
          for (; i < 392; ++i)
            if (opts.ssf[i] == null) {
              SSF_load(cell.z, i);
              opts.ssf[i] = cell.z;
              opts.revssf[cell.z] = z = i;
              break;
            }
        }
        for (i = 0; i != len; ++i)
          if (styles[i].numFmtId === z)
            return i;
        styles[len] = {
          numFmtId: z,
          fontId: 0,
          fillId: 0,
          borderId: 0,
          xfId: 0,
          applyNumberFormat: 1
        };
        return len;
      }
      function safe_format(p, fmtid, fillid, opts, themes, styles) {
        try {
          if (opts.cellNF)
            p.z = table_fmt[fmtid];
        } catch (e) {
          if (opts.WTF)
            throw e;
        }
        if (p.t === "z" && !opts.cellStyles)
          return;
        if (p.t === "d" && typeof p.v === "string")
          p.v = parseDate(p.v);
        if ((!opts || opts.cellText !== false) && p.t !== "z")
          try {
            if (table_fmt[fmtid] == null)
              SSF_load(SSFImplicit[fmtid] || "General", fmtid);
            if (p.t === "e")
              p.w = p.w || BErr[p.v];
            else if (fmtid === 0) {
              if (p.t === "n") {
                if ((p.v | 0) === p.v)
                  p.w = p.v.toString(10);
                else
                  p.w = SSF_general_num(p.v);
              } else if (p.t === "d") {
                var dd = datenum(p.v);
                if ((dd | 0) === dd)
                  p.w = dd.toString(10);
                else
                  p.w = SSF_general_num(dd);
              } else if (p.v === void 0)
                return "";
              else
                p.w = SSF_general(p.v, _ssfopts);
            } else if (p.t === "d")
              p.w = SSF_format(fmtid, datenum(p.v), _ssfopts);
            else
              p.w = SSF_format(fmtid, p.v, _ssfopts);
          } catch (e) {
            if (opts.WTF)
              throw e;
          }
        if (!opts.cellStyles)
          return;
        if (fillid != null)
          try {
            p.s = styles.Fills[fillid];
            if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
              p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
              if (opts.WTF)
                p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
            }
            if (p.s.bgColor && p.s.bgColor.theme) {
              p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
              if (opts.WTF)
                p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
            }
          } catch (e) {
            if (opts.WTF && styles.Fills)
              throw e;
          }
      }
      function check_ws(ws, sname, i) {
        if (ws && ws["!ref"]) {
          var range = safe_decode_range(ws["!ref"]);
          if (range.e.c < range.s.c || range.e.r < range.s.r)
            throw new Error("Bad range (" + i + "): " + ws["!ref"]);
        }
      }
      function parse_ws_xml_dim(ws, s) {
        var d = safe_decode_range(s);
        if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0)
          ws["!ref"] = encode_range(d);
      }
      var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
      var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
      var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
      var dimregex = /"(\w*:\w*)"/;
      var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
      var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
      var marginregex = /<(?:\w:)?pageMargins[^>]*\/>/g;
      var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
      var sheetprregex2 = /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
      var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;
      function parse_ws_xml(data, opts, idx, rels, wb, themes, styles) {
        if (!data)
          return data;
        if (!rels)
          rels = { "!id": {} };
        if (DENSE != null && opts.dense == null)
          opts.dense = DENSE;
        var s = opts.dense ? [] : {};
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        var data1 = "", data2 = "";
        var mtch = data.match(sheetdataregex);
        if (mtch) {
          data1 = data.slice(0, mtch.index);
          data2 = data.slice(mtch.index + mtch[0].length);
        } else
          data1 = data2 = data;
        var sheetPr = data1.match(sheetprregex);
        if (sheetPr)
          parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
        else if (sheetPr = data1.match(sheetprregex2))
          parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1] || "", s, wb, idx, styles, themes);
        var ridx = (data1.match(/<(?:\w*:)?dimension/) || { index: -1 }).index;
        if (ridx > 0) {
          var ref = data1.slice(ridx, ridx + 50).match(dimregex);
          if (ref)
            parse_ws_xml_dim(s, ref[1]);
        }
        var svs = data1.match(svsregex);
        if (svs && svs[1])
          parse_ws_xml_sheetviews(svs[1], wb);
        var columns = [];
        if (opts.cellStyles) {
          var cols = data1.match(colregex);
          if (cols)
            parse_ws_xml_cols(columns, cols);
        }
        if (mtch)
          parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);
        var afilter = data2.match(afregex);
        if (afilter)
          s["!autofilter"] = parse_ws_xml_autofilter(afilter[0]);
        var merges = [];
        var _merge = data2.match(mergecregex);
        if (_merge)
          for (ridx = 0; ridx != _merge.length; ++ridx)
            merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf('"') + 1));
        var hlink = data2.match(hlinkregex);
        if (hlink)
          parse_ws_xml_hlinks(s, hlink, rels);
        var margins = data2.match(marginregex);
        if (margins)
          s["!margins"] = parse_ws_xml_margins(parsexmltag(margins[0]));
        if (!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r)
          s["!ref"] = encode_range(refguess);
        if (opts.sheetRows > 0 && s["!ref"]) {
          var tmpref = safe_decode_range(s["!ref"]);
          if (opts.sheetRows <= +tmpref.e.r) {
            tmpref.e.r = opts.sheetRows - 1;
            if (tmpref.e.r > refguess.e.r)
              tmpref.e.r = refguess.e.r;
            if (tmpref.e.r < tmpref.s.r)
              tmpref.s.r = tmpref.e.r;
            if (tmpref.e.c > refguess.e.c)
              tmpref.e.c = refguess.e.c;
            if (tmpref.e.c < tmpref.s.c)
              tmpref.s.c = tmpref.e.c;
            s["!fullref"] = s["!ref"];
            s["!ref"] = encode_range(tmpref);
          }
        }
        if (columns.length > 0)
          s["!cols"] = columns;
        if (merges.length > 0)
          s["!merges"] = merges;
        return s;
      }
      function write_ws_xml_merges(merges) {
        if (merges.length === 0)
          return "";
        var o = '<mergeCells count="' + merges.length + '">';
        for (var i = 0; i != merges.length; ++i)
          o += '<mergeCell ref="' + encode_range(merges[i]) + '"/>';
        return o + "</mergeCells>";
      }
      function parse_ws_xml_sheetpr(sheetPr, s, wb, idx) {
        var data = parsexmltag(sheetPr);
        if (!wb.Sheets[idx])
          wb.Sheets[idx] = {};
        if (data.codeName)
          wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
      }
      function parse_ws_xml_sheetpr2(sheetPr, body, s, wb, idx) {
        parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s, wb, idx);
      }
      function write_ws_xml_sheetpr(ws, wb, idx, opts, o) {
        var needed = false;
        var props = {}, payload = null;
        if (opts.bookType !== "xlsx" && wb.vbaraw) {
          var cname = wb.SheetNames[idx];
          try {
            if (wb.Workbook)
              cname = wb.Workbook.Sheets[idx].CodeName || cname;
          } catch (e) {
          }
          needed = true;
          props.codeName = utf8write(escapexml(cname));
        }
        if (ws && ws["!outline"]) {
          var outlineprops = { summaryBelow: 1, summaryRight: 1 };
          if (ws["!outline"].above)
            outlineprops.summaryBelow = 0;
          if (ws["!outline"].left)
            outlineprops.summaryRight = 0;
          payload = (payload || "") + writextag("outlinePr", null, outlineprops);
        }
        if (!needed && !payload)
          return;
        o[o.length] = writextag("sheetPr", payload, props);
      }
      var sheetprot_deffalse = ["objects", "scenarios", "selectLockedCells", "selectUnlockedCells"];
      var sheetprot_deftrue = [
        "formatColumns",
        "formatRows",
        "formatCells",
        "insertColumns",
        "insertRows",
        "insertHyperlinks",
        "deleteColumns",
        "deleteRows",
        "sort",
        "autoFilter",
        "pivotTables"
      ];
      function write_ws_xml_protection(sp) {
        var o = { sheet: 1 };
        sheetprot_deffalse.forEach(function(n) {
          if (sp[n] != null && sp[n])
            o[n] = "1";
        });
        sheetprot_deftrue.forEach(function(n) {
          if (sp[n] != null && !sp[n])
            o[n] = "0";
        });
        if (sp.password)
          o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();
        return writextag("sheetProtection", null, o);
      }
      function parse_ws_xml_hlinks(s, data, rels) {
        var dense = Array.isArray(s);
        for (var i = 0; i != data.length; ++i) {
          var val = parsexmltag(utf8read(data[i]), true);
          if (!val.ref)
            return;
          var rel = ((rels || {})["!id"] || [])[val.id];
          if (rel) {
            val.Target = rel.Target;
            if (val.location)
              val.Target += "#" + unescapexml(val.location);
          } else {
            val.Target = "#" + unescapexml(val.location);
            rel = { Target: val.Target, TargetMode: "Internal" };
          }
          val.Rel = rel;
          if (val.tooltip) {
            val.Tooltip = val.tooltip;
            delete val.tooltip;
          }
          var rng = safe_decode_range(val.ref);
          for (var R = rng.s.r; R <= rng.e.r; ++R)
            for (var C = rng.s.c; C <= rng.e.c; ++C) {
              var addr = encode_cell({ c: C, r: R });
              if (dense) {
                if (!s[R])
                  s[R] = [];
                if (!s[R][C])
                  s[R][C] = { t: "z", v: void 0 };
                s[R][C].l = val;
              } else {
                if (!s[addr])
                  s[addr] = { t: "z", v: void 0 };
                s[addr].l = val;
              }
            }
        }
      }
      function parse_ws_xml_margins(margin) {
        var o = {};
        ["left", "right", "top", "bottom", "header", "footer"].forEach(function(k) {
          if (margin[k])
            o[k] = parseFloat(margin[k]);
        });
        return o;
      }
      function write_ws_xml_margins(margin) {
        default_margins(margin);
        return writextag("pageMargins", null, margin);
      }
      function parse_ws_xml_cols(columns, cols) {
        var seencol = false;
        for (var coli = 0; coli != cols.length; ++coli) {
          var coll = parsexmltag(cols[coli], true);
          if (coll.hidden)
            coll.hidden = parsexmlbool(coll.hidden);
          var colm = parseInt(coll.min, 10) - 1, colM = parseInt(coll.max, 10) - 1;
          if (coll.outlineLevel)
            coll.level = +coll.outlineLevel || 0;
          delete coll.min;
          delete coll.max;
          coll.width = +coll.width;
          if (!seencol && coll.width) {
            seencol = true;
            find_mdw_colw(coll.width);
          }
          process_col(coll);
          while (colm <= colM)
            columns[colm++] = dup(coll);
        }
      }
      function write_ws_xml_cols(ws, cols) {
        var o = ["<cols>"], col;
        for (var i = 0; i != cols.length; ++i) {
          if (!(col = cols[i]))
            continue;
          o[o.length] = writextag("col", null, col_obj_w(i, col));
        }
        o[o.length] = "</cols>";
        return o.join("");
      }
      function parse_ws_xml_autofilter(data) {
        var o = { ref: (data.match(/ref="([^"]*)"/) || [])[1] };
        return o;
      }
      function write_ws_xml_autofilter(data, ws, wb, idx) {
        var ref = typeof data.ref == "string" ? data.ref : encode_range(data.ref);
        if (!wb.Workbook)
          wb.Workbook = { Sheets: [] };
        if (!wb.Workbook.Names)
          wb.Workbook.Names = [];
        var names = wb.Workbook.Names;
        var range = decode_range(ref);
        if (range.s.r == range.e.r) {
          range.e.r = decode_range(ws["!ref"]).e.r;
          ref = encode_range(range);
        }
        for (var i = 0; i < names.length; ++i) {
          var name = names[i];
          if (name.Name != "_xlnm._FilterDatabase")
            continue;
          if (name.Sheet != idx)
            continue;
          name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
          break;
        }
        if (i == names.length)
          names.push({ Name: "_xlnm._FilterDatabase", Sheet: idx, Ref: "'" + wb.SheetNames[idx] + "'!" + ref });
        return writextag("autoFilter", null, { ref });
      }
      var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;
      function parse_ws_xml_sheetviews(data, wb) {
        if (!wb.Views)
          wb.Views = [{}];
        (data.match(sviewregex) || []).forEach(function(r, i) {
          var tag = parsexmltag(r);
          if (!wb.Views[i])
            wb.Views[i] = {};
          if (+tag.zoomScale)
            wb.Views[i].zoom = +tag.zoomScale;
          if (parsexmlbool(tag.rightToLeft))
            wb.Views[i].RTL = true;
        });
      }
      function write_ws_xml_sheetviews(ws, opts, idx, wb) {
        var sview = { workbookViewId: "0" };
        if ((((wb || {}).Workbook || {}).Views || [])[0])
          sview.rightToLeft = wb.Workbook.Views[0].RTL ? "1" : "0";
        return writextag("sheetViews", writextag("sheetView", null, sview), {});
      }
      function write_ws_xml_cell(cell, ref, ws, opts) {
        if (cell.c)
          ws["!comments"].push([ref, cell.c]);
        if (cell.v === void 0 && typeof cell.f !== "string" || cell.t === "z" && !cell.f)
          return "";
        var vv = "";
        var oldt = cell.t, oldv = cell.v;
        if (cell.t !== "z")
          switch (cell.t) {
            case "b":
              vv = cell.v ? "1" : "0";
              break;
            case "n":
              vv = "" + cell.v;
              break;
            case "e":
              vv = BErr[cell.v];
              break;
            case "d":
              if (opts && opts.cellDates)
                vv = parseDate(cell.v, -1).toISOString();
              else {
                cell = dup(cell);
                cell.t = "n";
                vv = "" + (cell.v = datenum(parseDate(cell.v)));
              }
              if (typeof cell.z === "undefined")
                cell.z = table_fmt[14];
              break;
            default:
              vv = cell.v;
              break;
          }
        var v = writetag("v", escapexml(vv)), o = { r: ref };
        var os = get_cell_style(opts.cellXfs, cell, opts);
        if (os !== 0)
          o.s = os;
        switch (cell.t) {
          case "n":
            break;
          case "d":
            o.t = "d";
            break;
          case "b":
            o.t = "b";
            break;
          case "e":
            o.t = "e";
            break;
          case "z":
            break;
          default:
            if (cell.v == null) {
              delete cell.t;
              break;
            }
            if (cell.v.length > 32767)
              throw new Error("Text length must not exceed 32767 characters");
            if (opts && opts.bookSST) {
              v = writetag("v", "" + get_sst_id(opts.Strings, cell.v, opts.revStrings));
              o.t = "s";
              break;
            }
            o.t = "str";
            break;
        }
        if (cell.t != oldt) {
          cell.t = oldt;
          cell.v = oldv;
        }
        if (typeof cell.f == "string" && cell.f) {
          var ff = cell.F && cell.F.slice(0, ref.length) == ref ? { t: "array", ref: cell.F } : null;
          v = writextag("f", escapexml(cell.f), ff) + (cell.v != null ? v : "");
        }
        if (cell.l)
          ws["!links"].push([ref, cell.l]);
        if (cell.D)
          o.cm = 1;
        return writextag("c", v, o);
      }
      var parse_ws_xml_data = function() {
        var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
        var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
        var refregex = /ref=["']([^"']*)["']/;
        var match_v = matchtag("v"), match_f = matchtag("f");
        return function parse_ws_xml_data2(sdata, s, opts, guess, themes, styles) {
          var ri = 0, x = "", cells = [], cref = [], idx = 0, i = 0, cc = 0, d = "", p;
          var tag, tagr = 0, tagc = 0;
          var sstr, ftag;
          var fmtid = 0, fillid = 0;
          var do_format = Array.isArray(styles.CellXf), cf;
          var arrayf = [];
          var sharedf = [];
          var dense = Array.isArray(s);
          var rows = [], rowobj = {}, rowrite = false;
          var sheetStubs = !!opts.sheetStubs;
          for (var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
            x = marr[mt].trim();
            var xlen = x.length;
            if (xlen === 0)
              continue;
            var rstarti = 0;
            outa:
              for (ri = 0; ri < xlen; ++ri)
                switch (x[ri]) {
                  case ">":
                    if (x[ri - 1] != "/") {
                      ++ri;
                      break outa;
                    }
                    if (opts && opts.cellStyles) {
                      tag = parsexmltag(x.slice(rstarti, ri), true);
                      tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
                      tagc = -1;
                      if (opts.sheetRows && opts.sheetRows < tagr)
                        continue;
                      rowobj = {};
                      rowrite = false;
                      if (tag.ht) {
                        rowrite = true;
                        rowobj.hpt = parseFloat(tag.ht);
                        rowobj.hpx = pt2px(rowobj.hpt);
                      }
                      if (tag.hidden == "1") {
                        rowrite = true;
                        rowobj.hidden = true;
                      }
                      if (tag.outlineLevel != null) {
                        rowrite = true;
                        rowobj.level = +tag.outlineLevel;
                      }
                      if (rowrite)
                        rows[tagr - 1] = rowobj;
                    }
                    break;
                  case "<":
                    rstarti = ri;
                    break;
                }
            if (rstarti >= ri)
              break;
            tag = parsexmltag(x.slice(rstarti, ri), true);
            tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
            tagc = -1;
            if (opts.sheetRows && opts.sheetRows < tagr)
              continue;
            if (guess.s.r > tagr - 1)
              guess.s.r = tagr - 1;
            if (guess.e.r < tagr - 1)
              guess.e.r = tagr - 1;
            if (opts && opts.cellStyles) {
              rowobj = {};
              rowrite = false;
              if (tag.ht) {
                rowrite = true;
                rowobj.hpt = parseFloat(tag.ht);
                rowobj.hpx = pt2px(rowobj.hpt);
              }
              if (tag.hidden == "1") {
                rowrite = true;
                rowobj.hidden = true;
              }
              if (tag.outlineLevel != null) {
                rowrite = true;
                rowobj.level = +tag.outlineLevel;
              }
              if (rowrite)
                rows[tagr - 1] = rowobj;
            }
            cells = x.slice(ri).split(cellregex);
            for (var rslice = 0; rslice != cells.length; ++rslice)
              if (cells[rslice].trim().charAt(0) != "<")
                break;
            cells = cells.slice(rslice);
            for (ri = 0; ri != cells.length; ++ri) {
              x = cells[ri].trim();
              if (x.length === 0)
                continue;
              cref = x.match(rregex);
              idx = ri;
              i = 0;
              cc = 0;
              x = "<c " + (x.slice(0, 1) == "<" ? ">" : "") + x;
              if (cref != null && cref.length === 2) {
                idx = 0;
                d = cref[1];
                for (i = 0; i != d.length; ++i) {
                  if ((cc = d.charCodeAt(i) - 64) < 1 || cc > 26)
                    break;
                  idx = 26 * idx + cc;
                }
                --idx;
                tagc = idx;
              } else
                ++tagc;
              for (i = 0; i != x.length; ++i)
                if (x.charCodeAt(i) === 62)
                  break;
              ++i;
              tag = parsexmltag(x.slice(0, i), true);
              if (!tag.r)
                tag.r = encode_cell({ r: tagr - 1, c: tagc });
              d = x.slice(i);
              p = { t: "" };
              if ((cref = d.match(match_v)) != null && cref[1] !== "")
                p.v = unescapexml(cref[1]);
              if (opts.cellFormula) {
                if ((cref = d.match(match_f)) != null && cref[1] !== "") {
                  p.f = unescapexml(utf8read(cref[1])).replace(/\r\n/g, "\n");
                  if (!opts.xlfn)
                    p.f = _xlfn(p.f);
                  if (cref[0].indexOf('t="array"') > -1) {
                    p.F = (d.match(refregex) || [])[1];
                    if (p.F.indexOf(":") > -1)
                      arrayf.push([safe_decode_range(p.F), p.F]);
                  } else if (cref[0].indexOf('t="shared"') > -1) {
                    ftag = parsexmltag(cref[0]);
                    var ___f = unescapexml(utf8read(cref[1]));
                    if (!opts.xlfn)
                      ___f = _xlfn(___f);
                    sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
                  }
                } else if (cref = d.match(/<f[^>]*\/>/)) {
                  ftag = parsexmltag(cref[0]);
                  if (sharedf[ftag.si])
                    p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);
                }
                var _tag = decode_cell(tag.r);
                for (i = 0; i < arrayf.length; ++i)
                  if (_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r) {
                    if (_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c)
                      p.F = arrayf[i][1];
                  }
              }
              if (tag.t == null && p.v === void 0) {
                if (p.f || p.F) {
                  p.v = 0;
                  p.t = "n";
                } else if (!sheetStubs)
                  continue;
                else
                  p.t = "z";
              } else
                p.t = tag.t || "n";
              if (guess.s.c > tagc)
                guess.s.c = tagc;
              if (guess.e.c < tagc)
                guess.e.c = tagc;
              switch (p.t) {
                case "n":
                  if (p.v == "" || p.v == null) {
                    if (!sheetStubs)
                      continue;
                    p.t = "z";
                  } else
                    p.v = parseFloat(p.v);
                  break;
                case "s":
                  if (typeof p.v == "undefined") {
                    if (!sheetStubs)
                      continue;
                    p.t = "z";
                  } else {
                    sstr = strs[parseInt(p.v, 10)];
                    p.v = sstr.t;
                    p.r = sstr.r;
                    if (opts.cellHTML)
                      p.h = sstr.h;
                  }
                  break;
                case "str":
                  p.t = "s";
                  p.v = p.v != null ? utf8read(p.v) : "";
                  if (opts.cellHTML)
                    p.h = escapehtml(p.v);
                  break;
                case "inlineStr":
                  cref = d.match(isregex);
                  p.t = "s";
                  if (cref != null && (sstr = parse_si(cref[1]))) {
                    p.v = sstr.t;
                    if (opts.cellHTML)
                      p.h = sstr.h;
                  } else
                    p.v = "";
                  break;
                case "b":
                  p.v = parsexmlbool(p.v);
                  break;
                case "d":
                  if (opts.cellDates)
                    p.v = parseDate(p.v, 1);
                  else {
                    p.v = datenum(parseDate(p.v, 1));
                    p.t = "n";
                  }
                  break;
                case "e":
                  if (!opts || opts.cellText !== false)
                    p.w = p.v;
                  p.v = RBErr[p.v];
                  break;
              }
              fmtid = fillid = 0;
              cf = null;
              if (do_format && tag.s !== void 0) {
                cf = styles.CellXf[tag.s];
                if (cf != null) {
                  if (cf.numFmtId != null)
                    fmtid = cf.numFmtId;
                  if (opts.cellStyles) {
                    if (cf.fillId != null)
                      fillid = cf.fillId;
                  }
                }
              }
              safe_format(p, fmtid, fillid, opts, themes, styles);
              if (opts.cellDates && do_format && p.t == "n" && fmt_is_date(table_fmt[fmtid])) {
                p.t = "d";
                p.v = numdate(p.v);
              }
              if (tag.cm && opts.xlmeta) {
                var cm = (opts.xlmeta.Cell || [])[+tag.cm - 1];
                if (cm && cm.type == "XLDAPR")
                  p.D = true;
              }
              if (dense) {
                var _r = decode_cell(tag.r);
                if (!s[_r.r])
                  s[_r.r] = [];
                s[_r.r][_r.c] = p;
              } else
                s[tag.r] = p;
            }
          }
          if (rows.length > 0)
            s["!rows"] = rows;
        };
      }();
      function write_ws_xml_data(ws, opts, idx, wb) {
        var o = [], r = [], range = safe_decode_range(ws["!ref"]), cell = "", ref, rr = "", cols = [], R = 0, C = 0, rows = ws["!rows"];
        var dense = Array.isArray(ws);
        var params = { r: rr }, row, height = -1;
        for (C = range.s.c; C <= range.e.c; ++C)
          cols[C] = encode_col(C);
        for (R = range.s.r; R <= range.e.r; ++R) {
          r = [];
          rr = encode_row(R);
          for (C = range.s.c; C <= range.e.c; ++C) {
            ref = cols[C] + rr;
            var _cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (_cell === void 0)
              continue;
            if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null)
              r.push(cell);
          }
          if (r.length > 0 || rows && rows[R]) {
            params = { r: rr };
            if (rows && rows[R]) {
              row = rows[R];
              if (row.hidden)
                params.hidden = 1;
              height = -1;
              if (row.hpx)
                height = px2pt(row.hpx);
              else if (row.hpt)
                height = row.hpt;
              if (height > -1) {
                params.ht = height;
                params.customHeight = 1;
              }
              if (row.level) {
                params.outlineLevel = row.level;
              }
            }
            o[o.length] = writextag("row", r.join(""), params);
          }
        }
        if (rows)
          for (; R < rows.length; ++R) {
            if (rows && rows[R]) {
              params = { r: R + 1 };
              row = rows[R];
              if (row.hidden)
                params.hidden = 1;
              height = -1;
              if (row.hpx)
                height = px2pt(row.hpx);
              else if (row.hpt)
                height = row.hpt;
              if (height > -1) {
                params.ht = height;
                params.customHeight = 1;
              }
              if (row.level) {
                params.outlineLevel = row.level;
              }
              o[o.length] = writextag("row", "", params);
            }
          }
        return o.join("");
      }
      function write_ws_xml(idx, opts, wb, rels) {
        var o = [XML_HEADER, writextag("worksheet", null, {
          "xmlns": XMLNS_main[0],
          "xmlns:r": XMLNS.r
        })];
        var s = wb.SheetNames[idx], sidx = 0, rdata = "";
        var ws = wb.Sheets[s];
        if (ws == null)
          ws = {};
        var ref = ws["!ref"] || "A1";
        var range = safe_decode_range(ref);
        if (range.e.c > 16383 || range.e.r > 1048575) {
          if (opts.WTF)
            throw new Error("Range " + ref + " exceeds format limit A1:XFD1048576");
          range.e.c = Math.min(range.e.c, 16383);
          range.e.r = Math.min(range.e.c, 1048575);
          ref = encode_range(range);
        }
        if (!rels)
          rels = {};
        ws["!comments"] = [];
        var _drawing = [];
        write_ws_xml_sheetpr(ws, wb, idx, opts, o);
        o[o.length] = writextag("dimension", null, { "ref": ref });
        o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);
        if (opts.sheetFormat)
          o[o.length] = writextag("sheetFormatPr", null, {
            defaultRowHeight: opts.sheetFormat.defaultRowHeight || "16",
            baseColWidth: opts.sheetFormat.baseColWidth || "10",
            outlineLevelRow: opts.sheetFormat.outlineLevelRow || "7"
          });
        if (ws["!cols"] != null && ws["!cols"].length > 0)
          o[o.length] = write_ws_xml_cols(ws, ws["!cols"]);
        o[sidx = o.length] = "<sheetData/>";
        ws["!links"] = [];
        if (ws["!ref"] != null) {
          rdata = write_ws_xml_data(ws, opts, idx, wb, rels);
          if (rdata.length > 0)
            o[o.length] = rdata;
        }
        if (o.length > sidx + 1) {
          o[o.length] = "</sheetData>";
          o[sidx] = o[sidx].replace("/>", ">");
        }
        if (ws["!protect"])
          o[o.length] = write_ws_xml_protection(ws["!protect"]);
        if (ws["!autofilter"] != null)
          o[o.length] = write_ws_xml_autofilter(ws["!autofilter"], ws, wb, idx);
        if (ws["!merges"] != null && ws["!merges"].length > 0)
          o[o.length] = write_ws_xml_merges(ws["!merges"]);
        var relc = -1, rel, rId = -1;
        if (ws["!links"].length > 0) {
          o[o.length] = "<hyperlinks>";
          ws["!links"].forEach(function(l) {
            if (!l[1].Target)
              return;
            rel = { "ref": l[0] };
            if (l[1].Target.charAt(0) != "#") {
              rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, ""), RELS.HLINK);
              rel["r:id"] = "rId" + rId;
            }
            if ((relc = l[1].Target.indexOf("#")) > -1)
              rel.location = escapexml(l[1].Target.slice(relc + 1));
            if (l[1].Tooltip)
              rel.tooltip = escapexml(l[1].Tooltip);
            o[o.length] = writextag("hyperlink", null, rel);
          });
          o[o.length] = "</hyperlinks>";
        }
        delete ws["!links"];
        if (ws["!margins"] != null)
          o[o.length] = write_ws_xml_margins(ws["!margins"]);
        if (!opts || opts.ignoreEC || opts.ignoreEC == void 0)
          o[o.length] = writetag("ignoredErrors", writextag("ignoredError", null, { numberStoredAsText: 1, sqref: ref }));
        if (_drawing.length > 0) {
          rId = add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
          o[o.length] = writextag("drawing", null, { "r:id": "rId" + rId });
          ws["!drawing"] = _drawing;
        }
        if (ws["!comments"].length > 0) {
          rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
          o[o.length] = writextag("legacyDrawing", null, { "r:id": "rId" + rId });
          ws["!legacy"] = rId;
        }
        if (o.length > 1) {
          o[o.length] = "</worksheet>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_BrtRowHdr(data, length) {
        var z = {};
        var tgt = data.l + length;
        z.r = data.read_shift(4);
        data.l += 4;
        var miyRw = data.read_shift(2);
        data.l += 1;
        var flags = data.read_shift(1);
        data.l = tgt;
        if (flags & 7)
          z.level = flags & 7;
        if (flags & 16)
          z.hidden = true;
        if (flags & 32)
          z.hpt = miyRw / 20;
        return z;
      }
      function write_BrtRowHdr(R, range, ws) {
        var o = new_buf(17 + 8 * 16);
        var row = (ws["!rows"] || [])[R] || {};
        o.write_shift(4, R);
        o.write_shift(4, 0);
        var miyRw = 320;
        if (row.hpx)
          miyRw = px2pt(row.hpx) * 20;
        else if (row.hpt)
          miyRw = row.hpt * 20;
        o.write_shift(2, miyRw);
        o.write_shift(1, 0);
        var flags = 0;
        if (row.level)
          flags |= row.level;
        if (row.hidden)
          flags |= 16;
        if (row.hpx || row.hpt)
          flags |= 32;
        o.write_shift(1, flags);
        o.write_shift(1, 0);
        var ncolspan = 0, lcs = o.l;
        o.l += 4;
        var caddr = { r: R, c: 0 };
        for (var i = 0; i < 16; ++i) {
          if (range.s.c > i + 1 << 10 || range.e.c < i << 10)
            continue;
          var first = -1, last = -1;
          for (var j = i << 10; j < i + 1 << 10; ++j) {
            caddr.c = j;
            var cell = Array.isArray(ws) ? (ws[caddr.r] || [])[caddr.c] : ws[encode_cell(caddr)];
            if (cell) {
              if (first < 0)
                first = j;
              last = j;
            }
          }
          if (first < 0)
            continue;
          ++ncolspan;
          o.write_shift(4, first);
          o.write_shift(4, last);
        }
        var l = o.l;
        o.l = lcs;
        o.write_shift(4, ncolspan);
        o.l = l;
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function write_row_header(ba, ws, range, R) {
        var o = write_BrtRowHdr(R, range, ws);
        if (o.length > 17 || (ws["!rows"] || [])[R])
          write_record(ba, 0, o);
      }
      var parse_BrtWsDim = parse_UncheckedRfX;
      var write_BrtWsDim = write_UncheckedRfX;
      function parse_BrtWsFmtInfo() {
      }
      function parse_BrtWsProp(data, length) {
        var z = {};
        var f = data[data.l];
        ++data.l;
        z.above = !(f & 64);
        z.left = !(f & 128);
        data.l += 18;
        z.name = parse_XLSBCodeName(data, length - 19);
        return z;
      }
      function write_BrtWsProp(str, outl, o) {
        if (o == null)
          o = new_buf(84 + 4 * str.length);
        var f = 192;
        if (outl) {
          if (outl.above)
            f &= ~64;
          if (outl.left)
            f &= ~128;
        }
        o.write_shift(1, f);
        for (var i = 1; i < 3; ++i)
          o.write_shift(1, 0);
        write_BrtColor({ auto: 1 }, o);
        o.write_shift(-4, -1);
        o.write_shift(-4, -1);
        write_XLSBCodeName(str, o);
        return o.slice(0, o.l);
      }
      function parse_BrtCellBlank(data) {
        var cell = parse_XLSBCell(data);
        return [cell];
      }
      function write_BrtCellBlank(cell, ncell, o) {
        if (o == null)
          o = new_buf(8);
        return write_XLSBCell(ncell, o);
      }
      function parse_BrtShortBlank(data) {
        var cell = parse_XLSBShortCell(data);
        return [cell];
      }
      function write_BrtShortBlank(cell, ncell, o) {
        if (o == null)
          o = new_buf(4);
        return write_XLSBShortCell(ncell, o);
      }
      function parse_BrtCellBool(data) {
        var cell = parse_XLSBCell(data);
        var fBool = data.read_shift(1);
        return [cell, fBool, "b"];
      }
      function write_BrtCellBool(cell, ncell, o) {
        if (o == null)
          o = new_buf(9);
        write_XLSBCell(ncell, o);
        o.write_shift(1, cell.v ? 1 : 0);
        return o;
      }
      function parse_BrtShortBool(data) {
        var cell = parse_XLSBShortCell(data);
        var fBool = data.read_shift(1);
        return [cell, fBool, "b"];
      }
      function write_BrtShortBool(cell, ncell, o) {
        if (o == null)
          o = new_buf(5);
        write_XLSBShortCell(ncell, o);
        o.write_shift(1, cell.v ? 1 : 0);
        return o;
      }
      function parse_BrtCellError(data) {
        var cell = parse_XLSBCell(data);
        var bError = data.read_shift(1);
        return [cell, bError, "e"];
      }
      function write_BrtCellError(cell, ncell, o) {
        if (o == null)
          o = new_buf(9);
        write_XLSBCell(ncell, o);
        o.write_shift(1, cell.v);
        return o;
      }
      function parse_BrtShortError(data) {
        var cell = parse_XLSBShortCell(data);
        var bError = data.read_shift(1);
        return [cell, bError, "e"];
      }
      function write_BrtShortError(cell, ncell, o) {
        if (o == null)
          o = new_buf(8);
        write_XLSBShortCell(ncell, o);
        o.write_shift(1, cell.v);
        o.write_shift(2, 0);
        o.write_shift(1, 0);
        return o;
      }
      function parse_BrtCellIsst(data) {
        var cell = parse_XLSBCell(data);
        var isst = data.read_shift(4);
        return [cell, isst, "s"];
      }
      function write_BrtCellIsst(cell, ncell, o) {
        if (o == null)
          o = new_buf(12);
        write_XLSBCell(ncell, o);
        o.write_shift(4, ncell.v);
        return o;
      }
      function parse_BrtShortIsst(data) {
        var cell = parse_XLSBShortCell(data);
        var isst = data.read_shift(4);
        return [cell, isst, "s"];
      }
      function write_BrtShortIsst(cell, ncell, o) {
        if (o == null)
          o = new_buf(8);
        write_XLSBShortCell(ncell, o);
        o.write_shift(4, ncell.v);
        return o;
      }
      function parse_BrtCellReal(data) {
        var cell = parse_XLSBCell(data);
        var value = parse_Xnum(data);
        return [cell, value, "n"];
      }
      function write_BrtCellReal(cell, ncell, o) {
        if (o == null)
          o = new_buf(16);
        write_XLSBCell(ncell, o);
        write_Xnum(cell.v, o);
        return o;
      }
      function parse_BrtShortReal(data) {
        var cell = parse_XLSBShortCell(data);
        var value = parse_Xnum(data);
        return [cell, value, "n"];
      }
      function write_BrtShortReal(cell, ncell, o) {
        if (o == null)
          o = new_buf(12);
        write_XLSBShortCell(ncell, o);
        write_Xnum(cell.v, o);
        return o;
      }
      function parse_BrtCellRk(data) {
        var cell = parse_XLSBCell(data);
        var value = parse_RkNumber(data);
        return [cell, value, "n"];
      }
      function write_BrtCellRk(cell, ncell, o) {
        if (o == null)
          o = new_buf(12);
        write_XLSBCell(ncell, o);
        write_RkNumber(cell.v, o);
        return o;
      }
      function parse_BrtShortRk(data) {
        var cell = parse_XLSBShortCell(data);
        var value = parse_RkNumber(data);
        return [cell, value, "n"];
      }
      function write_BrtShortRk(cell, ncell, o) {
        if (o == null)
          o = new_buf(8);
        write_XLSBShortCell(ncell, o);
        write_RkNumber(cell.v, o);
        return o;
      }
      function parse_BrtCellRString(data) {
        var cell = parse_XLSBCell(data);
        var value = parse_RichStr(data);
        return [cell, value, "is"];
      }
      function parse_BrtCellSt(data) {
        var cell = parse_XLSBCell(data);
        var value = parse_XLWideString(data);
        return [cell, value, "str"];
      }
      function write_BrtCellSt(cell, ncell, o) {
        if (o == null)
          o = new_buf(12 + 4 * cell.v.length);
        write_XLSBCell(ncell, o);
        write_XLWideString(cell.v, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function parse_BrtShortSt(data) {
        var cell = parse_XLSBShortCell(data);
        var value = parse_XLWideString(data);
        return [cell, value, "str"];
      }
      function write_BrtShortSt(cell, ncell, o) {
        if (o == null)
          o = new_buf(8 + 4 * cell.v.length);
        write_XLSBShortCell(ncell, o);
        write_XLWideString(cell.v, o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function parse_BrtFmlaBool(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = data.read_shift(1);
        var o = [cell, value, "b"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else
          data.l = end;
        return o;
      }
      function parse_BrtFmlaError(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = data.read_shift(1);
        var o = [cell, value, "e"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else
          data.l = end;
        return o;
      }
      function parse_BrtFmlaNum(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = parse_Xnum(data);
        var o = [cell, value, "n"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else
          data.l = end;
        return o;
      }
      function parse_BrtFmlaString(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = parse_XLWideString(data);
        var o = [cell, value, "str"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else
          data.l = end;
        return o;
      }
      var parse_BrtMergeCell = parse_UncheckedRfX;
      var write_BrtMergeCell = write_UncheckedRfX;
      function write_BrtBeginMergeCells(cnt, o) {
        if (o == null)
          o = new_buf(4);
        o.write_shift(4, cnt);
        return o;
      }
      function parse_BrtHLink(data, length) {
        var end = data.l + length;
        var rfx = parse_UncheckedRfX(data, 16);
        var relId = parse_XLNullableWideString(data);
        var loc = parse_XLWideString(data);
        var tooltip = parse_XLWideString(data);
        var display = parse_XLWideString(data);
        data.l = end;
        var o = { rfx, relId, loc, display };
        if (tooltip)
          o.Tooltip = tooltip;
        return o;
      }
      function write_BrtHLink(l, rId) {
        var o = new_buf(50 + 4 * (l[1].Target.length + (l[1].Tooltip || "").length));
        write_UncheckedRfX({ s: decode_cell(l[0]), e: decode_cell(l[0]) }, o);
        write_RelID("rId" + rId, o);
        var locidx = l[1].Target.indexOf("#");
        var loc = locidx == -1 ? "" : l[1].Target.slice(locidx + 1);
        write_XLWideString(loc || "", o);
        write_XLWideString(l[1].Tooltip || "", o);
        write_XLWideString("", o);
        return o.slice(0, o.l);
      }
      function parse_BrtPane() {
      }
      function parse_BrtArrFmla(data, length, opts) {
        var end = data.l + length;
        var rfx = parse_RfX(data, 16);
        var fAlwaysCalc = data.read_shift(1);
        var o = [rfx];
        o[2] = fAlwaysCalc;
        if (opts.cellFormula) {
          var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
          o[1] = formula;
        } else
          data.l = end;
        return o;
      }
      function parse_BrtShrFmla(data, length, opts) {
        var end = data.l + length;
        var rfx = parse_UncheckedRfX(data, 16);
        var o = [rfx];
        if (opts.cellFormula) {
          var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
          o[1] = formula;
          data.l = end;
        } else
          data.l = end;
        return o;
      }
      function write_BrtColInfo(C, col, o) {
        if (o == null)
          o = new_buf(18);
        var p = col_obj_w(C, col);
        o.write_shift(-4, C);
        o.write_shift(-4, C);
        o.write_shift(4, (p.width || 10) * 256);
        o.write_shift(4, 0);
        var flags = 0;
        if (col.hidden)
          flags |= 1;
        if (typeof p.width == "number")
          flags |= 2;
        if (col.level)
          flags |= col.level << 8;
        o.write_shift(2, flags);
        return o;
      }
      var BrtMarginKeys = ["left", "right", "top", "bottom", "header", "footer"];
      function parse_BrtMargins(data) {
        var margins = {};
        BrtMarginKeys.forEach(function(k) {
          margins[k] = parse_Xnum(data, 8);
        });
        return margins;
      }
      function write_BrtMargins(margins, o) {
        if (o == null)
          o = new_buf(6 * 8);
        default_margins(margins);
        BrtMarginKeys.forEach(function(k) {
          write_Xnum(margins[k], o);
        });
        return o;
      }
      function parse_BrtBeginWsView(data) {
        var f = data.read_shift(2);
        data.l += 28;
        return { RTL: f & 32 };
      }
      function write_BrtBeginWsView(ws, Workbook, o) {
        if (o == null)
          o = new_buf(30);
        var f = 924;
        if ((((Workbook || {}).Views || [])[0] || {}).RTL)
          f |= 32;
        o.write_shift(2, f);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(1, 0);
        o.write_shift(1, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 100);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(2, 0);
        o.write_shift(4, 0);
        return o;
      }
      function write_BrtCellIgnoreEC(ref) {
        var o = new_buf(24);
        o.write_shift(4, 4);
        o.write_shift(4, 1);
        write_UncheckedRfX(ref, o);
        return o;
      }
      function write_BrtSheetProtection(sp, o) {
        if (o == null)
          o = new_buf(16 * 4 + 2);
        o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);
        o.write_shift(4, 1);
        [
          ["objects", false],
          ["scenarios", false],
          ["formatCells", true],
          ["formatColumns", true],
          ["formatRows", true],
          ["insertColumns", true],
          ["insertRows", true],
          ["insertHyperlinks", true],
          ["deleteColumns", true],
          ["deleteRows", true],
          ["selectLockedCells", false],
          ["sort", true],
          ["autoFilter", true],
          ["pivotTables", true],
          ["selectUnlockedCells", false]
        ].forEach(function(n) {
          if (n[1])
            o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);
          else
            o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);
        });
        return o;
      }
      function parse_BrtDVal() {
      }
      function parse_BrtDVal14() {
      }
      function parse_ws_bin(data, _opts, idx, rels, wb, themes, styles) {
        if (!data)
          return data;
        var opts = _opts || {};
        if (!rels)
          rels = { "!id": {} };
        if (DENSE != null && opts.dense == null)
          opts.dense = DENSE;
        var s = opts.dense ? [] : {};
        var ref;
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        var state = [];
        var pass = false, end = false;
        var row, p, cf, R, C, addr, sstr, rr, cell;
        var merges = [];
        opts.biff = 12;
        opts["!row"] = 0;
        var ai = 0, af = false;
        var arrayf = [];
        var sharedf = {};
        var supbooks = opts.supbooks || wb.supbooks || [[]];
        supbooks.sharedf = sharedf;
        supbooks.arrayf = arrayf;
        supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) {
          return x.name;
        });
        if (!opts.supbooks) {
          opts.supbooks = supbooks;
          if (wb.Names)
            for (var i = 0; i < wb.Names.length; ++i)
              supbooks[0][i + 1] = wb.Names[i];
        }
        var colinfo = [], rowinfo = [];
        var seencol = false;
        XLSBRecordEnum[16] = { n: "BrtShortReal", f: parse_BrtShortReal };
        var cm, vm;
        recordhopper(data, function ws_parse(val, RR, RT) {
          if (end)
            return;
          switch (RT) {
            case 148:
              ref = val;
              break;
            case 0:
              row = val;
              if (opts.sheetRows && opts.sheetRows <= row.r)
                end = true;
              rr = encode_row(R = row.r);
              opts["!row"] = row.r;
              if (val.hidden || val.hpt || val.level != null) {
                if (val.hpt)
                  val.hpx = pt2px(val.hpt);
                rowinfo[val.r] = val;
              }
              break;
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 62:
              p = { t: val[2] };
              switch (val[2]) {
                case "n":
                  p.v = val[1];
                  break;
                case "s":
                  sstr = strs[val[1]];
                  p.v = sstr.t;
                  p.r = sstr.r;
                  break;
                case "b":
                  p.v = val[1] ? true : false;
                  break;
                case "e":
                  p.v = val[1];
                  if (opts.cellText !== false)
                    p.w = BErr[p.v];
                  break;
                case "str":
                  p.t = "s";
                  p.v = val[1];
                  break;
                case "is":
                  p.t = "s";
                  p.v = val[1].t;
                  break;
              }
              if (cf = styles.CellXf[val[0].iStyleRef])
                safe_format(p, cf.numFmtId, null, opts, themes, styles);
              C = val[0].c == -1 ? C + 1 : val[0].c;
              if (opts.dense) {
                if (!s[R])
                  s[R] = [];
                s[R][C] = p;
              } else
                s[encode_col(C) + rr] = p;
              if (opts.cellFormula) {
                af = false;
                for (ai = 0; ai < arrayf.length; ++ai) {
                  var aii = arrayf[ai];
                  if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) {
                    if (C >= aii[0].s.c && C <= aii[0].e.c) {
                      p.F = encode_range(aii[0]);
                      af = true;
                    }
                  }
                }
                if (!af && val.length > 3)
                  p.f = val[3];
              }
              if (refguess.s.r > row.r)
                refguess.s.r = row.r;
              if (refguess.s.c > C)
                refguess.s.c = C;
              if (refguess.e.r < row.r)
                refguess.e.r = row.r;
              if (refguess.e.c < C)
                refguess.e.c = C;
              if (opts.cellDates && cf && p.t == "n" && fmt_is_date(table_fmt[cf.numFmtId])) {
                var _d = SSF_parse_date_code(p.v);
                if (_d) {
                  p.t = "d";
                  p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
                }
              }
              if (cm) {
                if (cm.type == "XLDAPR")
                  p.D = true;
                cm = void 0;
              }
              if (vm)
                vm = void 0;
              break;
            case 1:
            case 12:
              if (!opts.sheetStubs || pass)
                break;
              p = { t: "z", v: void 0 };
              C = val[0].c == -1 ? C + 1 : val[0].c;
              if (opts.dense) {
                if (!s[R])
                  s[R] = [];
                s[R][C] = p;
              } else
                s[encode_col(C) + rr] = p;
              if (refguess.s.r > row.r)
                refguess.s.r = row.r;
              if (refguess.s.c > C)
                refguess.s.c = C;
              if (refguess.e.r < row.r)
                refguess.e.r = row.r;
              if (refguess.e.c < C)
                refguess.e.c = C;
              if (cm) {
                if (cm.type == "XLDAPR")
                  p.D = true;
                cm = void 0;
              }
              if (vm)
                vm = void 0;
              break;
            case 176:
              merges.push(val);
              break;
            case 49:
              {
                cm = ((opts.xlmeta || {}).Cell || [])[val - 1];
              }
              break;
            case 494:
              var rel = rels["!id"][val.relId];
              if (rel) {
                val.Target = rel.Target;
                if (val.loc)
                  val.Target += "#" + val.loc;
                val.Rel = rel;
              } else if (val.relId == "") {
                val.Target = "#" + val.loc;
              }
              for (R = val.rfx.s.r; R <= val.rfx.e.r; ++R)
                for (C = val.rfx.s.c; C <= val.rfx.e.c; ++C) {
                  if (opts.dense) {
                    if (!s[R])
                      s[R] = [];
                    if (!s[R][C])
                      s[R][C] = { t: "z", v: void 0 };
                    s[R][C].l = val;
                  } else {
                    addr = encode_cell({ c: C, r: R });
                    if (!s[addr])
                      s[addr] = { t: "z", v: void 0 };
                    s[addr].l = val;
                  }
                }
              break;
            case 426:
              if (!opts.cellFormula)
                break;
              arrayf.push(val);
              cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
              cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C }, supbooks, opts);
              cell.F = encode_range(val[0]);
              break;
            case 427:
              if (!opts.cellFormula)
                break;
              sharedf[encode_cell(val[0].s)] = val[1];
              cell = opts.dense ? s[R][C] : s[encode_col(C) + rr];
              cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C }, supbooks, opts);
              break;
            case 60:
              if (!opts.cellStyles)
                break;
              while (val.e >= val.s) {
                colinfo[val.e--] = { width: val.w / 256, hidden: !!(val.flags & 1), level: val.level };
                if (!seencol) {
                  seencol = true;
                  find_mdw_colw(val.w / 256);
                }
                process_col(colinfo[val.e + 1]);
              }
              break;
            case 161:
              s["!autofilter"] = { ref: encode_range(val) };
              break;
            case 476:
              s["!margins"] = val;
              break;
            case 147:
              if (!wb.Sheets[idx])
                wb.Sheets[idx] = {};
              if (val.name)
                wb.Sheets[idx].CodeName = val.name;
              if (val.above || val.left)
                s["!outline"] = { above: val.above, left: val.left };
              break;
            case 137:
              if (!wb.Views)
                wb.Views = [{}];
              if (!wb.Views[0])
                wb.Views[0] = {};
              if (val.RTL)
                wb.Views[0].RTL = true;
              break;
            case 485:
              break;
            case 64:
            case 1053:
              break;
            case 151:
              break;
            case 152:
            case 175:
            case 644:
            case 625:
            case 562:
            case 396:
            case 1112:
            case 1146:
            case 471:
            case 1050:
            case 649:
            case 1105:
            case 589:
            case 607:
            case 564:
            case 1055:
            case 168:
            case 174:
            case 1180:
            case 499:
            case 507:
            case 550:
            case 171:
            case 167:
            case 1177:
            case 169:
            case 1181:
            case 551:
            case 552:
            case 661:
            case 639:
            case 478:
            case 537:
            case 477:
            case 536:
            case 1103:
            case 680:
            case 1104:
            case 1024:
            case 663:
            case 535:
            case 678:
            case 504:
            case 1043:
            case 428:
            case 170:
            case 3072:
            case 50:
            case 2070:
            case 1045:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              state.push(RT);
              pass = true;
              break;
            case 38:
              state.pop();
              pass = false;
              break;
            default:
              if (RR.T) {
              } else if (!pass || opts.WTF)
                throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        }, opts);
        delete opts.supbooks;
        delete opts["!row"];
        if (!s["!ref"] && (refguess.s.r < 2e6 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0)))
          s["!ref"] = encode_range(ref || refguess);
        if (opts.sheetRows && s["!ref"]) {
          var tmpref = safe_decode_range(s["!ref"]);
          if (opts.sheetRows <= +tmpref.e.r) {
            tmpref.e.r = opts.sheetRows - 1;
            if (tmpref.e.r > refguess.e.r)
              tmpref.e.r = refguess.e.r;
            if (tmpref.e.r < tmpref.s.r)
              tmpref.s.r = tmpref.e.r;
            if (tmpref.e.c > refguess.e.c)
              tmpref.e.c = refguess.e.c;
            if (tmpref.e.c < tmpref.s.c)
              tmpref.s.c = tmpref.e.c;
            s["!fullref"] = s["!ref"];
            s["!ref"] = encode_range(tmpref);
          }
        }
        if (merges.length > 0)
          s["!merges"] = merges;
        if (colinfo.length > 0)
          s["!cols"] = colinfo;
        if (rowinfo.length > 0)
          s["!rows"] = rowinfo;
        return s;
      }
      function write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen) {
        if (cell.v === void 0)
          return false;
        var vv = "";
        switch (cell.t) {
          case "b":
            vv = cell.v ? "1" : "0";
            break;
          case "d":
            cell = dup(cell);
            cell.z = cell.z || table_fmt[14];
            cell.v = datenum(parseDate(cell.v));
            cell.t = "n";
            break;
          case "n":
          case "e":
            vv = "" + cell.v;
            break;
          default:
            vv = cell.v;
            break;
        }
        var o = { r: R, c: C };
        o.s = get_cell_style(opts.cellXfs, cell, opts);
        if (cell.l)
          ws["!links"].push([encode_cell(o), cell.l]);
        if (cell.c)
          ws["!comments"].push([encode_cell(o), cell.c]);
        switch (cell.t) {
          case "s":
          case "str":
            if (opts.bookSST) {
              vv = get_sst_id(opts.Strings, cell.v, opts.revStrings);
              o.t = "s";
              o.v = vv;
              if (last_seen)
                write_record(ba, 18, write_BrtShortIsst(cell, o));
              else
                write_record(ba, 7, write_BrtCellIsst(cell, o));
            } else {
              o.t = "str";
              if (last_seen)
                write_record(ba, 17, write_BrtShortSt(cell, o));
              else
                write_record(ba, 6, write_BrtCellSt(cell, o));
            }
            return true;
          case "n":
            if (cell.v == (cell.v | 0) && cell.v > -1e3 && cell.v < 1e3) {
              if (last_seen)
                write_record(ba, 13, write_BrtShortRk(cell, o));
              else
                write_record(ba, 2, write_BrtCellRk(cell, o));
            } else {
              if (last_seen)
                write_record(ba, 16, write_BrtShortReal(cell, o));
              else
                write_record(ba, 5, write_BrtCellReal(cell, o));
            }
            return true;
          case "b":
            o.t = "b";
            if (last_seen)
              write_record(ba, 15, write_BrtShortBool(cell, o));
            else
              write_record(ba, 4, write_BrtCellBool(cell, o));
            return true;
          case "e":
            o.t = "e";
            if (last_seen)
              write_record(ba, 14, write_BrtShortError(cell, o));
            else
              write_record(ba, 3, write_BrtCellError(cell, o));
            return true;
        }
        if (last_seen)
          write_record(ba, 12, write_BrtShortBlank(cell, o));
        else
          write_record(ba, 1, write_BrtCellBlank(cell, o));
        return true;
      }
      function write_CELLTABLE(ba, ws, idx, opts) {
        var range = safe_decode_range(ws["!ref"] || "A1"), ref, rr = "", cols = [];
        write_record(ba, 145);
        var dense = Array.isArray(ws);
        var cap = range.e.r;
        if (ws["!rows"])
          cap = Math.max(range.e.r, ws["!rows"].length - 1);
        for (var R = range.s.r; R <= cap; ++R) {
          rr = encode_row(R);
          write_row_header(ba, ws, range, R);
          var last_seen = false;
          if (R <= range.e.r)
            for (var C = range.s.c; C <= range.e.c; ++C) {
              if (R === range.s.r)
                cols[C] = encode_col(C);
              ref = cols[C] + rr;
              var cell = dense ? (ws[R] || [])[C] : ws[ref];
              if (!cell) {
                last_seen = false;
                continue;
              }
              last_seen = write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen);
            }
        }
        write_record(ba, 146);
      }
      function write_MERGECELLS(ba, ws) {
        if (!ws || !ws["!merges"])
          return;
        write_record(ba, 177, write_BrtBeginMergeCells(ws["!merges"].length));
        ws["!merges"].forEach(function(m) {
          write_record(ba, 176, write_BrtMergeCell(m));
        });
        write_record(ba, 178);
      }
      function write_COLINFOS(ba, ws) {
        if (!ws || !ws["!cols"])
          return;
        write_record(ba, 390);
        ws["!cols"].forEach(function(m, i) {
          if (m)
            write_record(ba, 60, write_BrtColInfo(i, m));
        });
        write_record(ba, 391);
      }
      function write_IGNOREECS(ba, ws) {
        if (!ws || !ws["!ref"])
          return;
        write_record(ba, 648);
        write_record(ba, 649, write_BrtCellIgnoreEC(safe_decode_range(ws["!ref"])));
        write_record(ba, 650);
      }
      function write_HLINKS(ba, ws, rels) {
        ws["!links"].forEach(function(l) {
          if (!l[1].Target)
            return;
          var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, ""), RELS.HLINK);
          write_record(ba, 494, write_BrtHLink(l, rId));
        });
        delete ws["!links"];
      }
      function write_LEGACYDRAWING(ba, ws, idx, rels) {
        if (ws["!comments"].length > 0) {
          var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
          write_record(ba, 551, write_RelID("rId" + rId));
          ws["!legacy"] = rId;
        }
      }
      function write_AUTOFILTER(ba, ws, wb, idx) {
        if (!ws["!autofilter"])
          return;
        var data = ws["!autofilter"];
        var ref = typeof data.ref === "string" ? data.ref : encode_range(data.ref);
        if (!wb.Workbook)
          wb.Workbook = { Sheets: [] };
        if (!wb.Workbook.Names)
          wb.Workbook.Names = [];
        var names = wb.Workbook.Names;
        var range = decode_range(ref);
        if (range.s.r == range.e.r) {
          range.e.r = decode_range(ws["!ref"]).e.r;
          ref = encode_range(range);
        }
        for (var i = 0; i < names.length; ++i) {
          var name = names[i];
          if (name.Name != "_xlnm._FilterDatabase")
            continue;
          if (name.Sheet != idx)
            continue;
          name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
          break;
        }
        if (i == names.length)
          names.push({ Name: "_xlnm._FilterDatabase", Sheet: idx, Ref: "'" + wb.SheetNames[idx] + "'!" + ref });
        write_record(ba, 161, write_UncheckedRfX(safe_decode_range(ref)));
        write_record(ba, 162);
      }
      function write_WSVIEWS2(ba, ws, Workbook) {
        write_record(ba, 133);
        {
          write_record(ba, 137, write_BrtBeginWsView(ws, Workbook));
          write_record(ba, 138);
        }
        write_record(ba, 134);
      }
      function write_WSFMTINFO() {
      }
      function write_SHEETPROTECT(ba, ws) {
        if (!ws["!protect"])
          return;
        write_record(ba, 535, write_BrtSheetProtection(ws["!protect"]));
      }
      function write_ws_bin(idx, opts, wb, rels) {
        var ba = buf_array();
        var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
        var c = s;
        try {
          if (wb && wb.Workbook)
            c = wb.Workbook.Sheets[idx].CodeName || c;
        } catch (e) {
        }
        var r = safe_decode_range(ws["!ref"] || "A1");
        if (r.e.c > 16383 || r.e.r > 1048575) {
          if (opts.WTF)
            throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:XFD1048576");
          r.e.c = Math.min(r.e.c, 16383);
          r.e.r = Math.min(r.e.c, 1048575);
        }
        ws["!links"] = [];
        ws["!comments"] = [];
        write_record(ba, 129);
        if (wb.vbaraw || ws["!outline"])
          write_record(ba, 147, write_BrtWsProp(c, ws["!outline"]));
        write_record(ba, 148, write_BrtWsDim(r));
        write_WSVIEWS2(ba, ws, wb.Workbook);
        write_WSFMTINFO(ba, ws);
        write_COLINFOS(ba, ws, idx, opts, wb);
        write_CELLTABLE(ba, ws, idx, opts, wb);
        write_SHEETPROTECT(ba, ws);
        write_AUTOFILTER(ba, ws, wb, idx);
        write_MERGECELLS(ba, ws);
        write_HLINKS(ba, ws, rels);
        if (ws["!margins"])
          write_record(ba, 476, write_BrtMargins(ws["!margins"]));
        if (!opts || opts.ignoreEC || opts.ignoreEC == void 0)
          write_IGNOREECS(ba, ws);
        write_LEGACYDRAWING(ba, ws, idx, rels);
        write_record(ba, 130);
        return ba.end();
      }
      function parse_Cache(data) {
        var col = [];
        var num = data.match(/^<c:numCache>/);
        var f;
        (data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg) || []).forEach(function(pt) {
          var q = pt.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
          if (!q)
            return;
          col[+q[1]] = num ? +q[2] : q[2];
        });
        var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["", "General"])[1]);
        (data.match(/<c:f>(.*?)<\/c:f>/mg) || []).forEach(function(F) {
          f = F.replace(/<.*?>/g, "");
        });
        return [col, nf, f];
      }
      function parse_chart(data, name, opts, rels, wb, csheet) {
        var cs = csheet || { "!type": "chart" };
        if (!data)
          return csheet;
        var C = 0, R = 0, col = "A";
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        (data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm) || []).forEach(function(nc) {
          var cache = parse_Cache(nc);
          refguess.s.r = refguess.s.c = 0;
          refguess.e.c = C;
          col = encode_col(C);
          cache[0].forEach(function(n, i) {
            cs[col + encode_row(i)] = { t: "n", v: n, z: cache[1] };
            R = i;
          });
          if (refguess.e.r < R)
            refguess.e.r = R;
          ++C;
        });
        if (C > 0)
          cs["!ref"] = encode_range(refguess);
        return cs;
      }
      function parse_cs_xml(data, opts, idx, rels, wb) {
        if (!data)
          return data;
        if (!rels)
          rels = { "!id": {} };
        var s = { "!type": "chart", "!drawel": null, "!rel": "" };
        var m;
        var sheetPr = data.match(sheetprregex);
        if (sheetPr)
          parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
        if (m = data.match(/drawing r:id="(.*?)"/))
          s["!rel"] = m[1];
        if (rels["!id"][s["!rel"]])
          s["!drawel"] = rels["!id"][s["!rel"]];
        return s;
      }
      function write_cs_xml(idx, opts, wb, rels) {
        var o = [XML_HEADER, writextag("chartsheet", null, {
          "xmlns": XMLNS_main[0],
          "xmlns:r": XMLNS.r
        })];
        o[o.length] = writextag("drawing", null, { "r:id": "rId1" });
        add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
        if (o.length > 2) {
          o[o.length] = "</chartsheet>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_BrtCsProp(data, length) {
        data.l += 10;
        var name = parse_XLWideString(data, length - 10);
        return { name };
      }
      function parse_cs_bin(data, opts, idx, rels, wb) {
        if (!data)
          return data;
        if (!rels)
          rels = { "!id": {} };
        var s = { "!type": "chart", "!drawel": null, "!rel": "" };
        var state = [];
        var pass = false;
        recordhopper(data, function cs_parse(val, R, RT) {
          switch (RT) {
            case 550:
              s["!rel"] = val;
              break;
            case 651:
              if (!wb.Sheets[idx])
                wb.Sheets[idx] = {};
              if (val.name)
                wb.Sheets[idx].CodeName = val.name;
              break;
            case 562:
            case 652:
            case 669:
            case 679:
            case 551:
            case 552:
            case 476:
            case 3072:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              state.push(RT);
              break;
            case 38:
              state.pop();
              break;
            default:
              if (R.T > 0)
                state.push(RT);
              else if (R.T < 0)
                state.pop();
              else if (!pass || opts.WTF)
                throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        }, opts);
        if (rels["!id"][s["!rel"]])
          s["!drawel"] = rels["!id"][s["!rel"]];
        return s;
      }
      function write_cs_bin() {
        var ba = buf_array();
        write_record(ba, 129);
        write_record(ba, 130);
        return ba.end();
      }
      var WBPropsDef = [
        ["allowRefreshQuery", false, "bool"],
        ["autoCompressPictures", true, "bool"],
        ["backupFile", false, "bool"],
        ["checkCompatibility", false, "bool"],
        ["CodeName", ""],
        ["date1904", false, "bool"],
        ["defaultThemeVersion", 0, "int"],
        ["filterPrivacy", false, "bool"],
        ["hidePivotFieldList", false, "bool"],
        ["promptedSolutions", false, "bool"],
        ["publishItems", false, "bool"],
        ["refreshAllConnections", false, "bool"],
        ["saveExternalLinkValues", true, "bool"],
        ["showBorderUnselectedTables", true, "bool"],
        ["showInkAnnotation", true, "bool"],
        ["showObjects", "all"],
        ["showPivotChartFilter", false, "bool"],
        ["updateLinks", "userSet"]
      ];
      var WBViewDef = [
        ["activeTab", 0, "int"],
        ["autoFilterDateGrouping", true, "bool"],
        ["firstSheet", 0, "int"],
        ["minimized", false, "bool"],
        ["showHorizontalScroll", true, "bool"],
        ["showSheetTabs", true, "bool"],
        ["showVerticalScroll", true, "bool"],
        ["tabRatio", 600, "int"],
        ["visibility", "visible"]
      ];
      var SheetDef = [];
      var CalcPrDef = [
        ["calcCompleted", "true"],
        ["calcMode", "auto"],
        ["calcOnSave", "true"],
        ["concurrentCalc", "true"],
        ["fullCalcOnLoad", "false"],
        ["fullPrecision", "true"],
        ["iterate", "false"],
        ["iterateCount", "100"],
        ["iterateDelta", "0.001"],
        ["refMode", "A1"]
      ];
      function push_defaults_array(target, defaults) {
        for (var j = 0; j != target.length; ++j) {
          var w = target[j];
          for (var i = 0; i != defaults.length; ++i) {
            var z = defaults[i];
            if (w[z[0]] == null)
              w[z[0]] = z[1];
            else
              switch (z[2]) {
                case "bool":
                  if (typeof w[z[0]] == "string")
                    w[z[0]] = parsexmlbool(w[z[0]]);
                  break;
                case "int":
                  if (typeof w[z[0]] == "string")
                    w[z[0]] = parseInt(w[z[0]], 10);
                  break;
              }
          }
        }
      }
      function push_defaults(target, defaults) {
        for (var i = 0; i != defaults.length; ++i) {
          var z = defaults[i];
          if (target[z[0]] == null)
            target[z[0]] = z[1];
          else
            switch (z[2]) {
              case "bool":
                if (typeof target[z[0]] == "string")
                  target[z[0]] = parsexmlbool(target[z[0]]);
                break;
              case "int":
                if (typeof target[z[0]] == "string")
                  target[z[0]] = parseInt(target[z[0]], 10);
                break;
            }
        }
      }
      function parse_wb_defaults(wb) {
        push_defaults(wb.WBProps, WBPropsDef);
        push_defaults(wb.CalcPr, CalcPrDef);
        push_defaults_array(wb.WBView, WBViewDef);
        push_defaults_array(wb.Sheets, SheetDef);
        _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
      }
      function safe1904(wb) {
        if (!wb.Workbook)
          return "false";
        if (!wb.Workbook.WBProps)
          return "false";
        return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
      }
      var badchars = "][*?/\\".split("");
      function check_ws_name(n, safe) {
        if (n.length > 31) {
          if (safe)
            return false;
          throw new Error("Sheet names cannot exceed 31 chars");
        }
        var _good = true;
        badchars.forEach(function(c) {
          if (n.indexOf(c) == -1)
            return;
          if (!safe)
            throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
          _good = false;
        });
        return _good;
      }
      function check_wb_names(N, S, codes) {
        N.forEach(function(n, i) {
          check_ws_name(n);
          for (var j = 0; j < i; ++j)
            if (n == N[j])
              throw new Error("Duplicate Sheet Name: " + n);
          if (codes) {
            var cn = S && S[i] && S[i].CodeName || n;
            if (cn.charCodeAt(0) == 95 && cn.length > 22)
              throw new Error("Bad Code Name: Worksheet" + cn);
          }
        });
      }
      function check_wb(wb) {
        if (!wb || !wb.SheetNames || !wb.Sheets)
          throw new Error("Invalid Workbook");
        if (!wb.SheetNames.length)
          throw new Error("Workbook is empty");
        var Sheets = wb.Workbook && wb.Workbook.Sheets || [];
        check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);
        for (var i = 0; i < wb.SheetNames.length; ++i)
          check_ws(wb.Sheets[wb.SheetNames[i]], wb.SheetNames[i], i);
      }
      var wbnsregex = /<\w+:workbook/;
      function parse_wb_xml(data, opts) {
        if (!data)
          throw new Error("Could not find file");
        var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, Names: [], xmlns: "" };
        var pass = false, xmlns = "xmlns";
        var dname = {}, dnstart = 0;
        data.replace(tagregex, function xml_wb(x, idx) {
          var y = parsexmltag(x);
          switch (strip_ns(y[0])) {
            case "<?xml":
              break;
            case "<workbook":
              if (x.match(wbnsregex))
                xmlns = "xmlns" + x.match(/<(\w+):/)[1];
              wb.xmlns = y[xmlns];
              break;
            case "</workbook>":
              break;
            case "<fileVersion":
              delete y[0];
              wb.AppVersion = y;
              break;
            case "<fileVersion/>":
            case "</fileVersion>":
              break;
            case "<fileSharing":
              break;
            case "<fileSharing/>":
              break;
            case "<workbookPr":
            case "<workbookPr/>":
              WBPropsDef.forEach(function(w) {
                if (y[w[0]] == null)
                  return;
                switch (w[2]) {
                  case "bool":
                    wb.WBProps[w[0]] = parsexmlbool(y[w[0]]);
                    break;
                  case "int":
                    wb.WBProps[w[0]] = parseInt(y[w[0]], 10);
                    break;
                  default:
                    wb.WBProps[w[0]] = y[w[0]];
                }
              });
              if (y.codeName)
                wb.WBProps.CodeName = utf8read(y.codeName);
              break;
            case "</workbookPr>":
              break;
            case "<workbookProtection":
              break;
            case "<workbookProtection/>":
              break;
            case "<bookViews":
            case "<bookViews>":
            case "</bookViews>":
              break;
            case "<workbookView":
            case "<workbookView/>":
              delete y[0];
              wb.WBView.push(y);
              break;
            case "</workbookView>":
              break;
            case "<sheets":
            case "<sheets>":
            case "</sheets>":
              break;
            case "<sheet":
              switch (y.state) {
                case "hidden":
                  y.Hidden = 1;
                  break;
                case "veryHidden":
                  y.Hidden = 2;
                  break;
                default:
                  y.Hidden = 0;
              }
              delete y.state;
              y.name = unescapexml(utf8read(y.name));
              delete y[0];
              wb.Sheets.push(y);
              break;
            case "</sheet>":
              break;
            case "<functionGroups":
            case "<functionGroups/>":
              break;
            case "<functionGroup":
              break;
            case "<externalReferences":
            case "</externalReferences>":
            case "<externalReferences>":
              break;
            case "<externalReference":
              break;
            case "<definedNames/>":
              break;
            case "<definedNames>":
            case "<definedNames":
              pass = true;
              break;
            case "</definedNames>":
              pass = false;
              break;
            case "<definedName":
              {
                dname = {};
                dname.Name = utf8read(y.name);
                if (y.comment)
                  dname.Comment = y.comment;
                if (y.localSheetId)
                  dname.Sheet = +y.localSheetId;
                if (parsexmlbool(y.hidden || "0"))
                  dname.Hidden = true;
                dnstart = idx + x.length;
              }
              break;
            case "</definedName>":
              {
                dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
                wb.Names.push(dname);
              }
              break;
            case "<definedName/>":
              break;
            case "<calcPr":
              delete y[0];
              wb.CalcPr = y;
              break;
            case "<calcPr/>":
              delete y[0];
              wb.CalcPr = y;
              break;
            case "</calcPr>":
              break;
            case "<oleSize":
              break;
            case "<customWorkbookViews>":
            case "</customWorkbookViews>":
            case "<customWorkbookViews":
              break;
            case "<customWorkbookView":
            case "</customWorkbookView>":
              break;
            case "<pivotCaches>":
            case "</pivotCaches>":
            case "<pivotCaches":
              break;
            case "<pivotCache":
              break;
            case "<smartTagPr":
            case "<smartTagPr/>":
              break;
            case "<smartTagTypes":
            case "<smartTagTypes>":
            case "</smartTagTypes>":
              break;
            case "<smartTagType":
              break;
            case "<webPublishing":
            case "<webPublishing/>":
              break;
            case "<fileRecoveryPr":
            case "<fileRecoveryPr/>":
              break;
            case "<webPublishObjects>":
            case "<webPublishObjects":
            case "</webPublishObjects>":
              break;
            case "<webPublishObject":
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            case "<ArchID":
              break;
            case "<AlternateContent":
            case "<AlternateContent>":
              pass = true;
              break;
            case "</AlternateContent>":
              pass = false;
              break;
            case "<revisionPtr":
              break;
            default:
              if (!pass && opts.WTF)
                throw new Error("unrecognized " + y[0] + " in workbook");
          }
          return x;
        });
        if (XMLNS_main.indexOf(wb.xmlns) === -1)
          throw new Error("Unknown Namespace: " + wb.xmlns);
        parse_wb_defaults(wb);
        return wb;
      }
      function write_wb_xml(wb) {
        var o = [XML_HEADER];
        o[o.length] = writextag("workbook", null, {
          "xmlns": XMLNS_main[0],
          "xmlns:r": XMLNS.r
        });
        var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0;
        var workbookPr = { codeName: "ThisWorkbook" };
        if (wb.Workbook && wb.Workbook.WBProps) {
          WBPropsDef.forEach(function(x) {
            if (wb.Workbook.WBProps[x[0]] == null)
              return;
            if (wb.Workbook.WBProps[x[0]] == x[1])
              return;
            workbookPr[x[0]] = wb.Workbook.WBProps[x[0]];
          });
          if (wb.Workbook.WBProps.CodeName) {
            workbookPr.codeName = wb.Workbook.WBProps.CodeName;
            delete workbookPr.CodeName;
          }
        }
        o[o.length] = writextag("workbookPr", null, workbookPr);
        var sheets = wb.Workbook && wb.Workbook.Sheets || [];
        var i = 0;
        if (sheets && sheets[0] && !!sheets[0].Hidden) {
          o[o.length] = "<bookViews>";
          for (i = 0; i != wb.SheetNames.length; ++i) {
            if (!sheets[i])
              break;
            if (!sheets[i].Hidden)
              break;
          }
          if (i == wb.SheetNames.length)
            i = 0;
          o[o.length] = '<workbookView firstSheet="' + i + '" activeTab="' + i + '"/>';
          o[o.length] = "</bookViews>";
        }
        o[o.length] = "<sheets>";
        for (i = 0; i != wb.SheetNames.length; ++i) {
          var sht = { name: escapexml(wb.SheetNames[i].slice(0, 31)) };
          sht.sheetId = "" + (i + 1);
          sht["r:id"] = "rId" + (i + 1);
          if (sheets[i])
            switch (sheets[i].Hidden) {
              case 1:
                sht.state = "hidden";
                break;
              case 2:
                sht.state = "veryHidden";
                break;
            }
          o[o.length] = writextag("sheet", null, sht);
        }
        o[o.length] = "</sheets>";
        if (write_names) {
          o[o.length] = "<definedNames>";
          if (wb.Workbook && wb.Workbook.Names)
            wb.Workbook.Names.forEach(function(n) {
              var d = { name: n.Name };
              if (n.Comment)
                d.comment = n.Comment;
              if (n.Sheet != null)
                d.localSheetId = "" + n.Sheet;
              if (n.Hidden)
                d.hidden = "1";
              if (!n.Ref)
                return;
              o[o.length] = writextag("definedName", escapexml(n.Ref), d);
            });
          o[o.length] = "</definedNames>";
        }
        if (o.length > 2) {
          o[o.length] = "</workbook>";
          o[1] = o[1].replace("/>", ">");
        }
        return o.join("");
      }
      function parse_BrtBundleSh(data, length) {
        var z = {};
        z.Hidden = data.read_shift(4);
        z.iTabID = data.read_shift(4);
        z.strRelID = parse_RelID(data, length - 8);
        z.name = parse_XLWideString(data);
        return z;
      }
      function write_BrtBundleSh(data, o) {
        if (!o)
          o = new_buf(127);
        o.write_shift(4, data.Hidden);
        o.write_shift(4, data.iTabID);
        write_RelID(data.strRelID, o);
        write_XLWideString(data.name.slice(0, 31), o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function parse_BrtWbProp(data, length) {
        var o = {};
        var flags = data.read_shift(4);
        o.defaultThemeVersion = data.read_shift(4);
        var strName = length > 8 ? parse_XLWideString(data) : "";
        if (strName.length > 0)
          o.CodeName = strName;
        o.autoCompressPictures = !!(flags & 65536);
        o.backupFile = !!(flags & 64);
        o.checkCompatibility = !!(flags & 4096);
        o.date1904 = !!(flags & 1);
        o.filterPrivacy = !!(flags & 8);
        o.hidePivotFieldList = !!(flags & 1024);
        o.promptedSolutions = !!(flags & 16);
        o.publishItems = !!(flags & 2048);
        o.refreshAllConnections = !!(flags & 262144);
        o.saveExternalLinkValues = !!(flags & 128);
        o.showBorderUnselectedTables = !!(flags & 4);
        o.showInkAnnotation = !!(flags & 32);
        o.showObjects = ["all", "placeholders", "none"][flags >> 13 & 3];
        o.showPivotChartFilter = !!(flags & 32768);
        o.updateLinks = ["userSet", "never", "always"][flags >> 8 & 3];
        return o;
      }
      function write_BrtWbProp(data, o) {
        if (!o)
          o = new_buf(72);
        var flags = 0;
        if (data) {
          if (data.filterPrivacy)
            flags |= 8;
        }
        o.write_shift(4, flags);
        o.write_shift(4, 0);
        write_XLSBCodeName(data && data.CodeName || "ThisWorkbook", o);
        return o.slice(0, o.l);
      }
      function parse_BrtFRTArchID$(data, length) {
        var o = {};
        data.read_shift(4);
        o.ArchID = data.read_shift(4);
        data.l += length - 8;
        return o;
      }
      function parse_BrtName(data, length, opts) {
        var end = data.l + length;
        data.l += 4;
        data.l += 1;
        var itab = data.read_shift(4);
        var name = parse_XLNameWideString(data);
        var formula = parse_XLSBNameParsedFormula(data, 0, opts);
        var comment = parse_XLNullableWideString(data);
        data.l = end;
        var out = { Name: name, Ptg: formula };
        if (itab < 268435455)
          out.Sheet = itab;
        if (comment)
          out.Comment = comment;
        return out;
      }
      function parse_wb_bin(data, opts) {
        var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, xmlns: "" };
        var state = [];
        var pass = false;
        if (!opts)
          opts = {};
        opts.biff = 12;
        var Names = [];
        var supbooks = [[]];
        supbooks.SheetNames = [];
        supbooks.XTI = [];
        XLSBRecordEnum[16] = { n: "BrtFRTArchID$", f: parse_BrtFRTArchID$ };
        recordhopper(data, function hopper_wb(val, R, RT) {
          switch (RT) {
            case 156:
              supbooks.SheetNames.push(val.name);
              wb.Sheets.push(val);
              break;
            case 153:
              wb.WBProps = val;
              break;
            case 39:
              if (val.Sheet != null)
                opts.SID = val.Sheet;
              val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
              delete opts.SID;
              delete val.Ptg;
              Names.push(val);
              break;
            case 1036:
              break;
            case 357:
            case 358:
            case 355:
            case 667:
              if (!supbooks[0].length)
                supbooks[0] = [RT, val];
              else
                supbooks.push([RT, val]);
              supbooks[supbooks.length - 1].XTI = [];
              break;
            case 362:
              if (supbooks.length === 0) {
                supbooks[0] = [];
                supbooks[0].XTI = [];
              }
              supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
              supbooks.XTI = supbooks.XTI.concat(val);
              break;
            case 361:
              break;
            case 2071:
            case 158:
            case 143:
            case 664:
            case 353:
              break;
            case 3072:
            case 3073:
            case 534:
            case 677:
            case 157:
            case 610:
            case 2050:
            case 155:
            case 548:
            case 676:
            case 128:
            case 665:
            case 2128:
            case 2125:
            case 549:
            case 2053:
            case 596:
            case 2076:
            case 2075:
            case 2082:
            case 397:
            case 154:
            case 1117:
            case 553:
            case 2091:
              break;
            case 35:
              state.push(RT);
              pass = true;
              break;
            case 36:
              state.pop();
              pass = false;
              break;
            case 37:
              state.push(RT);
              pass = true;
              break;
            case 38:
              state.pop();
              pass = false;
              break;
            case 16:
              break;
            default:
              if (R.T) {
              } else if (!pass || opts.WTF && state[state.length - 1] != 37 && state[state.length - 1] != 35)
                throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        }, opts);
        parse_wb_defaults(wb);
        wb.Names = Names;
        wb.supbooks = supbooks;
        return wb;
      }
      function write_BUNDLESHS(ba, wb) {
        write_record(ba, 143);
        for (var idx = 0; idx != wb.SheetNames.length; ++idx) {
          var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;
          var d = { Hidden: viz, iTabID: idx + 1, strRelID: "rId" + (idx + 1), name: wb.SheetNames[idx] };
          write_record(ba, 156, write_BrtBundleSh(d));
        }
        write_record(ba, 144);
      }
      function write_BrtFileVersion(data, o) {
        if (!o)
          o = new_buf(127);
        for (var i = 0; i != 4; ++i)
          o.write_shift(4, 0);
        write_XLWideString("SheetJS", o);
        write_XLWideString(XLSX3.version, o);
        write_XLWideString(XLSX3.version, o);
        write_XLWideString("7262", o);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function write_BrtBookView(idx, o) {
        if (!o)
          o = new_buf(29);
        o.write_shift(-4, 0);
        o.write_shift(-4, 460);
        o.write_shift(4, 28800);
        o.write_shift(4, 17600);
        o.write_shift(4, 500);
        o.write_shift(4, idx);
        o.write_shift(4, idx);
        var flags = 120;
        o.write_shift(1, flags);
        return o.length > o.l ? o.slice(0, o.l) : o;
      }
      function write_BOOKVIEWS(ba, wb) {
        if (!wb.Workbook || !wb.Workbook.Sheets)
          return;
        var sheets = wb.Workbook.Sheets;
        var i = 0, vistab = -1, hidden = -1;
        for (; i < sheets.length; ++i) {
          if (!sheets[i] || !sheets[i].Hidden && vistab == -1)
            vistab = i;
          else if (sheets[i].Hidden == 1 && hidden == -1)
            hidden = i;
        }
        if (hidden > vistab)
          return;
        write_record(ba, 135);
        write_record(ba, 158, write_BrtBookView(vistab));
        write_record(ba, 136);
      }
      function write_wb_bin(wb, opts) {
        var ba = buf_array();
        write_record(ba, 131);
        write_record(ba, 128, write_BrtFileVersion());
        write_record(ba, 153, write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));
        write_BOOKVIEWS(ba, wb, opts);
        write_BUNDLESHS(ba, wb, opts);
        write_record(ba, 132);
        return ba.end();
      }
      function parse_wb(data, name, opts) {
        if (name.slice(-4) === ".bin")
          return parse_wb_bin(data, opts);
        return parse_wb_xml(data, opts);
      }
      function parse_ws(data, name, idx, opts, rels, wb, themes, styles) {
        if (name.slice(-4) === ".bin")
          return parse_ws_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_ws_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_cs(data, name, idx, opts, rels, wb, themes, styles) {
        if (name.slice(-4) === ".bin")
          return parse_cs_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_cs_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_ms(data, name, idx, opts, rels, wb, themes, styles) {
        if (name.slice(-4) === ".bin")
          return parse_ms_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_ms_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_ds(data, name, idx, opts, rels, wb, themes, styles) {
        if (name.slice(-4) === ".bin")
          return parse_ds_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_ds_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_sty(data, name, themes, opts) {
        if (name.slice(-4) === ".bin")
          return parse_sty_bin(data, themes, opts);
        return parse_sty_xml(data, themes, opts);
      }
      function parse_theme(data, name, opts) {
        return parse_theme_xml(data, opts);
      }
      function parse_sst(data, name, opts) {
        if (name.slice(-4) === ".bin")
          return parse_sst_bin(data, opts);
        return parse_sst_xml(data, opts);
      }
      function parse_cmnt(data, name, opts) {
        if (name.slice(-4) === ".bin")
          return parse_comments_bin(data, opts);
        return parse_comments_xml(data, opts);
      }
      function parse_cc(data, name, opts) {
        if (name.slice(-4) === ".bin")
          return parse_cc_bin(data, name, opts);
        return parse_cc_xml(data, name, opts);
      }
      function parse_xlink(data, rel, name, opts) {
        if (name.slice(-4) === ".bin")
          return parse_xlink_bin(data, rel, name, opts);
        return parse_xlink_xml(data, rel, name, opts);
      }
      function parse_xlmeta(data, name, opts) {
        if (name.slice(-4) === ".bin")
          return parse_xlmeta_bin(data, name, opts);
        return parse_xlmeta_xml(data, name, opts);
      }
      function write_wb(wb, name, opts) {
        return (name.slice(-4) === ".bin" ? write_wb_bin : write_wb_xml)(wb, opts);
      }
      function write_ws(data, name, opts, wb, rels) {
        return (name.slice(-4) === ".bin" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels);
      }
      function write_cs(data, name, opts, wb, rels) {
        return (name.slice(-4) === ".bin" ? write_cs_bin : write_cs_xml)(data, opts, wb, rels);
      }
      function write_sty(data, name, opts) {
        return (name.slice(-4) === ".bin" ? write_sty_bin : write_sty_xml)(data, opts);
      }
      function write_sst(data, name, opts) {
        return (name.slice(-4) === ".bin" ? write_sst_bin : write_sst_xml)(data, opts);
      }
      function write_cmnt(data, name, opts) {
        return (name.slice(-4) === ".bin" ? write_comments_bin : write_comments_xml)(data, opts);
      }
      function write_xlmeta(name) {
        return (name.slice(-4) === ".bin" ? write_xlmeta_bin : write_xlmeta_xml)();
      }
      var attregexg2 = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
      var attregex2 = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
      function xlml_parsexmltag(tag, skip_root) {
        var words = tag.split(/\s+/);
        var z = [];
        if (!skip_root)
          z[0] = words[0];
        if (words.length === 1)
          return z;
        var m = tag.match(attregexg2), y, j, w, i;
        if (m)
          for (i = 0; i != m.length; ++i) {
            y = m[i].match(attregex2);
            if ((j = y[1].indexOf(":")) === -1)
              z[y[1]] = y[2].slice(1, y[2].length - 1);
            else {
              if (y[1].slice(0, 6) === "xmlns:")
                w = "xmlns" + y[1].slice(6);
              else
                w = y[1].slice(j + 1);
              z[w] = y[2].slice(1, y[2].length - 1);
            }
          }
        return z;
      }
      function xlml_parsexmltagobj(tag) {
        var words = tag.split(/\s+/);
        var z = {};
        if (words.length === 1)
          return z;
        var m = tag.match(attregexg2), y, j, w, i;
        if (m)
          for (i = 0; i != m.length; ++i) {
            y = m[i].match(attregex2);
            if ((j = y[1].indexOf(":")) === -1)
              z[y[1]] = y[2].slice(1, y[2].length - 1);
            else {
              if (y[1].slice(0, 6) === "xmlns:")
                w = "xmlns" + y[1].slice(6);
              else
                w = y[1].slice(j + 1);
              z[w] = y[2].slice(1, y[2].length - 1);
            }
          }
        return z;
      }
      var XLMLFormatMap;
      function xlml_format(format, value) {
        var fmt = XLMLFormatMap[format] || unescapexml(format);
        if (fmt === "General")
          return SSF_general(value);
        return SSF_format(fmt, value);
      }
      function xlml_set_custprop(Custprops, key, cp, val) {
        var oval = val;
        switch ((cp[0].match(/dt:dt="([\w.]+)"/) || ["", ""])[1]) {
          case "boolean":
            oval = parsexmlbool(val);
            break;
          case "i2":
          case "int":
            oval = parseInt(val, 10);
            break;
          case "r4":
          case "float":
            oval = parseFloat(val);
            break;
          case "date":
          case "dateTime.tz":
            oval = parseDate(val);
            break;
          case "i8":
          case "string":
          case "fixed":
          case "uuid":
          case "bin.base64":
            break;
          default:
            throw new Error("bad custprop:" + cp[0]);
        }
        Custprops[unescapexml(key)] = oval;
      }
      function safe_format_xlml(cell, nf, o) {
        if (cell.t === "z")
          return;
        if (!o || o.cellText !== false)
          try {
            if (cell.t === "e") {
              cell.w = cell.w || BErr[cell.v];
            } else if (nf === "General") {
              if (cell.t === "n") {
                if ((cell.v | 0) === cell.v)
                  cell.w = cell.v.toString(10);
                else
                  cell.w = SSF_general_num(cell.v);
              } else
                cell.w = SSF_general(cell.v);
            } else
              cell.w = xlml_format(nf || "General", cell.v);
          } catch (e) {
            if (o.WTF)
              throw e;
          }
        try {
          var z = XLMLFormatMap[nf] || nf || "General";
          if (o.cellNF)
            cell.z = z;
          if (o.cellDates && cell.t == "n" && fmt_is_date(z)) {
            var _d = SSF_parse_date_code(cell.v);
            if (_d) {
              cell.t = "d";
              cell.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
            }
          }
        } catch (e) {
          if (o.WTF)
            throw e;
        }
      }
      function process_style_xlml(styles, stag, opts) {
        if (opts.cellStyles) {
          if (stag.Interior) {
            var I = stag.Interior;
            if (I.Pattern)
              I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
          }
        }
        styles[stag.ID] = stag;
      }
      function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, arrayf, o) {
        var nf = "General", sid = cell.StyleID, S = {};
        o = o || {};
        var interiors = [];
        var i = 0;
        if (sid === void 0 && row)
          sid = row.StyleID;
        if (sid === void 0 && csty)
          sid = csty.StyleID;
        while (styles[sid] !== void 0) {
          if (styles[sid].nf)
            nf = styles[sid].nf;
          if (styles[sid].Interior)
            interiors.push(styles[sid].Interior);
          if (!styles[sid].Parent)
            break;
          sid = styles[sid].Parent;
        }
        switch (data.Type) {
          case "Boolean":
            cell.t = "b";
            cell.v = parsexmlbool(xml);
            break;
          case "String":
            cell.t = "s";
            cell.r = xlml_fixstr(unescapexml(xml));
            cell.v = xml.indexOf("<") > -1 ? unescapexml(ss || xml).replace(/<.*?>/g, "") : cell.r;
            break;
          case "DateTime":
            if (xml.slice(-1) != "Z")
              xml += "Z";
            cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1e3);
            if (cell.v !== cell.v)
              cell.v = unescapexml(xml);
            else if (cell.v < 60)
              cell.v = cell.v - 1;
            if (!nf || nf == "General")
              nf = "yyyy-mm-dd";
          case "Number":
            if (cell.v === void 0)
              cell.v = +xml;
            if (!cell.t)
              cell.t = "n";
            break;
          case "Error":
            cell.t = "e";
            cell.v = RBErr[xml];
            if (o.cellText !== false)
              cell.w = xml;
            break;
          default:
            if (xml == "" && ss == "") {
              cell.t = "z";
            } else {
              cell.t = "s";
              cell.v = xlml_fixstr(ss || xml);
            }
            break;
        }
        safe_format_xlml(cell, nf, o);
        if (o.cellFormula !== false) {
          if (cell.Formula) {
            var fstr = unescapexml(cell.Formula);
            if (fstr.charCodeAt(0) == 61)
              fstr = fstr.slice(1);
            cell.f = rc_to_a1(fstr, base);
            delete cell.Formula;
            if (cell.ArrayRange == "RC")
              cell.F = rc_to_a1("RC:RC", base);
            else if (cell.ArrayRange) {
              cell.F = rc_to_a1(cell.ArrayRange, base);
              arrayf.push([safe_decode_range(cell.F), cell.F]);
            }
          } else {
            for (i = 0; i < arrayf.length; ++i)
              if (base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r) {
                if (base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c)
                  cell.F = arrayf[i][1];
              }
          }
        }
        if (o.cellStyles) {
          interiors.forEach(function(x) {
            if (!S.patternType && x.patternType)
              S.patternType = x.patternType;
          });
          cell.s = S;
        }
        if (cell.StyleID !== void 0)
          cell.ixfe = cell.StyleID;
      }
      function xlml_clean_comment(comment) {
        comment.t = comment.v || "";
        comment.t = comment.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        comment.v = comment.w = comment.ixfe = void 0;
      }
      function parse_xlml_xml(d, _opts) {
        var opts = _opts || {};
        make_ssf();
        var str = debom(xlml_normalize(d));
        if (opts.type == "binary" || opts.type == "array" || opts.type == "base64") {
          if (typeof $cptable !== "undefined")
            str = $cptable.utils.decode(65001, char_codes(str));
          else
            str = utf8read(str);
        }
        var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
        opening = opening.replace(/".*?"/g, "");
        if ((opening.indexOf(">") & 1023) > Math.min(opening.indexOf(",") & 1023, opening.indexOf(";") & 1023)) {
          var _o = dup(opts);
          _o.type = "string";
          return PRN.to_workbook(str, _o);
        }
        if (opening.indexOf("<?xml") == -1)
          ["html", "table", "head", "meta", "script", "style", "div"].forEach(function(tag) {
            if (opening.indexOf("<" + tag) >= 0)
              ishtml = true;
          });
        if (ishtml)
          return html_to_workbook(str, opts);
        XLMLFormatMap = {
          "General Number": "General",
          "General Date": table_fmt[22],
          "Long Date": "dddd, mmmm dd, yyyy",
          "Medium Date": table_fmt[15],
          "Short Date": table_fmt[14],
          "Long Time": table_fmt[19],
          "Medium Time": table_fmt[18],
          "Short Time": table_fmt[20],
          "Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
          "Fixed": table_fmt[2],
          "Standard": table_fmt[4],
          "Percent": table_fmt[10],
          "Scientific": table_fmt[11],
          "Yes/No": '"Yes";"Yes";"No";@',
          "True/False": '"True";"True";"False";@',
          "On/Off": '"Yes";"Yes";"No";@'
        };
        var Rn;
        var state = [], tmp;
        if (DENSE != null && opts.dense == null)
          opts.dense = DENSE;
        var sheets = {}, sheetnames = [], cursheet = opts.dense ? [] : {}, sheetname = "";
        var cell = {}, row = {};
        var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
        var c = 0, r = 0;
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        var styles = {}, stag = {};
        var ss = "", fidx = 0;
        var merges = [];
        var Props = {}, Custprops = {}, pidx = 0, cp = [];
        var comments = [], comment = {};
        var cstys = [], csty, seencol = false;
        var arrayf = [];
        var rowinfo = [], rowobj = {}, cc = 0, rr = 0;
        var Workbook = { Sheets: [], WBProps: { date1904: false } }, wsprops = {};
        xlmlregex.lastIndex = 0;
        str = str.replace(/<!--([\s\S]*?)-->/mg, "");
        var raw_Rn3 = "";
        while (Rn = xlmlregex.exec(str))
          switch (Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase()) {
            case "data":
              if (raw_Rn3 == "data") {
                if (Rn[1] === "/") {
                  if ((tmp = state.pop())[0] !== Rn[3])
                    throw new Error("Bad state: " + tmp.join("|"));
                } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
                  state.push([Rn[3], true]);
                break;
              }
              if (state[state.length - 1][1])
                break;
              if (Rn[1] === "/")
                parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] == "comment" ? comment : cell, { c, r }, styles, cstys[c], row, arrayf, opts);
              else {
                ss = "";
                dtag = xlml_parsexmltag(Rn[0]);
                didx = Rn.index + Rn[0].length;
              }
              break;
            case "cell":
              if (Rn[1] === "/") {
                if (comments.length > 0)
                  cell.c = comments;
                if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== void 0) {
                  if (opts.dense) {
                    if (!cursheet[r])
                      cursheet[r] = [];
                    cursheet[r][c] = cell;
                  } else
                    cursheet[encode_col(c) + encode_row(r)] = cell;
                }
                if (cell.HRef) {
                  cell.l = { Target: unescapexml(cell.HRef) };
                  if (cell.HRefScreenTip)
                    cell.l.Tooltip = cell.HRefScreenTip;
                  delete cell.HRef;
                  delete cell.HRefScreenTip;
                }
                if (cell.MergeAcross || cell.MergeDown) {
                  cc = c + (parseInt(cell.MergeAcross, 10) | 0);
                  rr = r + (parseInt(cell.MergeDown, 10) | 0);
                  merges.push({ s: { c, r }, e: { c: cc, r: rr } });
                }
                if (!opts.sheetStubs) {
                  if (cell.MergeAcross)
                    c = cc + 1;
                  else
                    ++c;
                } else if (cell.MergeAcross || cell.MergeDown) {
                  for (var cma = c; cma <= cc; ++cma) {
                    for (var cmd = r; cmd <= rr; ++cmd) {
                      if (cma > c || cmd > r) {
                        if (opts.dense) {
                          if (!cursheet[cmd])
                            cursheet[cmd] = [];
                          cursheet[cmd][cma] = { t: "z" };
                        } else
                          cursheet[encode_col(cma) + encode_row(cmd)] = { t: "z" };
                      }
                    }
                  }
                  c = cc + 1;
                } else
                  ++c;
              } else {
                cell = xlml_parsexmltagobj(Rn[0]);
                if (cell.Index)
                  c = +cell.Index - 1;
                if (c < refguess.s.c)
                  refguess.s.c = c;
                if (c > refguess.e.c)
                  refguess.e.c = c;
                if (Rn[0].slice(-2) === "/>")
                  ++c;
                comments = [];
              }
              break;
            case "row":
              if (Rn[1] === "/" || Rn[0].slice(-2) === "/>") {
                if (r < refguess.s.r)
                  refguess.s.r = r;
                if (r > refguess.e.r)
                  refguess.e.r = r;
                if (Rn[0].slice(-2) === "/>") {
                  row = xlml_parsexmltag(Rn[0]);
                  if (row.Index)
                    r = +row.Index - 1;
                }
                c = 0;
                ++r;
              } else {
                row = xlml_parsexmltag(Rn[0]);
                if (row.Index)
                  r = +row.Index - 1;
                rowobj = {};
                if (row.AutoFitHeight == "0" || row.Height) {
                  rowobj.hpx = parseInt(row.Height, 10);
                  rowobj.hpt = px2pt(rowobj.hpx);
                  rowinfo[r] = rowobj;
                }
                if (row.Hidden == "1") {
                  rowobj.hidden = true;
                  rowinfo[r] = rowobj;
                }
              }
              break;
            case "worksheet":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
                sheetnames.push(sheetname);
                if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
                  cursheet["!ref"] = encode_range(refguess);
                  if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {
                    cursheet["!fullref"] = cursheet["!ref"];
                    refguess.e.r = opts.sheetRows - 1;
                    cursheet["!ref"] = encode_range(refguess);
                  }
                }
                if (merges.length)
                  cursheet["!merges"] = merges;
                if (cstys.length > 0)
                  cursheet["!cols"] = cstys;
                if (rowinfo.length > 0)
                  cursheet["!rows"] = rowinfo;
                sheets[sheetname] = cursheet;
              } else {
                refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
                r = c = 0;
                state.push([Rn[3], false]);
                tmp = xlml_parsexmltag(Rn[0]);
                sheetname = unescapexml(tmp.Name);
                cursheet = opts.dense ? [] : {};
                merges = [];
                arrayf = [];
                rowinfo = [];
                wsprops = { name: sheetname, Hidden: 0 };
                Workbook.Sheets.push(wsprops);
              }
              break;
            case "table":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
              } else if (Rn[0].slice(-2) == "/>")
                break;
              else {
                state.push([Rn[3], false]);
                cstys = [];
                seencol = false;
              }
              break;
            case "style":
              if (Rn[1] === "/")
                process_style_xlml(styles, stag, opts);
              else
                stag = xlml_parsexmltag(Rn[0]);
              break;
            case "numberformat":
              stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
              if (XLMLFormatMap[stag.nf])
                stag.nf = XLMLFormatMap[stag.nf];
              for (var ssfidx = 0; ssfidx != 392; ++ssfidx)
                if (table_fmt[ssfidx] == stag.nf)
                  break;
              if (ssfidx == 392) {
                for (ssfidx = 57; ssfidx != 392; ++ssfidx)
                  if (table_fmt[ssfidx] == null) {
                    SSF_load(stag.nf, ssfidx);
                    break;
                  }
              }
              break;
            case "column":
              if (state[state.length - 1][0] !== "table")
                break;
              csty = xlml_parsexmltag(Rn[0]);
              if (csty.Hidden) {
                csty.hidden = true;
                delete csty.Hidden;
              }
              if (csty.Width)
                csty.wpx = parseInt(csty.Width, 10);
              if (!seencol && csty.wpx > 10) {
                seencol = true;
                MDW = DEF_MDW;
                for (var _col = 0; _col < cstys.length; ++_col)
                  if (cstys[_col])
                    process_col(cstys[_col]);
              }
              if (seencol)
                process_col(csty);
              cstys[csty.Index - 1 || cstys.length] = csty;
              for (var i = 0; i < +csty.Span; ++i)
                cstys[cstys.length] = dup(csty);
              break;
            case "namedrange":
              if (Rn[1] === "/")
                break;
              if (!Workbook.Names)
                Workbook.Names = [];
              var _NamedRange = parsexmltag(Rn[0]);
              var _DefinedName = {
                Name: _NamedRange.Name,
                Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), { r: 0, c: 0 })
              };
              if (Workbook.Sheets.length > 0)
                _DefinedName.Sheet = Workbook.Sheets.length - 1;
              Workbook.Names.push(_DefinedName);
              break;
            case "namedcell":
              break;
            case "b":
              break;
            case "i":
              break;
            case "u":
              break;
            case "s":
              break;
            case "em":
              break;
            case "h2":
              break;
            case "h3":
              break;
            case "sub":
              break;
            case "sup":
              break;
            case "span":
              break;
            case "alignment":
              break;
            case "borders":
              break;
            case "border":
              break;
            case "font":
              if (Rn[0].slice(-2) === "/>")
                break;
              else if (Rn[1] === "/")
                ss += str.slice(fidx, Rn.index);
              else
                fidx = Rn.index + Rn[0].length;
              break;
            case "interior":
              if (!opts.cellStyles)
                break;
              stag.Interior = xlml_parsexmltag(Rn[0]);
              break;
            case "protection":
              break;
            case "author":
            case "title":
            case "description":
            case "created":
            case "keywords":
            case "subject":
            case "category":
            case "company":
            case "lastauthor":
            case "lastsaved":
            case "lastprinted":
            case "version":
            case "revision":
            case "totaltime":
            case "hyperlinkbase":
            case "manager":
            case "contentstatus":
            case "identifier":
            case "language":
            case "appname":
              if (Rn[0].slice(-2) === "/>")
                break;
              else if (Rn[1] === "/")
                xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));
              else
                pidx = Rn.index + Rn[0].length;
              break;
            case "paragraphs":
              break;
            case "styles":
            case "workbook":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
              } else
                state.push([Rn[3], false]);
              break;
            case "comment":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
                xlml_clean_comment(comment);
                comments.push(comment);
              } else {
                state.push([Rn[3], false]);
                tmp = xlml_parsexmltag(Rn[0]);
                comment = { a: tmp.Author };
              }
              break;
            case "autofilter":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
              } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                var AutoFilter = xlml_parsexmltag(Rn[0]);
                cursheet["!autofilter"] = { ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, "") };
                state.push([Rn[3], true]);
              }
              break;
            case "name":
              break;
            case "datavalidation":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
              } else {
                if (Rn[0].charAt(Rn[0].length - 2) !== "/")
                  state.push([Rn[3], true]);
              }
              break;
            case "pixelsperinch":
              break;
            case "componentoptions":
            case "documentproperties":
            case "customdocumentproperties":
            case "officedocumentsettings":
            case "pivottable":
            case "pivotcache":
            case "names":
            case "mapinfo":
            case "pagebreaks":
            case "querytable":
            case "sorting":
            case "schema":
            case "conditionalformatting":
            case "smarttagtype":
            case "smarttags":
            case "excelworkbook":
            case "workbookoptions":
            case "worksheetoptions":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw new Error("Bad state: " + tmp.join("|"));
              } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
                state.push([Rn[3], true]);
              break;
            case "null":
              break;
            default:
              if (state.length == 0 && Rn[3] == "document")
                return parse_fods(str, opts);
              if (state.length == 0 && Rn[3] == "uof")
                return parse_fods(str, opts);
              var seen = true;
              switch (state[state.length - 1][0]) {
                case "officedocumentsettings":
                  switch (Rn[3]) {
                    case "allowpng":
                      break;
                    case "removepersonalinformation":
                      break;
                    case "downloadcomponents":
                      break;
                    case "locationofcomponents":
                      break;
                    case "colors":
                      break;
                    case "color":
                      break;
                    case "index":
                      break;
                    case "rgb":
                      break;
                    case "targetscreensize":
                      break;
                    case "readonlyrecommended":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "componentoptions":
                  switch (Rn[3]) {
                    case "toolbar":
                      break;
                    case "hideofficelogo":
                      break;
                    case "spreadsheetautofit":
                      break;
                    case "label":
                      break;
                    case "caption":
                      break;
                    case "maxheight":
                      break;
                    case "maxwidth":
                      break;
                    case "nextsheetnumber":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "excelworkbook":
                  switch (Rn[3]) {
                    case "date1904":
                      Workbook.WBProps.date1904 = true;
                      break;
                    case "windowheight":
                      break;
                    case "windowwidth":
                      break;
                    case "windowtopx":
                      break;
                    case "windowtopy":
                      break;
                    case "tabratio":
                      break;
                    case "protectstructure":
                      break;
                    case "protectwindow":
                      break;
                    case "protectwindows":
                      break;
                    case "activesheet":
                      break;
                    case "displayinknotes":
                      break;
                    case "firstvisiblesheet":
                      break;
                    case "supbook":
                      break;
                    case "sheetname":
                      break;
                    case "sheetindex":
                      break;
                    case "sheetindexfirst":
                      break;
                    case "sheetindexlast":
                      break;
                    case "dll":
                      break;
                    case "acceptlabelsinformulas":
                      break;
                    case "donotsavelinkvalues":
                      break;
                    case "iteration":
                      break;
                    case "maxiterations":
                      break;
                    case "maxchange":
                      break;
                    case "path":
                      break;
                    case "xct":
                      break;
                    case "count":
                      break;
                    case "selectedsheets":
                      break;
                    case "calculation":
                      break;
                    case "uncalced":
                      break;
                    case "startupprompt":
                      break;
                    case "crn":
                      break;
                    case "externname":
                      break;
                    case "formula":
                      break;
                    case "colfirst":
                      break;
                    case "collast":
                      break;
                    case "wantadvise":
                      break;
                    case "boolean":
                      break;
                    case "error":
                      break;
                    case "text":
                      break;
                    case "ole":
                      break;
                    case "noautorecover":
                      break;
                    case "publishobjects":
                      break;
                    case "donotcalculatebeforesave":
                      break;
                    case "number":
                      break;
                    case "refmoder1c1":
                      break;
                    case "embedsavesmarttags":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "workbookoptions":
                  switch (Rn[3]) {
                    case "owcversion":
                      break;
                    case "height":
                      break;
                    case "width":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "worksheetoptions":
                  switch (Rn[3]) {
                    case "visible":
                      if (Rn[0].slice(-2) === "/>") {
                      } else if (Rn[1] === "/")
                        switch (str.slice(pidx, Rn.index)) {
                          case "SheetHidden":
                            wsprops.Hidden = 1;
                            break;
                          case "SheetVeryHidden":
                            wsprops.Hidden = 2;
                            break;
                        }
                      else
                        pidx = Rn.index + Rn[0].length;
                      break;
                    case "header":
                      if (!cursheet["!margins"])
                        default_margins(cursheet["!margins"] = {}, "xlml");
                      if (!isNaN(+parsexmltag(Rn[0]).Margin))
                        cursheet["!margins"].header = +parsexmltag(Rn[0]).Margin;
                      break;
                    case "footer":
                      if (!cursheet["!margins"])
                        default_margins(cursheet["!margins"] = {}, "xlml");
                      if (!isNaN(+parsexmltag(Rn[0]).Margin))
                        cursheet["!margins"].footer = +parsexmltag(Rn[0]).Margin;
                      break;
                    case "pagemargins":
                      var pagemargins = parsexmltag(Rn[0]);
                      if (!cursheet["!margins"])
                        default_margins(cursheet["!margins"] = {}, "xlml");
                      if (!isNaN(+pagemargins.Top))
                        cursheet["!margins"].top = +pagemargins.Top;
                      if (!isNaN(+pagemargins.Left))
                        cursheet["!margins"].left = +pagemargins.Left;
                      if (!isNaN(+pagemargins.Right))
                        cursheet["!margins"].right = +pagemargins.Right;
                      if (!isNaN(+pagemargins.Bottom))
                        cursheet["!margins"].bottom = +pagemargins.Bottom;
                      break;
                    case "displayrighttoleft":
                      if (!Workbook.Views)
                        Workbook.Views = [];
                      if (!Workbook.Views[0])
                        Workbook.Views[0] = {};
                      Workbook.Views[0].RTL = true;
                      break;
                    case "freezepanes":
                      break;
                    case "frozennosplit":
                      break;
                    case "splithorizontal":
                    case "splitvertical":
                      break;
                    case "donotdisplaygridlines":
                      break;
                    case "activerow":
                      break;
                    case "activecol":
                      break;
                    case "toprowbottompane":
                      break;
                    case "leftcolumnrightpane":
                      break;
                    case "unsynced":
                      break;
                    case "print":
                      break;
                    case "printerrors":
                      break;
                    case "panes":
                      break;
                    case "scale":
                      break;
                    case "pane":
                      break;
                    case "number":
                      break;
                    case "layout":
                      break;
                    case "pagesetup":
                      break;
                    case "selected":
                      break;
                    case "protectobjects":
                      break;
                    case "enableselection":
                      break;
                    case "protectscenarios":
                      break;
                    case "validprinterinfo":
                      break;
                    case "horizontalresolution":
                      break;
                    case "verticalresolution":
                      break;
                    case "numberofcopies":
                      break;
                    case "activepane":
                      break;
                    case "toprowvisible":
                      break;
                    case "leftcolumnvisible":
                      break;
                    case "fittopage":
                      break;
                    case "rangeselection":
                      break;
                    case "papersizeindex":
                      break;
                    case "pagelayoutzoom":
                      break;
                    case "pagebreakzoom":
                      break;
                    case "filteron":
                      break;
                    case "fitwidth":
                      break;
                    case "fitheight":
                      break;
                    case "commentslayout":
                      break;
                    case "zoom":
                      break;
                    case "lefttoright":
                      break;
                    case "gridlines":
                      break;
                    case "allowsort":
                      break;
                    case "allowfilter":
                      break;
                    case "allowinsertrows":
                      break;
                    case "allowdeleterows":
                      break;
                    case "allowinsertcols":
                      break;
                    case "allowdeletecols":
                      break;
                    case "allowinserthyperlinks":
                      break;
                    case "allowformatcells":
                      break;
                    case "allowsizecols":
                      break;
                    case "allowsizerows":
                      break;
                    case "nosummaryrowsbelowdetail":
                      if (!cursheet["!outline"])
                        cursheet["!outline"] = {};
                      cursheet["!outline"].above = true;
                      break;
                    case "tabcolorindex":
                      break;
                    case "donotdisplayheadings":
                      break;
                    case "showpagelayoutzoom":
                      break;
                    case "nosummarycolumnsrightdetail":
                      if (!cursheet["!outline"])
                        cursheet["!outline"] = {};
                      cursheet["!outline"].left = true;
                      break;
                    case "blackandwhite":
                      break;
                    case "donotdisplayzeros":
                      break;
                    case "displaypagebreak":
                      break;
                    case "rowcolheadings":
                      break;
                    case "donotdisplayoutline":
                      break;
                    case "noorientation":
                      break;
                    case "allowusepivottables":
                      break;
                    case "zeroheight":
                      break;
                    case "viewablerange":
                      break;
                    case "selection":
                      break;
                    case "protectcontents":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "pivottable":
                case "pivotcache":
                  switch (Rn[3]) {
                    case "immediateitemsondrop":
                      break;
                    case "showpagemultipleitemlabel":
                      break;
                    case "compactrowindent":
                      break;
                    case "location":
                      break;
                    case "pivotfield":
                      break;
                    case "orientation":
                      break;
                    case "layoutform":
                      break;
                    case "layoutsubtotallocation":
                      break;
                    case "layoutcompactrow":
                      break;
                    case "position":
                      break;
                    case "pivotitem":
                      break;
                    case "datatype":
                      break;
                    case "datafield":
                      break;
                    case "sourcename":
                      break;
                    case "parentfield":
                      break;
                    case "ptlineitems":
                      break;
                    case "ptlineitem":
                      break;
                    case "countofsameitems":
                      break;
                    case "item":
                      break;
                    case "itemtype":
                      break;
                    case "ptsource":
                      break;
                    case "cacheindex":
                      break;
                    case "consolidationreference":
                      break;
                    case "filename":
                      break;
                    case "reference":
                      break;
                    case "nocolumngrand":
                      break;
                    case "norowgrand":
                      break;
                    case "blanklineafteritems":
                      break;
                    case "hidden":
                      break;
                    case "subtotal":
                      break;
                    case "basefield":
                      break;
                    case "mapchilditems":
                      break;
                    case "function":
                      break;
                    case "refreshonfileopen":
                      break;
                    case "printsettitles":
                      break;
                    case "mergelabels":
                      break;
                    case "defaultversion":
                      break;
                    case "refreshname":
                      break;
                    case "refreshdate":
                      break;
                    case "refreshdatecopy":
                      break;
                    case "versionlastrefresh":
                      break;
                    case "versionlastupdate":
                      break;
                    case "versionupdateablemin":
                      break;
                    case "versionrefreshablemin":
                      break;
                    case "calculation":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "pagebreaks":
                  switch (Rn[3]) {
                    case "colbreaks":
                      break;
                    case "colbreak":
                      break;
                    case "rowbreaks":
                      break;
                    case "rowbreak":
                      break;
                    case "colstart":
                      break;
                    case "colend":
                      break;
                    case "rowend":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "autofilter":
                  switch (Rn[3]) {
                    case "autofiltercolumn":
                      break;
                    case "autofiltercondition":
                      break;
                    case "autofilterand":
                      break;
                    case "autofilteror":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "querytable":
                  switch (Rn[3]) {
                    case "id":
                      break;
                    case "autoformatfont":
                      break;
                    case "autoformatpattern":
                      break;
                    case "querysource":
                      break;
                    case "querytype":
                      break;
                    case "enableredirections":
                      break;
                    case "refreshedinxl9":
                      break;
                    case "urlstring":
                      break;
                    case "htmltables":
                      break;
                    case "connection":
                      break;
                    case "commandtext":
                      break;
                    case "refreshinfo":
                      break;
                    case "notitles":
                      break;
                    case "nextid":
                      break;
                    case "columninfo":
                      break;
                    case "overwritecells":
                      break;
                    case "donotpromptforfile":
                      break;
                    case "textwizardsettings":
                      break;
                    case "source":
                      break;
                    case "number":
                      break;
                    case "decimal":
                      break;
                    case "thousandseparator":
                      break;
                    case "trailingminusnumbers":
                      break;
                    case "formatsettings":
                      break;
                    case "fieldtype":
                      break;
                    case "delimiters":
                      break;
                    case "tab":
                      break;
                    case "comma":
                      break;
                    case "autoformatname":
                      break;
                    case "versionlastedit":
                      break;
                    case "versionlastrefresh":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "datavalidation":
                  switch (Rn[3]) {
                    case "range":
                      break;
                    case "type":
                      break;
                    case "min":
                      break;
                    case "max":
                      break;
                    case "sort":
                      break;
                    case "descending":
                      break;
                    case "order":
                      break;
                    case "casesensitive":
                      break;
                    case "value":
                      break;
                    case "errorstyle":
                      break;
                    case "errormessage":
                      break;
                    case "errortitle":
                      break;
                    case "inputmessage":
                      break;
                    case "inputtitle":
                      break;
                    case "combohide":
                      break;
                    case "inputhide":
                      break;
                    case "condition":
                      break;
                    case "qualifier":
                      break;
                    case "useblank":
                      break;
                    case "value1":
                      break;
                    case "value2":
                      break;
                    case "format":
                      break;
                    case "cellrangelist":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "sorting":
                case "conditionalformatting":
                  switch (Rn[3]) {
                    case "range":
                      break;
                    case "type":
                      break;
                    case "min":
                      break;
                    case "max":
                      break;
                    case "sort":
                      break;
                    case "descending":
                      break;
                    case "order":
                      break;
                    case "casesensitive":
                      break;
                    case "value":
                      break;
                    case "errorstyle":
                      break;
                    case "errormessage":
                      break;
                    case "errortitle":
                      break;
                    case "cellrangelist":
                      break;
                    case "inputmessage":
                      break;
                    case "inputtitle":
                      break;
                    case "combohide":
                      break;
                    case "inputhide":
                      break;
                    case "condition":
                      break;
                    case "qualifier":
                      break;
                    case "useblank":
                      break;
                    case "value1":
                      break;
                    case "value2":
                      break;
                    case "format":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "mapinfo":
                case "schema":
                case "data":
                  switch (Rn[3]) {
                    case "map":
                      break;
                    case "entry":
                      break;
                    case "range":
                      break;
                    case "xpath":
                      break;
                    case "field":
                      break;
                    case "xsdtype":
                      break;
                    case "filteron":
                      break;
                    case "aggregate":
                      break;
                    case "elementtype":
                      break;
                    case "attributetype":
                      break;
                    case "schema":
                    case "element":
                    case "complextype":
                    case "datatype":
                    case "all":
                    case "attribute":
                    case "extends":
                      break;
                    case "row":
                      break;
                    default:
                      seen = false;
                  }
                  break;
                case "smarttags":
                  break;
                default:
                  seen = false;
                  break;
              }
              if (seen)
                break;
              if (Rn[3].match(/!\[CDATA/))
                break;
              if (!state[state.length - 1][1])
                throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
              if (state[state.length - 1][0] === "customdocumentproperties") {
                if (Rn[0].slice(-2) === "/>")
                  break;
                else if (Rn[1] === "/")
                  xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));
                else {
                  cp = Rn;
                  pidx = Rn.index + Rn[0].length;
                }
                break;
              }
              if (opts.WTF)
                throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
          }
        var out = {};
        if (!opts.bookSheets && !opts.bookProps)
          out.Sheets = sheets;
        out.SheetNames = sheetnames;
        out.Workbook = Workbook;
        out.SSF = dup(table_fmt);
        out.Props = Props;
        out.Custprops = Custprops;
        return out;
      }
      function parse_xlml(data, opts) {
        fix_read_opts(opts = opts || {});
        switch (opts.type || "base64") {
          case "base64":
            return parse_xlml_xml(Base64_decode(data), opts);
          case "binary":
          case "buffer":
          case "file":
            return parse_xlml_xml(data, opts);
          case "array":
            return parse_xlml_xml(a2s(data), opts);
        }
      }
      function write_props_xlml(wb, opts) {
        var o = [];
        if (wb.Props)
          o.push(xlml_write_docprops(wb.Props, opts));
        if (wb.Custprops)
          o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));
        return o.join("");
      }
      function write_wb_xlml() {
        return "";
      }
      function write_sty_xlml(wb, opts) {
        var styles = ['<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'];
        opts.cellXfs.forEach(function(xf, id) {
          var payload = [];
          payload.push(writextag("NumberFormat", null, { "ss:Format": escapexml(table_fmt[xf.numFmtId]) }));
          var o = { "ss:ID": "s" + (21 + id) };
          styles.push(writextag("Style", payload.join(""), o));
        });
        return writextag("Styles", styles.join(""));
      }
      function write_name_xlml(n) {
        return writextag("NamedRange", null, { "ss:Name": n.Name, "ss:RefersTo": "=" + a1_to_rc(n.Ref, { r: 0, c: 0 }) });
      }
      function write_names_xlml(wb) {
        if (!((wb || {}).Workbook || {}).Names)
          return "";
        var names = wb.Workbook.Names;
        var out = [];
        for (var i = 0; i < names.length; ++i) {
          var n = names[i];
          if (n.Sheet != null)
            continue;
          if (n.Name.match(/^_xlfn\./))
            continue;
          out.push(write_name_xlml(n));
        }
        return writextag("Names", out.join(""));
      }
      function write_ws_xlml_names(ws, opts, idx, wb) {
        if (!ws)
          return "";
        if (!((wb || {}).Workbook || {}).Names)
          return "";
        var names = wb.Workbook.Names;
        var out = [];
        for (var i = 0; i < names.length; ++i) {
          var n = names[i];
          if (n.Sheet != idx)
            continue;
          if (n.Name.match(/^_xlfn\./))
            continue;
          out.push(write_name_xlml(n));
        }
        return out.join("");
      }
      function write_ws_xlml_wsopts(ws, opts, idx, wb) {
        if (!ws)
          return "";
        var o = [];
        if (ws["!margins"]) {
          o.push("<PageSetup>");
          if (ws["!margins"].header)
            o.push(writextag("Header", null, { "x:Margin": ws["!margins"].header }));
          if (ws["!margins"].footer)
            o.push(writextag("Footer", null, { "x:Margin": ws["!margins"].footer }));
          o.push(writextag("PageMargins", null, {
            "x:Bottom": ws["!margins"].bottom || "0.75",
            "x:Left": ws["!margins"].left || "0.7",
            "x:Right": ws["!margins"].right || "0.7",
            "x:Top": ws["!margins"].top || "0.75"
          }));
          o.push("</PageSetup>");
        }
        if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
          if (wb.Workbook.Sheets[idx].Hidden)
            o.push(writextag("Visible", wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden", {}));
          else {
            for (var i = 0; i < idx; ++i)
              if (wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden)
                break;
            if (i == idx)
              o.push("<Selected/>");
          }
        }
        if (((((wb || {}).Workbook || {}).Views || [])[0] || {}).RTL)
          o.push("<DisplayRightToLeft/>");
        if (ws["!protect"]) {
          o.push(writetag("ProtectContents", "True"));
          if (ws["!protect"].objects)
            o.push(writetag("ProtectObjects", "True"));
          if (ws["!protect"].scenarios)
            o.push(writetag("ProtectScenarios", "True"));
          if (ws["!protect"].selectLockedCells != null && !ws["!protect"].selectLockedCells)
            o.push(writetag("EnableSelection", "NoSelection"));
          else if (ws["!protect"].selectUnlockedCells != null && !ws["!protect"].selectUnlockedCells)
            o.push(writetag("EnableSelection", "UnlockedCells"));
          [
            ["formatCells", "AllowFormatCells"],
            ["formatColumns", "AllowSizeCols"],
            ["formatRows", "AllowSizeRows"],
            ["insertColumns", "AllowInsertCols"],
            ["insertRows", "AllowInsertRows"],
            ["insertHyperlinks", "AllowInsertHyperlinks"],
            ["deleteColumns", "AllowDeleteCols"],
            ["deleteRows", "AllowDeleteRows"],
            ["sort", "AllowSort"],
            ["autoFilter", "AllowFilter"],
            ["pivotTables", "AllowUsePivotTables"]
          ].forEach(function(x) {
            if (ws["!protect"][x[0]])
              o.push("<" + x[1] + "/>");
          });
        }
        if (o.length == 0)
          return "";
        return writextag("WorksheetOptions", o.join(""), { xmlns: XLMLNS.x });
      }
      function write_ws_xlml_comment(comments) {
        return comments.map(function(c) {
          var t = xlml_unfixstr(c.t || "");
          var d = writextag("ss:Data", t, { "xmlns": "http://www.w3.org/TR/REC-html40" });
          return writextag("Comment", d, { "ss:Author": c.a });
        }).join("");
      }
      function write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr) {
        if (!cell || cell.v == void 0 && cell.f == void 0)
          return "";
        var attr = {};
        if (cell.f)
          attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr));
        if (cell.F && cell.F.slice(0, ref.length) == ref) {
          var end = decode_cell(cell.F.slice(ref.length + 1));
          attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]");
        }
        if (cell.l && cell.l.Target) {
          attr["ss:HRef"] = escapexml(cell.l.Target);
          if (cell.l.Tooltip)
            attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip);
        }
        if (ws["!merges"]) {
          var marr = ws["!merges"];
          for (var mi = 0; mi != marr.length; ++mi) {
            if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r)
              continue;
            if (marr[mi].e.c > marr[mi].s.c)
              attr["ss:MergeAcross"] = marr[mi].e.c - marr[mi].s.c;
            if (marr[mi].e.r > marr[mi].s.r)
              attr["ss:MergeDown"] = marr[mi].e.r - marr[mi].s.r;
          }
        }
        var t = "", p = "";
        switch (cell.t) {
          case "z":
            if (!opts.sheetStubs)
              return "";
            break;
          case "n":
            t = "Number";
            p = String(cell.v);
            break;
          case "b":
            t = "Boolean";
            p = cell.v ? "1" : "0";
            break;
          case "e":
            t = "Error";
            p = BErr[cell.v];
            break;
          case "d":
            t = "DateTime";
            p = new Date(cell.v).toISOString();
            if (cell.z == null)
              cell.z = cell.z || table_fmt[14];
            break;
          case "s":
            t = "String";
            p = escapexlml(cell.v || "");
            break;
        }
        var os = get_cell_style(opts.cellXfs, cell, opts);
        attr["ss:StyleID"] = "s" + (21 + os);
        attr["ss:Index"] = addr.c + 1;
        var _v = cell.v != null ? p : "";
        var m = cell.t == "z" ? "" : '<Data ss:Type="' + t + '">' + _v + "</Data>";
        if ((cell.c || []).length > 0)
          m += write_ws_xlml_comment(cell.c);
        return writextag("Cell", m, attr);
      }
      function write_ws_xlml_row(R, row) {
        var o = '<Row ss:Index="' + (R + 1) + '"';
        if (row) {
          if (row.hpt && !row.hpx)
            row.hpx = pt2px(row.hpt);
          if (row.hpx)
            o += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"';
          if (row.hidden)
            o += ' ss:Hidden="1"';
        }
        return o + ">";
      }
      function write_ws_xlml_table(ws, opts, idx, wb) {
        if (!ws["!ref"])
          return "";
        var range = safe_decode_range(ws["!ref"]);
        var marr = ws["!merges"] || [], mi = 0;
        var o = [];
        if (ws["!cols"])
          ws["!cols"].forEach(function(n, i) {
            process_col(n);
            var w = !!n.width;
            var p = col_obj_w(i, n);
            var k = { "ss:Index": i + 1 };
            if (w)
              k["ss:Width"] = width2px(p.width);
            if (n.hidden)
              k["ss:Hidden"] = "1";
            o.push(writextag("Column", null, k));
          });
        var dense = Array.isArray(ws);
        for (var R = range.s.r; R <= range.e.r; ++R) {
          var row = [write_ws_xlml_row(R, (ws["!rows"] || [])[R])];
          for (var C = range.s.c; C <= range.e.c; ++C) {
            var skip = false;
            for (mi = 0; mi != marr.length; ++mi) {
              if (marr[mi].s.c > C)
                continue;
              if (marr[mi].s.r > R)
                continue;
              if (marr[mi].e.c < C)
                continue;
              if (marr[mi].e.r < R)
                continue;
              if (marr[mi].s.c != C || marr[mi].s.r != R)
                skip = true;
              break;
            }
            if (skip)
              continue;
            var addr = { r: R, c: C };
            var ref = encode_cell(addr), cell = dense ? (ws[R] || [])[C] : ws[ref];
            row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
          }
          row.push("</Row>");
          if (row.length > 2)
            o.push(row.join(""));
        }
        return o.join("");
      }
      function write_ws_xlml(idx, opts, wb) {
        var o = [];
        var s = wb.SheetNames[idx];
        var ws = wb.Sheets[s];
        var t = ws ? write_ws_xlml_names(ws, opts, idx, wb) : "";
        if (t.length > 0)
          o.push("<Names>" + t + "</Names>");
        t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : "";
        if (t.length > 0)
          o.push("<Table>" + t + "</Table>");
        o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));
        return o.join("");
      }
      function write_xlml(wb, opts) {
        if (!opts)
          opts = {};
        if (!wb.SSF)
          wb.SSF = dup(table_fmt);
        if (wb.SSF) {
          make_ssf();
          SSF_load_table(wb.SSF);
          opts.revssf = evert_num(wb.SSF);
          opts.revssf[wb.SSF[65535]] = 0;
          opts.ssf = wb.SSF;
          opts.cellXfs = [];
          get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
        }
        var d = [];
        d.push(write_props_xlml(wb, opts));
        d.push(write_wb_xlml(wb, opts));
        d.push("");
        d.push("");
        for (var i = 0; i < wb.SheetNames.length; ++i)
          d.push(writextag("Worksheet", write_ws_xlml(i, opts, wb), { "ss:Name": escapexml(wb.SheetNames[i]) }));
        d[2] = write_sty_xlml(wb, opts);
        d[3] = write_names_xlml(wb, opts);
        return XML_HEADER + writextag("Workbook", d.join(""), {
          "xmlns": XLMLNS.ss,
          "xmlns:o": XLMLNS.o,
          "xmlns:x": XLMLNS.x,
          "xmlns:ss": XLMLNS.ss,
          "xmlns:dt": XLMLNS.dt,
          "xmlns:html": XLMLNS.html
        });
      }
      function parse_compobj(obj) {
        var v = {};
        var o = obj.content;
        o.l = 28;
        v.AnsiUserType = o.read_shift(0, "lpstr-ansi");
        v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);
        if (o.length - o.l <= 4)
          return v;
        var m = o.read_shift(4);
        if (m == 0 || m > 40)
          return v;
        o.l -= 4;
        v.Reserved1 = o.read_shift(0, "lpstr-ansi");
        if (o.length - o.l <= 4)
          return v;
        m = o.read_shift(4);
        if (m !== 1907505652)
          return v;
        v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);
        m = o.read_shift(4);
        if (m == 0 || m > 40)
          return v;
        o.l -= 4;
        v.Reserved2 = o.read_shift(0, "lpwstr");
      }
      var CONTINUE_RT = [60, 1084, 2066, 2165, 2175];
      function slurp(RecordType, R, blob, length, opts) {
        var l = length;
        var bufs = [];
        var d = blob.slice(blob.l, blob.l + l);
        if (opts && opts.enc && opts.enc.insitu && d.length > 0)
          switch (RecordType) {
            case 9:
            case 521:
            case 1033:
            case 2057:
            case 47:
            case 405:
            case 225:
            case 406:
            case 312:
            case 404:
            case 10:
              break;
            case 133:
              break;
            default:
              opts.enc.insitu(d);
          }
        bufs.push(d);
        blob.l += l;
        var nextrt = __readUInt16LE(blob, blob.l), next = XLSRecordEnum[nextrt];
        var start = 0;
        while (next != null && CONTINUE_RT.indexOf(nextrt) > -1) {
          l = __readUInt16LE(blob, blob.l + 2);
          start = blob.l + 4;
          if (nextrt == 2066)
            start += 4;
          else if (nextrt == 2165 || nextrt == 2175) {
            start += 12;
          }
          d = blob.slice(start, blob.l + 4 + l);
          bufs.push(d);
          blob.l += 4 + l;
          next = XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)];
        }
        var b = bconcat(bufs);
        prep_blob(b, 0);
        var ll = 0;
        b.lens = [];
        for (var j = 0; j < bufs.length; ++j) {
          b.lens.push(ll);
          ll += bufs[j].length;
        }
        if (b.length < length)
          throw "XLS Record 0x" + RecordType.toString(16) + " Truncated: " + b.length + " < " + length;
        return R.f(b, b.length, opts);
      }
      function safe_format_xf(p, opts, date1904) {
        if (p.t === "z")
          return;
        if (!p.XF)
          return;
        var fmtid = 0;
        try {
          fmtid = p.z || p.XF.numFmtId || 0;
          if (opts.cellNF)
            p.z = table_fmt[fmtid];
        } catch (e) {
          if (opts.WTF)
            throw e;
        }
        if (!opts || opts.cellText !== false)
          try {
            if (p.t === "e") {
              p.w = p.w || BErr[p.v];
            } else if (fmtid === 0 || fmtid == "General") {
              if (p.t === "n") {
                if ((p.v | 0) === p.v)
                  p.w = p.v.toString(10);
                else
                  p.w = SSF_general_num(p.v);
              } else
                p.w = SSF_general(p.v);
            } else
              p.w = SSF_format(fmtid, p.v, { date1904: !!date1904, dateNF: opts && opts.dateNF });
          } catch (e) {
            if (opts.WTF)
              throw e;
          }
        if (opts.cellDates && fmtid && p.t == "n" && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {
          var _d = SSF_parse_date_code(p.v);
          if (_d) {
            p.t = "d";
            p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
          }
        }
      }
      function make_cell(val, ixfe, t) {
        return { v: val, ixfe, t };
      }
      function parse_workbook(blob, options) {
        var wb = { opts: {} };
        var Sheets = {};
        if (DENSE != null && options.dense == null)
          options.dense = DENSE;
        var out = options.dense ? [] : {};
        var Directory = {};
        var range = {};
        var last_formula = null;
        var sst = [];
        var cur_sheet = "";
        var Preamble = {};
        var lastcell, last_cell = "", cc, cmnt, rngC, rngR;
        var sharedf = {};
        var arrayf = [];
        var temp_val;
        var country;
        var XFs = [];
        var palette = [];
        var Workbook = { Sheets: [], WBProps: { date1904: false }, Views: [{}] }, wsprops = {};
        var get_rgb = function getrgb(icv) {
          if (icv < 8)
            return XLSIcv[icv];
          if (icv < 64)
            return palette[icv - 8] || XLSIcv[icv];
          return XLSIcv[icv];
        };
        var process_cell_style = function pcs(cell, line, options2) {
          var xfd = line.XF.data;
          if (!xfd || !xfd.patternType || !options2 || !options2.cellStyles)
            return;
          line.s = {};
          line.s.patternType = xfd.patternType;
          var t;
          if (t = rgb2Hex(get_rgb(xfd.icvFore))) {
            line.s.fgColor = { rgb: t };
          }
          if (t = rgb2Hex(get_rgb(xfd.icvBack))) {
            line.s.bgColor = { rgb: t };
          }
        };
        var addcell = function addcell2(cell, line, options2) {
          if (file_depth > 1)
            return;
          if (options2.sheetRows && cell.r >= options2.sheetRows)
            return;
          if (options2.cellStyles && line.XF && line.XF.data)
            process_cell_style(cell, line, options2);
          delete line.ixfe;
          delete line.XF;
          lastcell = cell;
          last_cell = encode_cell(cell);
          if (!range || !range.s || !range.e)
            range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
          if (cell.r < range.s.r)
            range.s.r = cell.r;
          if (cell.c < range.s.c)
            range.s.c = cell.c;
          if (cell.r + 1 > range.e.r)
            range.e.r = cell.r + 1;
          if (cell.c + 1 > range.e.c)
            range.e.c = cell.c + 1;
          if (options2.cellFormula && line.f) {
            for (var afi = 0; afi < arrayf.length; ++afi) {
              if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r)
                continue;
              if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r)
                continue;
              line.F = encode_range(arrayf[afi][0]);
              if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r)
                delete line.f;
              if (line.f)
                line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
              break;
            }
          }
          {
            if (options2.dense) {
              if (!out[cell.r])
                out[cell.r] = [];
              out[cell.r][cell.c] = line;
            } else
              out[last_cell] = line;
          }
        };
        var opts = {
          enc: false,
          sbcch: 0,
          snames: [],
          sharedf,
          arrayf,
          rrtabid: [],
          lastuser: "",
          biff: 8,
          codepage: 0,
          winlocked: 0,
          cellStyles: !!options && !!options.cellStyles,
          WTF: !!options && !!options.wtf
        };
        if (options.password)
          opts.password = options.password;
        var themes;
        var merges = [];
        var objects = [];
        var colinfo = [], rowinfo = [];
        var seencol = false;
        var supbooks = [];
        supbooks.SheetNames = opts.snames;
        supbooks.sharedf = opts.sharedf;
        supbooks.arrayf = opts.arrayf;
        supbooks.names = [];
        supbooks.XTI = [];
        var last_RT = 0;
        var file_depth = 0;
        var BIFF2Fmt = 0, BIFF2FmtTable = [];
        var FilterDatabases = [];
        var last_lbl;
        opts.codepage = 1200;
        set_cp(1200);
        var seen_codepage = false;
        while (blob.l < blob.length - 1) {
          var s = blob.l;
          var RecordType = blob.read_shift(2);
          if (RecordType === 0 && last_RT === 10)
            break;
          var length = blob.l === blob.length ? 0 : blob.read_shift(2);
          var R = XLSRecordEnum[RecordType];
          if (R && R.f) {
            if (options.bookSheets) {
              if (last_RT === 133 && RecordType !== 133)
                break;
            }
            last_RT = RecordType;
            if (R.r === 2 || R.r == 12) {
              var rt = blob.read_shift(2);
              length -= 2;
              if (!opts.enc && rt !== RecordType && ((rt & 255) << 8 | rt >> 8) !== RecordType)
                throw new Error("rt mismatch: " + rt + "!=" + RecordType);
              if (R.r == 12) {
                blob.l += 10;
                length -= 10;
              }
            }
            var val = {};
            if (RecordType === 10)
              val = R.f(blob, length, opts);
            else
              val = slurp(RecordType, R, blob, length, opts);
            if (file_depth == 0 && [9, 521, 1033, 2057].indexOf(last_RT) === -1)
              continue;
            switch (RecordType) {
              case 34:
                wb.opts.Date1904 = Workbook.WBProps.date1904 = val;
                break;
              case 134:
                wb.opts.WriteProtect = true;
                break;
              case 47:
                if (!opts.enc)
                  blob.l = 0;
                opts.enc = val;
                if (!options.password)
                  throw new Error("File is password-protected");
                if (val.valid == null)
                  throw new Error("Encryption scheme unsupported");
                if (!val.valid)
                  throw new Error("Password is incorrect");
                break;
              case 92:
                opts.lastuser = val;
                break;
              case 66:
                var cpval = Number(val);
                switch (cpval) {
                  case 21010:
                    cpval = 1200;
                    break;
                  case 32768:
                    cpval = 1e4;
                    break;
                  case 32769:
                    cpval = 1252;
                    break;
                }
                set_cp(opts.codepage = cpval);
                seen_codepage = true;
                break;
              case 317:
                opts.rrtabid = val;
                break;
              case 25:
                opts.winlocked = val;
                break;
              case 439:
                wb.opts["RefreshAll"] = val;
                break;
              case 12:
                wb.opts["CalcCount"] = val;
                break;
              case 16:
                wb.opts["CalcDelta"] = val;
                break;
              case 17:
                wb.opts["CalcIter"] = val;
                break;
              case 13:
                wb.opts["CalcMode"] = val;
                break;
              case 14:
                wb.opts["CalcPrecision"] = val;
                break;
              case 95:
                wb.opts["CalcSaveRecalc"] = val;
                break;
              case 15:
                opts.CalcRefMode = val;
                break;
              case 2211:
                wb.opts.FullCalc = val;
                break;
              case 129:
                if (val.fDialog)
                  out["!type"] = "dialog";
                if (!val.fBelow)
                  (out["!outline"] || (out["!outline"] = {})).above = true;
                if (!val.fRight)
                  (out["!outline"] || (out["!outline"] = {})).left = true;
                break;
              case 224:
                XFs.push(val);
                break;
              case 430:
                supbooks.push([val]);
                supbooks[supbooks.length - 1].XTI = [];
                break;
              case 35:
              case 547:
                supbooks[supbooks.length - 1].push(val);
                break;
              case 24:
              case 536:
                last_lbl = {
                  Name: val.Name,
                  Ref: stringify_formula(val.rgce, range, null, supbooks, opts)
                };
                if (val.itab > 0)
                  last_lbl.Sheet = val.itab - 1;
                supbooks.names.push(last_lbl);
                if (!supbooks[0]) {
                  supbooks[0] = [];
                  supbooks[0].XTI = [];
                }
                supbooks[supbooks.length - 1].push(val);
                if (val.Name == "_xlnm._FilterDatabase" && val.itab > 0) {
                  if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == "PtgArea3d")
                    FilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) };
                }
                break;
              case 22:
                opts.ExternCount = val;
                break;
              case 23:
                if (supbooks.length == 0) {
                  supbooks[0] = [];
                  supbooks[0].XTI = [];
                }
                supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
                supbooks.XTI = supbooks.XTI.concat(val);
                break;
              case 2196:
                if (opts.biff < 8)
                  break;
                if (last_lbl != null)
                  last_lbl.Comment = val[1];
                break;
              case 18:
                out["!protect"] = val;
                break;
              case 19:
                if (val !== 0 && opts.WTF)
                  console.error("Password verifier: " + val);
                break;
              case 133:
                {
                  Directory[val.pos] = val;
                  opts.snames.push(val.name);
                }
                break;
              case 10:
                {
                  if (--file_depth)
                    break;
                  if (range.e) {
                    if (range.e.r > 0 && range.e.c > 0) {
                      range.e.r--;
                      range.e.c--;
                      out["!ref"] = encode_range(range);
                      if (options.sheetRows && options.sheetRows <= range.e.r) {
                        var tmpri = range.e.r;
                        range.e.r = options.sheetRows - 1;
                        out["!fullref"] = out["!ref"];
                        out["!ref"] = encode_range(range);
                        range.e.r = tmpri;
                      }
                      range.e.r++;
                      range.e.c++;
                    }
                    if (merges.length > 0)
                      out["!merges"] = merges;
                    if (objects.length > 0)
                      out["!objects"] = objects;
                    if (colinfo.length > 0)
                      out["!cols"] = colinfo;
                    if (rowinfo.length > 0)
                      out["!rows"] = rowinfo;
                    Workbook.Sheets.push(wsprops);
                  }
                  if (cur_sheet === "")
                    Preamble = out;
                  else
                    Sheets[cur_sheet] = out;
                  out = options.dense ? [] : {};
                }
                break;
              case 9:
              case 521:
              case 1033:
              case 2057:
                {
                  if (opts.biff === 8)
                    opts.biff = {
                      9: 2,
                      521: 3,
                      1033: 4
                    }[RecordType] || {
                      512: 2,
                      768: 3,
                      1024: 4,
                      1280: 5,
                      1536: 8,
                      2: 2,
                      7: 2
                    }[val.BIFFVer] || 8;
                  opts.biffguess = val.BIFFVer == 0;
                  if (val.BIFFVer == 0 && val.dt == 4096) {
                    opts.biff = 5;
                    seen_codepage = true;
                    set_cp(opts.codepage = 28591);
                  }
                  if (opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16)
                    opts.biff = 2;
                  if (file_depth++)
                    break;
                  out = options.dense ? [] : {};
                  if (opts.biff < 8 && !seen_codepage) {
                    seen_codepage = true;
                    set_cp(opts.codepage = options.codepage || 1252);
                  }
                  if (opts.biff < 5 || val.BIFFVer == 0 && val.dt == 4096) {
                    if (cur_sheet === "")
                      cur_sheet = "Sheet1";
                    range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                    var fakebs8 = { pos: blob.l - length, name: cur_sheet };
                    Directory[fakebs8.pos] = fakebs8;
                    opts.snames.push(cur_sheet);
                  } else
                    cur_sheet = (Directory[s] || { name: "" }).name;
                  if (val.dt == 32)
                    out["!type"] = "chart";
                  if (val.dt == 64)
                    out["!type"] = "macro";
                  merges = [];
                  objects = [];
                  opts.arrayf = arrayf = [];
                  colinfo = [];
                  rowinfo = [];
                  seencol = false;
                  wsprops = { Hidden: (Directory[s] || { hs: 0 }).hs, name: cur_sheet };
                }
                break;
              case 515:
              case 3:
              case 2:
                {
                  if (out["!type"] == "chart") {
                    if (options.dense ? (out[val.r] || [])[val.c] : out[encode_cell({ c: val.c, r: val.r })])
                      ++val.c;
                  }
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe] || {}, v: val.val, t: "n" };
                  if (BIFF2Fmt > 0)
                    temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case 5:
              case 517:
                {
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.val, t: val.t };
                  if (BIFF2Fmt > 0)
                    temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case 638:
                {
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.rknum, t: "n" };
                  if (BIFF2Fmt > 0)
                    temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case 189:
                {
                  for (var j = val.c; j <= val.C; ++j) {
                    var ixfe = val.rkrec[j - val.c][0];
                    temp_val = { ixfe, XF: XFs[ixfe], v: val.rkrec[j - val.c][1], t: "n" };
                    if (BIFF2Fmt > 0)
                      temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({ c: j, r: val.r }, temp_val, options);
                  }
                }
                break;
              case 6:
              case 518:
              case 1030:
                {
                  if (val.val == "String") {
                    last_formula = val;
                    break;
                  }
                  temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
                  temp_val.XF = XFs[temp_val.ixfe];
                  if (options.cellFormula) {
                    var _f = val.formula;
                    if (_f && _f[0] && _f[0][0] && _f[0][0][0] == "PtgExp") {
                      var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
                      var _fe = encode_cell({ r: _fr, c: _fc });
                      if (sharedf[_fe])
                        temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
                      else
                        temp_val.F = ((options.dense ? (out[_fr] || [])[_fc] : out[_fe]) || {}).F;
                    } else
                      temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
                  }
                  if (BIFF2Fmt > 0)
                    temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell(val.cell, temp_val, options);
                  last_formula = val;
                }
                break;
              case 7:
              case 519:
                {
                  if (last_formula) {
                    last_formula.val = val;
                    temp_val = make_cell(val, last_formula.cell.ixfe, "s");
                    temp_val.XF = XFs[temp_val.ixfe];
                    if (options.cellFormula) {
                      temp_val.f = "" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
                    }
                    if (BIFF2Fmt > 0)
                      temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell(last_formula.cell, temp_val, options);
                    last_formula = null;
                  } else
                    throw new Error("String record expects Formula");
                }
                break;
              case 33:
              case 545:
                {
                  arrayf.push(val);
                  var _arraystart = encode_cell(val[0].s);
                  cc = options.dense ? (out[val[0].s.r] || [])[val[0].s.c] : out[_arraystart];
                  if (options.cellFormula && cc) {
                    if (!last_formula)
                      break;
                    if (!_arraystart || !cc)
                      break;
                    cc.f = "" + stringify_formula(val[1], range, val[0], supbooks, opts);
                    cc.F = encode_range(val[0]);
                  }
                }
                break;
              case 1212:
                {
                  if (!options.cellFormula)
                    break;
                  if (last_cell) {
                    if (!last_formula)
                      break;
                    sharedf[encode_cell(last_formula.cell)] = val[0];
                    cc = options.dense ? (out[last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
                    (cc || {}).f = "" + stringify_formula(val[0], range, lastcell, supbooks, opts);
                  }
                }
                break;
              case 253:
                temp_val = make_cell(sst[val.isst].t, val.ixfe, "s");
                if (sst[val.isst].h)
                  temp_val.h = sst[val.isst].h;
                temp_val.XF = XFs[temp_val.ixfe];
                if (BIFF2Fmt > 0)
                  temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell({ c: val.c, r: val.r }, temp_val, options);
                break;
              case 513:
                if (options.sheetStubs) {
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], t: "z" };
                  if (BIFF2Fmt > 0)
                    temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case 190:
                if (options.sheetStubs) {
                  for (var _j = val.c; _j <= val.C; ++_j) {
                    var _ixfe = val.ixfe[_j - val.c];
                    temp_val = { ixfe: _ixfe, XF: XFs[_ixfe], t: "z" };
                    if (BIFF2Fmt > 0)
                      temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({ c: _j, r: val.r }, temp_val, options);
                  }
                }
                break;
              case 214:
              case 516:
              case 4:
                temp_val = make_cell(val.val, val.ixfe, "s");
                temp_val.XF = XFs[temp_val.ixfe];
                if (BIFF2Fmt > 0)
                  temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell({ c: val.c, r: val.r }, temp_val, options);
                break;
              case 0:
              case 512:
                {
                  if (file_depth === 1)
                    range = val;
                }
                break;
              case 252:
                {
                  sst = val;
                }
                break;
              case 1054:
                {
                  if (opts.biff == 4) {
                    BIFF2FmtTable[BIFF2Fmt++] = val[1];
                    for (var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx)
                      if (table_fmt[b4idx] == val[1])
                        break;
                    if (b4idx >= 163)
                      SSF_load(val[1], BIFF2Fmt + 163);
                  } else
                    SSF_load(val[1], val[0]);
                }
                break;
              case 30:
                {
                  BIFF2FmtTable[BIFF2Fmt++] = val;
                  for (var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx)
                    if (table_fmt[b2idx] == val)
                      break;
                  if (b2idx >= 163)
                    SSF_load(val, BIFF2Fmt + 163);
                }
                break;
              case 229:
                merges = merges.concat(val);
                break;
              case 93:
                objects[val.cmo[0]] = opts.lastobj = val;
                break;
              case 438:
                opts.lastobj.TxO = val;
                break;
              case 127:
                opts.lastobj.ImData = val;
                break;
              case 440:
                {
                  for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
                    for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                      cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                      if (cc)
                        cc.l = val[1];
                    }
                }
                break;
              case 2048:
                {
                  for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
                    for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                      cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                      if (cc && cc.l)
                        cc.l.Tooltip = val[1];
                    }
                }
                break;
              case 28:
                {
                  if (opts.biff <= 5 && opts.biff >= 2)
                    break;
                  cc = options.dense ? (out[val[0].r] || [])[val[0].c] : out[encode_cell(val[0])];
                  var noteobj = objects[val[2]];
                  if (!cc) {
                    if (options.dense) {
                      if (!out[val[0].r])
                        out[val[0].r] = [];
                      cc = out[val[0].r][val[0].c] = { t: "z" };
                    } else {
                      cc = out[encode_cell(val[0])] = { t: "z" };
                    }
                    range.e.r = Math.max(range.e.r, val[0].r);
                    range.s.r = Math.min(range.s.r, val[0].r);
                    range.e.c = Math.max(range.e.c, val[0].c);
                    range.s.c = Math.min(range.s.c, val[0].c);
                  }
                  if (!cc.c)
                    cc.c = [];
                  cmnt = { a: val[1], t: noteobj.TxO.t };
                  cc.c.push(cmnt);
                }
                break;
              case 2173:
                update_xfext(XFs[val.ixfe], val.ext);
                break;
              case 125:
                {
                  if (!opts.cellStyles)
                    break;
                  while (val.e >= val.s) {
                    colinfo[val.e--] = { width: val.w / 256, level: val.level || 0, hidden: !!(val.flags & 1) };
                    if (!seencol) {
                      seencol = true;
                      find_mdw_colw(val.w / 256);
                    }
                    process_col(colinfo[val.e + 1]);
                  }
                }
                break;
              case 520:
                {
                  var rowobj = {};
                  if (val.level != null) {
                    rowinfo[val.r] = rowobj;
                    rowobj.level = val.level;
                  }
                  if (val.hidden) {
                    rowinfo[val.r] = rowobj;
                    rowobj.hidden = true;
                  }
                  if (val.hpt) {
                    rowinfo[val.r] = rowobj;
                    rowobj.hpt = val.hpt;
                    rowobj.hpx = pt2px(val.hpt);
                  }
                }
                break;
              case 38:
              case 39:
              case 40:
              case 41:
                if (!out["!margins"])
                  default_margins(out["!margins"] = {});
                out["!margins"][{ 38: "left", 39: "right", 40: "top", 41: "bottom" }[RecordType]] = val;
                break;
              case 161:
                if (!out["!margins"])
                  default_margins(out["!margins"] = {});
                out["!margins"].header = val.header;
                out["!margins"].footer = val.footer;
                break;
              case 574:
                if (val.RTL)
                  Workbook.Views[0].RTL = true;
                break;
              case 146:
                palette = val;
                break;
              case 2198:
                themes = val;
                break;
              case 140:
                country = val;
                break;
              case 442:
                {
                  if (!cur_sheet)
                    Workbook.WBProps.CodeName = val || "ThisWorkbook";
                  else
                    wsprops.CodeName = val || wsprops.name;
                }
                break;
            }
          } else {
            if (!R)
              console.error("Missing Info for XLS Record 0x" + RecordType.toString(16));
            blob.l += length;
          }
        }
        wb.SheetNames = keys(Directory).sort(function(a, b) {
          return Number(a) - Number(b);
        }).map(function(x) {
          return Directory[x].name;
        });
        if (!options.bookSheets)
          wb.Sheets = Sheets;
        if (!wb.SheetNames.length && Preamble["!ref"]) {
          wb.SheetNames.push("Sheet1");
          if (wb.Sheets)
            wb.Sheets["Sheet1"] = Preamble;
        } else
          wb.Preamble = Preamble;
        if (wb.Sheets)
          FilterDatabases.forEach(function(r, i) {
            wb.Sheets[wb.SheetNames[i]]["!autofilter"] = r;
          });
        wb.Strings = sst;
        wb.SSF = dup(table_fmt);
        if (opts.enc)
          wb.Encryption = opts.enc;
        if (themes)
          wb.Themes = themes;
        wb.Metadata = {};
        if (country !== void 0)
          wb.Metadata.Country = country;
        if (supbooks.names.length > 0)
          Workbook.Names = supbooks.names;
        wb.Workbook = Workbook;
        return wb;
      }
      var PSCLSID = {
        SI: "e0859ff2f94f6810ab9108002b27b3d9",
        DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
        UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
      };
      function parse_xls_props(cfb, props, o) {
        var DSI = CFB.find(cfb, "/!DocumentSummaryInformation");
        if (DSI && DSI.size > 0)
          try {
            var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
            for (var d in DocSummary)
              props[d] = DocSummary[d];
          } catch (e) {
            if (o.WTF)
              throw e;
          }
        var SI = CFB.find(cfb, "/!SummaryInformation");
        if (SI && SI.size > 0)
          try {
            var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
            for (var s in Summary)
              if (props[s] == null)
                props[s] = Summary[s];
          } catch (e) {
            if (o.WTF)
              throw e;
          }
        if (props.HeadingPairs && props.TitlesOfParts) {
          load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);
          delete props.HeadingPairs;
          delete props.TitlesOfParts;
        }
      }
      function write_xls_props(wb, cfb) {
        var DSEntries = [], SEntries = [], CEntries = [];
        var i = 0, Keys;
        var DocSummaryRE = evert_key(DocSummaryPIDDSI, "n");
        var SummaryRE = evert_key(SummaryPIDSI, "n");
        if (wb.Props) {
          Keys = keys(wb.Props);
          for (i = 0; i < Keys.length; ++i)
            (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Props[Keys[i]]]);
        }
        if (wb.Custprops) {
          Keys = keys(wb.Custprops);
          for (i = 0; i < Keys.length; ++i)
            if (!Object.prototype.hasOwnProperty.call(wb.Props || {}, Keys[i]))
              (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i]) ? SEntries : CEntries).push([Keys[i], wb.Custprops[Keys[i]]]);
        }
        var CEntries2 = [];
        for (i = 0; i < CEntries.length; ++i) {
          if (XLSPSSkip.indexOf(CEntries[i][0]) > -1 || PseudoPropsPairs.indexOf(CEntries[i][0]) > -1)
            continue;
          if (CEntries[i][1] == null)
            continue;
          CEntries2.push(CEntries[i]);
        }
        if (SEntries.length)
          CFB.utils.cfb_add(cfb, "/SummaryInformation", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));
        if (DSEntries.length || CEntries2.length)
          CFB.utils.cfb_add(cfb, "/DocumentSummaryInformation", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));
      }
      function parse_xlscfb(cfb, options) {
        if (!options)
          options = {};
        fix_read_opts(options);
        reset_cp();
        if (options.codepage)
          set_ansi(options.codepage);
        var CompObj, WB;
        if (cfb.FullPaths) {
          if (CFB.find(cfb, "/encryption"))
            throw new Error("File is password-protected");
          CompObj = CFB.find(cfb, "!CompObj");
          WB = CFB.find(cfb, "/Workbook") || CFB.find(cfb, "/Book");
        } else {
          switch (options.type) {
            case "base64":
              cfb = s2a(Base64_decode(cfb));
              break;
            case "binary":
              cfb = s2a(cfb);
              break;
            case "buffer":
              break;
            case "array":
              if (!Array.isArray(cfb))
                cfb = Array.prototype.slice.call(cfb);
              break;
          }
          prep_blob(cfb, 0);
          WB = { content: cfb };
        }
        var WorkbookP;
        var _data;
        if (CompObj)
          parse_compobj(CompObj);
        if (options.bookProps && !options.bookSheets)
          WorkbookP = {};
        else {
          var T = has_buf ? "buffer" : "array";
          if (WB && WB.content)
            WorkbookP = parse_workbook(WB.content, options);
          else if ((_data = CFB.find(cfb, "PerfectOffice_MAIN")) && _data.content)
            WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
          else if ((_data = CFB.find(cfb, "NativeContent_MAIN")) && _data.content)
            WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
          else if ((_data = CFB.find(cfb, "MN0")) && _data.content)
            throw new Error("Unsupported Works 4 for Mac file");
          else
            throw new Error("Cannot find Workbook stream");
          if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, "/_VBA_PROJECT_CUR/VBA/dir"))
            WorkbookP.vbaraw = make_vba_xls(cfb);
        }
        var props = {};
        if (cfb.FullPaths)
          parse_xls_props(cfb, props, options);
        WorkbookP.Props = WorkbookP.Custprops = props;
        if (options.bookFiles)
          WorkbookP.cfb = cfb;
        return WorkbookP;
      }
      function write_xlscfb(wb, opts) {
        var o = opts || {};
        var cfb = CFB.utils.cfb_new({ root: "R" });
        var wbpath = "/Workbook";
        switch (o.bookType || "xls") {
          case "xls":
            o.bookType = "biff8";
          case "xla":
            if (!o.bookType)
              o.bookType = "xla";
          case "biff8":
            wbpath = "/Workbook";
            o.biff = 8;
            break;
          case "biff5":
            wbpath = "/Book";
            o.biff = 5;
            break;
          default:
            throw new Error("invalid type " + o.bookType + " for XLS CFB");
        }
        CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));
        if (o.biff == 8 && (wb.Props || wb.Custprops))
          write_xls_props(wb, cfb);
        if (o.biff == 8 && wb.vbaraw)
          fill_vba_xls(cfb, CFB.read(wb.vbaraw, { type: typeof wb.vbaraw == "string" ? "binary" : "buffer" }));
        return cfb;
      }
      var XLSBRecordEnum = {
        0: { f: parse_BrtRowHdr },
        1: { f: parse_BrtCellBlank },
        2: { f: parse_BrtCellRk },
        3: { f: parse_BrtCellError },
        4: { f: parse_BrtCellBool },
        5: { f: parse_BrtCellReal },
        6: { f: parse_BrtCellSt },
        7: { f: parse_BrtCellIsst },
        8: { f: parse_BrtFmlaString },
        9: { f: parse_BrtFmlaNum },
        10: { f: parse_BrtFmlaBool },
        11: { f: parse_BrtFmlaError },
        12: { f: parse_BrtShortBlank },
        13: { f: parse_BrtShortRk },
        14: { f: parse_BrtShortError },
        15: { f: parse_BrtShortBool },
        16: { f: parse_BrtShortReal },
        17: { f: parse_BrtShortSt },
        18: { f: parse_BrtShortIsst },
        19: { f: parse_RichStr },
        20: {},
        21: {},
        22: {},
        23: {},
        24: {},
        25: {},
        26: {},
        27: {},
        28: {},
        29: {},
        30: {},
        31: {},
        32: {},
        33: {},
        34: {},
        35: { T: 1 },
        36: { T: -1 },
        37: { T: 1 },
        38: { T: -1 },
        39: { f: parse_BrtName },
        40: {},
        42: {},
        43: { f: parse_BrtFont },
        44: { f: parse_BrtFmt },
        45: { f: parse_BrtFill },
        46: { f: parse_BrtBorder },
        47: { f: parse_BrtXF },
        48: {},
        49: { f: parse_Int32LE },
        50: {},
        51: { f: parse_BrtMdb },
        52: { T: 1 },
        53: { T: -1 },
        54: { T: 1 },
        55: { T: -1 },
        56: { T: 1 },
        57: { T: -1 },
        58: {},
        59: {},
        60: { f: parse_ColInfo },
        62: { f: parse_BrtCellRString },
        63: { f: parse_BrtCalcChainItem$ },
        64: { f: parse_BrtDVal },
        65: {},
        66: {},
        67: {},
        68: {},
        69: {},
        70: {},
        128: {},
        129: { T: 1 },
        130: { T: -1 },
        131: { T: 1, f: parsenoop, p: 0 },
        132: { T: -1 },
        133: { T: 1 },
        134: { T: -1 },
        135: { T: 1 },
        136: { T: -1 },
        137: { T: 1, f: parse_BrtBeginWsView },
        138: { T: -1 },
        139: { T: 1 },
        140: { T: -1 },
        141: { T: 1 },
        142: { T: -1 },
        143: { T: 1 },
        144: { T: -1 },
        145: { T: 1 },
        146: { T: -1 },
        147: { f: parse_BrtWsProp },
        148: { f: parse_BrtWsDim, p: 16 },
        151: { f: parse_BrtPane },
        152: {},
        153: { f: parse_BrtWbProp },
        154: {},
        155: {},
        156: { f: parse_BrtBundleSh },
        157: {},
        158: {},
        159: { T: 1, f: parse_BrtBeginSst },
        160: { T: -1 },
        161: { T: 1, f: parse_UncheckedRfX },
        162: { T: -1 },
        163: { T: 1 },
        164: { T: -1 },
        165: { T: 1 },
        166: { T: -1 },
        167: {},
        168: {},
        169: {},
        170: {},
        171: {},
        172: { T: 1 },
        173: { T: -1 },
        174: {},
        175: {},
        176: { f: parse_BrtMergeCell },
        177: { T: 1 },
        178: { T: -1 },
        179: { T: 1 },
        180: { T: -1 },
        181: { T: 1 },
        182: { T: -1 },
        183: { T: 1 },
        184: { T: -1 },
        185: { T: 1 },
        186: { T: -1 },
        187: { T: 1 },
        188: { T: -1 },
        189: { T: 1 },
        190: { T: -1 },
        191: { T: 1 },
        192: { T: -1 },
        193: { T: 1 },
        194: { T: -1 },
        195: { T: 1 },
        196: { T: -1 },
        197: { T: 1 },
        198: { T: -1 },
        199: { T: 1 },
        200: { T: -1 },
        201: { T: 1 },
        202: { T: -1 },
        203: { T: 1 },
        204: { T: -1 },
        205: { T: 1 },
        206: { T: -1 },
        207: { T: 1 },
        208: { T: -1 },
        209: { T: 1 },
        210: { T: -1 },
        211: { T: 1 },
        212: { T: -1 },
        213: { T: 1 },
        214: { T: -1 },
        215: { T: 1 },
        216: { T: -1 },
        217: { T: 1 },
        218: { T: -1 },
        219: { T: 1 },
        220: { T: -1 },
        221: { T: 1 },
        222: { T: -1 },
        223: { T: 1 },
        224: { T: -1 },
        225: { T: 1 },
        226: { T: -1 },
        227: { T: 1 },
        228: { T: -1 },
        229: { T: 1 },
        230: { T: -1 },
        231: { T: 1 },
        232: { T: -1 },
        233: { T: 1 },
        234: { T: -1 },
        235: { T: 1 },
        236: { T: -1 },
        237: { T: 1 },
        238: { T: -1 },
        239: { T: 1 },
        240: { T: -1 },
        241: { T: 1 },
        242: { T: -1 },
        243: { T: 1 },
        244: { T: -1 },
        245: { T: 1 },
        246: { T: -1 },
        247: { T: 1 },
        248: { T: -1 },
        249: { T: 1 },
        250: { T: -1 },
        251: { T: 1 },
        252: { T: -1 },
        253: { T: 1 },
        254: { T: -1 },
        255: { T: 1 },
        256: { T: -1 },
        257: { T: 1 },
        258: { T: -1 },
        259: { T: 1 },
        260: { T: -1 },
        261: { T: 1 },
        262: { T: -1 },
        263: { T: 1 },
        264: { T: -1 },
        265: { T: 1 },
        266: { T: -1 },
        267: { T: 1 },
        268: { T: -1 },
        269: { T: 1 },
        270: { T: -1 },
        271: { T: 1 },
        272: { T: -1 },
        273: { T: 1 },
        274: { T: -1 },
        275: { T: 1 },
        276: { T: -1 },
        277: {},
        278: { T: 1 },
        279: { T: -1 },
        280: { T: 1 },
        281: { T: -1 },
        282: { T: 1 },
        283: { T: 1 },
        284: { T: -1 },
        285: { T: 1 },
        286: { T: -1 },
        287: { T: 1 },
        288: { T: -1 },
        289: { T: 1 },
        290: { T: -1 },
        291: { T: 1 },
        292: { T: -1 },
        293: { T: 1 },
        294: { T: -1 },
        295: { T: 1 },
        296: { T: -1 },
        297: { T: 1 },
        298: { T: -1 },
        299: { T: 1 },
        300: { T: -1 },
        301: { T: 1 },
        302: { T: -1 },
        303: { T: 1 },
        304: { T: -1 },
        305: { T: 1 },
        306: { T: -1 },
        307: { T: 1 },
        308: { T: -1 },
        309: { T: 1 },
        310: { T: -1 },
        311: { T: 1 },
        312: { T: -1 },
        313: { T: -1 },
        314: { T: 1 },
        315: { T: -1 },
        316: { T: 1 },
        317: { T: -1 },
        318: { T: 1 },
        319: { T: -1 },
        320: { T: 1 },
        321: { T: -1 },
        322: { T: 1 },
        323: { T: -1 },
        324: { T: 1 },
        325: { T: -1 },
        326: { T: 1 },
        327: { T: -1 },
        328: { T: 1 },
        329: { T: -1 },
        330: { T: 1 },
        331: { T: -1 },
        332: { T: 1 },
        333: { T: -1 },
        334: { T: 1 },
        335: { f: parse_BrtMdtinfo },
        336: { T: -1 },
        337: { f: parse_BrtBeginEsmdb, T: 1 },
        338: { T: -1 },
        339: { T: 1 },
        340: { T: -1 },
        341: { T: 1 },
        342: { T: -1 },
        343: { T: 1 },
        344: { T: -1 },
        345: { T: 1 },
        346: { T: -1 },
        347: { T: 1 },
        348: { T: -1 },
        349: { T: 1 },
        350: { T: -1 },
        351: {},
        352: {},
        353: { T: 1 },
        354: { T: -1 },
        355: { f: parse_RelID },
        357: {},
        358: {},
        359: {},
        360: { T: 1 },
        361: {},
        362: { f: parse_ExternSheet },
        363: {},
        364: {},
        366: {},
        367: {},
        368: {},
        369: {},
        370: {},
        371: {},
        372: { T: 1 },
        373: { T: -1 },
        374: { T: 1 },
        375: { T: -1 },
        376: { T: 1 },
        377: { T: -1 },
        378: { T: 1 },
        379: { T: -1 },
        380: { T: 1 },
        381: { T: -1 },
        382: { T: 1 },
        383: { T: -1 },
        384: { T: 1 },
        385: { T: -1 },
        386: { T: 1 },
        387: { T: -1 },
        388: { T: 1 },
        389: { T: -1 },
        390: { T: 1 },
        391: { T: -1 },
        392: { T: 1 },
        393: { T: -1 },
        394: { T: 1 },
        395: { T: -1 },
        396: {},
        397: {},
        398: {},
        399: {},
        400: {},
        401: { T: 1 },
        403: {},
        404: {},
        405: {},
        406: {},
        407: {},
        408: {},
        409: {},
        410: {},
        411: {},
        412: {},
        413: {},
        414: {},
        415: {},
        416: {},
        417: {},
        418: {},
        419: {},
        420: {},
        421: {},
        422: { T: 1 },
        423: { T: 1 },
        424: { T: -1 },
        425: { T: -1 },
        426: { f: parse_BrtArrFmla },
        427: { f: parse_BrtShrFmla },
        428: {},
        429: { T: 1 },
        430: { T: -1 },
        431: { T: 1 },
        432: { T: -1 },
        433: { T: 1 },
        434: { T: -1 },
        435: { T: 1 },
        436: { T: -1 },
        437: { T: 1 },
        438: { T: -1 },
        439: { T: 1 },
        440: { T: -1 },
        441: { T: 1 },
        442: { T: -1 },
        443: { T: 1 },
        444: { T: -1 },
        445: { T: 1 },
        446: { T: -1 },
        447: { T: 1 },
        448: { T: -1 },
        449: { T: 1 },
        450: { T: -1 },
        451: { T: 1 },
        452: { T: -1 },
        453: { T: 1 },
        454: { T: -1 },
        455: { T: 1 },
        456: { T: -1 },
        457: { T: 1 },
        458: { T: -1 },
        459: { T: 1 },
        460: { T: -1 },
        461: { T: 1 },
        462: { T: -1 },
        463: { T: 1 },
        464: { T: -1 },
        465: { T: 1 },
        466: { T: -1 },
        467: { T: 1 },
        468: { T: -1 },
        469: { T: 1 },
        470: { T: -1 },
        471: {},
        472: {},
        473: { T: 1 },
        474: { T: -1 },
        475: {},
        476: { f: parse_BrtMargins },
        477: {},
        478: {},
        479: { T: 1 },
        480: { T: -1 },
        481: { T: 1 },
        482: { T: -1 },
        483: { T: 1 },
        484: { T: -1 },
        485: { f: parse_BrtWsFmtInfo },
        486: { T: 1 },
        487: { T: -1 },
        488: { T: 1 },
        489: { T: -1 },
        490: { T: 1 },
        491: { T: -1 },
        492: { T: 1 },
        493: { T: -1 },
        494: { f: parse_BrtHLink },
        495: { T: 1 },
        496: { T: -1 },
        497: { T: 1 },
        498: { T: -1 },
        499: {},
        500: { T: 1 },
        501: { T: -1 },
        502: { T: 1 },
        503: { T: -1 },
        504: {},
        505: { T: 1 },
        506: { T: -1 },
        507: {},
        508: { T: 1 },
        509: { T: -1 },
        510: { T: 1 },
        511: { T: -1 },
        512: {},
        513: {},
        514: { T: 1 },
        515: { T: -1 },
        516: { T: 1 },
        517: { T: -1 },
        518: { T: 1 },
        519: { T: -1 },
        520: { T: 1 },
        521: { T: -1 },
        522: {},
        523: {},
        524: {},
        525: {},
        526: {},
        527: {},
        528: { T: 1 },
        529: { T: -1 },
        530: { T: 1 },
        531: { T: -1 },
        532: { T: 1 },
        533: { T: -1 },
        534: {},
        535: {},
        536: {},
        537: {},
        538: { T: 1 },
        539: { T: -1 },
        540: { T: 1 },
        541: { T: -1 },
        542: { T: 1 },
        548: {},
        549: {},
        550: { f: parse_RelID },
        551: {},
        552: {},
        553: {},
        554: { T: 1 },
        555: { T: -1 },
        556: { T: 1 },
        557: { T: -1 },
        558: { T: 1 },
        559: { T: -1 },
        560: { T: 1 },
        561: { T: -1 },
        562: {},
        564: {},
        565: { T: 1 },
        566: { T: -1 },
        569: { T: 1 },
        570: { T: -1 },
        572: {},
        573: { T: 1 },
        574: { T: -1 },
        577: {},
        578: {},
        579: {},
        580: {},
        581: {},
        582: {},
        583: {},
        584: {},
        585: {},
        586: {},
        587: {},
        588: { T: -1 },
        589: {},
        590: { T: 1 },
        591: { T: -1 },
        592: { T: 1 },
        593: { T: -1 },
        594: { T: 1 },
        595: { T: -1 },
        596: {},
        597: { T: 1 },
        598: { T: -1 },
        599: { T: 1 },
        600: { T: -1 },
        601: { T: 1 },
        602: { T: -1 },
        603: { T: 1 },
        604: { T: -1 },
        605: { T: 1 },
        606: { T: -1 },
        607: {},
        608: { T: 1 },
        609: { T: -1 },
        610: {},
        611: { T: 1 },
        612: { T: -1 },
        613: { T: 1 },
        614: { T: -1 },
        615: { T: 1 },
        616: { T: -1 },
        617: { T: 1 },
        618: { T: -1 },
        619: { T: 1 },
        620: { T: -1 },
        625: {},
        626: { T: 1 },
        627: { T: -1 },
        628: { T: 1 },
        629: { T: -1 },
        630: { T: 1 },
        631: { T: -1 },
        632: { f: parse_BrtCommentAuthor },
        633: { T: 1 },
        634: { T: -1 },
        635: { T: 1, f: parse_BrtBeginComment },
        636: { T: -1 },
        637: { f: parse_BrtCommentText },
        638: { T: 1 },
        639: {},
        640: { T: -1 },
        641: { T: 1 },
        642: { T: -1 },
        643: { T: 1 },
        644: {},
        645: { T: -1 },
        646: { T: 1 },
        648: { T: 1 },
        649: {},
        650: { T: -1 },
        651: { f: parse_BrtCsProp },
        652: {},
        653: { T: 1 },
        654: { T: -1 },
        655: { T: 1 },
        656: { T: -1 },
        657: { T: 1 },
        658: { T: -1 },
        659: {},
        660: { T: 1 },
        661: {},
        662: { T: -1 },
        663: {},
        664: { T: 1 },
        665: {},
        666: { T: -1 },
        667: {},
        668: {},
        669: {},
        671: { T: 1 },
        672: { T: -1 },
        673: { T: 1 },
        674: { T: -1 },
        675: {},
        676: {},
        677: {},
        678: {},
        679: {},
        680: {},
        681: {},
        1024: {},
        1025: {},
        1026: { T: 1 },
        1027: { T: -1 },
        1028: { T: 1 },
        1029: { T: -1 },
        1030: {},
        1031: { T: 1 },
        1032: { T: -1 },
        1033: { T: 1 },
        1034: { T: -1 },
        1035: {},
        1036: {},
        1037: {},
        1038: { T: 1 },
        1039: { T: -1 },
        1040: {},
        1041: { T: 1 },
        1042: { T: -1 },
        1043: {},
        1044: {},
        1045: {},
        1046: { T: 1 },
        1047: { T: -1 },
        1048: { T: 1 },
        1049: { T: -1 },
        1050: {},
        1051: { T: 1 },
        1052: { T: 1 },
        1053: { f: parse_BrtDVal14 },
        1054: { T: 1 },
        1055: {},
        1056: { T: 1 },
        1057: { T: -1 },
        1058: { T: 1 },
        1059: { T: -1 },
        1061: {},
        1062: { T: 1 },
        1063: { T: -1 },
        1064: { T: 1 },
        1065: { T: -1 },
        1066: { T: 1 },
        1067: { T: -1 },
        1068: { T: 1 },
        1069: { T: -1 },
        1070: { T: 1 },
        1071: { T: -1 },
        1072: { T: 1 },
        1073: { T: -1 },
        1075: { T: 1 },
        1076: { T: -1 },
        1077: { T: 1 },
        1078: { T: -1 },
        1079: { T: 1 },
        1080: { T: -1 },
        1081: { T: 1 },
        1082: { T: -1 },
        1083: { T: 1 },
        1084: { T: -1 },
        1085: {},
        1086: { T: 1 },
        1087: { T: -1 },
        1088: { T: 1 },
        1089: { T: -1 },
        1090: { T: 1 },
        1091: { T: -1 },
        1092: { T: 1 },
        1093: { T: -1 },
        1094: { T: 1 },
        1095: { T: -1 },
        1096: {},
        1097: { T: 1 },
        1098: {},
        1099: { T: -1 },
        1100: { T: 1 },
        1101: { T: -1 },
        1102: {},
        1103: {},
        1104: {},
        1105: {},
        1111: {},
        1112: {},
        1113: { T: 1 },
        1114: { T: -1 },
        1115: { T: 1 },
        1116: { T: -1 },
        1117: {},
        1118: { T: 1 },
        1119: { T: -1 },
        1120: { T: 1 },
        1121: { T: -1 },
        1122: { T: 1 },
        1123: { T: -1 },
        1124: { T: 1 },
        1125: { T: -1 },
        1126: {},
        1128: { T: 1 },
        1129: { T: -1 },
        1130: {},
        1131: { T: 1 },
        1132: { T: -1 },
        1133: { T: 1 },
        1134: { T: -1 },
        1135: { T: 1 },
        1136: { T: -1 },
        1137: { T: 1 },
        1138: { T: -1 },
        1139: { T: 1 },
        1140: { T: -1 },
        1141: {},
        1142: { T: 1 },
        1143: { T: -1 },
        1144: { T: 1 },
        1145: { T: -1 },
        1146: {},
        1147: { T: 1 },
        1148: { T: -1 },
        1149: { T: 1 },
        1150: { T: -1 },
        1152: { T: 1 },
        1153: { T: -1 },
        1154: { T: -1 },
        1155: { T: -1 },
        1156: { T: -1 },
        1157: { T: 1 },
        1158: { T: -1 },
        1159: { T: 1 },
        1160: { T: -1 },
        1161: { T: 1 },
        1162: { T: -1 },
        1163: { T: 1 },
        1164: { T: -1 },
        1165: { T: 1 },
        1166: { T: -1 },
        1167: { T: 1 },
        1168: { T: -1 },
        1169: { T: 1 },
        1170: { T: -1 },
        1171: {},
        1172: { T: 1 },
        1173: { T: -1 },
        1177: {},
        1178: { T: 1 },
        1180: {},
        1181: {},
        1182: {},
        2048: { T: 1 },
        2049: { T: -1 },
        2050: {},
        2051: { T: 1 },
        2052: { T: -1 },
        2053: {},
        2054: {},
        2055: { T: 1 },
        2056: { T: -1 },
        2057: { T: 1 },
        2058: { T: -1 },
        2060: {},
        2067: {},
        2068: { T: 1 },
        2069: { T: -1 },
        2070: {},
        2071: {},
        2072: { T: 1 },
        2073: { T: -1 },
        2075: {},
        2076: {},
        2077: { T: 1 },
        2078: { T: -1 },
        2079: {},
        2080: { T: 1 },
        2081: { T: -1 },
        2082: {},
        2083: { T: 1 },
        2084: { T: -1 },
        2085: { T: 1 },
        2086: { T: -1 },
        2087: { T: 1 },
        2088: { T: -1 },
        2089: { T: 1 },
        2090: { T: -1 },
        2091: {},
        2092: {},
        2093: { T: 1 },
        2094: { T: -1 },
        2095: {},
        2096: { T: 1 },
        2097: { T: -1 },
        2098: { T: 1 },
        2099: { T: -1 },
        2100: { T: 1 },
        2101: { T: -1 },
        2102: {},
        2103: { T: 1 },
        2104: { T: -1 },
        2105: {},
        2106: { T: 1 },
        2107: { T: -1 },
        2108: {},
        2109: { T: 1 },
        2110: { T: -1 },
        2111: { T: 1 },
        2112: { T: -1 },
        2113: { T: 1 },
        2114: { T: -1 },
        2115: {},
        2116: {},
        2117: {},
        2118: { T: 1 },
        2119: { T: -1 },
        2120: {},
        2121: { T: 1 },
        2122: { T: -1 },
        2123: { T: 1 },
        2124: { T: -1 },
        2125: {},
        2126: { T: 1 },
        2127: { T: -1 },
        2128: {},
        2129: { T: 1 },
        2130: { T: -1 },
        2131: { T: 1 },
        2132: { T: -1 },
        2133: { T: 1 },
        2134: {},
        2135: {},
        2136: {},
        2137: { T: 1 },
        2138: { T: -1 },
        2139: { T: 1 },
        2140: { T: -1 },
        2141: {},
        3072: {},
        3073: {},
        4096: { T: 1 },
        4097: { T: -1 },
        5002: { T: 1 },
        5003: { T: -1 },
        5081: { T: 1 },
        5082: { T: -1 },
        5083: {},
        5084: { T: 1 },
        5085: { T: -1 },
        5086: { T: 1 },
        5087: { T: -1 },
        5088: {},
        5089: {},
        5090: {},
        5092: { T: 1 },
        5093: { T: -1 },
        5094: {},
        5095: { T: 1 },
        5096: { T: -1 },
        5097: {},
        5099: {},
        65535: { n: "" }
      };
      var XLSRecordEnum = {
        6: { f: parse_Formula },
        10: { f: parsenoop2 },
        12: { f: parseuint16 },
        13: { f: parseuint16 },
        14: { f: parsebool },
        15: { f: parsebool },
        16: { f: parse_Xnum },
        17: { f: parsebool },
        18: { f: parsebool },
        19: { f: parseuint16 },
        20: { f: parse_XLHeaderFooter },
        21: { f: parse_XLHeaderFooter },
        23: { f: parse_ExternSheet },
        24: { f: parse_Lbl },
        25: { f: parsebool },
        26: {},
        27: {},
        28: { f: parse_Note },
        29: {},
        34: { f: parsebool },
        35: { f: parse_ExternName },
        38: { f: parse_Xnum },
        39: { f: parse_Xnum },
        40: { f: parse_Xnum },
        41: { f: parse_Xnum },
        42: { f: parsebool },
        43: { f: parsebool },
        47: { f: parse_FilePass },
        49: { f: parse_Font },
        51: { f: parseuint16 },
        60: {},
        61: { f: parse_Window1 },
        64: { f: parsebool },
        65: { f: parse_Pane },
        66: { f: parseuint16 },
        77: {},
        80: {},
        81: {},
        82: {},
        85: { f: parseuint16 },
        89: {},
        90: {},
        91: {},
        92: { f: parse_WriteAccess },
        93: { f: parse_Obj },
        94: {},
        95: { f: parsebool },
        96: {},
        97: {},
        99: { f: parsebool },
        125: { f: parse_ColInfo },
        128: { f: parse_Guts },
        129: { f: parse_WsBool },
        130: { f: parseuint16 },
        131: { f: parsebool },
        132: { f: parsebool },
        133: { f: parse_BoundSheet8 },
        134: {},
        140: { f: parse_Country },
        141: { f: parseuint16 },
        144: {},
        146: { f: parse_Palette },
        151: {},
        152: {},
        153: {},
        154: {},
        155: {},
        156: { f: parseuint16 },
        157: {},
        158: {},
        160: { f: parse_Scl },
        161: { f: parse_Setup },
        174: {},
        175: {},
        176: {},
        177: {},
        178: {},
        180: {},
        181: {},
        182: {},
        184: {},
        185: {},
        189: { f: parse_MulRk },
        190: { f: parse_MulBlank },
        193: { f: parsenoop2 },
        197: {},
        198: {},
        199: {},
        200: {},
        201: {},
        202: { f: parsebool },
        203: {},
        204: {},
        205: {},
        206: {},
        207: {},
        208: {},
        209: {},
        210: {},
        211: {},
        213: {},
        215: {},
        216: {},
        217: {},
        218: { f: parseuint16 },
        220: {},
        221: { f: parsebool },
        222: {},
        224: { f: parse_XF },
        225: { f: parse_InterfaceHdr },
        226: { f: parsenoop2 },
        227: {},
        229: { f: parse_MergeCells },
        233: {},
        235: {},
        236: {},
        237: {},
        239: {},
        240: {},
        241: {},
        242: {},
        244: {},
        245: {},
        246: {},
        247: {},
        248: {},
        249: {},
        251: {},
        252: { f: parse_SST },
        253: { f: parse_LabelSst },
        255: { f: parse_ExtSST },
        256: {},
        259: {},
        290: {},
        311: {},
        312: {},
        315: {},
        317: { f: parseuint16a },
        318: {},
        319: {},
        320: {},
        330: {},
        331: {},
        333: {},
        334: {},
        335: {},
        336: {},
        337: {},
        338: {},
        339: {},
        340: {},
        351: {},
        352: { f: parsebool },
        353: { f: parsenoop2 },
        401: {},
        402: {},
        403: {},
        404: {},
        405: {},
        406: {},
        407: {},
        408: {},
        425: {},
        426: {},
        427: {},
        428: {},
        429: {},
        430: { f: parse_SupBook },
        431: { f: parsebool },
        432: {},
        433: {},
        434: {},
        437: {},
        438: { f: parse_TxO },
        439: { f: parsebool },
        440: { f: parse_HLink },
        441: {},
        442: { f: parse_XLUnicodeString },
        443: {},
        444: { f: parseuint16 },
        445: {},
        446: {},
        448: { f: parsenoop2 },
        449: { f: parse_RecalcId, r: 2 },
        450: { f: parsenoop2 },
        512: { f: parse_Dimensions },
        513: { f: parse_Blank },
        515: { f: parse_Number },
        516: { f: parse_Label },
        517: { f: parse_BoolErr },
        519: { f: parse_String },
        520: { f: parse_Row },
        523: {},
        545: { f: parse_Array },
        549: { f: parse_DefaultRowHeight },
        566: {},
        574: { f: parse_Window2 },
        638: { f: parse_RK },
        659: {},
        1048: {},
        1054: { f: parse_Format },
        1084: {},
        1212: { f: parse_ShrFmla },
        2048: { f: parse_HLinkTooltip },
        2049: {},
        2050: {},
        2051: {},
        2052: {},
        2053: {},
        2054: {},
        2055: {},
        2056: {},
        2057: { f: parse_BOF },
        2058: {},
        2059: {},
        2060: {},
        2061: {},
        2062: {},
        2063: {},
        2064: {},
        2066: {},
        2067: {},
        2128: {},
        2129: {},
        2130: {},
        2131: {},
        2132: {},
        2133: {},
        2134: {},
        2135: {},
        2136: {},
        2137: {},
        2138: {},
        2146: {},
        2147: { r: 12 },
        2148: {},
        2149: {},
        2150: {},
        2151: { f: parsenoop2 },
        2152: {},
        2154: {},
        2155: {},
        2156: {},
        2161: {},
        2162: {},
        2164: {},
        2165: {},
        2166: {},
        2167: {},
        2168: {},
        2169: {},
        2170: {},
        2171: {},
        2172: { f: parse_XFCRC, r: 12 },
        2173: { f: parse_XFExt, r: 12 },
        2174: {},
        2175: {},
        2180: {},
        2181: {},
        2182: {},
        2183: {},
        2184: {},
        2185: {},
        2186: {},
        2187: {},
        2188: { f: parsebool, r: 12 },
        2189: {},
        2190: { r: 12 },
        2191: {},
        2192: {},
        2194: {},
        2195: {},
        2196: { f: parse_NameCmt, r: 12 },
        2197: {},
        2198: { f: parse_Theme, r: 12 },
        2199: {},
        2200: {},
        2201: {},
        2202: { f: parse_MTRSettings, r: 12 },
        2203: { f: parsenoop2 },
        2204: {},
        2205: {},
        2206: {},
        2207: {},
        2211: { f: parse_ForceFullCalculation },
        2212: {},
        2213: {},
        2214: {},
        2215: {},
        4097: {},
        4098: {},
        4099: {},
        4102: {},
        4103: {},
        4105: {},
        4106: {},
        4107: {},
        4108: {},
        4109: {},
        4116: {},
        4117: {},
        4118: {},
        4119: {},
        4120: {},
        4121: {},
        4122: {},
        4123: {},
        4124: {},
        4125: {},
        4126: {},
        4127: {},
        4128: {},
        4129: {},
        4130: {},
        4132: {},
        4133: {},
        4134: { f: parseuint16 },
        4135: {},
        4146: {},
        4147: {},
        4148: {},
        4149: {},
        4154: {},
        4156: {},
        4157: {},
        4158: {},
        4159: {},
        4160: {},
        4161: {},
        4163: {},
        4164: { f: parse_ShtProps },
        4165: {},
        4166: {},
        4168: {},
        4170: {},
        4171: {},
        4174: {},
        4175: {},
        4176: {},
        4177: {},
        4187: {},
        4188: { f: parse_ClrtClient },
        4189: {},
        4191: {},
        4192: {},
        4193: {},
        4194: {},
        4195: {},
        4196: {},
        4197: {},
        4198: {},
        4199: {},
        4200: {},
        0: { f: parse_Dimensions },
        1: {},
        2: { f: parse_BIFF2INT },
        3: { f: parse_BIFF2NUM },
        4: { f: parse_BIFF2STR },
        5: { f: parse_BoolErr },
        7: { f: parse_BIFF2STRING },
        8: {},
        9: { f: parse_BOF },
        11: {},
        22: { f: parseuint16 },
        30: { f: parse_BIFF2Format },
        31: {},
        32: {},
        33: { f: parse_Array },
        36: {},
        37: { f: parse_DefaultRowHeight },
        50: { f: parse_BIFF2FONTXTRA },
        62: {},
        52: {},
        67: {},
        68: { f: parseuint16 },
        69: {},
        86: {},
        126: {},
        127: { f: parse_ImData },
        135: {},
        136: {},
        137: {},
        145: {},
        148: {},
        149: {},
        150: {},
        169: {},
        171: {},
        188: {},
        191: {},
        192: {},
        194: {},
        195: {},
        214: { f: parse_RString },
        223: {},
        234: {},
        354: {},
        421: {},
        518: { f: parse_Formula },
        521: { f: parse_BOF },
        536: { f: parse_Lbl },
        547: { f: parse_ExternName },
        561: {},
        579: {},
        1030: { f: parse_Formula },
        1033: { f: parse_BOF },
        1091: {},
        2157: {},
        2163: {},
        2177: {},
        2240: {},
        2241: {},
        2242: {},
        2243: {},
        2244: {},
        2245: {},
        2246: {},
        2247: {},
        2248: {},
        2249: {},
        2250: {},
        2251: {},
        2262: { r: 12 },
        29282: {}
      };
      function write_biff_rec(ba, type, payload, length) {
        var t = type;
        if (isNaN(t))
          return;
        var len = length || (payload || []).length || 0;
        var o = ba.next(4);
        o.write_shift(2, t);
        o.write_shift(2, len);
        if (len > 0 && is_buf(payload))
          ba.push(payload);
      }
      function write_biff_continue(ba, type, payload, length) {
        var len = length || (payload || []).length || 0;
        if (len <= 8224)
          return write_biff_rec(ba, type, payload, len);
        var t = type;
        if (isNaN(t))
          return;
        var parts = payload.parts || [], sidx = 0;
        var i = 0, w = 0;
        while (w + (parts[sidx] || 8224) <= 8224) {
          w += parts[sidx] || 8224;
          sidx++;
        }
        var o = ba.next(4);
        o.write_shift(2, t);
        o.write_shift(2, w);
        ba.push(payload.slice(i, i + w));
        i += w;
        while (i < len) {
          o = ba.next(4);
          o.write_shift(2, 60);
          w = 0;
          while (w + (parts[sidx] || 8224) <= 8224) {
            w += parts[sidx] || 8224;
            sidx++;
          }
          o.write_shift(2, w);
          ba.push(payload.slice(i, i + w));
          i += w;
        }
      }
      function write_BIFF2Cell(out, r, c) {
        if (!out)
          out = new_buf(7);
        out.write_shift(2, r);
        out.write_shift(2, c);
        out.write_shift(2, 0);
        out.write_shift(1, 0);
        return out;
      }
      function write_BIFF2BERR(r, c, val, t) {
        var out = new_buf(9);
        write_BIFF2Cell(out, r, c);
        write_Bes(val, t || "b", out);
        return out;
      }
      function write_BIFF2LABEL(r, c, val) {
        var out = new_buf(8 + 2 * val.length);
        write_BIFF2Cell(out, r, c);
        out.write_shift(1, val.length);
        out.write_shift(val.length, val, "sbcs");
        return out.l < out.length ? out.slice(0, out.l) : out;
      }
      function write_ws_biff2_cell(ba, cell, R, C) {
        if (cell.v != null)
          switch (cell.t) {
            case "d":
            case "n":
              var v = cell.t == "d" ? datenum(parseDate(cell.v)) : cell.v;
              if (v == (v | 0) && v >= 0 && v < 65536)
                write_biff_rec(ba, 2, write_BIFF2INT(R, C, v));
              else
                write_biff_rec(ba, 3, write_BIFF2NUM(R, C, v));
              return;
            case "b":
            case "e":
              write_biff_rec(ba, 5, write_BIFF2BERR(R, C, cell.v, cell.t));
              return;
            case "s":
            case "str":
              write_biff_rec(ba, 4, write_BIFF2LABEL(R, C, (cell.v || "").slice(0, 255)));
              return;
          }
        write_biff_rec(ba, 1, write_BIFF2Cell(null, R, C));
      }
      function write_ws_biff2(ba, ws, idx, opts) {
        var dense = Array.isArray(ws);
        var range = safe_decode_range(ws["!ref"] || "A1"), ref, rr = "", cols = [];
        if (range.e.c > 255 || range.e.r > 16383) {
          if (opts.WTF)
            throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
          range.e.c = Math.min(range.e.c, 255);
          range.e.r = Math.min(range.e.c, 16383);
          ref = encode_range(range);
        }
        for (var R = range.s.r; R <= range.e.r; ++R) {
          rr = encode_row(R);
          for (var C = range.s.c; C <= range.e.c; ++C) {
            if (R === range.s.r)
              cols[C] = encode_col(C);
            ref = cols[C] + rr;
            var cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (!cell)
              continue;
            write_ws_biff2_cell(ba, cell, R, C, opts);
          }
        }
      }
      function write_biff2_buf(wb, opts) {
        var o = opts || {};
        if (DENSE != null && o.dense == null)
          o.dense = DENSE;
        var ba = buf_array();
        var idx = 0;
        for (var i = 0; i < wb.SheetNames.length; ++i)
          if (wb.SheetNames[i] == o.sheet)
            idx = i;
        if (idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet)
          throw new Error("Sheet not found: " + o.sheet);
        write_biff_rec(ba, o.biff == 4 ? 1033 : o.biff == 3 ? 521 : 9, write_BOF(wb, 16, o));
        write_ws_biff2(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);
        write_biff_rec(ba, 10);
        return ba.end();
      }
      function write_FONTS_biff8(ba, data, opts) {
        write_biff_rec(ba, 49, write_Font({
          sz: 12,
          color: { theme: 1 },
          name: "Arial",
          family: 2,
          scheme: "minor"
        }, opts));
      }
      function write_FMTS_biff8(ba, NF, opts) {
        if (!NF)
          return;
        [[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function(r) {
          for (var i = r[0]; i <= r[1]; ++i)
            if (NF[i] != null)
              write_biff_rec(ba, 1054, write_Format(i, NF[i], opts));
        });
      }
      function write_FEAT(ba, ws) {
        var o = new_buf(19);
        o.write_shift(4, 2151);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(2, 3);
        o.write_shift(1, 1);
        o.write_shift(4, 0);
        write_biff_rec(ba, 2151, o);
        o = new_buf(39);
        o.write_shift(4, 2152);
        o.write_shift(4, 0);
        o.write_shift(4, 0);
        o.write_shift(2, 3);
        o.write_shift(1, 0);
        o.write_shift(4, 0);
        o.write_shift(2, 1);
        o.write_shift(4, 4);
        o.write_shift(2, 0);
        write_Ref8U(safe_decode_range(ws["!ref"] || "A1"), o);
        o.write_shift(4, 4);
        write_biff_rec(ba, 2152, o);
      }
      function write_CELLXFS_biff8(ba, opts) {
        for (var i = 0; i < 16; ++i)
          write_biff_rec(ba, 224, write_XF({ numFmtId: 0, style: true }, 0, opts));
        opts.cellXfs.forEach(function(c) {
          write_biff_rec(ba, 224, write_XF(c, 0, opts));
        });
      }
      function write_ws_biff8_hlinks(ba, ws) {
        for (var R = 0; R < ws["!links"].length; ++R) {
          var HL = ws["!links"][R];
          write_biff_rec(ba, 440, write_HLink(HL));
          if (HL[1].Tooltip)
            write_biff_rec(ba, 2048, write_HLinkTooltip(HL));
        }
        delete ws["!links"];
      }
      function write_ws_cols_biff8(ba, cols) {
        if (!cols)
          return;
        var cnt = 0;
        cols.forEach(function(col, idx) {
          if (++cnt <= 256 && col) {
            write_biff_rec(ba, 125, write_ColInfo(col_obj_w(idx, col), idx));
          }
        });
      }
      function write_ws_biff8_cell(ba, cell, R, C, opts) {
        var os = 16 + get_cell_style(opts.cellXfs, cell, opts);
        if (cell.v == null && !cell.bf) {
          write_biff_rec(ba, 513, write_XLSCell(R, C, os));
          return;
        }
        if (cell.bf)
          write_biff_rec(ba, 6, write_Formula(cell, R, C, opts, os));
        else
          switch (cell.t) {
            case "d":
            case "n":
              var v = cell.t == "d" ? datenum(parseDate(cell.v)) : cell.v;
              write_biff_rec(ba, 515, write_Number(R, C, v, os, opts));
              break;
            case "b":
            case "e":
              write_biff_rec(ba, 517, write_BoolErr(R, C, cell.v, os, opts, cell.t));
              break;
            case "s":
            case "str":
              if (opts.bookSST) {
                var isst = get_sst_id(opts.Strings, cell.v, opts.revStrings);
                write_biff_rec(ba, 253, write_LabelSst(R, C, isst, os, opts));
              } else
                write_biff_rec(ba, 516, write_Label(R, C, (cell.v || "").slice(0, 255), os, opts));
              break;
            default:
              write_biff_rec(ba, 513, write_XLSCell(R, C, os));
          }
      }
      function write_ws_biff8(idx, opts, wb) {
        var ba = buf_array();
        var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};
        var _WB = (wb || {}).Workbook || {};
        var _sheet = (_WB.Sheets || [])[idx] || {};
        var dense = Array.isArray(ws);
        var b8 = opts.biff == 8;
        var ref, rr = "", cols = [];
        var range = safe_decode_range(ws["!ref"] || "A1");
        var MAX_ROWS = b8 ? 65536 : 16384;
        if (range.e.c > 255 || range.e.r >= MAX_ROWS) {
          if (opts.WTF)
            throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
          range.e.c = Math.min(range.e.c, 255);
          range.e.r = Math.min(range.e.c, MAX_ROWS - 1);
        }
        write_biff_rec(ba, 2057, write_BOF(wb, 16, opts));
        write_biff_rec(ba, 13, writeuint16(1));
        write_biff_rec(ba, 12, writeuint16(100));
        write_biff_rec(ba, 15, writebool(true));
        write_biff_rec(ba, 17, writebool(false));
        write_biff_rec(ba, 16, write_Xnum(1e-3));
        write_biff_rec(ba, 95, writebool(true));
        write_biff_rec(ba, 42, writebool(false));
        write_biff_rec(ba, 43, writebool(false));
        write_biff_rec(ba, 130, writeuint16(1));
        write_biff_rec(ba, 128, write_Guts([0, 0]));
        write_biff_rec(ba, 131, writebool(false));
        write_biff_rec(ba, 132, writebool(false));
        if (b8)
          write_ws_cols_biff8(ba, ws["!cols"]);
        write_biff_rec(ba, 512, write_Dimensions(range, opts));
        if (b8)
          ws["!links"] = [];
        for (var R = range.s.r; R <= range.e.r; ++R) {
          rr = encode_row(R);
          for (var C = range.s.c; C <= range.e.c; ++C) {
            if (R === range.s.r)
              cols[C] = encode_col(C);
            ref = cols[C] + rr;
            var cell = dense ? (ws[R] || [])[C] : ws[ref];
            if (!cell)
              continue;
            write_ws_biff8_cell(ba, cell, R, C, opts);
            if (b8 && cell.l)
              ws["!links"].push([ref, cell.l]);
          }
        }
        var cname = _sheet.CodeName || _sheet.name || s;
        if (b8)
          write_biff_rec(ba, 574, write_Window2((_WB.Views || [])[0]));
        if (b8 && (ws["!merges"] || []).length)
          write_biff_rec(ba, 229, write_MergeCells(ws["!merges"]));
        if (b8)
          write_ws_biff8_hlinks(ba, ws);
        write_biff_rec(ba, 442, write_XLUnicodeString(cname, opts));
        if (b8)
          write_FEAT(ba, ws);
        write_biff_rec(ba, 10);
        return ba.end();
      }
      function write_biff8_global(wb, bufs, opts) {
        var A = buf_array();
        var _WB = (wb || {}).Workbook || {};
        var _sheets = _WB.Sheets || [];
        var _wb = _WB.WBProps || {};
        var b8 = opts.biff == 8, b5 = opts.biff == 5;
        write_biff_rec(A, 2057, write_BOF(wb, 5, opts));
        if (opts.bookType == "xla")
          write_biff_rec(A, 135);
        write_biff_rec(A, 225, b8 ? writeuint16(1200) : null);
        write_biff_rec(A, 193, writezeroes(2));
        if (b5)
          write_biff_rec(A, 191);
        if (b5)
          write_biff_rec(A, 192);
        write_biff_rec(A, 226);
        write_biff_rec(A, 92, write_WriteAccess("SheetJS", opts));
        write_biff_rec(A, 66, writeuint16(b8 ? 1200 : 1252));
        if (b8)
          write_biff_rec(A, 353, writeuint16(0));
        if (b8)
          write_biff_rec(A, 448);
        write_biff_rec(A, 317, write_RRTabId(wb.SheetNames.length));
        if (b8 && wb.vbaraw)
          write_biff_rec(A, 211);
        if (b8 && wb.vbaraw) {
          var cname = _wb.CodeName || "ThisWorkbook";
          write_biff_rec(A, 442, write_XLUnicodeString(cname, opts));
        }
        write_biff_rec(A, 156, writeuint16(17));
        write_biff_rec(A, 25, writebool(false));
        write_biff_rec(A, 18, writebool(false));
        write_biff_rec(A, 19, writeuint16(0));
        if (b8)
          write_biff_rec(A, 431, writebool(false));
        if (b8)
          write_biff_rec(A, 444, writeuint16(0));
        write_biff_rec(A, 61, write_Window1(opts));
        write_biff_rec(A, 64, writebool(false));
        write_biff_rec(A, 141, writeuint16(0));
        write_biff_rec(A, 34, writebool(safe1904(wb) == "true"));
        write_biff_rec(A, 14, writebool(true));
        if (b8)
          write_biff_rec(A, 439, writebool(false));
        write_biff_rec(A, 218, writeuint16(0));
        write_FONTS_biff8(A, wb, opts);
        write_FMTS_biff8(A, wb.SSF, opts);
        write_CELLXFS_biff8(A, opts);
        if (b8)
          write_biff_rec(A, 352, writebool(false));
        var a = A.end();
        var C = buf_array();
        if (b8)
          write_biff_rec(C, 140, write_Country());
        if (b8 && opts.Strings)
          write_biff_continue(C, 252, write_SST(opts.Strings, opts));
        write_biff_rec(C, 10);
        var c = C.end();
        var B = buf_array();
        var blen = 0, j = 0;
        for (j = 0; j < wb.SheetNames.length; ++j)
          blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;
        var start = a.length + blen + c.length;
        for (j = 0; j < wb.SheetNames.length; ++j) {
          var _sheet = _sheets[j] || {};
          write_biff_rec(B, 133, write_BoundSheet8({ pos: start, hs: _sheet.Hidden || 0, dt: 0, name: wb.SheetNames[j] }, opts));
          start += bufs[j].length;
        }
        var b = B.end();
        if (blen != b.length)
          throw new Error("BS8 " + blen + " != " + b.length);
        var out = [];
        if (a.length)
          out.push(a);
        if (b.length)
          out.push(b);
        if (c.length)
          out.push(c);
        return bconcat(out);
      }
      function write_biff8_buf(wb, opts) {
        var o = opts || {};
        var bufs = [];
        if (wb && !wb.SSF) {
          wb.SSF = dup(table_fmt);
        }
        if (wb && wb.SSF) {
          make_ssf();
          SSF_load_table(wb.SSF);
          o.revssf = evert_num(wb.SSF);
          o.revssf[wb.SSF[65535]] = 0;
          o.ssf = wb.SSF;
        }
        o.Strings = [];
        o.Strings.Count = 0;
        o.Strings.Unique = 0;
        fix_write_opts(o);
        o.cellXfs = [];
        get_cell_style(o.cellXfs, {}, { revssf: { "General": 0 } });
        if (!wb.Props)
          wb.Props = {};
        for (var i = 0; i < wb.SheetNames.length; ++i)
          bufs[bufs.length] = write_ws_biff8(i, o, wb);
        bufs.unshift(write_biff8_global(wb, bufs, o));
        return bconcat(bufs);
      }
      function write_biff_buf(wb, opts) {
        for (var i = 0; i <= wb.SheetNames.length; ++i) {
          var ws = wb.Sheets[wb.SheetNames[i]];
          if (!ws || !ws["!ref"])
            continue;
          var range = decode_range(ws["!ref"]);
          if (range.e.c > 255) {
            if (typeof console != "undefined" && console.error)
              console.error("Worksheet '" + wb.SheetNames[i] + "' extends beyond column IV (255).  Data may be lost.");
          }
        }
        var o = opts || {};
        switch (o.biff || 2) {
          case 8:
          case 5:
            return write_biff8_buf(wb, opts);
          case 4:
          case 3:
          case 2:
            return write_biff2_buf(wb, opts);
        }
        throw new Error("invalid type " + o.bookType + " for BIFF");
      }
      function html_to_sheet(str, _opts) {
        var opts = _opts || {};
        if (DENSE != null && opts.dense == null)
          opts.dense = DENSE;
        var ws = opts.dense ? [] : {};
        str = str.replace(/<!--.*?-->/g, "");
        var mtch = str.match(/<table/i);
        if (!mtch)
          throw new Error("Invalid HTML: could not find <table>");
        var mtch2 = str.match(/<\/table/i);
        var i = mtch.index, j = mtch2 && mtch2.index || str.length;
        var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, "<tr>");
        var R = -1, C = 0, RS = 0, CS = 0;
        var range = { s: { r: 1e7, c: 1e7 }, e: { r: 0, c: 0 } };
        var merges = [];
        for (i = 0; i < rows.length; ++i) {
          var row = rows[i].trim();
          var hd = row.slice(0, 3).toLowerCase();
          if (hd == "<tr") {
            ++R;
            if (opts.sheetRows && opts.sheetRows <= R) {
              --R;
              break;
            }
            C = 0;
            continue;
          }
          if (hd != "<td" && hd != "<th")
            continue;
          var cells = row.split(/<\/t[dh]>/i);
          for (j = 0; j < cells.length; ++j) {
            var cell = cells[j].trim();
            if (!cell.match(/<t[dh]/i))
              continue;
            var m = cell, cc = 0;
            while (m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1)
              m = m.slice(cc + 1);
            for (var midx = 0; midx < merges.length; ++midx) {
              var _merge = merges[midx];
              if (_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) {
                C = _merge.e.c + 1;
                midx = -1;
              }
            }
            var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
            CS = tag.colspan ? +tag.colspan : 1;
            if ((RS = +tag.rowspan) > 1 || CS > 1)
              merges.push({ s: { r: R, c: C }, e: { r: R + (RS || 1) - 1, c: C + CS - 1 } });
            var _t = tag.t || tag["data-t"] || "";
            if (!m.length) {
              C += CS;
              continue;
            }
            m = htmldecode(m);
            if (range.s.r > R)
              range.s.r = R;
            if (range.e.r < R)
              range.e.r = R;
            if (range.s.c > C)
              range.s.c = C;
            if (range.e.c < C)
              range.e.c = C;
            if (!m.length) {
              C += CS;
              continue;
            }
            var o = { t: "s", v: m };
            if (opts.raw || !m.trim().length || _t == "s") {
            } else if (m === "TRUE")
              o = { t: "b", v: true };
            else if (m === "FALSE")
              o = { t: "b", v: false };
            else if (!isNaN(fuzzynum(m)))
              o = { t: "n", v: fuzzynum(m) };
            else if (!isNaN(fuzzydate(m).getDate())) {
              o = { t: "d", v: parseDate(m) };
              if (!opts.cellDates)
                o = { t: "n", v: datenum(o.v) };
              o.z = opts.dateNF || table_fmt[14];
            }
            if (opts.dense) {
              if (!ws[R])
                ws[R] = [];
              ws[R][C] = o;
            } else
              ws[encode_cell({ r: R, c: C })] = o;
            C += CS;
          }
        }
        ws["!ref"] = encode_range(range);
        if (merges.length)
          ws["!merges"] = merges;
        return ws;
      }
      function make_html_row(ws, r, R, o) {
        var M = ws["!merges"] || [];
        var oo = [];
        for (var C = r.s.c; C <= r.e.c; ++C) {
          var RS = 0, CS = 0;
          for (var j = 0; j < M.length; ++j) {
            if (M[j].s.r > R || M[j].s.c > C)
              continue;
            if (M[j].e.r < R || M[j].e.c < C)
              continue;
            if (M[j].s.r < R || M[j].s.c < C) {
              RS = -1;
              break;
            }
            RS = M[j].e.r - M[j].s.r + 1;
            CS = M[j].e.c - M[j].s.c + 1;
            break;
          }
          if (RS < 0)
            continue;
          var coord = encode_cell({ r: R, c: C });
          var cell = o.dense ? (ws[R] || [])[C] : ws[coord];
          var w = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
          var sp = {};
          if (RS > 1)
            sp.rowspan = RS;
          if (CS > 1)
            sp.colspan = CS;
          if (o.editable)
            w = '<span contenteditable="true">' + w + "</span>";
          else if (cell) {
            sp["data-t"] = cell && cell.t || "z";
            if (cell.v != null)
              sp["data-v"] = cell.v;
            if (cell.z != null)
              sp["data-z"] = cell.z;
            if (cell.l && (cell.l.Target || "#").charAt(0) != "#")
              w = '<a href="' + cell.l.Target + '">' + w + "</a>";
          }
          sp.id = (o.id || "sjs") + "-" + coord;
          oo.push(writextag("td", w, sp));
        }
        var preamble = "<tr>";
        return preamble + oo.join("") + "</tr>";
      }
      var HTML_BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
      var HTML_END = "</body></html>";
      function html_to_workbook(str, opts) {
        var mtch = str.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);
        if (!mtch || mtch.length == 0)
          throw new Error("Invalid HTML: could not find <table>");
        if (mtch.length == 1)
          return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
        var wb = book_new();
        mtch.forEach(function(s, idx) {
          book_append_sheet(wb, html_to_sheet(s, opts), "Sheet" + (idx + 1));
        });
        return wb;
      }
      function make_html_preamble(ws, R, o) {
        var out = [];
        return out.join("") + "<table" + (o && o.id ? ' id="' + o.id + '"' : "") + ">";
      }
      function sheet_to_html(ws, opts) {
        var o = opts || {};
        var header = o.header != null ? o.header : HTML_BEGIN;
        var footer = o.footer != null ? o.footer : HTML_END;
        var out = [header];
        var r = decode_range(ws["!ref"]);
        o.dense = Array.isArray(ws);
        out.push(make_html_preamble(ws, r, o));
        for (var R = r.s.r; R <= r.e.r; ++R)
          out.push(make_html_row(ws, r, R, o));
        out.push("</table>" + footer);
        return out.join("");
      }
      function sheet_add_dom(ws, table, _opts) {
        var opts = _opts || {};
        if (DENSE != null)
          opts.dense = DENSE;
        var or_R = 0, or_C = 0;
        if (opts.origin != null) {
          if (typeof opts.origin == "number")
            or_R = opts.origin;
          else {
            var _origin = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
            or_R = _origin.r;
            or_C = _origin.c;
          }
        }
        var rows = table.getElementsByTagName("tr");
        var sheetRows = Math.min(opts.sheetRows || 1e7, rows.length);
        var range = { s: { r: 0, c: 0 }, e: { r: or_R, c: or_C } };
        if (ws["!ref"]) {
          var _range = decode_range(ws["!ref"]);
          range.s.r = Math.min(range.s.r, _range.s.r);
          range.s.c = Math.min(range.s.c, _range.s.c);
          range.e.r = Math.max(range.e.r, _range.e.r);
          range.e.c = Math.max(range.e.c, _range.e.c);
          if (or_R == -1)
            range.e.r = or_R = _range.e.r + 1;
        }
        var merges = [], midx = 0;
        var rowinfo = ws["!rows"] || (ws["!rows"] = []);
        var _R = 0, R = 0, _C = 0, C = 0, RS = 0, CS = 0;
        if (!ws["!cols"])
          ws["!cols"] = [];
        for (; _R < rows.length && R < sheetRows; ++_R) {
          var row = rows[_R];
          if (is_dom_element_hidden(row)) {
            if (opts.display)
              continue;
            rowinfo[R] = { hidden: true };
          }
          var elts = row.children;
          for (_C = C = 0; _C < elts.length; ++_C) {
            var elt = elts[_C];
            if (opts.display && is_dom_element_hidden(elt))
              continue;
            var v = elt.hasAttribute("data-v") ? elt.getAttribute("data-v") : elt.hasAttribute("v") ? elt.getAttribute("v") : htmldecode(elt.innerHTML);
            var z = elt.getAttribute("data-z") || elt.getAttribute("z");
            for (midx = 0; midx < merges.length; ++midx) {
              var m = merges[midx];
              if (m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) {
                C = m.e.c + 1 - or_C;
                midx = -1;
              }
            }
            CS = +elt.getAttribute("colspan") || 1;
            if ((RS = +elt.getAttribute("rowspan") || 1) > 1 || CS > 1)
              merges.push({ s: { r: R + or_R, c: C + or_C }, e: { r: R + or_R + (RS || 1) - 1, c: C + or_C + (CS || 1) - 1 } });
            var o = { t: "s", v };
            var _t = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
            if (v != null) {
              if (v.length == 0)
                o.t = _t || "z";
              else if (opts.raw || v.trim().length == 0 || _t == "s") {
              } else if (v === "TRUE")
                o = { t: "b", v: true };
              else if (v === "FALSE")
                o = { t: "b", v: false };
              else if (!isNaN(fuzzynum(v)))
                o = { t: "n", v: fuzzynum(v) };
              else if (!isNaN(fuzzydate(v).getDate())) {
                o = { t: "d", v: parseDate(v) };
                if (!opts.cellDates)
                  o = { t: "n", v: datenum(o.v) };
                o.z = opts.dateNF || table_fmt[14];
              }
            }
            if (o.z === void 0 && z != null)
              o.z = z;
            var l = "", Aelts = elt.getElementsByTagName("A");
            if (Aelts && Aelts.length) {
              for (var Aelti = 0; Aelti < Aelts.length; ++Aelti)
                if (Aelts[Aelti].hasAttribute("href")) {
                  l = Aelts[Aelti].getAttribute("href");
                  if (l.charAt(0) != "#")
                    break;
                }
            }
            if (l && l.charAt(0) != "#")
              o.l = { Target: l };
            if (opts.dense) {
              if (!ws[R + or_R])
                ws[R + or_R] = [];
              ws[R + or_R][C + or_C] = o;
            } else
              ws[encode_cell({ c: C + or_C, r: R + or_R })] = o;
            if (range.e.c < C + or_C)
              range.e.c = C + or_C;
            C += CS;
          }
          ++R;
        }
        if (merges.length)
          ws["!merges"] = (ws["!merges"] || []).concat(merges);
        range.e.r = Math.max(range.e.r, R - 1 + or_R);
        ws["!ref"] = encode_range(range);
        if (R >= sheetRows)
          ws["!fullref"] = encode_range((range.e.r = rows.length - _R + R - 1 + or_R, range));
        return ws;
      }
      function parse_dom_table(table, _opts) {
        var opts = _opts || {};
        var ws = opts.dense ? [] : {};
        return sheet_add_dom(ws, table, _opts);
      }
      function table_to_book(table, opts) {
        return sheet_to_workbook(parse_dom_table(table, opts), opts);
      }
      function is_dom_element_hidden(element) {
        var display = "";
        var get_computed_style = get_get_computed_style_function(element);
        if (get_computed_style)
          display = get_computed_style(element).getPropertyValue("display");
        if (!display)
          display = element.style && element.style.display;
        return display === "none";
      }
      function get_get_computed_style_function(element) {
        if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === "function")
          return element.ownerDocument.defaultView.getComputedStyle;
        if (typeof getComputedStyle === "function")
          return getComputedStyle;
        return null;
      }
      function parse_text_p(text) {
        var fixed = text.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ").replace(/<text:s\/>/g, " ").replace(/<text:s text:c="(\d+)"\/>/g, function($$, $1) {
          return Array(parseInt($1, 10) + 1).join(" ");
        }).replace(/<text:tab[^>]*\/>/g, "	").replace(/<text:line-break\/>/g, "\n");
        var v = unescapexml(fixed.replace(/<[^>]*>/g, ""));
        return [v];
      }
      var number_formats_ods = {
        day: ["d", "dd"],
        month: ["m", "mm"],
        year: ["y", "yy"],
        hours: ["h", "hh"],
        minutes: ["m", "mm"],
        seconds: ["s", "ss"],
        "am-pm": ["A/P", "AM/PM"],
        "day-of-week": ["ddd", "dddd"],
        era: ["e", "ee"],
        quarter: ["\\Qm", 'm\\"th quarter"']
      };
      function parse_content_xml(d, _opts) {
        var opts = _opts || {};
        if (DENSE != null && opts.dense == null)
          opts.dense = DENSE;
        var str = xlml_normalize(d);
        var state = [], tmp;
        var tag;
        var NFtag = { name: "" }, NF = "", pidx = 0;
        var sheetag;
        var rowtag;
        var Sheets = {}, SheetNames = [];
        var ws = opts.dense ? [] : {};
        var Rn, q;
        var ctag = { value: "" };
        var textp = "", textpidx = 0, textptag;
        var textR = [];
        var R = -1, C = -1, range = { s: { r: 1e6, c: 1e7 }, e: { r: 0, c: 0 } };
        var row_ol = 0;
        var number_format_map = {};
        var merges = [], mrange = {}, mR = 0, mC = 0;
        var rowinfo = [], rowpeat = 1, colpeat = 1;
        var arrayf = [];
        var WB = { Names: [] };
        var atag = {};
        var _Ref = ["", ""];
        var comments = [], comment = {};
        var creator = "", creatoridx = 0;
        var isstub = false, intable = false;
        var i = 0;
        xlmlregex.lastIndex = 0;
        str = str.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
        while (Rn = xlmlregex.exec(str))
          switch (Rn[3] = Rn[3].replace(/_.*$/, "")) {
            case "table":
            case "\u5DE5\u4F5C\u8868":
              if (Rn[1] === "/") {
                if (range.e.c >= range.s.c && range.e.r >= range.s.r)
                  ws["!ref"] = encode_range(range);
                else
                  ws["!ref"] = "A1:A1";
                if (opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
                  ws["!fullref"] = ws["!ref"];
                  range.e.r = opts.sheetRows - 1;
                  ws["!ref"] = encode_range(range);
                }
                if (merges.length)
                  ws["!merges"] = merges;
                if (rowinfo.length)
                  ws["!rows"] = rowinfo;
                sheetag.name = sheetag["\u540D\u79F0"] || sheetag.name;
                if (typeof JSON !== "undefined")
                  JSON.stringify(sheetag);
                SheetNames.push(sheetag.name);
                Sheets[sheetag.name] = ws;
                intable = false;
              } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                sheetag = parsexmltag(Rn[0], false);
                R = C = -1;
                range.s.r = range.s.c = 1e7;
                range.e.r = range.e.c = 0;
                ws = opts.dense ? [] : {};
                merges = [];
                rowinfo = [];
                intable = true;
              }
              break;
            case "table-row-group":
              if (Rn[1] === "/")
                --row_ol;
              else
                ++row_ol;
              break;
            case "table-row":
            case "\u884C":
              if (Rn[1] === "/") {
                R += rowpeat;
                rowpeat = 1;
                break;
              }
              rowtag = parsexmltag(Rn[0], false);
              if (rowtag["\u884C\u53F7"])
                R = rowtag["\u884C\u53F7"] - 1;
              else if (R == -1)
                R = 0;
              rowpeat = +rowtag["number-rows-repeated"] || 1;
              if (rowpeat < 10) {
                for (i = 0; i < rowpeat; ++i)
                  if (row_ol > 0)
                    rowinfo[R + i] = { level: row_ol };
              }
              C = -1;
              break;
            case "covered-table-cell":
              if (Rn[1] !== "/")
                ++C;
              if (opts.sheetStubs) {
                if (opts.dense) {
                  if (!ws[R])
                    ws[R] = [];
                  ws[R][C] = { t: "z" };
                } else
                  ws[encode_cell({ r: R, c: C })] = { t: "z" };
              }
              textp = "";
              textR = [];
              break;
            case "table-cell":
            case "\u6570\u636E":
              if (Rn[0].charAt(Rn[0].length - 2) === "/") {
                ++C;
                ctag = parsexmltag(Rn[0], false);
                colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                q = { t: "z", v: null };
                if (ctag.formula && opts.cellFormula != false)
                  q.f = ods_to_csf_formula(unescapexml(ctag.formula));
                if ((ctag["\u6570\u636E\u7C7B\u578B"] || ctag["value-type"]) == "string") {
                  q.t = "s";
                  q.v = unescapexml(ctag["string-value"] || "");
                  if (opts.dense) {
                    if (!ws[R])
                      ws[R] = [];
                    ws[R][C] = q;
                  } else {
                    ws[encode_cell({ r: R, c: C })] = q;
                  }
                }
                C += colpeat - 1;
              } else if (Rn[1] !== "/") {
                ++C;
                textp = "";
                textpidx = 0;
                textR = [];
                colpeat = 1;
                var rptR = rowpeat ? R + rowpeat - 1 : R;
                if (C > range.e.c)
                  range.e.c = C;
                if (C < range.s.c)
                  range.s.c = C;
                if (R < range.s.r)
                  range.s.r = R;
                if (rptR > range.e.r)
                  range.e.r = rptR;
                ctag = parsexmltag(Rn[0], false);
                comments = [];
                comment = {};
                q = { t: ctag["\u6570\u636E\u7C7B\u578B"] || ctag["value-type"], v: null };
                if (opts.cellFormula) {
                  if (ctag.formula)
                    ctag.formula = unescapexml(ctag.formula);
                  if (ctag["number-matrix-columns-spanned"] && ctag["number-matrix-rows-spanned"]) {
                    mR = parseInt(ctag["number-matrix-rows-spanned"], 10) || 0;
                    mC = parseInt(ctag["number-matrix-columns-spanned"], 10) || 0;
                    mrange = { s: { r: R, c: C }, e: { r: R + mR - 1, c: C + mC - 1 } };
                    q.F = encode_range(mrange);
                    arrayf.push([mrange, q.F]);
                  }
                  if (ctag.formula)
                    q.f = ods_to_csf_formula(ctag.formula);
                  else
                    for (i = 0; i < arrayf.length; ++i)
                      if (R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r) {
                        if (C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c)
                          q.F = arrayf[i][1];
                      }
                }
                if (ctag["number-columns-spanned"] || ctag["number-rows-spanned"]) {
                  mR = parseInt(ctag["number-rows-spanned"], 10) || 0;
                  mC = parseInt(ctag["number-columns-spanned"], 10) || 0;
                  mrange = { s: { r: R, c: C }, e: { r: R + mR - 1, c: C + mC - 1 } };
                  merges.push(mrange);
                }
                if (ctag["number-columns-repeated"])
                  colpeat = parseInt(ctag["number-columns-repeated"], 10);
                switch (q.t) {
                  case "boolean":
                    q.t = "b";
                    q.v = parsexmlbool(ctag["boolean-value"]);
                    break;
                  case "float":
                    q.t = "n";
                    q.v = parseFloat(ctag.value);
                    break;
                  case "percentage":
                    q.t = "n";
                    q.v = parseFloat(ctag.value);
                    break;
                  case "currency":
                    q.t = "n";
                    q.v = parseFloat(ctag.value);
                    break;
                  case "date":
                    q.t = "d";
                    q.v = parseDate(ctag["date-value"]);
                    if (!opts.cellDates) {
                      q.t = "n";
                      q.v = datenum(q.v);
                    }
                    q.z = "m/d/yy";
                    break;
                  case "time":
                    q.t = "n";
                    q.v = parse_isodur(ctag["time-value"]) / 86400;
                    if (opts.cellDates) {
                      q.t = "d";
                      q.v = numdate(q.v);
                    }
                    q.z = "HH:MM:SS";
                    break;
                  case "number":
                    q.t = "n";
                    q.v = parseFloat(ctag["\u6570\u636E\u6570\u503C"]);
                    break;
                  default:
                    if (q.t === "string" || q.t === "text" || !q.t) {
                      q.t = "s";
                      if (ctag["string-value"] != null) {
                        textp = unescapexml(ctag["string-value"]);
                        textR = [];
                      }
                    } else
                      throw new Error("Unsupported value type " + q.t);
                }
              } else {
                isstub = false;
                if (q.t === "s") {
                  q.v = textp || "";
                  if (textR.length)
                    q.R = textR;
                  isstub = textpidx == 0;
                }
                if (atag.Target)
                  q.l = atag;
                if (comments.length > 0) {
                  q.c = comments;
                  comments = [];
                }
                if (textp && opts.cellText !== false)
                  q.w = textp;
                if (isstub) {
                  q.t = "z";
                  delete q.v;
                }
                if (!isstub || opts.sheetStubs) {
                  if (!(opts.sheetRows && opts.sheetRows <= R)) {
                    for (var rpt = 0; rpt < rowpeat; ++rpt) {
                      colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                      if (opts.dense) {
                        if (!ws[R + rpt])
                          ws[R + rpt] = [];
                        ws[R + rpt][C] = rpt == 0 ? q : dup(q);
                        while (--colpeat > 0)
                          ws[R + rpt][C + colpeat] = dup(q);
                      } else {
                        ws[encode_cell({ r: R + rpt, c: C })] = q;
                        while (--colpeat > 0)
                          ws[encode_cell({ r: R + rpt, c: C + colpeat })] = dup(q);
                      }
                      if (range.e.c <= C)
                        range.e.c = C;
                    }
                  }
                }
                colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                C += colpeat - 1;
                colpeat = 0;
                q = {};
                textp = "";
                textR = [];
              }
              atag = {};
              break;
            case "document":
            case "document-content":
            case "\u7535\u5B50\u8868\u683C\u6587\u6863":
            case "spreadsheet":
            case "\u4E3B\u4F53":
            case "scripts":
            case "styles":
            case "font-face-decls":
            case "master-styles":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw "Bad state: " + tmp;
              } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
                state.push([Rn[3], true]);
              break;
            case "annotation":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw "Bad state: " + tmp;
                comment.t = textp;
                if (textR.length)
                  comment.R = textR;
                comment.a = creator;
                comments.push(comment);
              } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                state.push([Rn[3], false]);
              }
              creator = "";
              creatoridx = 0;
              textp = "";
              textpidx = 0;
              textR = [];
              break;
            case "creator":
              if (Rn[1] === "/") {
                creator = str.slice(creatoridx, Rn.index);
              } else
                creatoridx = Rn.index + Rn[0].length;
              break;
            case "meta":
            case "\u5143\u6570\u636E":
            case "settings":
            case "config-item-set":
            case "config-item-map-indexed":
            case "config-item-map-entry":
            case "config-item-map-named":
            case "shapes":
            case "frame":
            case "text-box":
            case "image":
            case "data-pilot-tables":
            case "list-style":
            case "form":
            case "dde-links":
            case "event-listeners":
            case "chart":
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw "Bad state: " + tmp;
              } else if (Rn[0].charAt(Rn[0].length - 2) !== "/")
                state.push([Rn[3], false]);
              textp = "";
              textpidx = 0;
              textR = [];
              break;
            case "scientific-number":
              break;
            case "currency-symbol":
              break;
            case "currency-style":
              break;
            case "number-style":
            case "percentage-style":
            case "date-style":
            case "time-style":
              if (Rn[1] === "/") {
                number_format_map[NFtag.name] = NF;
                if ((tmp = state.pop())[0] !== Rn[3])
                  throw "Bad state: " + tmp;
              } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
                NF = "";
                NFtag = parsexmltag(Rn[0], false);
                state.push([Rn[3], true]);
              }
              break;
            case "script":
              break;
            case "libraries":
              break;
            case "automatic-styles":
              break;
            case "default-style":
            case "page-layout":
              break;
            case "style":
              break;
            case "map":
              break;
            case "font-face":
              break;
            case "paragraph-properties":
              break;
            case "table-properties":
              break;
            case "table-column-properties":
              break;
            case "table-row-properties":
              break;
            case "table-cell-properties":
              break;
            case "number":
              switch (state[state.length - 1][0]) {
                case "time-style":
                case "date-style":
                  tag = parsexmltag(Rn[0], false);
                  NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
                  break;
              }
              break;
            case "fraction":
              break;
            case "day":
            case "month":
            case "year":
            case "era":
            case "day-of-week":
            case "week-of-year":
            case "quarter":
            case "hours":
            case "minutes":
            case "seconds":
            case "am-pm":
              switch (state[state.length - 1][0]) {
                case "time-style":
                case "date-style":
                  tag = parsexmltag(Rn[0], false);
                  NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
                  break;
              }
              break;
            case "boolean-style":
              break;
            case "boolean":
              break;
            case "text-style":
              break;
            case "text":
              if (Rn[0].slice(-2) === "/>")
                break;
              else if (Rn[1] === "/")
                switch (state[state.length - 1][0]) {
                  case "number-style":
                  case "date-style":
                  case "time-style":
                    NF += str.slice(pidx, Rn.index);
                    break;
                }
              else
                pidx = Rn.index + Rn[0].length;
              break;
            case "named-range":
              tag = parsexmltag(Rn[0], false);
              _Ref = ods_to_csf_3D(tag["cell-range-address"]);
              var nrange = { Name: tag.name, Ref: _Ref[0] + "!" + _Ref[1] };
              if (intable)
                nrange.Sheet = SheetNames.length;
              WB.Names.push(nrange);
              break;
            case "text-content":
              break;
            case "text-properties":
              break;
            case "embedded-text":
              break;
            case "body":
            case "\u7535\u5B50\u8868\u683C":
              break;
            case "forms":
              break;
            case "table-column":
              break;
            case "table-header-rows":
              break;
            case "table-rows":
              break;
            case "table-column-group":
              break;
            case "table-header-columns":
              break;
            case "table-columns":
              break;
            case "null-date":
              break;
            case "graphic-properties":
              break;
            case "calculation-settings":
              break;
            case "named-expressions":
              break;
            case "label-range":
              break;
            case "label-ranges":
              break;
            case "named-expression":
              break;
            case "sort":
              break;
            case "sort-by":
              break;
            case "sort-groups":
              break;
            case "tab":
              break;
            case "line-break":
              break;
            case "span":
              break;
            case "p":
            case "\u6587\u672C\u4E32":
              if (["master-styles"].indexOf(state[state.length - 1][0]) > -1)
                break;
              if (Rn[1] === "/" && (!ctag || !ctag["string-value"])) {
                var ptp = parse_text_p(str.slice(textpidx, Rn.index), textptag);
                textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
              } else {
                textptag = parsexmltag(Rn[0], false);
                textpidx = Rn.index + Rn[0].length;
              }
              break;
            case "s":
              break;
            case "database-range":
              if (Rn[1] === "/")
                break;
              try {
                _Ref = ods_to_csf_3D(parsexmltag(Rn[0])["target-range-address"]);
                Sheets[_Ref[0]]["!autofilter"] = { ref: _Ref[1] };
              } catch (e) {
              }
              break;
            case "date":
              break;
            case "object":
              break;
            case "title":
            case "\u6807\u9898":
              break;
            case "desc":
              break;
            case "binary-data":
              break;
            case "table-source":
              break;
            case "scenario":
              break;
            case "iteration":
              break;
            case "content-validations":
              break;
            case "content-validation":
              break;
            case "help-message":
              break;
            case "error-message":
              break;
            case "database-ranges":
              break;
            case "filter":
              break;
            case "filter-and":
              break;
            case "filter-or":
              break;
            case "filter-condition":
              break;
            case "list-level-style-bullet":
              break;
            case "list-level-style-number":
              break;
            case "list-level-properties":
              break;
            case "sender-firstname":
            case "sender-lastname":
            case "sender-initials":
            case "sender-title":
            case "sender-position":
            case "sender-email":
            case "sender-phone-private":
            case "sender-fax":
            case "sender-company":
            case "sender-phone-work":
            case "sender-street":
            case "sender-city":
            case "sender-postal-code":
            case "sender-country":
            case "sender-state-or-province":
            case "author-name":
            case "author-initials":
            case "chapter":
            case "file-name":
            case "template-name":
            case "sheet-name":
              break;
            case "event-listener":
              break;
            case "initial-creator":
            case "creation-date":
            case "print-date":
            case "generator":
            case "document-statistic":
            case "user-defined":
            case "editing-duration":
            case "editing-cycles":
              break;
            case "config-item":
              break;
            case "page-number":
              break;
            case "page-count":
              break;
            case "time":
              break;
            case "cell-range-source":
              break;
            case "detective":
              break;
            case "operation":
              break;
            case "highlighted-range":
              break;
            case "data-pilot-table":
            case "source-cell-range":
            case "source-service":
            case "data-pilot-field":
            case "data-pilot-level":
            case "data-pilot-subtotals":
            case "data-pilot-subtotal":
            case "data-pilot-members":
            case "data-pilot-member":
            case "data-pilot-display-info":
            case "data-pilot-sort-info":
            case "data-pilot-layout-info":
            case "data-pilot-field-reference":
            case "data-pilot-groups":
            case "data-pilot-group":
            case "data-pilot-group-member":
              break;
            case "rect":
              break;
            case "dde-connection-decls":
            case "dde-connection-decl":
            case "dde-link":
            case "dde-source":
              break;
            case "properties":
              break;
            case "property":
              break;
            case "a":
              if (Rn[1] !== "/") {
                atag = parsexmltag(Rn[0], false);
                if (!atag.href)
                  break;
                atag.Target = unescapexml(atag.href);
                delete atag.href;
                if (atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
                  _Ref = ods_to_csf_3D(atag.Target.slice(1));
                  atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
                } else if (atag.Target.match(/^\.\.[\\\/]/))
                  atag.Target = atag.Target.slice(3);
              }
              break;
            case "table-protection":
              break;
            case "data-pilot-grand-total":
              break;
            case "office-document-common-attrs":
              break;
            default:
              switch (Rn[2]) {
                case "dc:":
                case "calcext:":
                case "loext:":
                case "ooo:":
                case "chartooo:":
                case "draw:":
                case "style:":
                case "chart:":
                case "form:":
                case "uof:":
                case "\u8868:":
                case "\u5B57:":
                  break;
                default:
                  if (opts.WTF)
                    throw new Error(Rn);
              }
          }
        var out = {
          Sheets,
          SheetNames,
          Workbook: WB
        };
        if (opts.bookSheets)
          delete out.Sheets;
        return out;
      }
      function parse_ods(zip, opts) {
        opts = opts || {};
        if (safegetzipfile(zip, "META-INF/manifest.xml"))
          parse_manifest(getzipdata(zip, "META-INF/manifest.xml"), opts);
        var content = getzipstr(zip, "content.xml");
        if (!content)
          throw new Error("Missing content.xml in ODS / UOF file");
        var wb = parse_content_xml(utf8read(content), opts);
        if (safegetzipfile(zip, "meta.xml"))
          wb.Props = parse_core_props(getzipdata(zip, "meta.xml"));
        return wb;
      }
      function parse_fods(data, opts) {
        return parse_content_xml(data, opts);
      }
      var write_styles_ods = /* @__PURE__ */ function() {
        var master_styles = [
          "<office:master-styles>",
          '<style:master-page style:name="mp1" style:page-layout-name="mp1">',
          "<style:header/>",
          '<style:header-left style:display="false"/>',
          "<style:footer/>",
          '<style:footer-left style:display="false"/>',
          "</style:master-page>",
          "</office:master-styles>"
        ].join("");
        var payload = "<office:document-styles " + wxt_helper({
          "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
          "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
          "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
          "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
          "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
          "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
          "xmlns:xlink": "http://www.w3.org/1999/xlink",
          "xmlns:dc": "http://purl.org/dc/elements/1.1/",
          "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
          "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
          "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
          "office:version": "1.2"
        }) + ">" + master_styles + "</office:document-styles>";
        return function wso() {
          return XML_HEADER + payload;
        };
      }();
      var write_content_ods = /* @__PURE__ */ function() {
        var write_text_p = function(text) {
          return escapexml(text).replace(/  +/g, function($$) {
            return '<text:s text:c="' + $$.length + '"/>';
          }).replace(/\t/g, "<text:tab/>").replace(/\n/g, "</text:p><text:p>").replace(/^ /, "<text:s/>").replace(/ $/, "<text:s/>");
        };
        var null_cell_xml = "          <table:table-cell />\n";
        var covered_cell_xml = "          <table:covered-table-cell/>\n";
        var write_ws2 = function(ws, wb, i) {
          var o = [];
          o.push('      <table:table table:name="' + escapexml(wb.SheetNames[i]) + '" table:style-name="ta1">\n');
          var R = 0, C = 0, range = decode_range(ws["!ref"] || "A1");
          var marr = ws["!merges"] || [], mi = 0;
          var dense = Array.isArray(ws);
          if (ws["!cols"]) {
            for (C = 0; C <= range.e.c; ++C)
              o.push("        <table:table-column" + (ws["!cols"][C] ? ' table:style-name="co' + ws["!cols"][C].ods + '"' : "") + "></table:table-column>\n");
          }
          var H = "", ROWS = ws["!rows"] || [];
          for (R = 0; R < range.s.r; ++R) {
            H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : "";
            o.push("        <table:table-row" + H + "></table:table-row>\n");
          }
          for (; R <= range.e.r; ++R) {
            H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : "";
            o.push("        <table:table-row" + H + ">\n");
            for (C = 0; C < range.s.c; ++C)
              o.push(null_cell_xml);
            for (; C <= range.e.c; ++C) {
              var skip = false, ct = {}, textp = "";
              for (mi = 0; mi != marr.length; ++mi) {
                if (marr[mi].s.c > C)
                  continue;
                if (marr[mi].s.r > R)
                  continue;
                if (marr[mi].e.c < C)
                  continue;
                if (marr[mi].e.r < R)
                  continue;
                if (marr[mi].s.c != C || marr[mi].s.r != R)
                  skip = true;
                ct["table:number-columns-spanned"] = marr[mi].e.c - marr[mi].s.c + 1;
                ct["table:number-rows-spanned"] = marr[mi].e.r - marr[mi].s.r + 1;
                break;
              }
              if (skip) {
                o.push(covered_cell_xml);
                continue;
              }
              var ref = encode_cell({ r: R, c: C }), cell = dense ? (ws[R] || [])[C] : ws[ref];
              if (cell && cell.f) {
                ct["table:formula"] = escapexml(csf_to_ods_formula(cell.f));
                if (cell.F) {
                  if (cell.F.slice(0, ref.length) == ref) {
                    var _Fref = decode_range(cell.F);
                    ct["table:number-matrix-columns-spanned"] = _Fref.e.c - _Fref.s.c + 1;
                    ct["table:number-matrix-rows-spanned"] = _Fref.e.r - _Fref.s.r + 1;
                  }
                }
              }
              if (!cell) {
                o.push(null_cell_xml);
                continue;
              }
              switch (cell.t) {
                case "b":
                  textp = cell.v ? "TRUE" : "FALSE";
                  ct["office:value-type"] = "boolean";
                  ct["office:boolean-value"] = cell.v ? "true" : "false";
                  break;
                case "n":
                  textp = cell.w || String(cell.v || 0);
                  ct["office:value-type"] = "float";
                  ct["office:value"] = cell.v || 0;
                  break;
                case "s":
                case "str":
                  textp = cell.v == null ? "" : cell.v;
                  ct["office:value-type"] = "string";
                  break;
                case "d":
                  textp = cell.w || parseDate(cell.v).toISOString();
                  ct["office:value-type"] = "date";
                  ct["office:date-value"] = parseDate(cell.v).toISOString();
                  ct["table:style-name"] = "ce1";
                  break;
                default:
                  o.push(null_cell_xml);
                  continue;
              }
              var text_p = write_text_p(textp);
              if (cell.l && cell.l.Target) {
                var _tgt = cell.l.Target;
                _tgt = _tgt.charAt(0) == "#" ? "#" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;
                if (_tgt.charAt(0) != "#" && !_tgt.match(/^\w+:/))
                  _tgt = "../" + _tgt;
                text_p = writextag("text:a", text_p, { "xlink:href": _tgt.replace(/&/g, "&amp;") });
              }
              o.push("          " + writextag("table:table-cell", writextag("text:p", text_p, {}), ct) + "\n");
            }
            o.push("        </table:table-row>\n");
          }
          o.push("      </table:table>\n");
          return o.join("");
        };
        var write_automatic_styles_ods = function(o, wb) {
          o.push(" <office:automatic-styles>\n");
          o.push('  <number:date-style style:name="N37" number:automatic-order="true">\n');
          o.push('   <number:month number:style="long"/>\n');
          o.push("   <number:text>/</number:text>\n");
          o.push('   <number:day number:style="long"/>\n');
          o.push("   <number:text>/</number:text>\n");
          o.push("   <number:year/>\n");
          o.push("  </number:date-style>\n");
          var cidx = 0;
          wb.SheetNames.map(function(n) {
            return wb.Sheets[n];
          }).forEach(function(ws) {
            if (!ws)
              return;
            if (ws["!cols"]) {
              for (var C = 0; C < ws["!cols"].length; ++C)
                if (ws["!cols"][C]) {
                  var colobj = ws["!cols"][C];
                  if (colobj.width == null && colobj.wpx == null && colobj.wch == null)
                    continue;
                  process_col(colobj);
                  colobj.ods = cidx;
                  var w = ws["!cols"][C].wpx + "px";
                  o.push('  <style:style style:name="co' + cidx + '" style:family="table-column">\n');
                  o.push('   <style:table-column-properties fo:break-before="auto" style:column-width="' + w + '"/>\n');
                  o.push("  </style:style>\n");
                  ++cidx;
                }
            }
          });
          var ridx = 0;
          wb.SheetNames.map(function(n) {
            return wb.Sheets[n];
          }).forEach(function(ws) {
            if (!ws)
              return;
            if (ws["!rows"]) {
              for (var R = 0; R < ws["!rows"].length; ++R)
                if (ws["!rows"][R]) {
                  ws["!rows"][R].ods = ridx;
                  var h = ws["!rows"][R].hpx + "px";
                  o.push('  <style:style style:name="ro' + ridx + '" style:family="table-row">\n');
                  o.push('   <style:table-row-properties fo:break-before="auto" style:row-height="' + h + '"/>\n');
                  o.push("  </style:style>\n");
                  ++ridx;
                }
            }
          });
          o.push('  <style:style style:name="ta1" style:family="table" style:master-page-name="mp1">\n');
          o.push('   <style:table-properties table:display="true" style:writing-mode="lr-tb"/>\n');
          o.push("  </style:style>\n");
          o.push('  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n');
          o.push(" </office:automatic-styles>\n");
        };
        return function wcx(wb, opts) {
          var o = [XML_HEADER];
          var attr = wxt_helper({
            "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
            "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
            "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
            "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
            "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
            "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
            "xmlns:xlink": "http://www.w3.org/1999/xlink",
            "xmlns:dc": "http://purl.org/dc/elements/1.1/",
            "xmlns:meta": "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
            "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
            "xmlns:presentation": "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
            "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
            "xmlns:chart": "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
            "xmlns:dr3d": "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
            "xmlns:math": "http://www.w3.org/1998/Math/MathML",
            "xmlns:form": "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
            "xmlns:script": "urn:oasis:names:tc:opendocument:xmlns:script:1.0",
            "xmlns:ooo": "http://openoffice.org/2004/office",
            "xmlns:ooow": "http://openoffice.org/2004/writer",
            "xmlns:oooc": "http://openoffice.org/2004/calc",
            "xmlns:dom": "http://www.w3.org/2001/xml-events",
            "xmlns:xforms": "http://www.w3.org/2002/xforms",
            "xmlns:xsd": "http://www.w3.org/2001/XMLSchema",
            "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
            "xmlns:sheet": "urn:oasis:names:tc:opendocument:sh33tjs:1.0",
            "xmlns:rpt": "http://openoffice.org/2005/report",
            "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
            "xmlns:xhtml": "http://www.w3.org/1999/xhtml",
            "xmlns:grddl": "http://www.w3.org/2003/g/data-view#",
            "xmlns:tableooo": "http://openoffice.org/2009/table",
            "xmlns:drawooo": "http://openoffice.org/2010/draw",
            "xmlns:calcext": "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0",
            "xmlns:loext": "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0",
            "xmlns:field": "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0",
            "xmlns:formx": "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0",
            "xmlns:css3t": "http://www.w3.org/TR/css3-text/",
            "office:version": "1.2"
          });
          var fods = wxt_helper({
            "xmlns:config": "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
            "office:mimetype": "application/vnd.oasis.opendocument.spreadsheet"
          });
          if (opts.bookType == "fods") {
            o.push("<office:document" + attr + fods + ">\n");
            o.push(write_meta_ods().replace(/office:document-meta/g, "office:meta"));
          } else
            o.push("<office:document-content" + attr + ">\n");
          write_automatic_styles_ods(o, wb);
          o.push("  <office:body>\n");
          o.push("    <office:spreadsheet>\n");
          for (var i = 0; i != wb.SheetNames.length; ++i)
            o.push(write_ws2(wb.Sheets[wb.SheetNames[i]], wb, i, opts));
          o.push("    </office:spreadsheet>\n");
          o.push("  </office:body>\n");
          if (opts.bookType == "fods")
            o.push("</office:document>");
          else
            o.push("</office:document-content>");
          return o.join("");
        };
      }();
      function write_ods(wb, opts) {
        if (opts.bookType == "fods")
          return write_content_ods(wb, opts);
        var zip = zip_new();
        var f = "";
        var manifest = [];
        var rdf = [];
        f = "mimetype";
        zip_add_file(zip, f, "application/vnd.oasis.opendocument.spreadsheet");
        f = "content.xml";
        zip_add_file(zip, f, write_content_ods(wb, opts));
        manifest.push([f, "text/xml"]);
        rdf.push([f, "ContentFile"]);
        f = "styles.xml";
        zip_add_file(zip, f, write_styles_ods(wb, opts));
        manifest.push([f, "text/xml"]);
        rdf.push([f, "StylesFile"]);
        f = "meta.xml";
        zip_add_file(zip, f, XML_HEADER + write_meta_ods());
        manifest.push([f, "text/xml"]);
        rdf.push([f, "MetadataFile"]);
        f = "manifest.rdf";
        zip_add_file(zip, f, write_rdf(rdf));
        manifest.push([f, "application/rdf+xml"]);
        f = "META-INF/manifest.xml";
        zip_add_file(zip, f, write_manifest(manifest));
        return zip;
      }
      function u8_to_dataview(array) {
        return new DataView(array.buffer, array.byteOffset, array.byteLength);
      }
      function u8str(u8) {
        return typeof TextDecoder != "undefined" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));
      }
      function stru8(str) {
        return typeof TextEncoder != "undefined" ? new TextEncoder().encode(str) : s2a(utf8write(str));
      }
      function u8contains(body, search) {
        outer:
          for (var L = 0; L <= body.length - search.length; ++L) {
            for (var j = 0; j < search.length; ++j)
              if (body[L + j] != search[j])
                continue outer;
            return true;
          }
        return false;
      }
      function u8concat(u8a) {
        var len = u8a.reduce(function(acc, x) {
          return acc + x.length;
        }, 0);
        var out = new Uint8Array(len);
        var off = 0;
        u8a.forEach(function(u8) {
          out.set(u8, off);
          off += u8.length;
        });
        return out;
      }
      function popcnt(x) {
        x -= x >> 1 & 1431655765;
        x = (x & 858993459) + (x >> 2 & 858993459);
        return (x + (x >> 4) & 252645135) * 16843009 >>> 24;
      }
      function readDecimal128LE(buf, offset) {
        var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;
        var mantissa = buf[offset + 14] & 1;
        for (var j = offset + 13; j >= offset; --j)
          mantissa = mantissa * 256 + buf[j];
        return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
      }
      function writeDecimal128LE(buf, offset, value) {
        var exp = Math.floor(value == 0 ? 0 : Math.LOG10E * Math.log(Math.abs(value))) + 6176 - 20;
        var mantissa = value / Math.pow(10, exp - 6176);
        buf[offset + 15] |= exp >> 7;
        buf[offset + 14] |= (exp & 127) << 1;
        for (var i = 0; mantissa >= 1; ++i, mantissa /= 256)
          buf[offset + i] = mantissa & 255;
        buf[offset + 15] |= value >= 0 ? 0 : 128;
      }
      function parse_varint49(buf, ptr) {
        var l = ptr ? ptr[0] : 0;
        var usz = buf[l] & 127;
        varint:
          if (buf[l++] >= 128) {
            usz |= (buf[l] & 127) << 7;
            if (buf[l++] < 128)
              break varint;
            usz |= (buf[l] & 127) << 14;
            if (buf[l++] < 128)
              break varint;
            usz |= (buf[l] & 127) << 21;
            if (buf[l++] < 128)
              break varint;
            usz += (buf[l] & 127) * Math.pow(2, 28);
            ++l;
            if (buf[l++] < 128)
              break varint;
            usz += (buf[l] & 127) * Math.pow(2, 35);
            ++l;
            if (buf[l++] < 128)
              break varint;
            usz += (buf[l] & 127) * Math.pow(2, 42);
            ++l;
            if (buf[l++] < 128)
              break varint;
          }
        if (ptr)
          ptr[0] = l;
        return usz;
      }
      function write_varint49(v) {
        var usz = new Uint8Array(7);
        usz[0] = v & 127;
        var L = 1;
        sz:
          if (v > 127) {
            usz[L - 1] |= 128;
            usz[L] = v >> 7 & 127;
            ++L;
            if (v <= 16383)
              break sz;
            usz[L - 1] |= 128;
            usz[L] = v >> 14 & 127;
            ++L;
            if (v <= 2097151)
              break sz;
            usz[L - 1] |= 128;
            usz[L] = v >> 21 & 127;
            ++L;
            if (v <= 268435455)
              break sz;
            usz[L - 1] |= 128;
            usz[L] = v / 256 >>> 21 & 127;
            ++L;
            if (v <= 34359738367)
              break sz;
            usz[L - 1] |= 128;
            usz[L] = v / 65536 >>> 21 & 127;
            ++L;
            if (v <= 4398046511103)
              break sz;
            usz[L - 1] |= 128;
            usz[L] = v / 16777216 >>> 21 & 127;
            ++L;
          }
        return usz.slice(0, L);
      }
      function varint_to_i32(buf) {
        var l = 0, i32 = buf[l] & 127;
        varint:
          if (buf[l++] >= 128) {
            i32 |= (buf[l] & 127) << 7;
            if (buf[l++] < 128)
              break varint;
            i32 |= (buf[l] & 127) << 14;
            if (buf[l++] < 128)
              break varint;
            i32 |= (buf[l] & 127) << 21;
            if (buf[l++] < 128)
              break varint;
            i32 |= (buf[l] & 127) << 28;
          }
        return i32;
      }
      function parse_shallow(buf) {
        var out = [], ptr = [0];
        while (ptr[0] < buf.length) {
          var off = ptr[0];
          var num = parse_varint49(buf, ptr);
          var type = num & 7;
          num = Math.floor(num / 8);
          var len = 0;
          var res;
          if (num == 0)
            break;
          switch (type) {
            case 0:
              {
                var l = ptr[0];
                while (buf[ptr[0]++] >= 128)
                  ;
                res = buf.slice(l, ptr[0]);
              }
              break;
            case 5:
              len = 4;
              res = buf.slice(ptr[0], ptr[0] + len);
              ptr[0] += len;
              break;
            case 1:
              len = 8;
              res = buf.slice(ptr[0], ptr[0] + len);
              ptr[0] += len;
              break;
            case 2:
              len = parse_varint49(buf, ptr);
              res = buf.slice(ptr[0], ptr[0] + len);
              ptr[0] += len;
              break;
            case 3:
            case 4:
            default:
              throw new Error("PB Type ".concat(type, " for Field ").concat(num, " at offset ").concat(off));
          }
          var v = { data: res, type };
          if (out[num] == null)
            out[num] = [v];
          else
            out[num].push(v);
        }
        return out;
      }
      function write_shallow(proto) {
        var out = [];
        proto.forEach(function(field, idx) {
          field.forEach(function(item) {
            if (!item.data)
              return;
            out.push(write_varint49(idx * 8 + item.type));
            if (item.type == 2)
              out.push(write_varint49(item.data.length));
            out.push(item.data);
          });
        });
        return u8concat(out);
      }
      function mappa(data, cb) {
        return (data == null ? void 0 : data.map(function(d) {
          return cb(d.data);
        })) || [];
      }
      function parse_iwa_file(buf) {
        var _a;
        var out = [], ptr = [0];
        while (ptr[0] < buf.length) {
          var len = parse_varint49(buf, ptr);
          var ai = parse_shallow(buf.slice(ptr[0], ptr[0] + len));
          ptr[0] += len;
          var res = {
            id: varint_to_i32(ai[1][0].data),
            messages: []
          };
          ai[2].forEach(function(b) {
            var mi = parse_shallow(b.data);
            var fl = varint_to_i32(mi[3][0].data);
            res.messages.push({
              meta: mi,
              data: buf.slice(ptr[0], ptr[0] + fl)
            });
            ptr[0] += fl;
          });
          if ((_a = ai[3]) == null ? void 0 : _a[0])
            res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;
          out.push(res);
        }
        return out;
      }
      function write_iwa_file(ias) {
        var bufs = [];
        ias.forEach(function(ia) {
          var ai = [];
          ai[1] = [{ data: write_varint49(ia.id), type: 0 }];
          ai[2] = [];
          if (ia.merge != null)
            ai[3] = [{ data: write_varint49(+!!ia.merge), type: 0 }];
          var midata = [];
          ia.messages.forEach(function(mi) {
            midata.push(mi.data);
            mi.meta[3] = [{ type: 0, data: write_varint49(mi.data.length) }];
            ai[2].push({ data: write_shallow(mi.meta), type: 2 });
          });
          var aipayload = write_shallow(ai);
          bufs.push(write_varint49(aipayload.length));
          bufs.push(aipayload);
          midata.forEach(function(mid) {
            return bufs.push(mid);
          });
        });
        return u8concat(bufs);
      }
      function parse_snappy_chunk(type, buf) {
        if (type != 0)
          throw new Error("Unexpected Snappy chunk type ".concat(type));
        var ptr = [0];
        var usz = parse_varint49(buf, ptr);
        var chunks = [];
        while (ptr[0] < buf.length) {
          var tag = buf[ptr[0]] & 3;
          if (tag == 0) {
            var len = buf[ptr[0]++] >> 2;
            if (len < 60)
              ++len;
            else {
              var c = len - 59;
              len = buf[ptr[0]];
              if (c > 1)
                len |= buf[ptr[0] + 1] << 8;
              if (c > 2)
                len |= buf[ptr[0] + 2] << 16;
              if (c > 3)
                len |= buf[ptr[0] + 3] << 24;
              len >>>= 0;
              len++;
              ptr[0] += c;
            }
            chunks.push(buf.slice(ptr[0], ptr[0] + len));
            ptr[0] += len;
            continue;
          } else {
            var offset = 0, length = 0;
            if (tag == 1) {
              length = (buf[ptr[0]] >> 2 & 7) + 4;
              offset = (buf[ptr[0]++] & 224) << 3;
              offset |= buf[ptr[0]++];
            } else {
              length = (buf[ptr[0]++] >> 2) + 1;
              if (tag == 2) {
                offset = buf[ptr[0]] | buf[ptr[0] + 1] << 8;
                ptr[0] += 2;
              } else {
                offset = (buf[ptr[0]] | buf[ptr[0] + 1] << 8 | buf[ptr[0] + 2] << 16 | buf[ptr[0] + 3] << 24) >>> 0;
                ptr[0] += 4;
              }
            }
            chunks = [u8concat(chunks)];
            if (offset == 0)
              throw new Error("Invalid offset 0");
            if (offset > chunks[0].length)
              throw new Error("Invalid offset beyond length");
            if (length >= offset) {
              chunks.push(chunks[0].slice(-offset));
              length -= offset;
              while (length >= chunks[chunks.length - 1].length) {
                chunks.push(chunks[chunks.length - 1]);
                length -= chunks[chunks.length - 1].length;
              }
            }
            chunks.push(chunks[0].slice(-offset, -offset + length));
          }
        }
        var o = u8concat(chunks);
        if (o.length != usz)
          throw new Error("Unexpected length: ".concat(o.length, " != ").concat(usz));
        return o;
      }
      function decompress_iwa_file(buf) {
        var out = [];
        var l = 0;
        while (l < buf.length) {
          var t = buf[l++];
          var len = buf[l] | buf[l + 1] << 8 | buf[l + 2] << 16;
          l += 3;
          out.push(parse_snappy_chunk(t, buf.slice(l, l + len)));
          l += len;
        }
        if (l !== buf.length)
          throw new Error("data is not a valid framed stream!");
        return u8concat(out);
      }
      function compress_iwa_file(buf) {
        var out = [];
        var l = 0;
        while (l < buf.length) {
          var c = Math.min(buf.length - l, 268435455);
          var frame = new Uint8Array(4);
          out.push(frame);
          var usz = write_varint49(c);
          var L = usz.length;
          out.push(usz);
          if (c <= 60) {
            L++;
            out.push(new Uint8Array([c - 1 << 2]));
          } else if (c <= 256) {
            L += 2;
            out.push(new Uint8Array([240, c - 1 & 255]));
          } else if (c <= 65536) {
            L += 3;
            out.push(new Uint8Array([244, c - 1 & 255, c - 1 >> 8 & 255]));
          } else if (c <= 16777216) {
            L += 4;
            out.push(new Uint8Array([248, c - 1 & 255, c - 1 >> 8 & 255, c - 1 >> 16 & 255]));
          } else if (c <= 4294967296) {
            L += 5;
            out.push(new Uint8Array([252, c - 1 & 255, c - 1 >> 8 & 255, c - 1 >> 16 & 255, c - 1 >>> 24 & 255]));
          }
          out.push(buf.slice(l, l + c));
          L += c;
          frame[0] = 0;
          frame[1] = L & 255;
          frame[2] = L >> 8 & 255;
          frame[3] = L >> 16 & 255;
          l += c;
        }
        return u8concat(out);
      }
      function parse_old_storage(buf, sst, rsst, v) {
        var dv = u8_to_dataview(buf);
        var flags = dv.getUint32(4, true);
        var data_offset = (v > 1 ? 12 : 8) + popcnt(flags & (v > 1 ? 3470 : 398)) * 4;
        var ridx = -1, sidx = -1, ieee = NaN, dt = new Date(2001, 0, 1);
        if (flags & 512) {
          ridx = dv.getUint32(data_offset, true);
          data_offset += 4;
        }
        data_offset += popcnt(flags & (v > 1 ? 12288 : 4096)) * 4;
        if (flags & 16) {
          sidx = dv.getUint32(data_offset, true);
          data_offset += 4;
        }
        if (flags & 32) {
          ieee = dv.getFloat64(data_offset, true);
          data_offset += 8;
        }
        if (flags & 64) {
          dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
          data_offset += 8;
        }
        var ret;
        switch (buf[2]) {
          case 0:
            break;
          case 2:
            ret = { t: "n", v: ieee };
            break;
          case 3:
            ret = { t: "s", v: sst[sidx] };
            break;
          case 5:
            ret = { t: "d", v: dt };
            break;
          case 6:
            ret = { t: "b", v: ieee > 0 };
            break;
          case 7:
            ret = { t: "n", v: ieee / 86400 };
            break;
          case 8:
            ret = { t: "e", v: 0 };
            break;
          case 9:
            {
              if (ridx > -1)
                ret = { t: "s", v: rsst[ridx] };
              else if (sidx > -1)
                ret = { t: "s", v: sst[sidx] };
              else if (!isNaN(ieee))
                ret = { t: "n", v: ieee };
              else
                throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
            }
            break;
          default:
            throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
        }
        return ret;
      }
      function parse_new_storage(buf, sst, rsst) {
        var dv = u8_to_dataview(buf);
        var flags = dv.getUint32(8, true);
        var data_offset = 12;
        var ridx = -1, sidx = -1, d128 = NaN, ieee = NaN, dt = new Date(2001, 0, 1);
        if (flags & 1) {
          d128 = readDecimal128LE(buf, data_offset);
          data_offset += 16;
        }
        if (flags & 2) {
          ieee = dv.getFloat64(data_offset, true);
          data_offset += 8;
        }
        if (flags & 4) {
          dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
          data_offset += 8;
        }
        if (flags & 8) {
          sidx = dv.getUint32(data_offset, true);
          data_offset += 4;
        }
        if (flags & 16) {
          ridx = dv.getUint32(data_offset, true);
          data_offset += 4;
        }
        var ret;
        switch (buf[1]) {
          case 0:
            break;
          case 2:
            ret = { t: "n", v: d128 };
            break;
          case 3:
            ret = { t: "s", v: sst[sidx] };
            break;
          case 5:
            ret = { t: "d", v: dt };
            break;
          case 6:
            ret = { t: "b", v: ieee > 0 };
            break;
          case 7:
            ret = { t: "n", v: ieee / 86400 };
            break;
          case 8:
            ret = { t: "e", v: 0 };
            break;
          case 9:
            {
              if (ridx > -1)
                ret = { t: "s", v: rsst[ridx] };
              else
                throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
            }
            break;
          case 10:
            ret = { t: "n", v: d128 };
            break;
          default:
            throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
        }
        return ret;
      }
      function write_new_storage(cell, sst) {
        var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, flags = 0;
        out[0] = 5;
        switch (cell.t) {
          case "n":
            out[1] = 2;
            writeDecimal128LE(out, l, cell.v);
            flags |= 1;
            l += 16;
            break;
          case "b":
            out[1] = 6;
            dv.setFloat64(l, cell.v ? 1 : 0, true);
            flags |= 2;
            l += 8;
            break;
          case "s":
            if (sst.indexOf(cell.v) == -1)
              throw new Error("Value ".concat(cell.v, " missing from SST!"));
            out[1] = 3;
            dv.setUint32(l, sst.indexOf(cell.v), true);
            flags |= 8;
            l += 4;
            break;
          default:
            throw "unsupported cell type " + cell.t;
        }
        dv.setUint32(8, flags, true);
        return out.slice(0, l);
      }
      function write_old_storage(cell, sst) {
        var out = new Uint8Array(32), dv = u8_to_dataview(out), l = 12, flags = 0;
        out[0] = 3;
        switch (cell.t) {
          case "n":
            out[2] = 2;
            dv.setFloat64(l, cell.v, true);
            flags |= 32;
            l += 8;
            break;
          case "b":
            out[2] = 6;
            dv.setFloat64(l, cell.v ? 1 : 0, true);
            flags |= 32;
            l += 8;
            break;
          case "s":
            if (sst.indexOf(cell.v) == -1)
              throw new Error("Value ".concat(cell.v, " missing from SST!"));
            out[2] = 3;
            dv.setUint32(l, sst.indexOf(cell.v), true);
            flags |= 16;
            l += 4;
            break;
          default:
            throw "unsupported cell type " + cell.t;
        }
        dv.setUint32(4, flags, true);
        return out.slice(0, l);
      }
      function parse_cell_storage(buf, sst, rsst) {
        switch (buf[0]) {
          case 0:
          case 1:
          case 2:
          case 3:
            return parse_old_storage(buf, sst, rsst, buf[0]);
          case 5:
            return parse_new_storage(buf, sst, rsst);
          default:
            throw new Error("Unsupported payload version ".concat(buf[0]));
        }
      }
      function parse_TSP_Reference(buf) {
        var pb = parse_shallow(buf);
        return parse_varint49(pb[1][0].data);
      }
      function write_TSP_Reference(idx) {
        var out = [];
        out[1] = [{ type: 0, data: write_varint49(idx) }];
        return write_shallow(out);
      }
      function parse_TST_TableDataList(M, root) {
        var pb = parse_shallow(root.data);
        var type = varint_to_i32(pb[1][0].data);
        var entries = pb[3];
        var data = [];
        (entries || []).forEach(function(entry) {
          var le = parse_shallow(entry.data);
          var key = varint_to_i32(le[1][0].data) >>> 0;
          switch (type) {
            case 1:
              data[key] = u8str(le[3][0].data);
              break;
            case 8:
              {
                var rt = M[parse_TSP_Reference(le[9][0].data)][0];
                var rtp = parse_shallow(rt.data);
                var rtpref = M[parse_TSP_Reference(rtp[1][0].data)][0];
                var mtype = varint_to_i32(rtpref.meta[1][0].data);
                if (mtype != 2001)
                  throw new Error("2000 unexpected reference to ".concat(mtype));
                var tswpsa = parse_shallow(rtpref.data);
                data[key] = tswpsa[3].map(function(x) {
                  return u8str(x.data);
                }).join("");
              }
              break;
          }
        });
        return data;
      }
      function parse_TST_TileRowInfo(u8, type) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
        var pb = parse_shallow(u8);
        var R = varint_to_i32(pb[1][0].data) >>> 0;
        var cnt = varint_to_i32(pb[2][0].data) >>> 0;
        var wide_offsets = ((_b = (_a = pb[8]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;
        var used_storage_u8, used_storage;
        if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type != 0) {
          used_storage_u8 = (_f = (_e = pb[7]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data;
          used_storage = (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;
        } else if (((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) && type != 1) {
          used_storage_u8 = (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;
          used_storage = (_n = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n.data;
        } else
          throw "NUMBERS Tile missing ".concat(type, " cell storage");
        var width = wide_offsets ? 4 : 1;
        var used_storage_offsets = u8_to_dataview(used_storage_u8);
        var offsets = [];
        for (var C = 0; C < used_storage_u8.length / 2; ++C) {
          var off = used_storage_offsets.getUint16(C * 2, true);
          if (off < 65535)
            offsets.push([C, off]);
        }
        if (offsets.length != cnt)
          throw "Expected ".concat(cnt, " cells, found ").concat(offsets.length);
        var cells = [];
        for (C = 0; C < offsets.length - 1; ++C)
          cells[offsets[C][0]] = used_storage.subarray(offsets[C][1] * width, offsets[C + 1][1] * width);
        if (offsets.length >= 1)
          cells[offsets[offsets.length - 1][0]] = used_storage.subarray(offsets[offsets.length - 1][1] * width);
        return { R, cells };
      }
      function parse_TST_Tile(M, root) {
        var _a;
        var pb = parse_shallow(root.data);
        var storage = ((_a = pb == null ? void 0 : pb[7]) == null ? void 0 : _a[0]) ? varint_to_i32(pb[7][0].data) >>> 0 > 0 ? 1 : 0 : -1;
        var ri = mappa(pb[5], function(u8) {
          return parse_TST_TileRowInfo(u8, storage);
        });
        return {
          nrows: varint_to_i32(pb[4][0].data) >>> 0,
          data: ri.reduce(function(acc, x) {
            if (!acc[x.R])
              acc[x.R] = [];
            x.cells.forEach(function(cell, C) {
              if (acc[x.R][C])
                throw new Error("Duplicate cell r=".concat(x.R, " c=").concat(C));
              acc[x.R][C] = cell;
            });
            return acc;
          }, [])
        };
      }
      function parse_TST_TableModelArchive(M, root, ws) {
        var _a;
        var pb = parse_shallow(root.data);
        var range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
        range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
        if (range.e.r < 0)
          throw new Error("Invalid row varint ".concat(pb[6][0].data));
        range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
        if (range.e.c < 0)
          throw new Error("Invalid col varint ".concat(pb[7][0].data));
        ws["!ref"] = encode_range(range);
        var store = parse_shallow(pb[4][0].data);
        var sst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[4][0].data)][0]);
        var rsst = ((_a = store[17]) == null ? void 0 : _a[0]) ? parse_TST_TableDataList(M, M[parse_TSP_Reference(store[17][0].data)][0]) : [];
        var tile = parse_shallow(store[3][0].data);
        var _R = 0;
        tile[1].forEach(function(t) {
          var tl = parse_shallow(t.data);
          var ref = M[parse_TSP_Reference(tl[2][0].data)][0];
          var mtype = varint_to_i32(ref.meta[1][0].data);
          if (mtype != 6002)
            throw new Error("6001 unexpected reference to ".concat(mtype));
          var _tile = parse_TST_Tile(M, ref);
          _tile.data.forEach(function(row, R) {
            row.forEach(function(buf, C) {
              var addr = encode_cell({ r: _R + R, c: C });
              var res = parse_cell_storage(buf, sst, rsst);
              if (res)
                ws[addr] = res;
            });
          });
          _R += _tile.nrows;
        });
      }
      function parse_TST_TableInfoArchive(M, root) {
        var pb = parse_shallow(root.data);
        var out = { "!ref": "A1" };
        var tableref = M[parse_TSP_Reference(pb[2][0].data)];
        var mtype = varint_to_i32(tableref[0].meta[1][0].data);
        if (mtype != 6001)
          throw new Error("6000 unexpected reference to ".concat(mtype));
        parse_TST_TableModelArchive(M, tableref[0], out);
        return out;
      }
      function parse_TN_SheetArchive(M, root) {
        var _a;
        var pb = parse_shallow(root.data);
        var out = {
          name: ((_a = pb[1]) == null ? void 0 : _a[0]) ? u8str(pb[1][0].data) : "",
          sheets: []
        };
        var shapeoffs = mappa(pb[2], parse_TSP_Reference);
        shapeoffs.forEach(function(off) {
          M[off].forEach(function(m) {
            var mtype = varint_to_i32(m.meta[1][0].data);
            if (mtype == 6e3)
              out.sheets.push(parse_TST_TableInfoArchive(M, m));
          });
        });
        return out;
      }
      function parse_TN_DocumentArchive(M, root) {
        var out = book_new();
        var pb = parse_shallow(root.data);
        var sheetoffs = mappa(pb[1], parse_TSP_Reference);
        sheetoffs.forEach(function(off) {
          M[off].forEach(function(m) {
            var mtype = varint_to_i32(m.meta[1][0].data);
            if (mtype == 2) {
              var root2 = parse_TN_SheetArchive(M, m);
              root2.sheets.forEach(function(sheet, idx) {
                book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + "_" + idx, true);
              });
            }
          });
        });
        if (out.SheetNames.length == 0)
          throw new Error("Empty NUMBERS file");
        return out;
      }
      function parse_numbers_iwa(cfb) {
        var _a, _b, _c, _d;
        var M = {}, indices = [];
        cfb.FullPaths.forEach(function(p) {
          if (p.match(/\.iwpv2/))
            throw new Error("Unsupported password protection");
        });
        cfb.FileIndex.forEach(function(s) {
          if (!s.name.match(/\.iwa$/))
            return;
          var o;
          try {
            o = decompress_iwa_file(s.content);
          } catch (e) {
            return console.log("?? " + s.content.length + " " + (e.message || e));
          }
          var packets;
          try {
            packets = parse_iwa_file(o);
          } catch (e) {
            return console.log("## " + (e.message || e));
          }
          packets.forEach(function(packet) {
            M[packet.id] = packet.messages;
            indices.push(packet.id);
          });
        });
        if (!indices.length)
          throw new Error("File has no messages");
        var docroot = ((_d = (_c = (_b = (_a = M == null ? void 0 : M[1]) == null ? void 0 : _a[0]) == null ? void 0 : _b.meta) == null ? void 0 : _c[1]) == null ? void 0 : _d[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 1 && M[1][0];
        if (!docroot)
          indices.forEach(function(idx) {
            M[idx].forEach(function(iwam) {
              var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
              if (mtype == 1) {
                if (!docroot)
                  docroot = iwam;
                else
                  throw new Error("Document has multiple roots");
              }
            });
          });
        if (!docroot)
          throw new Error("Cannot find Document root");
        return parse_TN_DocumentArchive(M, docroot);
      }
      function write_tile_row(tri, data, SST) {
        var _a, _b, _c, _d;
        if (!((_a = tri[6]) == null ? void 0 : _a[0]) || !((_b = tri[7]) == null ? void 0 : _b[0]))
          throw "Mutation only works on post-BNC storages!";
        var wide_offsets = ((_d = (_c = tri[8]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && varint_to_i32(tri[8][0].data) > 0 || false;
        if (wide_offsets)
          throw "Math only works with normal offsets";
        var cnt = 0;
        var dv = u8_to_dataview(tri[7][0].data), last_offset = 0, cell_storage = [];
        var _dv = u8_to_dataview(tri[4][0].data), _last_offset = 0, _cell_storage = [];
        for (var C = 0; C < data.length; ++C) {
          if (data[C] == null) {
            dv.setUint16(C * 2, 65535, true);
            _dv.setUint16(C * 2, 65535);
            continue;
          }
          dv.setUint16(C * 2, last_offset, true);
          _dv.setUint16(C * 2, _last_offset, true);
          var celload, _celload;
          switch (typeof data[C]) {
            case "string":
              celload = write_new_storage({ t: "s", v: data[C] }, SST);
              _celload = write_old_storage({ t: "s", v: data[C] }, SST);
              break;
            case "number":
              celload = write_new_storage({ t: "n", v: data[C] }, SST);
              _celload = write_old_storage({ t: "n", v: data[C] }, SST);
              break;
            case "boolean":
              celload = write_new_storage({ t: "b", v: data[C] }, SST);
              _celload = write_old_storage({ t: "b", v: data[C] }, SST);
              break;
            default:
              throw new Error("Unsupported value " + data[C]);
          }
          cell_storage.push(celload);
          last_offset += celload.length;
          _cell_storage.push(_celload);
          _last_offset += _celload.length;
          ++cnt;
        }
        tri[2][0].data = write_varint49(cnt);
        for (; C < tri[7][0].data.length / 2; ++C) {
          dv.setUint16(C * 2, 65535, true);
          _dv.setUint16(C * 2, 65535, true);
        }
        tri[6][0].data = u8concat(cell_storage);
        tri[3][0].data = u8concat(_cell_storage);
        return cnt;
      }
      function write_numbers_iwa(wb, opts) {
        if (!opts || !opts.numbers)
          throw new Error("Must pass a `numbers` option -- check the README");
        var ws = wb.Sheets[wb.SheetNames[0]];
        if (wb.SheetNames.length > 1)
          console.error("The Numbers writer currently writes only the first table");
        var range = decode_range(ws["!ref"]);
        range.s.r = range.s.c = 0;
        var trunc = false;
        if (range.e.c > 9) {
          trunc = true;
          range.e.c = 9;
        }
        if (range.e.r > 49) {
          trunc = true;
          range.e.r = 49;
        }
        if (trunc)
          console.error("The Numbers writer is currently limited to ".concat(encode_range(range)));
        var data = sheet_to_json(ws, { range, header: 1 });
        var SST = ["~Sh33tJ5~"];
        data.forEach(function(row) {
          return row.forEach(function(cell) {
            if (typeof cell == "string")
              SST.push(cell);
          });
        });
        var dependents = {};
        var indices = [];
        var cfb = CFB.read(opts.numbers, { type: "base64" });
        cfb.FileIndex.map(function(fi, idx) {
          return [fi, cfb.FullPaths[idx]];
        }).forEach(function(row) {
          var fi = row[0], fp = row[1];
          if (fi.type != 2)
            return;
          if (!fi.name.match(/\.iwa/))
            return;
          var old_content = fi.content;
          var raw1 = decompress_iwa_file(old_content);
          var x2 = parse_iwa_file(raw1);
          x2.forEach(function(packet2) {
            indices.push(packet2.id);
            dependents[packet2.id] = { deps: [], location: fp, type: varint_to_i32(packet2.messages[0].meta[1][0].data) };
          });
        });
        indices.sort(function(x2, y2) {
          return x2 - y2;
        });
        var indices_varint = indices.filter(function(x2) {
          return x2 > 1;
        }).map(function(x2) {
          return [x2, write_varint49(x2)];
        });
        cfb.FileIndex.map(function(fi, idx) {
          return [fi, cfb.FullPaths[idx]];
        }).forEach(function(row) {
          var fi = row[0], fp = row[1];
          if (!fi.name.match(/\.iwa/))
            return;
          var x2 = parse_iwa_file(decompress_iwa_file(fi.content));
          x2.forEach(function(ia) {
            ia.messages.forEach(function(m) {
              indices_varint.forEach(function(ivi) {
                if (ia.messages.some(function(mess) {
                  return varint_to_i32(mess.meta[1][0].data) != 11006 && u8contains(mess.data, ivi[1]);
                })) {
                  dependents[ivi[0]].deps.push(ia.id);
                }
              });
            });
          });
        });
        function get_unique_msgid() {
          for (var i = 927262; i < 2e6; ++i)
            if (!dependents[i])
              return i;
          throw new Error("Too many messages");
        }
        var entry = CFB.find(cfb, dependents[1].location);
        var x = parse_iwa_file(decompress_iwa_file(entry.content));
        var docroot;
        for (var xi = 0; xi < x.length; ++xi) {
          var packet = x[xi];
          if (packet.id == 1)
            docroot = packet;
        }
        var sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[1][0].data);
        entry = CFB.find(cfb, dependents[sheetrootref].location);
        x = parse_iwa_file(decompress_iwa_file(entry.content));
        for (xi = 0; xi < x.length; ++xi) {
          packet = x[xi];
          if (packet.id == sheetrootref)
            docroot = packet;
        }
        sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);
        entry = CFB.find(cfb, dependents[sheetrootref].location);
        x = parse_iwa_file(decompress_iwa_file(entry.content));
        for (xi = 0; xi < x.length; ++xi) {
          packet = x[xi];
          if (packet.id == sheetrootref)
            docroot = packet;
        }
        sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);
        entry = CFB.find(cfb, dependents[sheetrootref].location);
        x = parse_iwa_file(decompress_iwa_file(entry.content));
        for (xi = 0; xi < x.length; ++xi) {
          packet = x[xi];
          if (packet.id == sheetrootref)
            docroot = packet;
        }
        var pb = parse_shallow(docroot.messages[0].data);
        {
          pb[6][0].data = write_varint49(range.e.r + 1);
          pb[7][0].data = write_varint49(range.e.c + 1);
          var cruidsref = parse_TSP_Reference(pb[46][0].data);
          var oldbucket = CFB.find(cfb, dependents[cruidsref].location);
          var _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
          {
            for (var j = 0; j < _x.length; ++j) {
              if (_x[j].id == cruidsref)
                break;
            }
            if (_x[j].id != cruidsref)
              throw "Bad ColumnRowUIDMapArchive";
            var cruids = parse_shallow(_x[j].messages[0].data);
            cruids[1] = [];
            cruids[2] = [], cruids[3] = [];
            for (var C = 0; C <= range.e.c; ++C) {
              var uuid = [];
              uuid[1] = uuid[2] = [{ type: 0, data: write_varint49(C + 420690) }];
              cruids[1].push({ type: 2, data: write_shallow(uuid) });
              cruids[2].push({ type: 0, data: write_varint49(C) });
              cruids[3].push({ type: 0, data: write_varint49(C) });
            }
            cruids[4] = [];
            cruids[5] = [], cruids[6] = [];
            for (var R = 0; R <= range.e.r; ++R) {
              uuid = [];
              uuid[1] = uuid[2] = [{ type: 0, data: write_varint49(R + 726270) }];
              cruids[4].push({ type: 2, data: write_shallow(uuid) });
              cruids[5].push({ type: 0, data: write_varint49(R) });
              cruids[6].push({ type: 0, data: write_varint49(R) });
            }
            _x[j].messages[0].data = write_shallow(cruids);
          }
          oldbucket.content = compress_iwa_file(write_iwa_file(_x));
          oldbucket.size = oldbucket.content.length;
          delete pb[46];
          var store = parse_shallow(pb[4][0].data);
          {
            store[7][0].data = write_varint49(range.e.r + 1);
            var row_headers = parse_shallow(store[1][0].data);
            var row_header_ref = parse_TSP_Reference(row_headers[2][0].data);
            oldbucket = CFB.find(cfb, dependents[row_header_ref].location);
            _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
            {
              if (_x[0].id != row_header_ref)
                throw "Bad HeaderStorageBucket";
              var base_bucket = parse_shallow(_x[0].messages[0].data);
              for (R = 0; R < data.length; ++R) {
                var _bucket = parse_shallow(base_bucket[2][0].data);
                _bucket[1][0].data = write_varint49(R);
                _bucket[4][0].data = write_varint49(data[R].length);
                base_bucket[2][R] = { type: base_bucket[2][0].type, data: write_shallow(_bucket) };
              }
              _x[0].messages[0].data = write_shallow(base_bucket);
            }
            oldbucket.content = compress_iwa_file(write_iwa_file(_x));
            oldbucket.size = oldbucket.content.length;
            var col_header_ref = parse_TSP_Reference(store[2][0].data);
            oldbucket = CFB.find(cfb, dependents[col_header_ref].location);
            _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
            {
              if (_x[0].id != col_header_ref)
                throw "Bad HeaderStorageBucket";
              base_bucket = parse_shallow(_x[0].messages[0].data);
              for (C = 0; C <= range.e.c; ++C) {
                _bucket = parse_shallow(base_bucket[2][0].data);
                _bucket[1][0].data = write_varint49(C);
                _bucket[4][0].data = write_varint49(range.e.r + 1);
                base_bucket[2][C] = { type: base_bucket[2][0].type, data: write_shallow(_bucket) };
              }
              _x[0].messages[0].data = write_shallow(base_bucket);
            }
            oldbucket.content = compress_iwa_file(write_iwa_file(_x));
            oldbucket.size = oldbucket.content.length;
            var sstref = parse_TSP_Reference(store[4][0].data);
            (function() {
              var sentry = CFB.find(cfb, dependents[sstref].location);
              var sx = parse_iwa_file(decompress_iwa_file(sentry.content));
              var sstroot;
              for (var sxi = 0; sxi < sx.length; ++sxi) {
                var packet2 = sx[sxi];
                if (packet2.id == sstref)
                  sstroot = packet2;
              }
              var sstdata = parse_shallow(sstroot.messages[0].data);
              {
                sstdata[3] = [];
                var newsst = [];
                SST.forEach(function(str, i) {
                  newsst[1] = [{ type: 0, data: write_varint49(i) }];
                  newsst[2] = [{ type: 0, data: write_varint49(1) }];
                  newsst[3] = [{ type: 2, data: stru8(str) }];
                  sstdata[3].push({ type: 2, data: write_shallow(newsst) });
                });
              }
              sstroot.messages[0].data = write_shallow(sstdata);
              var sy = write_iwa_file(sx);
              var raw32 = compress_iwa_file(sy);
              sentry.content = raw32;
              sentry.size = sentry.content.length;
            })();
            var tile = parse_shallow(store[3][0].data);
            {
              var t = tile[1][0];
              delete tile[2];
              var tl = parse_shallow(t.data);
              {
                var tileref = parse_TSP_Reference(tl[2][0].data);
                (function() {
                  var tentry = CFB.find(cfb, dependents[tileref].location);
                  var tx = parse_iwa_file(decompress_iwa_file(tentry.content));
                  var tileroot;
                  for (var sxi = 0; sxi < tx.length; ++sxi) {
                    var packet2 = tx[sxi];
                    if (packet2.id == tileref)
                      tileroot = packet2;
                  }
                  var tiledata = parse_shallow(tileroot.messages[0].data);
                  {
                    delete tiledata[6];
                    delete tile[7];
                    var rowload = new Uint8Array(tiledata[5][0].data);
                    tiledata[5] = [];
                    var cnt = 0;
                    for (var R2 = 0; R2 <= range.e.r; ++R2) {
                      var tilerow = parse_shallow(rowload);
                      cnt += write_tile_row(tilerow, data[R2], SST);
                      tilerow[1][0].data = write_varint49(R2);
                      tiledata[5].push({ data: write_shallow(tilerow), type: 2 });
                    }
                    tiledata[1] = [{ type: 0, data: write_varint49(range.e.c + 1) }];
                    tiledata[2] = [{ type: 0, data: write_varint49(range.e.r + 1) }];
                    tiledata[3] = [{ type: 0, data: write_varint49(cnt) }];
                    tiledata[4] = [{ type: 0, data: write_varint49(range.e.r + 1) }];
                  }
                  tileroot.messages[0].data = write_shallow(tiledata);
                  var ty = write_iwa_file(tx);
                  var raw32 = compress_iwa_file(ty);
                  tentry.content = raw32;
                  tentry.size = tentry.content.length;
                })();
              }
              t.data = write_shallow(tl);
            }
            store[3][0].data = write_shallow(tile);
          }
          pb[4][0].data = write_shallow(store);
        }
        docroot.messages[0].data = write_shallow(pb);
        var y = write_iwa_file(x);
        var raw3 = compress_iwa_file(y);
        entry.content = raw3;
        entry.size = entry.content.length;
        return cfb;
      }
      function fix_opts_func(defaults) {
        return function fix_opts(opts) {
          for (var i = 0; i != defaults.length; ++i) {
            var d = defaults[i];
            if (opts[d[0]] === void 0)
              opts[d[0]] = d[1];
            if (d[2] === "n")
              opts[d[0]] = Number(opts[d[0]]);
          }
        };
      }
      function fix_read_opts(opts) {
        fix_opts_func([
          ["cellNF", false],
          ["cellHTML", true],
          ["cellFormula", true],
          ["cellStyles", false],
          ["cellText", true],
          ["cellDates", false],
          ["sheetStubs", false],
          ["sheetRows", 0, "n"],
          ["bookDeps", false],
          ["bookSheets", false],
          ["bookProps", false],
          ["bookFiles", false],
          ["bookVBA", false],
          ["password", ""],
          ["WTF", false]
        ])(opts);
      }
      function fix_write_opts(opts) {
        fix_opts_func([
          ["cellDates", false],
          ["bookSST", false],
          ["bookType", "xlsx"],
          ["compression", false],
          ["WTF", false]
        ])(opts);
      }
      function get_sheet_type(n) {
        if (RELS.WS.indexOf(n) > -1)
          return "sheet";
        if (RELS.CS && n == RELS.CS)
          return "chart";
        if (RELS.DS && n == RELS.DS)
          return "dialog";
        if (RELS.MS && n == RELS.MS)
          return "macro";
        return n && n.length ? n : "sheet";
      }
      function safe_parse_wbrels(wbrels, sheets) {
        if (!wbrels)
          return 0;
        try {
          wbrels = sheets.map(function pwbr(w) {
            if (!w.id)
              w.id = w.strRelID;
            return [w.name, wbrels["!id"][w.id].Target, get_sheet_type(wbrels["!id"][w.id].Type)];
          });
        } catch (e) {
          return null;
        }
        return !wbrels || wbrels.length === 0 ? null : wbrels;
      }
      function safe_parse_sheet(zip, path, relsPath, sheet, idx, sheetRels, sheets, stype, opts, wb, themes, styles) {
        try {
          sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path);
          var data = getzipdata(zip, path);
          var _ws;
          switch (stype) {
            case "sheet":
              _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              break;
            case "chart":
              _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              if (!_ws || !_ws["!drawel"])
                break;
              var dfile = resolve_path(_ws["!drawel"].Target, path);
              var drelsp = get_rels_path(dfile);
              var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
              var chartp = resolve_path(draw, dfile);
              var crelsp = get_rels_path(chartp);
              _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
              break;
            case "macro":
              _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              break;
            case "dialog":
              _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              break;
            default:
              throw new Error("Unrecognized sheet type " + stype);
          }
          sheets[sheet] = _ws;
          var tcomments = [];
          if (sheetRels && sheetRels[sheet])
            keys(sheetRels[sheet]).forEach(function(n) {
              var dfile2 = "";
              if (sheetRels[sheet][n].Type == RELS.CMNT) {
                dfile2 = resolve_path(sheetRels[sheet][n].Target, path);
                var comments = parse_cmnt(getzipdata(zip, dfile2, true), dfile2, opts);
                if (!comments || !comments.length)
                  return;
                sheet_insert_comments(_ws, comments, false);
              }
              if (sheetRels[sheet][n].Type == RELS.TCMNT) {
                dfile2 = resolve_path(sheetRels[sheet][n].Target, path);
                tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile2, true), opts));
              }
            });
          if (tcomments && tcomments.length)
            sheet_insert_comments(_ws, tcomments, true, opts.people || []);
        } catch (e) {
          if (opts.WTF)
            throw e;
        }
      }
      function strip_front_slash(x) {
        return x.charAt(0) == "/" ? x.slice(1) : x;
      }
      function parse_zip(zip, opts) {
        make_ssf();
        opts = opts || {};
        fix_read_opts(opts);
        if (safegetzipfile(zip, "META-INF/manifest.xml"))
          return parse_ods(zip, opts);
        if (safegetzipfile(zip, "objectdata.xml"))
          return parse_ods(zip, opts);
        if (safegetzipfile(zip, "Index/Document.iwa")) {
          if (typeof Uint8Array == "undefined")
            throw new Error("NUMBERS file parsing requires Uint8Array support");
          if (typeof parse_numbers_iwa != "undefined") {
            if (zip.FileIndex)
              return parse_numbers_iwa(zip);
            var _zip = CFB.utils.cfb_new();
            zipentries(zip).forEach(function(e) {
              zip_add_file(_zip, e, getzipbin(zip, e));
            });
            return parse_numbers_iwa(_zip);
          }
          throw new Error("Unsupported NUMBERS file");
        }
        if (!safegetzipfile(zip, "[Content_Types].xml")) {
          if (safegetzipfile(zip, "index.xml.gz"))
            throw new Error("Unsupported NUMBERS 08 file");
          if (safegetzipfile(zip, "index.xml"))
            throw new Error("Unsupported NUMBERS 09 file");
          throw new Error("Unsupported ZIP file");
        }
        var entries = zipentries(zip);
        var dir = parse_ct(getzipstr(zip, "[Content_Types].xml"));
        var xlsb = false;
        var sheets, binname;
        if (dir.workbooks.length === 0) {
          binname = "xl/workbook.xml";
          if (getzipdata(zip, binname, true))
            dir.workbooks.push(binname);
        }
        if (dir.workbooks.length === 0) {
          binname = "xl/workbook.bin";
          if (!getzipdata(zip, binname, true))
            throw new Error("Could not find workbook");
          dir.workbooks.push(binname);
          xlsb = true;
        }
        if (dir.workbooks[0].slice(-3) == "bin")
          xlsb = true;
        var themes = {};
        var styles = {};
        if (!opts.bookSheets && !opts.bookProps) {
          strs = [];
          if (dir.sst)
            try {
              strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);
            } catch (e) {
              if (opts.WTF)
                throw e;
            }
          if (opts.cellStyles && dir.themes.length)
            themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//, ""), true) || "", dir.themes[0], opts);
          if (dir.style)
            styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
        }
        dir.links.map(function(link) {
          try {
            var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
            return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
          } catch (e) {
          }
        });
        var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);
        var props = {}, propdata = "";
        if (dir.coreprops.length) {
          propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
          if (propdata)
            props = parse_core_props(propdata);
          if (dir.extprops.length !== 0) {
            propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
            if (propdata)
              parse_ext_props(propdata, props, opts);
          }
        }
        var custprops = {};
        if (!opts.bookSheets || opts.bookProps) {
          if (dir.custprops.length !== 0) {
            propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
            if (propdata)
              custprops = parse_cust_props(propdata, opts);
          }
        }
        var out = {};
        if (opts.bookSheets || opts.bookProps) {
          if (wb.Sheets)
            sheets = wb.Sheets.map(function pluck(x) {
              return x.name;
            });
          else if (props.Worksheets && props.SheetNames.length > 0)
            sheets = props.SheetNames;
          if (opts.bookProps) {
            out.Props = props;
            out.Custprops = custprops;
          }
          if (opts.bookSheets && typeof sheets !== "undefined")
            out.SheetNames = sheets;
          if (opts.bookSheets ? out.SheetNames : opts.bookProps)
            return out;
        }
        sheets = {};
        var deps = {};
        if (opts.bookDeps && dir.calcchain)
          deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain, opts);
        var i = 0;
        var sheetRels = {};
        var path, relsPath;
        {
          var wbsheets = wb.Sheets;
          props.Worksheets = wbsheets.length;
          props.SheetNames = [];
          for (var j = 0; j != wbsheets.length; ++j) {
            props.SheetNames[j] = wbsheets[j].name;
          }
        }
        var wbext = xlsb ? "bin" : "xml";
        var wbrelsi = dir.workbooks[0].lastIndexOf("/");
        var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + "_rels/" + dir.workbooks[0].slice(wbrelsi + 1) + ".rels").replace(/^\//, "");
        if (!safegetzipfile(zip, wbrelsfile))
          wbrelsfile = "xl/_rels/workbook." + wbext + ".rels";
        var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, "s5s"));
        if ((dir.metadata || []).length >= 1) {
          opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])), dir.metadata[0], opts);
        }
        if ((dir.people || []).length >= 1) {
          opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])), opts);
        }
        if (wbrels)
          wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
        var nmode = getzipdata(zip, "xl/worksheets/sheet.xml", true) ? 1 : 0;
        wsloop:
          for (i = 0; i != props.Worksheets; ++i) {
            var stype = "sheet";
            if (wbrels && wbrels[i]) {
              path = "xl/" + wbrels[i][1].replace(/[\/]?xl\//, "");
              if (!safegetzipfile(zip, path))
                path = wbrels[i][1];
              if (!safegetzipfile(zip, path))
                path = wbrelsfile.replace(/_rels\/.*$/, "") + wbrels[i][1];
              stype = wbrels[i][2];
            } else {
              path = "xl/worksheets/sheet" + (i + 1 - nmode) + "." + wbext;
              path = path.replace(/sheet0\./, "sheet.");
            }
            relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
            if (opts && opts.sheets != null)
              switch (typeof opts.sheets) {
                case "number":
                  if (i != opts.sheets)
                    continue wsloop;
                  break;
                case "string":
                  if (props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase())
                    continue wsloop;
                  break;
                default:
                  if (Array.isArray && Array.isArray(opts.sheets)) {
                    var snjseen = false;
                    for (var snj = 0; snj != opts.sheets.length; ++snj) {
                      if (typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i)
                        snjseen = 1;
                      if (typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase())
                        snjseen = 1;
                    }
                    if (!snjseen)
                      continue wsloop;
                  }
              }
            safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);
          }
        out = {
          Directory: dir,
          Workbook: wb,
          Props: props,
          Custprops: custprops,
          Deps: deps,
          Sheets: sheets,
          SheetNames: props.SheetNames,
          Strings: strs,
          Styles: styles,
          Themes: themes,
          SSF: dup(table_fmt)
        };
        if (opts && opts.bookFiles) {
          if (zip.files) {
            out.keys = entries;
            out.files = zip.files;
          } else {
            out.keys = [];
            out.files = {};
            zip.FullPaths.forEach(function(p, idx) {
              p = p.replace(/^Root Entry[\/]/, "");
              out.keys.push(p);
              out.files[p] = zip.FileIndex[idx];
            });
          }
        }
        if (opts && opts.bookVBA) {
          if (dir.vba.length > 0)
            out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);
          else if (dir.defaults && dir.defaults.bin === CT_VBA)
            out.vbaraw = getzipdata(zip, "xl/vbaProject.bin", true);
        }
        return out;
      }
      function parse_xlsxcfb(cfb, _opts) {
        var opts = _opts || {};
        var f = "Workbook", data = CFB.find(cfb, f);
        try {
          f = "/!DataSpaces/Version";
          data = CFB.find(cfb, f);
          if (!data || !data.content)
            throw new Error("ECMA-376 Encrypted file missing " + f);
          parse_DataSpaceVersionInfo(data.content);
          f = "/!DataSpaces/DataSpaceMap";
          data = CFB.find(cfb, f);
          if (!data || !data.content)
            throw new Error("ECMA-376 Encrypted file missing " + f);
          var dsm = parse_DataSpaceMap(data.content);
          if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage")
            throw new Error("ECMA-376 Encrypted file bad " + f);
          f = "/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace";
          data = CFB.find(cfb, f);
          if (!data || !data.content)
            throw new Error("ECMA-376 Encrypted file missing " + f);
          var seds = parse_DataSpaceDefinition(data.content);
          if (seds.length != 1 || seds[0] != "StrongEncryptionTransform")
            throw new Error("ECMA-376 Encrypted file bad " + f);
          f = "/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary";
          data = CFB.find(cfb, f);
          if (!data || !data.content)
            throw new Error("ECMA-376 Encrypted file missing " + f);
          parse_Primary(data.content);
        } catch (e) {
        }
        f = "/EncryptionInfo";
        data = CFB.find(cfb, f);
        if (!data || !data.content)
          throw new Error("ECMA-376 Encrypted file missing " + f);
        var einfo = parse_EncryptionInfo(data.content);
        f = "/EncryptedPackage";
        data = CFB.find(cfb, f);
        if (!data || !data.content)
          throw new Error("ECMA-376 Encrypted file missing " + f);
        if (einfo[0] == 4 && typeof decrypt_agile !== "undefined")
          return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
        if (einfo[0] == 2 && typeof decrypt_std76 !== "undefined")
          return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
        throw new Error("File is password-protected");
      }
      function write_zip(wb, opts) {
        if (opts.bookType == "ods")
          return write_ods(wb, opts);
        if (opts.bookType == "numbers")
          return write_numbers_iwa(wb, opts);
        if (opts.bookType == "xlsb")
          return write_zip_xlsxb(wb, opts);
        return write_zip_xlsx(wb, opts);
      }
      function write_zip_xlsxb(wb, opts) {
        _shapeid = 1024;
        if (wb && !wb.SSF) {
          wb.SSF = dup(table_fmt);
        }
        if (wb && wb.SSF) {
          make_ssf();
          SSF_load_table(wb.SSF);
          opts.revssf = evert_num(wb.SSF);
          opts.revssf[wb.SSF[65535]] = 0;
          opts.ssf = wb.SSF;
        }
        opts.rels = {};
        opts.wbrels = {};
        opts.Strings = [];
        opts.Strings.Count = 0;
        opts.Strings.Unique = 0;
        if (browser_has_Map)
          opts.revStrings = /* @__PURE__ */ new Map();
        else {
          opts.revStrings = {};
          opts.revStrings.foo = [];
          delete opts.revStrings.foo;
        }
        var wbext = opts.bookType == "xlsb" ? "bin" : "xml";
        var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
        var ct = new_ct();
        fix_write_opts(opts = opts || {});
        var zip = zip_new();
        var f = "", rId = 0;
        opts.cellXfs = [];
        get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
        if (!wb.Props)
          wb.Props = {};
        f = "docProps/core.xml";
        zip_add_file(zip, f, write_core_props(wb.Props, opts));
        ct.coreprops.push(f);
        add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
        f = "docProps/app.xml";
        if (wb.Props && wb.Props.SheetNames) {
        } else if (!wb.Workbook || !wb.Workbook.Sheets)
          wb.Props.SheetNames = wb.SheetNames;
        else {
          var _sn = [];
          for (var _i = 0; _i < wb.SheetNames.length; ++_i)
            if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2)
              _sn.push(wb.SheetNames[_i]);
          wb.Props.SheetNames = _sn;
        }
        wb.Props.Worksheets = wb.Props.SheetNames.length;
        zip_add_file(zip, f, write_ext_props(wb.Props, opts));
        ct.extprops.push(f);
        add_rels(opts.rels, 3, f, RELS.EXT_PROPS);
        if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
          f = "docProps/custom.xml";
          zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));
          ct.custprops.push(f);
          add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
        }
        for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
          var wsrels = { "!id": {} };
          var ws = wb.Sheets[wb.SheetNames[rId - 1]];
          var _type = (ws || {})["!type"] || "sheet";
          switch (_type) {
            case "chart":
            default:
              f = "xl/worksheets/sheet" + rId + "." + wbext;
              zip_add_file(zip, f, write_ws(rId - 1, f, opts, wb, wsrels));
              ct.sheets.push(f);
              add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
          }
          if (ws) {
            var comments = ws["!comments"];
            var need_vml = false;
            var cf = "";
            if (comments && comments.length > 0) {
              cf = "xl/comments" + rId + "." + wbext;
              zip_add_file(zip, cf, write_cmnt(comments, cf, opts));
              ct.comments.push(cf);
              add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
              need_vml = true;
            }
            if (ws["!legacy"]) {
              if (need_vml)
                zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_comments_vml(rId, ws["!comments"]));
            }
            delete ws["!comments"];
            delete ws["!legacy"];
          }
          if (wsrels["!id"].rId1)
            zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
        }
        if (opts.Strings != null && opts.Strings.length > 0) {
          f = "xl/sharedStrings." + wbext;
          zip_add_file(zip, f, write_sst(opts.Strings, f, opts));
          ct.strs.push(f);
          add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
        }
        f = "xl/workbook." + wbext;
        zip_add_file(zip, f, write_wb(wb, f, opts));
        ct.workbooks.push(f);
        add_rels(opts.rels, 1, f, RELS.WB);
        f = "xl/theme/theme1.xml";
        zip_add_file(zip, f, write_theme(wb.Themes, opts));
        ct.themes.push(f);
        add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
        f = "xl/styles." + wbext;
        zip_add_file(zip, f, write_sty(wb, f, opts));
        ct.styles.push(f);
        add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
        if (wb.vbaraw && vbafmt) {
          f = "xl/vbaProject.bin";
          zip_add_file(zip, f, wb.vbaraw);
          ct.vba.push(f);
          add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
        }
        f = "xl/metadata." + wbext;
        zip_add_file(zip, f, write_xlmeta(f));
        ct.metadata.push(f);
        add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
        zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
        zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
        zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
        delete opts.revssf;
        delete opts.ssf;
        return zip;
      }
      function write_zip_xlsx(wb, opts) {
        _shapeid = 1024;
        if (wb && !wb.SSF) {
          wb.SSF = dup(table_fmt);
        }
        if (wb && wb.SSF) {
          make_ssf();
          SSF_load_table(wb.SSF);
          opts.revssf = evert_num(wb.SSF);
          opts.revssf[wb.SSF[65535]] = 0;
          opts.ssf = wb.SSF;
        }
        opts.rels = {};
        opts.wbrels = {};
        opts.Strings = [];
        opts.Strings.Count = 0;
        opts.Strings.Unique = 0;
        if (browser_has_Map)
          opts.revStrings = /* @__PURE__ */ new Map();
        else {
          opts.revStrings = {};
          opts.revStrings.foo = [];
          delete opts.revStrings.foo;
        }
        var wbext = "xml";
        var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
        var ct = new_ct();
        fix_write_opts(opts = opts || {});
        var zip = zip_new();
        var f = "", rId = 0;
        opts.cellXfs = [];
        get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
        if (!wb.Props)
          wb.Props = {};
        f = "docProps/core.xml";
        zip_add_file(zip, f, write_core_props(wb.Props, opts));
        ct.coreprops.push(f);
        add_rels(opts.rels, 2, f, RELS.CORE_PROPS);
        f = "docProps/app.xml";
        if (wb.Props && wb.Props.SheetNames) {
        } else if (!wb.Workbook || !wb.Workbook.Sheets)
          wb.Props.SheetNames = wb.SheetNames;
        else {
          var _sn = [];
          for (var _i = 0; _i < wb.SheetNames.length; ++_i)
            if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2)
              _sn.push(wb.SheetNames[_i]);
          wb.Props.SheetNames = _sn;
        }
        wb.Props.Worksheets = wb.Props.SheetNames.length;
        zip_add_file(zip, f, write_ext_props(wb.Props, opts));
        ct.extprops.push(f);
        add_rels(opts.rels, 3, f, RELS.EXT_PROPS);
        if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
          f = "docProps/custom.xml";
          zip_add_file(zip, f, write_cust_props(wb.Custprops, opts));
          ct.custprops.push(f);
          add_rels(opts.rels, 4, f, RELS.CUST_PROPS);
        }
        var people = ["SheetJ5"];
        opts.tcid = 0;
        for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
          var wsrels = { "!id": {} };
          var ws = wb.Sheets[wb.SheetNames[rId - 1]];
          var _type = (ws || {})["!type"] || "sheet";
          switch (_type) {
            case "chart":
            default:
              f = "xl/worksheets/sheet" + rId + "." + wbext;
              zip_add_file(zip, f, write_ws_xml(rId - 1, opts, wb, wsrels));
              ct.sheets.push(f);
              add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
          }
          if (ws) {
            var comments = ws["!comments"];
            var need_vml = false;
            var cf = "";
            if (comments && comments.length > 0) {
              var needtc = false;
              comments.forEach(function(carr) {
                carr[1].forEach(function(c) {
                  if (c.T == true)
                    needtc = true;
                });
              });
              if (needtc) {
                cf = "xl/threadedComments/threadedComment" + rId + "." + wbext;
                zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));
                ct.threadedcomments.push(cf);
                add_rels(wsrels, -1, "../threadedComments/threadedComment" + rId + "." + wbext, RELS.TCMNT);
              }
              cf = "xl/comments" + rId + "." + wbext;
              zip_add_file(zip, cf, write_comments_xml(comments, opts));
              ct.comments.push(cf);
              add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
              need_vml = true;
            }
            if (ws["!legacy"]) {
              if (need_vml)
                zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_comments_vml(rId, ws["!comments"]));
            }
            delete ws["!comments"];
            delete ws["!legacy"];
          }
          if (wsrels["!id"].rId1)
            zip_add_file(zip, get_rels_path(f), write_rels(wsrels));
        }
        if (opts.Strings != null && opts.Strings.length > 0) {
          f = "xl/sharedStrings." + wbext;
          zip_add_file(zip, f, write_sst_xml(opts.Strings, opts));
          ct.strs.push(f);
          add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
        }
        f = "xl/workbook." + wbext;
        zip_add_file(zip, f, write_wb_xml(wb, opts));
        ct.workbooks.push(f);
        add_rels(opts.rels, 1, f, RELS.WB);
        f = "xl/theme/theme1.xml";
        zip_add_file(zip, f, write_theme(wb.Themes, opts));
        ct.themes.push(f);
        add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
        f = "xl/styles." + wbext;
        zip_add_file(zip, f, write_sty_xml(wb, opts));
        ct.styles.push(f);
        add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
        if (wb.vbaraw && vbafmt) {
          f = "xl/vbaProject.bin";
          zip_add_file(zip, f, wb.vbaraw);
          ct.vba.push(f);
          add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
        }
        f = "xl/metadata." + wbext;
        zip_add_file(zip, f, write_xlmeta_xml());
        ct.metadata.push(f);
        add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
        if (people.length > 1) {
          f = "xl/persons/person.xml";
          zip_add_file(zip, f, write_people_xml(people, opts));
          ct.people.push(f);
          add_rels(opts.wbrels, -1, "persons/person.xml", RELS.PEOPLE);
        }
        zip_add_file(zip, "[Content_Types].xml", write_ct(ct, opts));
        zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
        zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
        delete opts.revssf;
        delete opts.ssf;
        return zip;
      }
      function firstbyte(f, o) {
        var x = "";
        switch ((o || {}).type || "base64") {
          case "buffer":
            return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
          case "base64":
            x = Base64_decode(f.slice(0, 12));
            break;
          case "binary":
            x = f;
            break;
          case "array":
            return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
          default:
            throw new Error("Unrecognized type " + (o && o.type || "undefined"));
        }
        return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3), x.charCodeAt(4), x.charCodeAt(5), x.charCodeAt(6), x.charCodeAt(7)];
      }
      function read_cfb(cfb, opts) {
        if (CFB.find(cfb, "EncryptedPackage"))
          return parse_xlsxcfb(cfb, opts);
        return parse_xlscfb(cfb, opts);
      }
      function read_zip(data, opts) {
        var zip, d = data;
        var o = opts || {};
        if (!o.type)
          o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
        zip = zip_read(d, o);
        return parse_zip(zip, o);
      }
      function read_plaintext(data, o) {
        var i = 0;
        main:
          while (i < data.length)
            switch (data.charCodeAt(i)) {
              case 10:
              case 13:
              case 32:
                ++i;
                break;
              case 60:
                return parse_xlml(data.slice(i), o);
              default:
                break main;
            }
        return PRN.to_workbook(data, o);
      }
      function read_plaintext_raw(data, o) {
        var str = "", bytes = firstbyte(data, o);
        switch (o.type) {
          case "base64":
            str = Base64_decode(data);
            break;
          case "binary":
            str = data;
            break;
          case "buffer":
            str = data.toString("binary");
            break;
          case "array":
            str = cc2str(data);
            break;
          default:
            throw new Error("Unrecognized type " + o.type);
        }
        if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191)
          str = utf8read(str);
        o.type = "binary";
        return read_plaintext(str, o);
      }
      function read_utf16(data, o) {
        var d = data;
        if (o.type == "base64")
          d = Base64_decode(d);
        d = $cptable.utils.decode(1200, d.slice(2), "str");
        o.type = "binary";
        return read_plaintext(d, o);
      }
      function bstrify(data) {
        return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
      }
      function read_prn(data, d, o, str) {
        if (str) {
          o.type = "string";
          return PRN.to_workbook(data, o);
        }
        return PRN.to_workbook(d, o);
      }
      function readSync(data, opts) {
        reset_cp();
        var o = opts || {};
        if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer)
          return readSync(new Uint8Array(data), (o = dup(o), o.type = "array", o));
        if (typeof Uint8Array !== "undefined" && data instanceof Uint8Array && !o.type)
          o.type = typeof Deno !== "undefined" ? "buffer" : "array";
        var d = data, n = [0, 0, 0, 0], str = false;
        if (o.cellStyles) {
          o.cellNF = true;
          o.sheetStubs = true;
        }
        _ssfopts = {};
        if (o.dateNF)
          _ssfopts.dateNF = o.dateNF;
        if (!o.type)
          o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
        if (o.type == "file") {
          o.type = has_buf ? "buffer" : "binary";
          d = read_binary(data);
          if (typeof Uint8Array !== "undefined" && !has_buf)
            o.type = "array";
        }
        if (o.type == "string") {
          str = true;
          o.type = "binary";
          o.codepage = 65001;
          d = bstrify(data);
        }
        if (o.type == "array" && typeof Uint8Array !== "undefined" && data instanceof Uint8Array && typeof ArrayBuffer !== "undefined") {
          var ab = new ArrayBuffer(3), vu = new Uint8Array(ab);
          vu.foo = "bar";
          if (!vu.foo) {
            o = dup(o);
            o.type = "array";
            return readSync(ab2a(d), o);
          }
        }
        switch ((n = firstbyte(d, o))[0]) {
          case 208:
            if (n[1] === 207 && n[2] === 17 && n[3] === 224 && n[4] === 161 && n[5] === 177 && n[6] === 26 && n[7] === 225)
              return read_cfb(CFB.read(d, o), o);
            break;
          case 9:
            if (n[1] <= 8)
              return parse_xlscfb(d, o);
            break;
          case 60:
            return parse_xlml(d, o);
          case 73:
            if (n[1] === 73 && n[2] === 42 && n[3] === 0)
              throw new Error("TIFF Image File is not a spreadsheet");
            if (n[1] === 68)
              return read_wb_ID(d, o);
            break;
          case 84:
            if (n[1] === 65 && n[2] === 66 && n[3] === 76)
              return DIF.to_workbook(d, o);
            break;
          case 80:
            return n[1] === 75 && n[2] < 9 && n[3] < 9 ? read_zip(d, o) : read_prn(data, d, o, str);
          case 239:
            return n[3] === 60 ? parse_xlml(d, o) : read_prn(data, d, o, str);
          case 255:
            if (n[1] === 254) {
              return read_utf16(d, o);
            } else if (n[1] === 0 && n[2] === 2 && n[3] === 0)
              return WK_.to_workbook(d, o);
            break;
          case 0:
            if (n[1] === 0) {
              if (n[2] >= 2 && n[3] === 0)
                return WK_.to_workbook(d, o);
              if (n[2] === 0 && (n[3] === 8 || n[3] === 9))
                return WK_.to_workbook(d, o);
            }
            break;
          case 3:
          case 131:
          case 139:
          case 140:
            return DBF.to_workbook(d, o);
          case 123:
            if (n[1] === 92 && n[2] === 114 && n[3] === 116)
              return RTF.to_workbook(d, o);
            break;
          case 10:
          case 13:
          case 32:
            return read_plaintext_raw(d, o);
          case 137:
            if (n[1] === 80 && n[2] === 78 && n[3] === 71)
              throw new Error("PNG Image File is not a spreadsheet");
            break;
        }
        if (DBF_SUPPORTED_VERSIONS.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31)
          return DBF.to_workbook(d, o);
        return read_prn(data, d, o, str);
      }
      function readFileSync(filename, opts) {
        var o = opts || {};
        o.type = "file";
        return readSync(filename, o);
      }
      function write_cfb_ctr(cfb, o) {
        switch (o.type) {
          case "base64":
          case "binary":
            break;
          case "buffer":
          case "array":
            o.type = "";
            break;
          case "file":
            return write_dl(o.file, CFB.write(cfb, { type: has_buf ? "buffer" : "" }));
          case "string":
            throw new Error("'string' output type invalid for '" + o.bookType + "' files");
          default:
            throw new Error("Unrecognized type " + o.type);
        }
        return CFB.write(cfb, o);
      }
      function write_zip_type(wb, opts) {
        var o = dup(opts || {});
        var z = write_zip(wb, o);
        return write_zip_denouement(z, o);
      }
      function write_zip_typeXLSX(wb, opts) {
        var o = dup(opts || {});
        var z = write_zip_xlsx(wb, o);
        return write_zip_denouement(z, o);
      }
      function write_zip_denouement(z, o) {
        var oopts = {};
        var ftype = has_buf ? "nodebuffer" : typeof Uint8Array !== "undefined" ? "array" : "string";
        if (o.compression)
          oopts.compression = "DEFLATE";
        if (o.password)
          oopts.type = ftype;
        else
          switch (o.type) {
            case "base64":
              oopts.type = "base64";
              break;
            case "binary":
              oopts.type = "string";
              break;
            case "string":
              throw new Error("'string' output type invalid for '" + o.bookType + "' files");
            case "buffer":
            case "file":
              oopts.type = ftype;
              break;
            default:
              throw new Error("Unrecognized type " + o.type);
          }
        var out = z.FullPaths ? CFB.write(z, { fileType: "zip", type: { "nodebuffer": "buffer", "string": "binary" }[oopts.type] || oopts.type, compression: !!o.compression }) : z.generate(oopts);
        if (typeof Deno !== "undefined") {
          if (typeof out == "string") {
            if (o.type == "binary" || o.type == "base64")
              return out;
            out = new Uint8Array(s2ab(out));
          }
        }
        if (o.password && typeof encrypt_agile !== "undefined")
          return write_cfb_ctr(encrypt_agile(out, o.password), o);
        if (o.type === "file")
          return write_dl(o.file, out);
        return o.type == "string" ? utf8read(out) : out;
      }
      function write_cfb_type(wb, opts) {
        var o = opts || {};
        var cfb = write_xlscfb(wb, o);
        return write_cfb_ctr(cfb, o);
      }
      function write_string_type(out, opts, bom) {
        if (!bom)
          bom = "";
        var o = bom + out;
        switch (opts.type) {
          case "base64":
            return Base64_encode(utf8write(o));
          case "binary":
            return utf8write(o);
          case "string":
            return out;
          case "file":
            return write_dl(opts.file, o, "utf8");
          case "buffer": {
            if (has_buf)
              return Buffer_from(o, "utf8");
            else if (typeof TextEncoder !== "undefined")
              return new TextEncoder().encode(o);
            else
              return write_string_type(o, { type: "binary" }).split("").map(function(c) {
                return c.charCodeAt(0);
              });
          }
        }
        throw new Error("Unrecognized type " + opts.type);
      }
      function write_stxt_type(out, opts) {
        switch (opts.type) {
          case "base64":
            return Base64_encode(out);
          case "binary":
            return out;
          case "string":
            return out;
          case "file":
            return write_dl(opts.file, out, "binary");
          case "buffer": {
            if (has_buf)
              return Buffer_from(out, "binary");
            else
              return out.split("").map(function(c) {
                return c.charCodeAt(0);
              });
          }
        }
        throw new Error("Unrecognized type " + opts.type);
      }
      function write_binary_type(out, opts) {
        switch (opts.type) {
          case "string":
          case "base64":
          case "binary":
            var bstr = "";
            for (var i = 0; i < out.length; ++i)
              bstr += String.fromCharCode(out[i]);
            return opts.type == "base64" ? Base64_encode(bstr) : opts.type == "string" ? utf8read(bstr) : bstr;
          case "file":
            return write_dl(opts.file, out);
          case "buffer":
            return out;
          default:
            throw new Error("Unrecognized type " + opts.type);
        }
      }
      function writeSyncXLSX(wb, opts) {
        reset_cp();
        check_wb(wb);
        var o = dup(opts || {});
        if (o.cellStyles) {
          o.cellNF = true;
          o.sheetStubs = true;
        }
        if (o.type == "array") {
          o.type = "binary";
          var out = writeSyncXLSX(wb, o);
          o.type = "array";
          return s2ab(out);
        }
        return write_zip_typeXLSX(wb, o);
      }
      function writeSync(wb, opts) {
        reset_cp();
        check_wb(wb);
        var o = dup(opts || {});
        if (o.cellStyles) {
          o.cellNF = true;
          o.sheetStubs = true;
        }
        if (o.type == "array") {
          o.type = "binary";
          var out = writeSync(wb, o);
          o.type = "array";
          return s2ab(out);
        }
        var idx = 0;
        if (o.sheet) {
          if (typeof o.sheet == "number")
            idx = o.sheet;
          else
            idx = wb.SheetNames.indexOf(o.sheet);
          if (!wb.SheetNames[idx])
            throw new Error("Sheet not found: " + o.sheet + " : " + typeof o.sheet);
        }
        switch (o.bookType || "xlsb") {
          case "xml":
          case "xlml":
            return write_string_type(write_xlml(wb, o), o);
          case "slk":
          case "sylk":
            return write_string_type(SYLK.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
          case "htm":
          case "html":
            return write_string_type(sheet_to_html(wb.Sheets[wb.SheetNames[idx]], o), o);
          case "txt":
            return write_stxt_type(sheet_to_txt(wb.Sheets[wb.SheetNames[idx]], o), o);
          case "csv":
            return write_string_type(sheet_to_csv(wb.Sheets[wb.SheetNames[idx]], o), o, "\uFEFF");
          case "dif":
            return write_string_type(DIF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
          case "dbf":
            return write_binary_type(DBF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
          case "prn":
            return write_string_type(PRN.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
          case "rtf":
            return write_string_type(RTF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
          case "eth":
            return write_string_type(ETH.from_sheet(wb.Sheets[wb.SheetNames[idx]], o), o);
          case "fods":
            return write_string_type(write_ods(wb, o), o);
          case "wk1":
            return write_binary_type(WK_.sheet_to_wk1(wb.Sheets[wb.SheetNames[idx]], o), o);
          case "wk3":
            return write_binary_type(WK_.book_to_wk3(wb, o), o);
          case "biff2":
            if (!o.biff)
              o.biff = 2;
          case "biff3":
            if (!o.biff)
              o.biff = 3;
          case "biff4":
            if (!o.biff)
              o.biff = 4;
            return write_binary_type(write_biff_buf(wb, o), o);
          case "biff5":
            if (!o.biff)
              o.biff = 5;
          case "biff8":
          case "xla":
          case "xls":
            if (!o.biff)
              o.biff = 8;
            return write_cfb_type(wb, o);
          case "xlsx":
          case "xlsm":
          case "xlam":
          case "xlsb":
          case "numbers":
          case "ods":
            return write_zip_type(wb, o);
          default:
            throw new Error("Unrecognized bookType |" + o.bookType + "|");
        }
      }
      function resolve_book_type(o) {
        if (o.bookType)
          return;
        var _BT = {
          "xls": "biff8",
          "htm": "html",
          "slk": "sylk",
          "socialcalc": "eth",
          "Sh33tJS": "WTF"
        };
        var ext = o.file.slice(o.file.lastIndexOf(".")).toLowerCase();
        if (ext.match(/^\.[a-z]+$/))
          o.bookType = ext.slice(1);
        o.bookType = _BT[o.bookType] || o.bookType;
      }
      function writeFileSync(wb, filename, opts) {
        var o = opts || {};
        o.type = "file";
        o.file = filename;
        resolve_book_type(o);
        return writeSync(wb, o);
      }
      function writeFileSyncXLSX(wb, filename, opts) {
        var o = opts || {};
        o.type = "file";
        o.file = filename;
        resolve_book_type(o);
        return writeSyncXLSX(wb, o);
      }
      function writeFileAsync(filename, wb, opts, cb) {
        var o = opts || {};
        o.type = "file";
        o.file = filename;
        resolve_book_type(o);
        o.type = "buffer";
        var _cb = cb;
        if (!(_cb instanceof Function))
          _cb = opts;
        return _fs.writeFile(filename, writeSync(wb, o), _cb);
      }
      function make_json_row(sheet, r, R, cols, header, hdr, dense, o) {
        var rr = encode_row(R);
        var defval = o.defval, raw = o.raw || !Object.prototype.hasOwnProperty.call(o, "raw");
        var isempty = true;
        var row = header === 1 ? [] : {};
        if (header !== 1) {
          if (Object.defineProperty)
            try {
              Object.defineProperty(row, "__rowNum__", { value: R, enumerable: false });
            } catch (e) {
              row.__rowNum__ = R;
            }
          else
            row.__rowNum__ = R;
        }
        if (!dense || sheet[R])
          for (var C = r.s.c; C <= r.e.c; ++C) {
            var val = dense ? sheet[R][C] : sheet[cols[C] + rr];
            if (val === void 0 || val.t === void 0) {
              if (defval === void 0)
                continue;
              if (hdr[C] != null) {
                row[hdr[C]] = defval;
              }
              continue;
            }
            var v = val.v;
            switch (val.t) {
              case "z":
                if (v == null)
                  break;
                continue;
              case "e":
                v = v == 0 ? null : void 0;
                break;
              case "s":
              case "d":
              case "b":
              case "n":
                break;
              default:
                throw new Error("unrecognized type " + val.t);
            }
            if (hdr[C] != null) {
              if (v == null) {
                if (val.t == "e" && v === null)
                  row[hdr[C]] = null;
                else if (defval !== void 0)
                  row[hdr[C]] = defval;
                else if (raw && v === null)
                  row[hdr[C]] = null;
                else
                  continue;
              } else {
                row[hdr[C]] = raw && (val.t !== "n" || val.t === "n" && o.rawNumbers !== false) ? v : format_cell(val, v, o);
              }
              if (v != null)
                isempty = false;
            }
          }
        return { row, isempty };
      }
      function sheet_to_json(sheet, opts) {
        if (sheet == null || sheet["!ref"] == null)
          return [];
        var val = { t: "n", v: 0 }, header = 0, offset = 1, hdr = [], v = 0, vv = "";
        var r = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
        var o = opts || {};
        var range = o.range != null ? o.range : sheet["!ref"];
        if (o.header === 1)
          header = 1;
        else if (o.header === "A")
          header = 2;
        else if (Array.isArray(o.header))
          header = 3;
        else if (o.header == null)
          header = 0;
        switch (typeof range) {
          case "string":
            r = safe_decode_range(range);
            break;
          case "number":
            r = safe_decode_range(sheet["!ref"]);
            r.s.r = range;
            break;
          default:
            r = range;
        }
        if (header > 0)
          offset = 0;
        var rr = encode_row(r.s.r);
        var cols = [];
        var out = [];
        var outi = 0, counter = 0;
        var dense = Array.isArray(sheet);
        var R = r.s.r, C = 0;
        var header_cnt = {};
        if (dense && !sheet[R])
          sheet[R] = [];
        var colinfo = o.skipHidden && sheet["!cols"] || [];
        var rowinfo = o.skipHidden && sheet["!rows"] || [];
        for (C = r.s.c; C <= r.e.c; ++C) {
          if ((colinfo[C] || {}).hidden)
            continue;
          cols[C] = encode_col(C);
          val = dense ? sheet[R][C] : sheet[cols[C] + rr];
          switch (header) {
            case 1:
              hdr[C] = C - r.s.c;
              break;
            case 2:
              hdr[C] = cols[C];
              break;
            case 3:
              hdr[C] = o.header[C - r.s.c];
              break;
            default:
              if (val == null)
                val = { w: "__EMPTY", t: "s" };
              vv = v = format_cell(val, null, o);
              counter = header_cnt[v] || 0;
              if (!counter)
                header_cnt[v] = 1;
              else {
                do {
                  vv = v + "_" + counter++;
                } while (header_cnt[vv]);
                header_cnt[v] = counter;
                header_cnt[vv] = 1;
              }
              hdr[C] = vv;
          }
        }
        for (R = r.s.r + offset; R <= r.e.r; ++R) {
          if ((rowinfo[R] || {}).hidden)
            continue;
          var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
          if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows))
            out[outi++] = row.row;
        }
        out.length = outi;
        return out;
      }
      var qreg = /"/g;
      function make_csv_row(sheet, r, R, cols, fs, rs, FS, o) {
        var isempty = true;
        var row = [], txt = "", rr = encode_row(R);
        for (var C = r.s.c; C <= r.e.c; ++C) {
          if (!cols[C])
            continue;
          var val = o.dense ? (sheet[R] || [])[C] : sheet[cols[C] + rr];
          if (val == null)
            txt = "";
          else if (val.v != null) {
            isempty = false;
            txt = "" + (o.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o));
            for (var i = 0, cc = 0; i !== txt.length; ++i)
              if ((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34 || o.forceQuotes) {
                txt = '"' + txt.replace(qreg, '""') + '"';
                break;
              }
            if (txt == "ID")
              txt = '"ID"';
          } else if (val.f != null && !val.F) {
            isempty = false;
            txt = "=" + val.f;
            if (txt.indexOf(",") >= 0)
              txt = '"' + txt.replace(qreg, '""') + '"';
          } else
            txt = "";
          row.push(txt);
        }
        if (o.blankrows === false && isempty)
          return null;
        return row.join(FS);
      }
      function sheet_to_csv(sheet, opts) {
        var out = [];
        var o = opts == null ? {} : opts;
        if (sheet == null || sheet["!ref"] == null)
          return "";
        var r = safe_decode_range(sheet["!ref"]);
        var FS = o.FS !== void 0 ? o.FS : ",", fs = FS.charCodeAt(0);
        var RS = o.RS !== void 0 ? o.RS : "\n", rs = RS.charCodeAt(0);
        var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
        var row = "", cols = [];
        o.dense = Array.isArray(sheet);
        var colinfo = o.skipHidden && sheet["!cols"] || [];
        var rowinfo = o.skipHidden && sheet["!rows"] || [];
        for (var C = r.s.c; C <= r.e.c; ++C)
          if (!(colinfo[C] || {}).hidden)
            cols[C] = encode_col(C);
        var w = 0;
        for (var R = r.s.r; R <= r.e.r; ++R) {
          if ((rowinfo[R] || {}).hidden)
            continue;
          row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);
          if (row == null) {
            continue;
          }
          if (o.strip)
            row = row.replace(endregex, "");
          if (row || o.blankrows !== false)
            out.push((w++ ? RS : "") + row);
        }
        delete o.dense;
        return out.join("");
      }
      function sheet_to_txt(sheet, opts) {
        if (!opts)
          opts = {};
        opts.FS = "	";
        opts.RS = "\n";
        var s = sheet_to_csv(sheet, opts);
        if (typeof $cptable == "undefined" || opts.type == "string")
          return s;
        var o = $cptable.utils.encode(1200, s, "str");
        return String.fromCharCode(255) + String.fromCharCode(254) + o;
      }
      function sheet_to_formulae(sheet) {
        var y = "", x, val = "";
        if (sheet == null || sheet["!ref"] == null)
          return [];
        var r = safe_decode_range(sheet["!ref"]), rr = "", cols = [], C;
        var cmds = [];
        var dense = Array.isArray(sheet);
        for (C = r.s.c; C <= r.e.c; ++C)
          cols[C] = encode_col(C);
        for (var R = r.s.r; R <= r.e.r; ++R) {
          rr = encode_row(R);
          for (C = r.s.c; C <= r.e.c; ++C) {
            y = cols[C] + rr;
            x = dense ? (sheet[R] || [])[C] : sheet[y];
            val = "";
            if (x === void 0)
              continue;
            else if (x.F != null) {
              y = x.F;
              if (!x.f)
                continue;
              val = x.f;
              if (y.indexOf(":") == -1)
                y = y + ":" + y;
            }
            if (x.f != null)
              val = x.f;
            else if (x.t == "z")
              continue;
            else if (x.t == "n" && x.v != null)
              val = "" + x.v;
            else if (x.t == "b")
              val = x.v ? "TRUE" : "FALSE";
            else if (x.w !== void 0)
              val = "'" + x.w;
            else if (x.v === void 0)
              continue;
            else if (x.t == "s")
              val = "'" + x.v;
            else
              val = "" + x.v;
            cmds[cmds.length] = y + "=" + val;
          }
        }
        return cmds;
      }
      function sheet_add_json(_ws, js, opts) {
        var o = opts || {};
        var offset = +!o.skipHeader;
        var ws = _ws || {};
        var _R = 0, _C = 0;
        if (ws && o.origin != null) {
          if (typeof o.origin == "number")
            _R = o.origin;
          else {
            var _origin = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
            _R = _origin.r;
            _C = _origin.c;
          }
        }
        var cell;
        var range = { s: { c: 0, r: 0 }, e: { c: _C, r: _R + js.length - 1 + offset } };
        if (ws["!ref"]) {
          var _range = safe_decode_range(ws["!ref"]);
          range.e.c = Math.max(range.e.c, _range.e.c);
          range.e.r = Math.max(range.e.r, _range.e.r);
          if (_R == -1) {
            _R = _range.e.r + 1;
            range.e.r = _R + js.length - 1 + offset;
          }
        } else {
          if (_R == -1) {
            _R = 0;
            range.e.r = js.length - 1 + offset;
          }
        }
        var hdr = o.header || [], C = 0;
        js.forEach(function(JS, R) {
          keys(JS).forEach(function(k) {
            if ((C = hdr.indexOf(k)) == -1)
              hdr[C = hdr.length] = k;
            var v = JS[k];
            var t = "z";
            var z = "";
            var ref = encode_cell({ c: _C + C, r: _R + R + offset });
            cell = ws_get_cell_stub(ws, ref);
            if (v && typeof v === "object" && !(v instanceof Date)) {
              ws[ref] = v;
            } else {
              if (typeof v == "number")
                t = "n";
              else if (typeof v == "boolean")
                t = "b";
              else if (typeof v == "string")
                t = "s";
              else if (v instanceof Date) {
                t = "d";
                if (!o.cellDates) {
                  t = "n";
                  v = datenum(v);
                }
                z = o.dateNF || table_fmt[14];
              } else if (v === null && o.nullError) {
                t = "e";
                v = 0;
              }
              if (!cell)
                ws[ref] = cell = { t, v };
              else {
                cell.t = t;
                cell.v = v;
                delete cell.w;
                delete cell.R;
                if (z)
                  cell.z = z;
              }
              if (z)
                cell.z = z;
            }
          });
        });
        range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
        var __R = encode_row(_R);
        if (offset)
          for (C = 0; C < hdr.length; ++C)
            ws[encode_col(C + _C) + __R] = { t: "s", v: hdr[C] };
        ws["!ref"] = encode_range(range);
        return ws;
      }
      function json_to_sheet(js, opts) {
        return sheet_add_json(null, js, opts);
      }
      function ws_get_cell_stub(ws, R, C) {
        if (typeof R == "string") {
          if (Array.isArray(ws)) {
            var RC = decode_cell(R);
            if (!ws[RC.r])
              ws[RC.r] = [];
            return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = { t: "z" });
          }
          return ws[R] || (ws[R] = { t: "z" });
        }
        if (typeof R != "number")
          return ws_get_cell_stub(ws, encode_cell(R));
        return ws_get_cell_stub(ws, encode_cell({ r: R, c: C || 0 }));
      }
      function wb_sheet_idx(wb, sh) {
        if (typeof sh == "number") {
          if (sh >= 0 && wb.SheetNames.length > sh)
            return sh;
          throw new Error("Cannot find sheet # " + sh);
        } else if (typeof sh == "string") {
          var idx = wb.SheetNames.indexOf(sh);
          if (idx > -1)
            return idx;
          throw new Error("Cannot find sheet name |" + sh + "|");
        } else
          throw new Error("Cannot find sheet |" + sh + "|");
      }
      function book_new() {
        return { SheetNames: [], Sheets: {} };
      }
      function book_append_sheet(wb, ws, name, roll) {
        var i = 1;
        if (!name) {
          for (; i <= 65535; ++i, name = void 0)
            if (wb.SheetNames.indexOf(name = "Sheet" + i) == -1)
              break;
        }
        if (!name || wb.SheetNames.length >= 65535)
          throw new Error("Too many worksheets");
        if (roll && wb.SheetNames.indexOf(name) >= 0) {
          var m = name.match(/(^.*?)(\d+)$/);
          i = m && +m[2] || 0;
          var root = m && m[1] || name;
          for (++i; i <= 65535; ++i)
            if (wb.SheetNames.indexOf(name = root + i) == -1)
              break;
        }
        check_ws_name(name);
        if (wb.SheetNames.indexOf(name) >= 0)
          throw new Error("Worksheet with name |" + name + "| already exists!");
        wb.SheetNames.push(name);
        wb.Sheets[name] = ws;
        return name;
      }
      function book_set_sheet_visibility(wb, sh, vis) {
        if (!wb.Workbook)
          wb.Workbook = {};
        if (!wb.Workbook.Sheets)
          wb.Workbook.Sheets = [];
        var idx = wb_sheet_idx(wb, sh);
        if (!wb.Workbook.Sheets[idx])
          wb.Workbook.Sheets[idx] = {};
        switch (vis) {
          case 0:
          case 1:
          case 2:
            break;
          default:
            throw new Error("Bad sheet visibility setting " + vis);
        }
        wb.Workbook.Sheets[idx].Hidden = vis;
      }
      function cell_set_number_format(cell, fmt) {
        cell.z = fmt;
        return cell;
      }
      function cell_set_hyperlink(cell, target, tooltip) {
        if (!target) {
          delete cell.l;
        } else {
          cell.l = { Target: target };
          if (tooltip)
            cell.l.Tooltip = tooltip;
        }
        return cell;
      }
      function cell_set_internal_link(cell, range, tooltip) {
        return cell_set_hyperlink(cell, "#" + range, tooltip);
      }
      function cell_add_comment(cell, text, author) {
        if (!cell.c)
          cell.c = [];
        cell.c.push({ t: text, a: author || "SheetJS" });
      }
      function sheet_set_array_formula(ws, range, formula, dynamic) {
        var rng = typeof range != "string" ? range : safe_decode_range(range);
        var rngstr = typeof range == "string" ? range : encode_range(range);
        for (var R = rng.s.r; R <= rng.e.r; ++R)
          for (var C = rng.s.c; C <= rng.e.c; ++C) {
            var cell = ws_get_cell_stub(ws, R, C);
            cell.t = "n";
            cell.F = rngstr;
            delete cell.v;
            if (R == rng.s.r && C == rng.s.c) {
              cell.f = formula;
              if (dynamic)
                cell.D = true;
            }
          }
        return ws;
      }
      var utils = {
        encode_col,
        encode_row,
        encode_cell,
        encode_range,
        decode_col,
        decode_row,
        split_cell,
        decode_cell,
        decode_range,
        format_cell,
        sheet_add_aoa,
        sheet_add_json,
        sheet_add_dom,
        aoa_to_sheet,
        json_to_sheet,
        table_to_sheet: parse_dom_table,
        table_to_book,
        sheet_to_csv,
        sheet_to_txt,
        sheet_to_json,
        sheet_to_html,
        sheet_to_formulae,
        sheet_to_row_object_array: sheet_to_json,
        sheet_get_cell: ws_get_cell_stub,
        book_new,
        book_append_sheet,
        book_set_sheet_visibility,
        cell_set_number_format,
        cell_set_hyperlink,
        cell_set_internal_link,
        cell_add_comment,
        sheet_set_array_formula,
        consts: {
          SHEET_VISIBLE: 0,
          SHEET_HIDDEN: 1,
          SHEET_VERY_HIDDEN: 2
        }
      };
      var _Readable;
      function set_readable(R) {
        _Readable = R;
      }
      function write_csv_stream(sheet, opts) {
        var stream = _Readable();
        var o = opts == null ? {} : opts;
        if (sheet == null || sheet["!ref"] == null) {
          stream.push(null);
          return stream;
        }
        var r = safe_decode_range(sheet["!ref"]);
        var FS = o.FS !== void 0 ? o.FS : ",", fs = FS.charCodeAt(0);
        var RS = o.RS !== void 0 ? o.RS : "\n", rs = RS.charCodeAt(0);
        var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
        var row = "", cols = [];
        o.dense = Array.isArray(sheet);
        var colinfo = o.skipHidden && sheet["!cols"] || [];
        var rowinfo = o.skipHidden && sheet["!rows"] || [];
        for (var C = r.s.c; C <= r.e.c; ++C)
          if (!(colinfo[C] || {}).hidden)
            cols[C] = encode_col(C);
        var R = r.s.r;
        var BOM = false, w = 0;
        stream._read = function() {
          if (!BOM) {
            BOM = true;
            return stream.push("\uFEFF");
          }
          while (R <= r.e.r) {
            ++R;
            if ((rowinfo[R - 1] || {}).hidden)
              continue;
            row = make_csv_row(sheet, r, R - 1, cols, fs, rs, FS, o);
            if (row != null) {
              if (o.strip)
                row = row.replace(endregex, "");
              if (row || o.blankrows !== false)
                return stream.push((w++ ? RS : "") + row);
            }
          }
          return stream.push(null);
        };
        return stream;
      }
      function write_html_stream(ws, opts) {
        var stream = _Readable();
        var o = opts || {};
        var header = o.header != null ? o.header : HTML_BEGIN;
        var footer = o.footer != null ? o.footer : HTML_END;
        stream.push(header);
        var r = decode_range(ws["!ref"]);
        o.dense = Array.isArray(ws);
        stream.push(make_html_preamble(ws, r, o));
        var R = r.s.r;
        var end = false;
        stream._read = function() {
          if (R > r.e.r) {
            if (!end) {
              end = true;
              stream.push("</table>" + footer);
            }
            return stream.push(null);
          }
          while (R <= r.e.r) {
            stream.push(make_html_row(ws, r, R, o));
            ++R;
            break;
          }
        };
        return stream;
      }
      function write_json_stream(sheet, opts) {
        var stream = _Readable({ objectMode: true });
        if (sheet == null || sheet["!ref"] == null) {
          stream.push(null);
          return stream;
        }
        var val = { t: "n", v: 0 }, header = 0, offset = 1, hdr = [], v = 0, vv = "";
        var r = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
        var o = opts || {};
        var range = o.range != null ? o.range : sheet["!ref"];
        if (o.header === 1)
          header = 1;
        else if (o.header === "A")
          header = 2;
        else if (Array.isArray(o.header))
          header = 3;
        switch (typeof range) {
          case "string":
            r = safe_decode_range(range);
            break;
          case "number":
            r = safe_decode_range(sheet["!ref"]);
            r.s.r = range;
            break;
          default:
            r = range;
        }
        if (header > 0)
          offset = 0;
        var rr = encode_row(r.s.r);
        var cols = [];
        var counter = 0;
        var dense = Array.isArray(sheet);
        var R = r.s.r, C = 0;
        var header_cnt = {};
        if (dense && !sheet[R])
          sheet[R] = [];
        var colinfo = o.skipHidden && sheet["!cols"] || [];
        var rowinfo = o.skipHidden && sheet["!rows"] || [];
        for (C = r.s.c; C <= r.e.c; ++C) {
          if ((colinfo[C] || {}).hidden)
            continue;
          cols[C] = encode_col(C);
          val = dense ? sheet[R][C] : sheet[cols[C] + rr];
          switch (header) {
            case 1:
              hdr[C] = C - r.s.c;
              break;
            case 2:
              hdr[C] = cols[C];
              break;
            case 3:
              hdr[C] = o.header[C - r.s.c];
              break;
            default:
              if (val == null)
                val = { w: "__EMPTY", t: "s" };
              vv = v = format_cell(val, null, o);
              counter = header_cnt[v] || 0;
              if (!counter)
                header_cnt[v] = 1;
              else {
                do {
                  vv = v + "_" + counter++;
                } while (header_cnt[vv]);
                header_cnt[v] = counter;
                header_cnt[vv] = 1;
              }
              hdr[C] = vv;
          }
        }
        R = r.s.r + offset;
        stream._read = function() {
          while (R <= r.e.r) {
            if ((rowinfo[R - 1] || {}).hidden)
              continue;
            var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
            ++R;
            if (row.isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) {
              stream.push(row.row);
              return;
            }
          }
          return stream.push(null);
        };
        return stream;
      }
      var __stream = {
        to_json: write_json_stream,
        to_html: write_html_stream,
        to_csv: write_csv_stream,
        set_readable
      };
      if (typeof parse_xlscfb !== "undefined")
        XLSX3.parse_xlscfb = parse_xlscfb;
      XLSX3.parse_zip = parse_zip;
      XLSX3.read = readSync;
      XLSX3.readFile = readFileSync;
      XLSX3.readFileSync = readFileSync;
      XLSX3.write = writeSync;
      XLSX3.writeFile = writeFileSync;
      XLSX3.writeFileSync = writeFileSync;
      XLSX3.writeFileAsync = writeFileAsync;
      XLSX3.utils = utils;
      XLSX3.writeXLSX = writeSyncXLSX;
      XLSX3.writeFileXLSX = writeFileSyncXLSX;
      XLSX3.SSF = SSF;
      if (typeof __stream !== "undefined")
        XLSX3.stream = __stream;
      if (typeof CFB !== "undefined")
        XLSX3.CFB = CFB;
      if (typeof require !== "undefined") {
        var strmod = require("stream");
        if ((strmod || {}).Readable)
          set_readable(strmod.Readable);
      }
    }
    if (typeof exports !== "undefined")
      make_xlsx_lib(exports);
    else if (typeof module2 !== "undefined" && module2.exports)
      make_xlsx_lib(module2.exports);
    else if (typeof define === "function" && define.amd)
      define("xlsx", function() {
        if (!XLSX2.version)
          make_xlsx_lib(XLSX2);
        return XLSX2;
      });
    else
      make_xlsx_lib(XLSX2);
    if (typeof window !== "undefined" && !window.XLSX)
      try {
        window.XLSX = XLSX2;
      } catch (e) {
      }
  }
});

// node_modules/dotenv/lib/main.js
var require_main = __commonJS({
  "node_modules/dotenv/lib/main.js"(exports, module2) {
    var fs = require("fs");
    var path = require("path");
    var os = require("os");
    var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
    function parse(src) {
      const obj = {};
      let lines = src.toString();
      lines = lines.replace(/\r\n?/mg, "\n");
      let match;
      while ((match = LINE.exec(lines)) != null) {
        const key = match[1];
        let value = match[2] || "";
        value = value.trim();
        const maybeQuote = value[0];
        value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
        if (maybeQuote === '"') {
          value = value.replace(/\\n/g, "\n");
          value = value.replace(/\\r/g, "\r");
        }
        obj[key] = value;
      }
      return obj;
    }
    function _log(message) {
      console.log(`[dotenv][DEBUG] ${message}`);
    }
    function _resolveHome(envPath) {
      return envPath[0] === "~" ? path.join(os.homedir(), envPath.slice(1)) : envPath;
    }
    function config(options) {
      let dotenvPath = path.resolve(process.cwd(), ".env");
      let encoding = "utf8";
      const debug = Boolean(options && options.debug);
      const override = Boolean(options && options.override);
      if (options) {
        if (options.path != null) {
          dotenvPath = _resolveHome(options.path);
        }
        if (options.encoding != null) {
          encoding = options.encoding;
        }
      }
      try {
        const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }));
        Object.keys(parsed).forEach(function(key) {
          if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
            process.env[key] = parsed[key];
          } else {
            if (override === true) {
              process.env[key] = parsed[key];
            }
            if (debug) {
              if (override === true) {
                _log(`"${key}" is already defined in \`process.env\` and WAS overwritten`);
              } else {
                _log(`"${key}" is already defined in \`process.env\` and was NOT overwritten`);
              }
            }
          }
        });
        return { parsed };
      } catch (e) {
        if (debug) {
          _log(`Failed to load ${dotenvPath} ${e.message}`);
        }
        return { error: e };
      }
    }
    var DotenvModule = {
      config,
      parse
    };
    module2.exports.config = DotenvModule.config;
    module2.exports.parse = DotenvModule.parse;
    module2.exports = DotenvModule;
  }
});

// node_modules/webidl-conversions/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/webidl-conversions/lib/index.js"(exports, module2) {
    "use strict";
    var conversions = {};
    module2.exports = conversions;
    function sign(x) {
      return x < 0 ? -1 : 1;
    }
    function evenRound(x) {
      if (x % 1 === 0.5 && (x & 1) === 0) {
        return Math.floor(x);
      } else {
        return Math.round(x);
      }
    }
    function createNumberConversion(bitLength, typeOpts) {
      if (!typeOpts.unsigned) {
        --bitLength;
      }
      const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
      const upperBound = Math.pow(2, bitLength) - 1;
      const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
      const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
      return function(V, opts) {
        if (!opts)
          opts = {};
        let x = +V;
        if (opts.enforceRange) {
          if (!Number.isFinite(x)) {
            throw new TypeError("Argument is not a finite number");
          }
          x = sign(x) * Math.floor(Math.abs(x));
          if (x < lowerBound || x > upperBound) {
            throw new TypeError("Argument is not in byte range");
          }
          return x;
        }
        if (!isNaN(x) && opts.clamp) {
          x = evenRound(x);
          if (x < lowerBound)
            x = lowerBound;
          if (x > upperBound)
            x = upperBound;
          return x;
        }
        if (!Number.isFinite(x) || x === 0) {
          return 0;
        }
        x = sign(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;
        if (!typeOpts.unsigned && x >= moduloBound) {
          return x - moduloVal;
        } else if (typeOpts.unsigned) {
          if (x < 0) {
            x += moduloVal;
          } else if (x === -0) {
            return 0;
          }
        }
        return x;
      };
    }
    conversions["void"] = function() {
      return void 0;
    };
    conversions["boolean"] = function(val) {
      return !!val;
    };
    conversions["byte"] = createNumberConversion(8, { unsigned: false });
    conversions["octet"] = createNumberConversion(8, { unsigned: true });
    conversions["short"] = createNumberConversion(16, { unsigned: false });
    conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
    conversions["long"] = createNumberConversion(32, { unsigned: false });
    conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
    conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
    conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
    conversions["double"] = function(V) {
      const x = +V;
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
      }
      return x;
    };
    conversions["unrestricted double"] = function(V) {
      const x = +V;
      if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
      }
      return x;
    };
    conversions["float"] = conversions["double"];
    conversions["unrestricted float"] = conversions["unrestricted double"];
    conversions["DOMString"] = function(V, opts) {
      if (!opts)
        opts = {};
      if (opts.treatNullAsEmptyString && V === null) {
        return "";
      }
      return String(V);
    };
    conversions["ByteString"] = function(V, opts) {
      const x = String(V);
      let c = void 0;
      for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
        if (c > 255) {
          throw new TypeError("Argument is not a valid bytestring");
        }
      }
      return x;
    };
    conversions["USVString"] = function(V) {
      const S = String(V);
      const n = S.length;
      const U = [];
      for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 55296 || c > 57343) {
          U.push(String.fromCodePoint(c));
        } else if (56320 <= c && c <= 57343) {
          U.push(String.fromCodePoint(65533));
        } else {
          if (i === n - 1) {
            U.push(String.fromCodePoint(65533));
          } else {
            const d = S.charCodeAt(i + 1);
            if (56320 <= d && d <= 57343) {
              const a = c & 1023;
              const b = d & 1023;
              U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
              ++i;
            } else {
              U.push(String.fromCodePoint(65533));
            }
          }
        }
      }
      return U.join("");
    };
    conversions["Date"] = function(V, opts) {
      if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
      }
      if (isNaN(V)) {
        return void 0;
      }
      return V;
    };
    conversions["RegExp"] = function(V, opts) {
      if (!(V instanceof RegExp)) {
        V = new RegExp(V);
      }
      return V;
    };
  }
});

// node_modules/whatwg-url/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/whatwg-url/lib/utils.js"(exports, module2) {
    "use strict";
    module2.exports.mixin = function mixin(target, source) {
      const keys = Object.getOwnPropertyNames(source);
      for (let i = 0; i < keys.length; ++i) {
        Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
      }
    };
    module2.exports.wrapperSymbol = Symbol("wrapper");
    module2.exports.implSymbol = Symbol("impl");
    module2.exports.wrapperForImpl = function(impl) {
      return impl[module2.exports.wrapperSymbol];
    };
    module2.exports.implForWrapper = function(wrapper) {
      return wrapper[module2.exports.implSymbol];
    };
  }
});

// node_modules/tr46/lib/mappingTable.json
var require_mappingTable = __commonJS({
  "node_modules/tr46/lib/mappingTable.json"(exports, module2) {
    module2.exports = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
  }
});

// node_modules/tr46/index.js
var require_tr46 = __commonJS({
  "node_modules/tr46/index.js"(exports, module2) {
    "use strict";
    var punycode = require("punycode");
    var mappingTable = require_mappingTable();
    var PROCESSING_OPTIONS = {
      TRANSITIONAL: 0,
      NONTRANSITIONAL: 1
    };
    function normalize(str) {
      return str.split("\0").map(function(s) {
        return s.normalize("NFC");
      }).join("\0");
    }
    function findStatus(val) {
      var start = 0;
      var end = mappingTable.length - 1;
      while (start <= end) {
        var mid = Math.floor((start + end) / 2);
        var target = mappingTable[mid];
        if (target[0][0] <= val && target[0][1] >= val) {
          return target;
        } else if (target[0][0] > val) {
          end = mid - 1;
        } else {
          start = mid + 1;
        }
      }
      return null;
    }
    var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    function countSymbols(string) {
      return string.replace(regexAstralSymbols, "_").length;
    }
    function mapChars(domain_name, useSTD3, processing_option) {
      var hasError = false;
      var processed = "";
      var len = countSymbols(domain_name);
      for (var i = 0; i < len; ++i) {
        var codePoint = domain_name.codePointAt(i);
        var status = findStatus(codePoint);
        switch (status[1]) {
          case "disallowed":
            hasError = true;
            processed += String.fromCodePoint(codePoint);
            break;
          case "ignored":
            break;
          case "mapped":
            processed += String.fromCodePoint.apply(String, status[2]);
            break;
          case "deviation":
            if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
              processed += String.fromCodePoint.apply(String, status[2]);
            } else {
              processed += String.fromCodePoint(codePoint);
            }
            break;
          case "valid":
            processed += String.fromCodePoint(codePoint);
            break;
          case "disallowed_STD3_mapped":
            if (useSTD3) {
              hasError = true;
              processed += String.fromCodePoint(codePoint);
            } else {
              processed += String.fromCodePoint.apply(String, status[2]);
            }
            break;
          case "disallowed_STD3_valid":
            if (useSTD3) {
              hasError = true;
            }
            processed += String.fromCodePoint(codePoint);
            break;
        }
      }
      return {
        string: processed,
        error: hasError
      };
    }
    var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
    function validateLabel(label, processing_option) {
      if (label.substr(0, 4) === "xn--") {
        label = punycode.toUnicode(label);
        processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
      }
      var error = false;
      if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
        error = true;
      }
      var len = countSymbols(label);
      for (var i = 0; i < len; ++i) {
        var status = findStatus(label.codePointAt(i));
        if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
          error = true;
          break;
        }
      }
      return {
        label,
        error
      };
    }
    function processing(domain_name, useSTD3, processing_option) {
      var result = mapChars(domain_name, useSTD3, processing_option);
      result.string = normalize(result.string);
      var labels = result.string.split(".");
      for (var i = 0; i < labels.length; ++i) {
        try {
          var validation = validateLabel(labels[i]);
          labels[i] = validation.label;
          result.error = result.error || validation.error;
        } catch (e) {
          result.error = true;
        }
      }
      return {
        string: labels.join("."),
        error: result.error
      };
    }
    module2.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
      var result = processing(domain_name, useSTD3, processing_option);
      var labels = result.string.split(".");
      labels = labels.map(function(l) {
        try {
          return punycode.toASCII(l);
        } catch (e) {
          result.error = true;
          return l;
        }
      });
      if (verifyDnsLength) {
        var total = labels.slice(0, labels.length - 1).join(".").length;
        if (total.length > 253 || total.length === 0) {
          result.error = true;
        }
        for (var i = 0; i < labels.length; ++i) {
          if (labels.length > 63 || labels.length === 0) {
            result.error = true;
            break;
          }
        }
      }
      if (result.error)
        return null;
      return labels.join(".");
    };
    module2.exports.toUnicode = function(domain_name, useSTD3) {
      var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
      return {
        domain: result.string,
        error: result.error
      };
    };
    module2.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
  }
});

// node_modules/whatwg-url/lib/url-state-machine.js
var require_url_state_machine = __commonJS({
  "node_modules/whatwg-url/lib/url-state-machine.js"(exports, module2) {
    "use strict";
    var punycode = require("punycode");
    var tr46 = require_tr46();
    var specialSchemes = {
      ftp: 21,
      file: null,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var failure = Symbol("failure");
    function countSymbols(str) {
      return punycode.ucs2.decode(str).length;
    }
    function at(input, idx) {
      const c = input[idx];
      return isNaN(c) ? void 0 : String.fromCodePoint(c);
    }
    function isASCIIDigit(c) {
      return c >= 48 && c <= 57;
    }
    function isASCIIAlpha(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }
    function isASCIIAlphanumeric(c) {
      return isASCIIAlpha(c) || isASCIIDigit(c);
    }
    function isASCIIHex(c) {
      return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
    }
    function isSingleDot(buffer) {
      return buffer === "." || buffer.toLowerCase() === "%2e";
    }
    function isDoubleDot(buffer) {
      buffer = buffer.toLowerCase();
      return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
    }
    function isWindowsDriveLetterCodePoints(cp1, cp2) {
      return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
    }
    function isWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
    }
    function isNormalizedWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
    }
    function containsForbiddenHostCodePoint(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function containsForbiddenHostCodePointExcludingPercent(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function isSpecialScheme(scheme) {
      return specialSchemes[scheme] !== void 0;
    }
    function isSpecial(url) {
      return isSpecialScheme(url.scheme);
    }
    function defaultPort(scheme) {
      return specialSchemes[scheme];
    }
    function percentEncode(c) {
      let hex = c.toString(16).toUpperCase();
      if (hex.length === 1) {
        hex = "0" + hex;
      }
      return "%" + hex;
    }
    function utf8PercentEncode(c) {
      const buf = new Buffer(c);
      let str = "";
      for (let i = 0; i < buf.length; ++i) {
        str += percentEncode(buf[i]);
      }
      return str;
    }
    function utf8PercentDecode(str) {
      const input = new Buffer(str);
      const output = [];
      for (let i = 0; i < input.length; ++i) {
        if (input[i] !== 37) {
          output.push(input[i]);
        } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
          output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
          i += 2;
        } else {
          output.push(input[i]);
        }
      }
      return new Buffer(output).toString();
    }
    function isC0ControlPercentEncode(c) {
      return c <= 31 || c > 126;
    }
    var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
    function isPathPercentEncode(c) {
      return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
    }
    var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
    function isUserinfoPercentEncode(c) {
      return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
    }
    function percentEncodeChar(c, encodeSetPredicate) {
      const cStr = String.fromCodePoint(c);
      if (encodeSetPredicate(c)) {
        return utf8PercentEncode(cStr);
      }
      return cStr;
    }
    function parseIPv4Number(input) {
      let R = 10;
      if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R = 16;
      } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R = 8;
      }
      if (input === "") {
        return 0;
      }
      const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
      if (regex.test(input)) {
        return failure;
      }
      return parseInt(input, R);
    }
    function parseIPv4(input) {
      const parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
          parts.pop();
        }
      }
      if (parts.length > 4) {
        return input;
      }
      const numbers = [];
      for (const part of parts) {
        if (part === "") {
          return input;
        }
        const n = parseIPv4Number(part);
        if (n === failure) {
          return input;
        }
        numbers.push(n);
      }
      for (let i = 0; i < numbers.length - 1; ++i) {
        if (numbers[i] > 255) {
          return failure;
        }
      }
      if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
        return failure;
      }
      let ipv4 = numbers.pop();
      let counter = 0;
      for (const n of numbers) {
        ipv4 += n * Math.pow(256, 3 - counter);
        ++counter;
      }
      return ipv4;
    }
    function serializeIPv4(address) {
      let output = "";
      let n = address;
      for (let i = 1; i <= 4; ++i) {
        output = String(n % 256) + output;
        if (i !== 4) {
          output = "." + output;
        }
        n = Math.floor(n / 256);
      }
      return output;
    }
    function parseIPv6(input) {
      const address = [0, 0, 0, 0, 0, 0, 0, 0];
      let pieceIndex = 0;
      let compress = null;
      let pointer = 0;
      input = punycode.ucs2.decode(input);
      if (input[pointer] === 58) {
        if (input[pointer + 1] !== 58) {
          return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
      }
      while (pointer < input.length) {
        if (pieceIndex === 8) {
          return failure;
        }
        if (input[pointer] === 58) {
          if (compress !== null) {
            return failure;
          }
          ++pointer;
          ++pieceIndex;
          compress = pieceIndex;
          continue;
        }
        let value = 0;
        let length = 0;
        while (length < 4 && isASCIIHex(input[pointer])) {
          value = value * 16 + parseInt(at(input, pointer), 16);
          ++pointer;
          ++length;
        }
        if (input[pointer] === 46) {
          if (length === 0) {
            return failure;
          }
          pointer -= length;
          if (pieceIndex > 6) {
            return failure;
          }
          let numbersSeen = 0;
          while (input[pointer] !== void 0) {
            let ipv4Piece = null;
            if (numbersSeen > 0) {
              if (input[pointer] === 46 && numbersSeen < 4) {
                ++pointer;
              } else {
                return failure;
              }
            }
            if (!isASCIIDigit(input[pointer])) {
              return failure;
            }
            while (isASCIIDigit(input[pointer])) {
              const number = parseInt(at(input, pointer));
              if (ipv4Piece === null) {
                ipv4Piece = number;
              } else if (ipv4Piece === 0) {
                return failure;
              } else {
                ipv4Piece = ipv4Piece * 10 + number;
              }
              if (ipv4Piece > 255) {
                return failure;
              }
              ++pointer;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            ++numbersSeen;
            if (numbersSeen === 2 || numbersSeen === 4) {
              ++pieceIndex;
            }
          }
          if (numbersSeen !== 4) {
            return failure;
          }
          break;
        } else if (input[pointer] === 58) {
          ++pointer;
          if (input[pointer] === void 0) {
            return failure;
          }
        } else if (input[pointer] !== void 0) {
          return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
      }
      if (compress !== null) {
        let swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex !== 0 && swaps > 0) {
          const temp = address[compress + swaps - 1];
          address[compress + swaps - 1] = address[pieceIndex];
          address[pieceIndex] = temp;
          --pieceIndex;
          --swaps;
        }
      } else if (compress === null && pieceIndex !== 8) {
        return failure;
      }
      return address;
    }
    function serializeIPv6(address) {
      let output = "";
      const seqResult = findLongestZeroSequence(address);
      const compress = seqResult.idx;
      let ignore0 = false;
      for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
        if (ignore0 && address[pieceIndex] === 0) {
          continue;
        } else if (ignore0) {
          ignore0 = false;
        }
        if (compress === pieceIndex) {
          const separator = pieceIndex === 0 ? "::" : ":";
          output += separator;
          ignore0 = true;
          continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
          output += ":";
        }
      }
      return output;
    }
    function parseHost(input, isSpecialArg) {
      if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
          return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
      }
      if (!isSpecialArg) {
        return parseOpaqueHost(input);
      }
      const domain = utf8PercentDecode(input);
      const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
      if (asciiDomain === null) {
        return failure;
      }
      if (containsForbiddenHostCodePoint(asciiDomain)) {
        return failure;
      }
      const ipv4Host = parseIPv4(asciiDomain);
      if (typeof ipv4Host === "number" || ipv4Host === failure) {
        return ipv4Host;
      }
      return asciiDomain;
    }
    function parseOpaqueHost(input) {
      if (containsForbiddenHostCodePointExcludingPercent(input)) {
        return failure;
      }
      let output = "";
      const decoded = punycode.ucs2.decode(input);
      for (let i = 0; i < decoded.length; ++i) {
        output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
      }
      return output;
    }
    function findLongestZeroSequence(arr) {
      let maxIdx = null;
      let maxLen = 1;
      let currStart = null;
      let currLen = 0;
      for (let i = 0; i < arr.length; ++i) {
        if (arr[i] !== 0) {
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          currStart = null;
          currLen = 0;
        } else {
          if (currStart === null) {
            currStart = i;
          }
          ++currLen;
        }
      }
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }
      return {
        idx: maxIdx,
        len: maxLen
      };
    }
    function serializeHost(host) {
      if (typeof host === "number") {
        return serializeIPv4(host);
      }
      if (host instanceof Array) {
        return "[" + serializeIPv6(host) + "]";
      }
      return host;
    }
    function trimControlChars(url) {
      return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
    }
    function trimTabAndNewline(url) {
      return url.replace(/\u0009|\u000A|\u000D/g, "");
    }
    function shortenPath(url) {
      const path = url.path;
      if (path.length === 0) {
        return;
      }
      if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
        return;
      }
      path.pop();
    }
    function includesCredentials(url) {
      return url.username !== "" || url.password !== "";
    }
    function cannotHaveAUsernamePasswordPort(url) {
      return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
    }
    function isNormalizedWindowsDriveLetter(string) {
      return /^[A-Za-z]:$/.test(string);
    }
    function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
      this.pointer = 0;
      this.input = input;
      this.base = base || null;
      this.encodingOverride = encodingOverride || "utf-8";
      this.stateOverride = stateOverride;
      this.url = url;
      this.failure = false;
      this.parseError = false;
      if (!this.url) {
        this.url = {
          scheme: "",
          username: "",
          password: "",
          host: null,
          port: null,
          path: [],
          query: null,
          fragment: null,
          cannotBeABaseURL: false
        };
        const res2 = trimControlChars(this.input);
        if (res2 !== this.input) {
          this.parseError = true;
        }
        this.input = res2;
      }
      const res = trimTabAndNewline(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
      this.state = stateOverride || "scheme start";
      this.buffer = "";
      this.atFlag = false;
      this.arrFlag = false;
      this.passwordTokenSeenFlag = false;
      this.input = punycode.ucs2.decode(this.input);
      for (; this.pointer <= this.input.length; ++this.pointer) {
        const c = this.input[this.pointer];
        const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
        const ret = this["parse " + this.state](c, cStr);
        if (!ret) {
          break;
        } else if (ret === failure) {
          this.failure = true;
          break;
        }
      }
    }
    URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
      if (isASCIIAlpha(c)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
      } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
      if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
        this.buffer += cStr.toLowerCase();
      } else if (c === 58) {
        if (this.stateOverride) {
          if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
            return false;
          }
          if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
            return false;
          }
          if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
            return false;
          }
          if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
            return false;
          }
        }
        this.url.scheme = this.buffer;
        this.buffer = "";
        if (this.stateOverride) {
          return false;
        }
        if (this.url.scheme === "file") {
          if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
            this.parseError = true;
          }
          this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
          this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
          this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === 47) {
          this.state = "path or authority";
          ++this.pointer;
        } else {
          this.url.cannotBeABaseURL = true;
          this.url.path.push("");
          this.state = "cannot-be-a-base-URL path";
        }
      } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
      if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
        return failure;
      } else if (this.base.cannotBeABaseURL && c === 35) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.url.cannotBeABaseURL = true;
        this.state = "fragment";
      } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
      } else {
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
      if (c === 47) {
        this.state = "authority";
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
      this.url.scheme = this.base.scheme;
      if (isNaN(c)) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 47) {
        this.state = "relative slash";
      } else if (c === 63) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
        this.state = "relative slash";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice(0, this.base.path.length - 1);
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
      if (isSpecial(this.url) && (c === 47 || c === 92)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "special authority ignore slashes";
      } else if (c === 47) {
        this.state = "authority";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
      if (c !== 47 && c !== 92) {
        this.state = "authority";
        --this.pointer;
      } else {
        this.parseError = true;
      }
      return true;
    };
    URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
      if (c === 64) {
        this.parseError = true;
        if (this.atFlag) {
          this.buffer = "%40" + this.buffer;
        }
        this.atFlag = true;
        const len = countSymbols(this.buffer);
        for (let pointer = 0; pointer < len; ++pointer) {
          const codePoint = this.buffer.codePointAt(pointer);
          if (codePoint === 58 && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
          if (this.passwordTokenSeenFlag) {
            this.url.password += encodedCodePoints;
          } else {
            this.url.username += encodedCodePoints;
          }
        }
        this.buffer = "";
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        if (this.atFlag && this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
      if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
      } else if (c === 58 && !this.arrFlag) {
        if (this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
        if (this.stateOverride === "hostname") {
          return false;
        }
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
          this.parseError = true;
          return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
          this.parseError = true;
          return false;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
          return false;
        }
      } else {
        if (c === 91) {
          this.arrFlag = true;
        } else if (c === 93) {
          this.arrFlag = false;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
      if (isASCIIDigit(c)) {
        this.buffer += cStr;
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
        if (this.buffer !== "") {
          const port = parseInt(this.buffer);
          if (port > Math.pow(2, 16) - 1) {
            this.parseError = true;
            return failure;
          }
          this.url.port = port === defaultPort(this.url.scheme) ? null : port;
          this.buffer = "";
        }
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
    URLStateMachine.prototype["parse file"] = function parseFile(c) {
      this.url.scheme = "file";
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file slash";
      } else if (this.base !== null && this.base.scheme === "file") {
        if (isNaN(c)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (c === 63) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = "";
          this.state = "query";
        } else if (c === 35) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (this.input.length - this.pointer - 1 === 0 || !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            shortenPath(this.url);
          } else {
            this.parseError = true;
          }
          this.state = "path";
          --this.pointer;
        }
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file host";
      } else {
        if (this.base !== null && this.base.scheme === "file") {
          if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
            this.url.path.push(this.base.path[0]);
          } else {
            this.url.host = this.base.host;
          }
        }
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
      if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
          this.parseError = true;
          this.state = "path";
        } else if (this.buffer === "") {
          this.url.host = "";
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
        } else {
          let host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          if (host === "localhost") {
            host = "";
          }
          this.url.host = host;
          if (this.stateOverride) {
            return false;
          }
          this.buffer = "";
          this.state = "path start";
        }
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
      if (isSpecial(this.url)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "path";
        if (c !== 47 && c !== 92) {
          --this.pointer;
        }
      } else if (!this.stateOverride && c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (!this.stateOverride && c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (c !== void 0) {
        this.state = "path";
        if (c !== 47) {
          --this.pointer;
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse path"] = function parsePath(c) {
      if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
        if (isSpecial(this.url) && c === 92) {
          this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
          shortenPath(this.url);
          if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("");
          }
        } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
          if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
            if (this.url.host !== "" && this.url.host !== null) {
              this.parseError = true;
              this.url.host = "";
            }
            this.buffer = this.buffer[0] + ":";
          }
          this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
          while (this.url.path.length > 1 && this.url.path[0] === "") {
            this.parseError = true;
            this.url.path.shift();
          }
        }
        if (c === 63) {
          this.url.query = "";
          this.state = "query";
        }
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += percentEncodeChar(c, isPathPercentEncode);
      }
      return true;
    };
    URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!isNaN(c) && c !== 37) {
          this.parseError = true;
        }
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        if (!isNaN(c)) {
          this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
      if (isNaN(c) || !this.stateOverride && c === 35) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
          this.encodingOverride = "utf-8";
        }
        const buffer = new Buffer(this.buffer);
        for (let i = 0; i < buffer.length; ++i) {
          if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
            this.url.query += percentEncode(buffer[i]);
          } else {
            this.url.query += String.fromCodePoint(buffer[i]);
          }
        }
        this.buffer = "";
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
      if (isNaN(c)) {
      } else if (c === 0) {
        this.parseError = true;
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
      }
      return true;
    };
    function serializeURL(url, excludeFragment) {
      let output = url.scheme + ":";
      if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
          output += url.username;
          if (url.password !== "") {
            output += ":" + url.password;
          }
          output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
          output += ":" + url.port;
        }
      } else if (url.host === null && url.scheme === "file") {
        output += "//";
      }
      if (url.cannotBeABaseURL) {
        output += url.path[0];
      } else {
        for (const string of url.path) {
          output += "/" + string;
        }
      }
      if (url.query !== null) {
        output += "?" + url.query;
      }
      if (!excludeFragment && url.fragment !== null) {
        output += "#" + url.fragment;
      }
      return output;
    }
    function serializeOrigin(tuple) {
      let result = tuple.scheme + "://";
      result += serializeHost(tuple.host);
      if (tuple.port !== null) {
        result += ":" + tuple.port;
      }
      return result;
    }
    module2.exports.serializeURL = serializeURL;
    module2.exports.serializeURLOrigin = function(url) {
      switch (url.scheme) {
        case "blob":
          try {
            return module2.exports.serializeURLOrigin(module2.exports.parseURL(url.path[0]));
          } catch (e) {
            return "null";
          }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return serializeOrigin({
            scheme: url.scheme,
            host: url.host,
            port: url.port
          });
        case "file":
          return "file://";
        default:
          return "null";
      }
    };
    module2.exports.basicURLParse = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
      if (usm.failure) {
        return "failure";
      }
      return usm.url;
    };
    module2.exports.setTheUsername = function(url, username) {
      url.username = "";
      const decoded = punycode.ucs2.decode(username);
      for (let i = 0; i < decoded.length; ++i) {
        url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.setThePassword = function(url, password) {
      url.password = "";
      const decoded = punycode.ucs2.decode(password);
      for (let i = 0; i < decoded.length; ++i) {
        url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.serializeHost = serializeHost;
    module2.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
    module2.exports.serializeInteger = function(integer) {
      return String(integer);
    };
    module2.exports.parseURL = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      return module2.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
    };
  }
});

// node_modules/whatwg-url/lib/URL-impl.js
var require_URL_impl = __commonJS({
  "node_modules/whatwg-url/lib/URL-impl.js"(exports) {
    "use strict";
    var usm = require_url_state_machine();
    exports.implementation = class URLImpl {
      constructor(constructorArgs) {
        const url = constructorArgs[0];
        const base = constructorArgs[1];
        let parsedBase = null;
        if (base !== void 0) {
          parsedBase = usm.basicURLParse(base);
          if (parsedBase === "failure") {
            throw new TypeError("Invalid base URL");
          }
        }
        const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get href() {
        return usm.serializeURL(this._url);
      }
      set href(v) {
        const parsedURL = usm.basicURLParse(v);
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get origin() {
        return usm.serializeURLOrigin(this._url);
      }
      get protocol() {
        return this._url.scheme + ":";
      }
      set protocol(v) {
        usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
      }
      get username() {
        return this._url.username;
      }
      set username(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
      get password() {
        return this._url.password;
      }
      set password(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
      get host() {
        const url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      }
      set host(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
      }
      get hostname() {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      }
      set hostname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
      }
      get port() {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      }
      set port(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
        }
      }
      get pathname() {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      }
      set pathname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
      }
      get search() {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      }
      set search(v) {
        const url = this._url;
        if (v === "") {
          url.query = null;
          return;
        }
        const input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, { url, stateOverride: "query" });
      }
      get hash() {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      }
      set hash(v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        const input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
      }
      toJSON() {
        return this.href;
      }
    };
  }
});

// node_modules/whatwg-url/lib/URL.js
var require_URL = __commonJS({
  "node_modules/whatwg-url/lib/URL.js"(exports, module2) {
    "use strict";
    var conversions = require_lib2();
    var utils = require_utils2();
    var Impl = require_URL_impl();
    var impl = utils.implSymbol;
    function URL2(url) {
      if (!this || this[impl] || !(this instanceof URL2)) {
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
      }
      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 2; ++i) {
        args[i] = arguments[i];
      }
      args[0] = conversions["USVString"](args[0]);
      if (args[1] !== void 0) {
        args[1] = conversions["USVString"](args[1]);
      }
      module2.exports.setup(this, args);
    }
    URL2.prototype.toJSON = function toJSON() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 0; ++i) {
        args[i] = arguments[i];
      }
      return this[impl].toJSON.apply(this[impl], args);
    };
    Object.defineProperty(URL2.prototype, "href", {
      get() {
        return this[impl].href;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].href = V;
      },
      enumerable: true,
      configurable: true
    });
    URL2.prototype.toString = function() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      return this.href;
    };
    Object.defineProperty(URL2.prototype, "origin", {
      get() {
        return this[impl].origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "protocol", {
      get() {
        return this[impl].protocol;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].protocol = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "username", {
      get() {
        return this[impl].username;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].username = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "password", {
      get() {
        return this[impl].password;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].password = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "host", {
      get() {
        return this[impl].host;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].host = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "hostname", {
      get() {
        return this[impl].hostname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hostname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "port", {
      get() {
        return this[impl].port;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].port = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "pathname", {
      get() {
        return this[impl].pathname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].pathname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "search", {
      get() {
        return this[impl].search;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].search = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "hash", {
      get() {
        return this[impl].hash;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hash = V;
      },
      enumerable: true,
      configurable: true
    });
    module2.exports = {
      is(obj) {
        return !!obj && obj[impl] instanceof Impl.implementation;
      },
      create(constructorArgs, privateData) {
        let obj = Object.create(URL2.prototype);
        this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      setup(obj, constructorArgs, privateData) {
        if (!privateData)
          privateData = {};
        privateData.wrapper = obj;
        obj[impl] = new Impl.implementation(constructorArgs, privateData);
        obj[impl][utils.wrapperSymbol] = obj;
      },
      interface: URL2,
      expose: {
        Window: { URL: URL2 },
        Worker: { URL: URL2 }
      }
    };
  }
});

// node_modules/whatwg-url/lib/public-api.js
var require_public_api = __commonJS({
  "node_modules/whatwg-url/lib/public-api.js"(exports) {
    "use strict";
    exports.URL = require_URL().interface;
    exports.serializeURL = require_url_state_machine().serializeURL;
    exports.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
    exports.basicURLParse = require_url_state_machine().basicURLParse;
    exports.setTheUsername = require_url_state_machine().setTheUsername;
    exports.setThePassword = require_url_state_machine().setThePassword;
    exports.serializeHost = require_url_state_machine().serializeHost;
    exports.serializeInteger = require_url_state_machine().serializeInteger;
    exports.parseURL = require_url_state_machine().parseURL;
  }
});

// node_modules/node-fetch/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/node-fetch/lib/index.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var Stream = _interopDefault(require("stream"));
    var http = _interopDefault(require("http"));
    var Url = _interopDefault(require("url"));
    var whatwgUrl = _interopDefault(require_public_api());
    var https = _interopDefault(require("https"));
    var zlib = _interopDefault(require("zlib"));
    var Readable = Stream.Readable;
    var BUFFER = Symbol("buffer");
    var TYPE = Symbol("type");
    var Blob2 = class {
      constructor() {
        this[TYPE] = "";
        const blobParts = arguments[0];
        const options = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
          const a = blobParts;
          const length = Number(a.length);
          for (let i = 0; i < length; i++) {
            const element = a[i];
            let buffer;
            if (element instanceof Buffer) {
              buffer = element;
            } else if (ArrayBuffer.isView(element)) {
              buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
            } else if (element instanceof ArrayBuffer) {
              buffer = Buffer.from(element);
            } else if (element instanceof Blob2) {
              buffer = element[BUFFER];
            } else {
              buffer = Buffer.from(typeof element === "string" ? element : String(element));
            }
            size += buffer.length;
            buffers.push(buffer);
          }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options && options.type !== void 0 && String(options.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
          this[TYPE] = type;
        }
      }
      get size() {
        return this[BUFFER].length;
      }
      get type() {
        return this[TYPE];
      }
      text() {
        return Promise.resolve(this[BUFFER].toString());
      }
      arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
      stream() {
        const readable = new Readable();
        readable._read = function() {
        };
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === void 0) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === void 0) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new Blob2([], { type: arguments[2] });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    };
    Object.defineProperties(Blob2.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Object.defineProperty(Blob2.prototype, Symbol.toStringTag, {
      value: "Blob",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function FetchError(message, type, systemError) {
      Error.call(this, message);
      this.message = message;
      this.type = type;
      if (systemError) {
        this.code = this.errno = systemError.code;
      }
      Error.captureStackTrace(this, this.constructor);
    }
    FetchError.prototype = Object.create(Error.prototype);
    FetchError.prototype.constructor = FetchError;
    FetchError.prototype.name = "FetchError";
    var convert;
    try {
      convert = require("encoding").convert;
    } catch (e) {
    }
    var INTERNALS = Symbol("Body internals");
    var PassThrough = Stream.PassThrough;
    function Body(body) {
      var _this = this;
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
      let size = _ref$size === void 0 ? 0 : _ref$size;
      var _ref$timeout = _ref.timeout;
      let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
      if (body == null) {
        body = null;
      } else if (isURLSearchParams(body)) {
        body = Buffer.from(body.toString());
      } else if (isBlob(body))
        ;
      else if (Buffer.isBuffer(body))
        ;
      else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        body = Buffer.from(body);
      } else if (ArrayBuffer.isView(body)) {
        body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
      } else if (body instanceof Stream)
        ;
      else {
        body = Buffer.from(String(body));
      }
      this[INTERNALS] = {
        body,
        disturbed: false,
        error: null
      };
      this.size = size;
      this.timeout = timeout;
      if (body instanceof Stream) {
        body.on("error", function(err) {
          const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
          _this[INTERNALS].error = error;
        });
      }
    }
    Body.prototype = {
      get body() {
        return this[INTERNALS].body;
      },
      get bodyUsed() {
        return this[INTERNALS].disturbed;
      },
      arrayBuffer() {
        return consumeBody.call(this).then(function(buf) {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
      },
      blob() {
        let ct = this.headers && this.headers.get("content-type") || "";
        return consumeBody.call(this).then(function(buf) {
          return Object.assign(new Blob2([], {
            type: ct.toLowerCase()
          }), {
            [BUFFER]: buf
          });
        });
      },
      json() {
        var _this2 = this;
        return consumeBody.call(this).then(function(buffer) {
          try {
            return JSON.parse(buffer.toString());
          } catch (err) {
            return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
          }
        });
      },
      text() {
        return consumeBody.call(this).then(function(buffer) {
          return buffer.toString();
        });
      },
      buffer() {
        return consumeBody.call(this);
      },
      textConverted() {
        var _this3 = this;
        return consumeBody.call(this).then(function(buffer) {
          return convertBody(buffer, _this3.headers);
        });
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    Body.mixIn = function(proto) {
      for (const name of Object.getOwnPropertyNames(Body.prototype)) {
        if (!(name in proto)) {
          const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    };
    function consumeBody() {
      var _this4 = this;
      if (this[INTERNALS].disturbed) {
        return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
      }
      this[INTERNALS].disturbed = true;
      if (this[INTERNALS].error) {
        return Body.Promise.reject(this[INTERNALS].error);
      }
      let body = this.body;
      if (body === null) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      if (isBlob(body)) {
        body = body.stream();
      }
      if (Buffer.isBuffer(body)) {
        return Body.Promise.resolve(body);
      }
      if (!(body instanceof Stream)) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      let accum = [];
      let accumBytes = 0;
      let abort = false;
      return new Body.Promise(function(resolve, reject) {
        let resTimeout;
        if (_this4.timeout) {
          resTimeout = setTimeout(function() {
            abort = true;
            reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
          }, _this4.timeout);
        }
        body.on("error", function(err) {
          if (err.name === "AbortError") {
            abort = true;
            reject(err);
          } else {
            reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
          }
        });
        body.on("data", function(chunk) {
          if (abort || chunk === null) {
            return;
          }
          if (_this4.size && accumBytes + chunk.length > _this4.size) {
            abort = true;
            reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
            return;
          }
          accumBytes += chunk.length;
          accum.push(chunk);
        });
        body.on("end", function() {
          if (abort) {
            return;
          }
          clearTimeout(resTimeout);
          try {
            resolve(Buffer.concat(accum, accumBytes));
          } catch (err) {
            reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
          }
        });
      });
    }
    function convertBody(buffer, headers) {
      if (typeof convert !== "function") {
        throw new Error("The package `encoding` must be installed to use the textConverted() function");
      }
      const ct = headers.get("content-type");
      let charset = "utf-8";
      let res, str;
      if (ct) {
        res = /charset=([^;]*)/i.exec(ct);
      }
      str = buffer.slice(0, 1024).toString();
      if (!res && str) {
        res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
      }
      if (!res && str) {
        res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
        if (!res) {
          res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
          if (res) {
            res.pop();
          }
        }
        if (res) {
          res = /charset=(.*)/i.exec(res.pop());
        }
      }
      if (!res && str) {
        res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
      }
      if (res) {
        charset = res.pop();
        if (charset === "gb2312" || charset === "gbk") {
          charset = "gb18030";
        }
      }
      return convert(buffer, "UTF-8", charset).toString();
    }
    function isURLSearchParams(obj) {
      if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
        return false;
      }
      return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
    }
    function isBlob(obj) {
      return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
    }
    function clone(instance) {
      let p1, p2;
      let body = instance.body;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof Stream && typeof body.getBoundary !== "function") {
        p1 = new PassThrough();
        p2 = new PassThrough();
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS].body = p1;
        body = p2;
      }
      return body;
    }
    function extractContentType(body) {
      if (body === null) {
        return null;
      } else if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      } else if (isURLSearchParams(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isBlob(body)) {
        return body.type || null;
      } else if (Buffer.isBuffer(body)) {
        return null;
      } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        return null;
      } else if (ArrayBuffer.isView(body)) {
        return null;
      } else if (typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      } else if (body instanceof Stream) {
        return null;
      } else {
        return "text/plain;charset=UTF-8";
      }
    }
    function getTotalBytes(instance) {
      const body = instance.body;
      if (body === null) {
        return 0;
      } else if (isBlob(body)) {
        return body.size;
      } else if (Buffer.isBuffer(body)) {
        return body.length;
      } else if (body && typeof body.getLengthSync === "function") {
        if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
          return body.getLengthSync();
        }
        return null;
      } else {
        return null;
      }
    }
    function writeToStream(dest, instance) {
      const body = instance.body;
      if (body === null) {
        dest.end();
      } else if (isBlob(body)) {
        body.stream().pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    }
    Body.Promise = global.Promise;
    var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    function validateName(name) {
      name = `${name}`;
      if (invalidTokenRegex.test(name) || name === "") {
        throw new TypeError(`${name} is not a legal HTTP header name`);
      }
    }
    function validateValue(value) {
      value = `${value}`;
      if (invalidHeaderCharRegex.test(value)) {
        throw new TypeError(`${value} is not a legal HTTP header value`);
      }
    }
    function find(map, name) {
      name = name.toLowerCase();
      for (const key in map) {
        if (key.toLowerCase() === name) {
          return key;
        }
      }
      return void 0;
    }
    var MAP = Symbol("map");
    var Headers = class {
      constructor() {
        let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
        this[MAP] = /* @__PURE__ */ Object.create(null);
        if (init instanceof Headers) {
          const rawHeaders = init.raw();
          const headerNames = Object.keys(rawHeaders);
          for (const headerName of headerNames) {
            for (const value of rawHeaders[headerName]) {
              this.append(headerName, value);
            }
          }
          return;
        }
        if (init == null)
          ;
        else if (typeof init === "object") {
          const method = init[Symbol.iterator];
          if (method != null) {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            const pairs = [];
            for (const pair of init) {
              if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                throw new TypeError("Each header pair must be iterable");
              }
              pairs.push(Array.from(pair));
            }
            for (const pair of pairs) {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              this.append(pair[0], pair[1]);
            }
          } else {
            for (const key of Object.keys(init)) {
              const value = init[key];
              this.append(key, value);
            }
          }
        } else {
          throw new TypeError("Provided initializer must be an object");
        }
      }
      get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === void 0) {
          return null;
        }
        return this[MAP][key].join(", ");
      }
      forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        let pairs = getHeaders(this);
        let i = 0;
        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          const name = _pairs$i[0], value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }
      set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        this[MAP][key !== void 0 ? key : name] = [value];
      }
      append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== void 0;
      }
      delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          delete this[MAP][key];
        }
      }
      raw() {
        return this[MAP];
      }
      keys() {
        return createHeadersIterator(this, "key");
      }
      values() {
        return createHeadersIterator(this, "value");
      }
      [Symbol.iterator]() {
        return createHeadersIterator(this, "key+value");
      }
    };
    Headers.prototype.entries = Headers.prototype[Symbol.iterator];
    Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
      value: "Headers",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Headers.prototype, {
      get: { enumerable: true },
      forEach: { enumerable: true },
      set: { enumerable: true },
      append: { enumerable: true },
      has: { enumerable: true },
      delete: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true }
    });
    function getHeaders(headers) {
      let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
      const keys = Object.keys(headers[MAP]).sort();
      return keys.map(kind === "key" ? function(k) {
        return k.toLowerCase();
      } : kind === "value" ? function(k) {
        return headers[MAP][k].join(", ");
      } : function(k) {
        return [k.toLowerCase(), headers[MAP][k].join(", ")];
      });
    }
    var INTERNAL = Symbol("internal");
    function createHeadersIterator(target, kind) {
      const iterator = Object.create(HeadersIteratorPrototype);
      iterator[INTERNAL] = {
        target,
        kind,
        index: 0
      };
      return iterator;
    }
    var HeadersIteratorPrototype = Object.setPrototypeOf({
      next() {
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
          throw new TypeError("Value of `this` is not a HeadersIterator");
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
        const values = getHeaders(target, kind);
        const len = values.length;
        if (index >= len) {
          return {
            value: void 0,
            done: true
          };
        }
        this[INTERNAL].index = index + 1;
        return {
          value: values[index],
          done: false
        };
      }
    }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
      value: "HeadersIterator",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function exportNodeCompatibleHeaders(headers) {
      const obj = Object.assign({ __proto__: null }, headers[MAP]);
      const hostHeaderKey = find(headers[MAP], "Host");
      if (hostHeaderKey !== void 0) {
        obj[hostHeaderKey] = obj[hostHeaderKey][0];
      }
      return obj;
    }
    function createHeadersLenient(obj) {
      const headers = new Headers();
      for (const name of Object.keys(obj)) {
        if (invalidTokenRegex.test(name)) {
          continue;
        }
        if (Array.isArray(obj[name])) {
          for (const val of obj[name]) {
            if (invalidHeaderCharRegex.test(val)) {
              continue;
            }
            if (headers[MAP][name] === void 0) {
              headers[MAP][name] = [val];
            } else {
              headers[MAP][name].push(val);
            }
          }
        } else if (!invalidHeaderCharRegex.test(obj[name])) {
          headers[MAP][name] = [obj[name]];
        }
      }
      return headers;
    }
    var INTERNALS$1 = Symbol("Response internals");
    var STATUS_CODES = http.STATUS_CODES;
    var Response = class {
      constructor() {
        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Body.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers(opts.headers);
        if (body != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: opts.url,
          status,
          statusText: opts.statusText || STATUS_CODES[status],
          headers,
          counter: opts.counter
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      clone() {
        return new Response(clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    };
    Body.mixIn(Response.prototype);
    Object.defineProperties(Response.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    Object.defineProperty(Response.prototype, Symbol.toStringTag, {
      value: "Response",
      writable: false,
      enumerable: false,
      configurable: true
    });
    var INTERNALS$2 = Symbol("Request internals");
    var URL2 = Url.URL || whatwgUrl.URL;
    var parse_url = Url.parse;
    var format_url = Url.format;
    function parseURL(urlStr) {
      if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
        urlStr = new URL2(urlStr).toString();
      }
      return parse_url(urlStr);
    }
    var streamDestructionSupported = "destroy" in Stream.Readable.prototype;
    function isRequest(input) {
      return typeof input === "object" && typeof input[INTERNALS$2] === "object";
    }
    function isAbortSignal(signal) {
      const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
      return !!(proto && proto.constructor.name === "AbortSignal");
    }
    var Request = class {
      constructor(input) {
        let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let parsedURL;
        if (!isRequest(input)) {
          if (input && input.href) {
            parsedURL = parseURL(input.href);
          } else {
            parsedURL = parseURL(`${input}`);
          }
          input = {};
        } else {
          parsedURL = parseURL(input.url);
        }
        let method = init.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
        Body.call(this, inputBody, {
          timeout: init.timeout || input.timeout || 0,
          size: init.size || input.size || 0
        });
        const headers = new Headers(init.headers || input.headers || {});
        if (inputBody != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init)
          signal = init.signal;
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS$2] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
        this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
      }
      get method() {
        return this[INTERNALS$2].method;
      }
      get url() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
      get headers() {
        return this[INTERNALS$2].headers;
      }
      get redirect() {
        return this[INTERNALS$2].redirect;
      }
      get signal() {
        return this[INTERNALS$2].signal;
      }
      clone() {
        return new Request(this);
      }
    };
    Body.mixIn(Request.prototype);
    Object.defineProperty(Request.prototype, Symbol.toStringTag, {
      value: "Request",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    function getNodeRequestOptions(request) {
      const parsedURL = request[INTERNALS$2].parsedURL;
      const headers = new Headers(request[INTERNALS$2].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      if (!parsedURL.protocol || !parsedURL.hostname) {
        throw new TypeError("Only absolute URLs are supported");
      }
      if (!/^https?:$/.test(parsedURL.protocol)) {
        throw new TypeError("Only HTTP(S) protocols are supported");
      }
      if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
        throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
      }
      let contentLengthValue = null;
      if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
        contentLengthValue = "0";
      }
      if (request.body != null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === "number") {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
      }
      if (request.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate");
      }
      let agent = request.agent;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      if (!headers.has("Connection") && !agent) {
        headers.set("Connection", "close");
      }
      return Object.assign({}, parsedURL, {
        method: request.method,
        headers: exportNodeCompatibleHeaders(headers),
        agent
      });
    }
    function AbortError(message) {
      Error.call(this, message);
      this.type = "aborted";
      this.message = message;
      Error.captureStackTrace(this, this.constructor);
    }
    AbortError.prototype = Object.create(Error.prototype);
    AbortError.prototype.constructor = AbortError;
    AbortError.prototype.name = "AbortError";
    var URL$1 = Url.URL || whatwgUrl.URL;
    var PassThrough$1 = Stream.PassThrough;
    var isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
      const orig = new URL$1(original).hostname;
      const dest = new URL$1(destination).hostname;
      return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
    };
    function fetch2(url, opts) {
      if (!fetch2.Promise) {
        throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
      }
      Body.Promise = fetch2.Promise;
      return new fetch2.Promise(function(resolve, reject) {
        const request = new Request(url, opts);
        const options = getNodeRequestOptions(request);
        const send = (options.protocol === "https:" ? https : http).request;
        const signal = request.signal;
        let response = null;
        const abort = function abort2() {
          let error = new AbortError("The user aborted a request.");
          reject(error);
          if (request.body && request.body instanceof Stream.Readable) {
            request.body.destroy(error);
          }
          if (!response || !response.body)
            return;
          response.body.emit("error", error);
        };
        if (signal && signal.aborted) {
          abort();
          return;
        }
        const abortAndFinalize = function abortAndFinalize2() {
          abort();
          finalize();
        };
        const req = send(options);
        let reqTimeout;
        if (signal) {
          signal.addEventListener("abort", abortAndFinalize);
        }
        function finalize() {
          req.abort();
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
          clearTimeout(reqTimeout);
        }
        if (request.timeout) {
          req.once("socket", function(socket) {
            reqTimeout = setTimeout(function() {
              reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
              finalize();
            }, request.timeout);
          });
        }
        req.on("error", function(err) {
          reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
          finalize();
        });
        req.on("response", function(res) {
          clearTimeout(reqTimeout);
          const headers = createHeadersLenient(res.headers);
          if (fetch2.isRedirect(res.statusCode)) {
            const location = headers.get("Location");
            let locationURL = null;
            try {
              locationURL = location === null ? null : new URL$1(location, request.url).toString();
            } catch (err) {
              if (request.redirect !== "manual") {
                reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
                finalize();
                return;
              }
            }
            switch (request.redirect) {
              case "error":
                reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
                finalize();
                return;
              case "manual":
                if (locationURL !== null) {
                  try {
                    headers.set("Location", locationURL);
                  } catch (err) {
                    reject(err);
                  }
                }
                break;
              case "follow":
                if (locationURL === null) {
                  break;
                }
                if (request.counter >= request.follow) {
                  reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                  finalize();
                  return;
                }
                const requestOpts = {
                  headers: new Headers(request.headers),
                  follow: request.follow,
                  counter: request.counter + 1,
                  agent: request.agent,
                  compress: request.compress,
                  method: request.method,
                  body: request.body,
                  signal: request.signal,
                  timeout: request.timeout,
                  size: request.size
                };
                if (!isDomainOrSubdomain(request.url, locationURL)) {
                  for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                    requestOpts.headers.delete(name);
                  }
                }
                if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                  reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                  finalize();
                  return;
                }
                if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                  requestOpts.method = "GET";
                  requestOpts.body = void 0;
                  requestOpts.headers.delete("content-length");
                }
                resolve(fetch2(new Request(locationURL, requestOpts)));
                finalize();
                return;
            }
          }
          res.once("end", function() {
            if (signal)
              signal.removeEventListener("abort", abortAndFinalize);
          });
          let body = res.pipe(new PassThrough$1());
          const response_options = {
            url: request.url,
            status: res.statusCode,
            statusText: res.statusMessage,
            headers,
            size: request.size,
            timeout: request.timeout,
            counter: request.counter
          };
          const codings = headers.get("Content-Encoding");
          if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          const zlibOptions = {
            flush: zlib.Z_SYNC_FLUSH,
            finishFlush: zlib.Z_SYNC_FLUSH
          };
          if (codings == "gzip" || codings == "x-gzip") {
            body = body.pipe(zlib.createGunzip(zlibOptions));
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          if (codings == "deflate" || codings == "x-deflate") {
            const raw = res.pipe(new PassThrough$1());
            raw.once("data", function(chunk) {
              if ((chunk[0] & 15) === 8) {
                body = body.pipe(zlib.createInflate());
              } else {
                body = body.pipe(zlib.createInflateRaw());
              }
              response = new Response(body, response_options);
              resolve(response);
            });
            return;
          }
          if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
            body = body.pipe(zlib.createBrotliDecompress());
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          response = new Response(body, response_options);
          resolve(response);
        });
        writeToStream(req, request);
      });
    }
    fetch2.isRedirect = function(code) {
      return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    };
    fetch2.Promise = global.Promise;
    module2.exports = exports = fetch2;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = exports;
    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.FetchError = FetchError;
  }
});

// node_modules/isomorphic-fetch/fetch-npm-node.js
var require_fetch_npm_node = __commonJS({
  "node_modules/isomorphic-fetch/fetch-npm-node.js"(exports, module2) {
    "use strict";
    var realFetch = require_lib3();
    module2.exports = function(url, options) {
      if (/^\/\//.test(url)) {
        url = "https:" + url;
      }
      return realFetch.call(this, url, options);
    };
    if (!global.fetch) {
      global.fetch = module2.exports;
      global.Response = realFetch.Response;
      global.Headers = realFetch.Headers;
      global.Request = realFetch.Request;
    }
  }
});

// index.ts
var utils_exports = {};
__export(utils_exports, {
  buildLocations: () => buildLocations,
  checkSpreadsheet: () => checkSpreadsheet,
  getPhotos: () => getPhotos,
  getWikimediaPhotoData: () => getWikimediaPhotoData,
  parseCoordinates: () => parseCoordinates,
  processSpreadsheet: () => processSpreadsheet
});
module.exports = __toCommonJS(utils_exports);
var import_client_dynamodb2 = __toESM(require_dist_cjs46());
var import_util_dynamodb = __toESM(require_dist_cjs47());

// aws.ts
var import_client_dynamodb = __toESM(require_dist_cjs46());
var dynamodbClient = new import_client_dynamodb.DynamoDBClient({
  region: process.env.REGION
});

// photoLinks.ts
var PHOTO_LINKS = {
  "https://commons.wikimedia.org/wiki/File:Winter_Gardens,_Duthie_Park,_Aberdeen_-_geograph.org.uk_-_214009.jpg": {
    file: "Winter_Gardens%2C_Duthie_Park%2C_Aberdeen_-_geograph.org.uk_-_214009.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Winter_Gardens,_Duthie_Park,_Aberdeen_-_geograph.org.uk_-_214009.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:DSCF1764_Johnston_Gardens_Aberdeen.jpg": {
    file: "640px-DSCF1764_Johnston_Gardens_Aberdeen.jpg",
    attribution: "AlasdairW",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:DSCF1764_Johnston_Gardens_Aberdeen.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:A_misty_day_at_Mousa_Broch.jpg": {
    file: "A_misty_day_at_Mousa_Broch.jpg",
    attribution: "Jorunn",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:A_misty_day_at_Mousa_Broch.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Broch_of_Clickimin_01.jpg": {
    file: "640px-Broch_of_Clickimin_01.jpg",
    attribution: "DougRM",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Broch_of_Clickimin_01.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:EshaNess_Lighthouse_(8204991572).jpg": {
    file: "640px-EshaNess_Lighthouse_%288204991572%29.jpg",
    attribution: "JotaCartas",
    copyright: "CC BY 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:EshaNess_Lighthouse_(8204991572).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Sumburgh_Head_IMG_1315.jpg": {
    file: "640px-Sumburgh_Head_IMG_1315.jpg",
    attribution: "De728631",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Sumburgh_Head_IMG_1315.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:%27Bobby%27s_Bus_Shelter%27,_Baltasound,_Unst,_Shetland._-_panoramio.jpg": {
    file: "640px-%27Bobby%27s_Bus_Shelter%27%2C_Baltasound%2C_Unst%2C_Shetland._-_panoramio.jpg",
    attribution: "Panoramio upload bot",
    copyright: "CC BY 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:%27Bobby%27s_Bus_Shelter%27,_Baltasound,_Unst,_Shetland._-_panoramio.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Jarlshof_Prehistoric_%26_Norse_Settlement,_Sumburgh,_Shetland_Islands.jpg": {
    file: "640px-Jarlshof_Prehistoric_%26_Norse_Settlement%2C_Sumburgh%2C_Shetland_Islands.jpg",
    attribution: "Stinglehammer",
    copyright: "CC0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Jarlshof_Prehistoric_%26_Norse_Settlement,_Sumburgh,_Shetland_Islands.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Meffan_Institute_-_geograph.org.uk_-_1291301.jpg": {
    file: "Meffan_Institute_-_geograph.org.uk_-_1291301.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Meffan_Institute_-_geograph.org.uk_-_1291301.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:War_Memorial_at_Balmashanner_-_geograph.org.uk_-_402698.jpg": {
    file: "War_Memorial_at_Balmashanner_-_geograph.org.uk_-_402698.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:War_Memorial_at_Balmashanner_-_geograph.org.uk_-_402698.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Kirriemuir_Camera_Obscura_-_geograph.org.uk_-_574982.jpg": {
    file: "Kirriemuir_Camera_Obscura_-_geograph.org.uk_-_574982.jpg",
    attribution: "File Upload Bot (Magnus Manske)",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Kirriemuir_Camera_Obscura_-_geograph.org.uk_-_574982.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Gateway_to_the_Glens_Museum._-_geograph.org.uk_-_423949.jpg": {
    file: "Gateway_to_the_Glens_Museum._-_geograph.org.uk_-_423949.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Gateway_to_the_Glens_Museum._-_geograph.org.uk_-_423949.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dalhousie_Arch,_Edzell_-_geograph.org.uk_-_1000574.jpg": {
    file: "Dalhousie_Arch%2C_Edzell_-_geograph.org.uk_-_1000574.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dalhousie_Arch,_Edzell_-_geograph.org.uk_-_1000574.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Brechin_Cathedral_20090616_from_the_south.jpg": {
    file: "640px-Brechin_Cathedral_20090616_from_the_south.jpg",
    attribution: "Otter",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Brechin_Cathedral_20090616_from_the_south.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Signal_Tower_Museum_-_geograph.org.uk_-_1247673.jpg": {
    file: "Signal_Tower_Museum_-_geograph.org.uk_-_1247673.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Signal_Tower_Museum_-_geograph.org.uk_-_1247673.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Barry_Mill2.jpg": {
    file: "640px-Barry_Mill2.jpg",
    attribution: "Scott MacDonald",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Barry_Mill2.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dibble_tree.jpg": {
    file: "640px-Dibble_tree.jpg",
    attribution: "Catfish Jim and the soapdish",
    copyright: "Public domain",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dibble_tree.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:House_of_Dun_-_geograph.org.uk_-_1918387.jpg": {
    file: "House_of_Dun_-_geograph.org.uk_-_1918387.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:House_of_Dun_-_geograph.org.uk_-_1918387.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Another_View_of_Scurdie_Ness_Lighthouse_-_geograph.org.uk_-_1204176.jpg": {
    file: "Another_View_of_Scurdie_Ness_Lighthouse_-_geograph.org.uk_-_1204176.jpg",
    attribution: "File Upload Bot (Magnus Manske)",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Another_View_of_Scurdie_Ness_Lighthouse_-_geograph.org.uk_-_1204176.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Aden_country_park_campsite_1_-_geograph.org.uk_-_774864.jpg": {
    file: "Aden_country_park_campsite_1_-_geograph.org.uk_-_774864.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Aden_country_park_campsite_1_-_geograph.org.uk_-_774864.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Stag_on_Mormond_Hill.jpg": {
    file: "640px-Stag_on_Mormond_Hill.jpg",
    attribution: "Finavon",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Stag_on_Mormond_Hill.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Peterhead_Lido_-_geograph.org.uk_-_159757.jpg": {
    file: "Peterhead_Lido_-_geograph.org.uk_-_159757.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Peterhead_Lido_-_geograph.org.uk_-_159757.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Bridge_over_the_Deveron_-_geograph.org.uk_-_1248701.jpg": {
    file: "Bridge_over_the_Deveron_-_geograph.org.uk_-_1248701.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Bridge_over_the_Deveron_-_geograph.org.uk_-_1248701.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Moat_Brae,_National_Centre_for_Children%27s_Literature_and_Storytelling.jpg": {
    file: "640px-Moat_Brae%2C_National_Centre_for_Children%27s_Literature_and_Storytelling.jpg",
    attribution: "MoatBrae",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Moat_Brae,_National_Centre_for_Children%27s_Literature_and_Storytelling.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Ellisland_Farm_Auldgirth.JPG": {
    file: "640px-Ellisland_Farm_Auldgirth.JPG",
    attribution: "Rosser1954",
    copyright: "Public domain",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Ellisland_Farm_Auldgirth.JPG"
  },
  "https://commons.wikimedia.org/wiki/File:Devorgilla_Bridge,_Dumfries_(26588006583).jpg": {
    file: "640px-Devorgilla_Bridge%2C_Dumfries_%2826588006583%29.jpg",
    attribution: "Zambog",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Devorgilla_Bridge,_Dumfries_(26588006583).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Drumlanrig_Castle.jpg": {
    file: "Drumlanrig_Castle.jpg",
    attribution: "Natl1",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Drumlanrig_Castle.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Caerlaverock_Castle,_Dumfriesshire.jpg": {
    file: "Caerlaverock_Castle%2C_Dumfriesshire.jpg",
    attribution: "Broichmore",
    copyright: "CC BY 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Caerlaverock_Castle,_Dumfriesshire.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Old_Blacksmith%27s_Shop_-_geograph.org.uk_-_881585.jpg": {
    file: "The_Old_Blacksmith%27s_Shop_-_geograph.org.uk_-_881585.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Old_Blacksmith%27s_Shop_-_geograph.org.uk_-_881585.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Devil%27s_Porridge_Museum.jpg": {
    file: "640px-The_Devil%27s_Porridge_Museum.jpg",
    attribution: "Earlgreydays",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Devil%27s_Porridge_Museum.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dumfries,_Dock_Park,_Bandstand.jpg": {
    file: "640px-Dumfries%2C_Dock_Park%2C_Bandstand.jpg",
    attribution: "Grant McIntosh Photography",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dumfries,_Dock_Park,_Bandstand.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Logan_Botanic_Garden_(43275930372).jpg": {
    file: "640px-Logan_Botanic_Garden_%2843275930372%29.jpg",
    attribution: "Naturiss",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Logan_Botanic_Garden_(43275930372).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Marina_at_Kirkcudbright_Harbour_-_geograph.org.uk_-_2030162.jpg": {
    file: "640px-Marina_at_Kirkcudbright_Harbour_-_geograph.org.uk_-_2030162.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Marina_at_Kirkcudbright_Harbour_-_geograph.org.uk_-_2030162.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Sweetheart_Abbey1.jpg": {
    file: "640px-Sweetheart_Abbey1.jpg",
    attribution: "File Upload Bot (Magnus Manske)",
    copyright: "Public domain",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Sweetheart_Abbey1.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Caerlaverock_Wetland_Centre_-_geograph.org.uk_-_3411378.jpg": {
    file: "Caerlaverock_Wetland_Centre_-_geograph.org.uk_-_3411378.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Caerlaverock_Wetland_Centre_-_geograph.org.uk_-_3411378.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Cairn_on_Long_Fell_looking_to_Criffel_-_geograph.org.uk_-_1997817.jpg": {
    file: "640px-Cairn_on_Long_Fell_looking_to_Criffel_-_geograph.org.uk_-_1997817.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Cairn_on_Long_Fell_looking_to_Criffel_-_geograph.org.uk_-_1997817.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Trig_Pillar,_The_Merrick_-_geograph.org.uk_-_462822.jpg": {
    file: "Trig_Pillar%2C_The_Merrick_-_geograph.org.uk_-_462822.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Trig_Pillar,_The_Merrick_-_geograph.org.uk_-_462822.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Powfoot_Spa_%26_beach_with_the_Solway_Firth,_Dumfries_%26_Galloway.jpg": {
    file: "640px-Powfoot_Spa_%26_beach_with_the_Solway_Firth%2C_Dumfries_%26_Galloway.jpg",
    attribution: "Rosser1954",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Powfoot_Spa_%26_beach_with_the_Solway_Firth,_Dumfries_%26_Galloway.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Burns_Statue_-_geograph.org.uk_-_401572.jpg": {
    file: "Burns_Statue_-_geograph.org.uk_-_401572.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Burns_Statue_-_geograph.org.uk_-_401572.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Jean_Armour_Statue,_Dumfries_-_geograph.org.uk_-_151761.jpg": {
    file: "Jean_Armour_Statue%2C_Dumfries_-_geograph.org.uk_-_151761.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Jean_Armour_Statue,_Dumfries_-_geograph.org.uk_-_151761.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dumfries_Museum,_old_windmill_tower,_Dumfries_%26_Galloway,_Scotland.jpg": {
    file: "640px-Dumfries_Museum%2C_old_windmill_tower%2C_Dumfries_%26_Galloway%2C_Scotland.jpg",
    attribution: "Rosser1954",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dumfries_Museum,_old_windmill_tower,_Dumfries_%26_Galloway,_Scotland.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:V%26A_Dundee_Near_Completion_Feb_2018_(Alex_Liivet).jpg": {
    file: "640px-V%26A_Dundee_Near_Completion_Feb_2018_%28Alex_Liivet%29.jpg",
    attribution: "Laerol",
    copyright: "CC BY 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:V%26A_Dundee_Near_Completion_Feb_2018_(Alex_Liivet).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:RRS_Discovery_Dundee.JPG": {
    file: "640px-RRS_Discovery_Dundee.JPG",
    attribution: "J budissin",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:RRS_Discovery_Dundee.JPG"
  },
  "https://commons.wikimedia.org/wiki/File:Mills_Observatory_(geograph_4897866).jpg": {
    file: "640px-Mills_Observatory_%28geograph_4897866%29.jpg",
    attribution: "Crowsus",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Mills_Observatory_(geograph_4897866).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Balgay_Park_(geograph_4527842).jpg": {
    file: "640px-Balgay_Park_%28geograph_4527842%29.jpg",
    attribution: "Crowsus",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Balgay_Park_(geograph_4527842).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:287_Dundee_Science_Centre_AR.jpg": {
    file: "640px-287_Dundee_Science_Centre_AR.jpg",
    attribution: "DundeeScienceCentre",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:287_Dundee_Science_Centre_AR.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_McManus_(51380568903).jpg": {
    file: "640px-The_McManus_%2851380568903%29.jpg",
    attribution: "Jammyscone",
    copyright: "CC0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_McManus_(51380568903).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Desperate_dan.jpg": {
    file: "Desperate_dan.jpg",
    attribution: "Catfish Jim and the soapdish",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Desperate_dan.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Oor_Wullie_statue.jpg": {
    file: "640px-Oor_Wullie_statue.jpg",
    attribution: "Sahaib",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Oor_Wullie_statue.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:DC_Thomson_Dundee_Meadowside_north_east_distant_view_(post_refurb).jpg": {
    file: "640px-DC_Thomson_Dundee_Meadowside_north_east_distant_view_%28post_refurb%29.jpg",
    attribution: "Laerol",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:DC_Thomson_Dundee_Meadowside_north_east_distant_view_(post_refurb).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:St_Pauls_Cathedral,_Dundee_(geograph_3856675).jpg": {
    file: "St_Pauls_Cathedral%2C_Dundee_%28geograph_3856675%29.jpg",
    attribution: "Cnbrb",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:St_Pauls_Cathedral,_Dundee_(geograph_3856675).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Slessor_Gardens_Feb_2018.jpg": {
    file: "640px-Slessor_Gardens_Feb_2018.jpg",
    attribution: "Laerol",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Slessor_Gardens_Feb_2018.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Queen_Victoria_Statue,_Albert_Square_-_geograph.org.uk_-_2459392.jpg": {
    file: "Queen_Victoria_Statue%2C_Albert_Square_-_geograph.org.uk_-_2459392.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Queen_Victoria_Statue,_Albert_Square_-_geograph.org.uk_-_2459392.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:%27Lemmings%27_sculpture_-_detail_(geograph_6299613).jpg": {
    file: "%27Lemmings%27_sculpture_-_detail_%28geograph_6299613%29.jpg",
    attribution: "Cakelot1",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:%27Lemmings%27_sculpture_-_detail_(geograph_6299613).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Tay_Road_Bridge_-_geograph.org.uk_-_433424.jpg": {
    file: "Tay_Road_Bridge_-_geograph.org.uk_-_433424.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Tay_Road_Bridge_-_geograph.org.uk_-_433424.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Tay_Rail_Bridge.jpg": {
    file: "640px-Tay_Rail_Bridge.jpg",
    attribution: "Macieklew",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Tay_Rail_Bridge.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dundee_-_Verdant_Works_Museum,_courtyard_(geograph_5231391).jpg": {
    file: "640px-Dundee_-_Verdant_Works_Museum%2C_courtyard_%28geograph_5231391%29.jpg",
    attribution: "Plucas58",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dundee_-_Verdant_Works_Museum,_courtyard_(geograph_5231391).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Caird_Hall_and_Caird_Hall_Square,_Dundee.jpg": {
    file: "640px-Caird_Hall_and_Caird_Hall_Square%2C_Dundee.jpg",
    attribution: "Stephencdickson",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Caird_Hall_and_Caird_Hall_Square,_Dundee.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Penguins_on_the_wall_-_geograph.org.uk_-_1804952.jpg": {
    file: "640px-Penguins_on_the_wall_-_geograph.org.uk_-_1804952.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Penguins_on_the_wall_-_geograph.org.uk_-_1804952.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dundee_Museum_of_Transport.jpg": {
    file: "640px-Dundee_Museum_of_Transport.jpg",
    attribution: "Ramarshal",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dundee_Museum_of_Transport.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Magdalen_Green_Bandstand_-_geograph.org.uk_-_1253228.jpg": {
    file: "Magdalen_Green_Bandstand_-_geograph.org.uk_-_1253228.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Magdalen_Green_Bandstand_-_geograph.org.uk_-_1253228.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Mains_Castle_-_geograph.org.uk_-_1224186.jpg": {
    file: "Mains_Castle_-_geograph.org.uk_-_1224186.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Mains_Castle_-_geograph.org.uk_-_1224186.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dundee_Rep,_South_Tay_Street_-_geograph.org.uk_-_2464945.jpg": {
    file: "Dundee_Rep%2C_South_Tay_Street_-_geograph.org.uk_-_2464945.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dundee_Rep,_South_Tay_Street_-_geograph.org.uk_-_2464945.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dundee_Contemporary_Arts.jpg": {
    file: "640px-Dundee_Contemporary_Arts.jpg",
    attribution: "Ydam~commonswiki",
    copyright: "CC-BY-SA-3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dundee_Contemporary_Arts.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Wojtek_statue_in_Duns_%E2%80%94_Geograph-5305348-by-Jim-Barton.jpg": {
    file: "640px-Wojtek_statue_in_Duns_%E2%80%94_Geograph-5305348-by-Jim-Barton.jpg",
    attribution: "Eissink",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Wojtek_statue_in_Duns_%E2%80%94_Geograph-5305348-by-Jim-Barton.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Arctic_Tern_Sculpture_at_the_SeaBird_Centre,_North_Berwick_-_geograph.org.uk_-_1198452.jpg": {
    file: "Arctic_Tern_Sculpture_at_the_SeaBird_Centre%2C_North_Berwick_-_geograph.org.uk_-_1198452.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Arctic_Tern_Sculpture_at_the_SeaBird_Centre,_North_Berwick_-_geograph.org.uk_-_1198452.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:PrestongrangeMuseum2.jpg": {
    file: "640px-PrestongrangeMuseum2.jpg",
    attribution: "File Upload Bot (Magnus Manske)",
    copyright: "Public domain",
    originalUrl: "https://commons.wikimedia.org/wiki/File:PrestongrangeMuseum2.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Rural_East_Lothian_,_Foxlake,_near_Dunbar_-_geograph.org.uk_-_3112980.jpg": {
    file: "640px-Rural_East_Lothian_%2C_Foxlake%2C_near_Dunbar_-_geograph.org.uk_-_3112980.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Rural_East_Lothian_,_Foxlake,_near_Dunbar_-_geograph.org.uk_-_3112980.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Traprain_Law_4.jpg": {
    file: "640px-Traprain_Law_4.jpg",
    attribution: "File Upload Bot (Magnus Manske)",
    copyright: "Public domain",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Traprain_Law_4.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Doorway,_Yester_Castle_-_geograph.org.uk_-_873897.jpg": {
    file: "Doorway%2C_Yester_Castle_-_geograph.org.uk_-_873897.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Doorway,_Yester_Castle_-_geograph.org.uk_-_873897.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Bridge_to_nowhere,_Belhaven_Bay_-_geograph.org.uk_-_219872.jpg": {
    file: "Bridge_to_nowhere%2C_Belhaven_Bay_-_geograph.org.uk_-_219872.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Bridge_to_nowhere,_Belhaven_Bay_-_geograph.org.uk_-_219872.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:St._Mary%27s_Kirk,_Haddington.jpg": {
    file: "640px-St._Mary%27s_Kirk%2C_Haddington.jpg",
    attribution: "Martin york",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:St._Mary%27s_Kirk,_Haddington.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Newhailes_House_in_2021.jpg": {
    file: "640px-Newhailes_House_in_2021.jpg",
    attribution: "Lupe",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Newhailes_House_in_2021.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Whitelee_Wind_Farm_turbines.jpg": {
    file: "640px-Whitelee_Wind_Farm_turbines.jpg",
    attribution: "Dylsss",
    copyright: "CC0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Whitelee_Wind_Farm_turbines.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:St_Mary_S_Cathedral_Edinburgh_(61091454).jpeg": {
    file: "640px-St_Mary_S_Cathedral_Edinburgh_%2861091454%29.jpeg",
    attribution: "DarwIn",
    copyright: "CC BY 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:St_Mary_S_Cathedral_Edinburgh_(61091454).jpeg"
  },
  "https://commons.wikimedia.org/wiki/File:Edinburgh_Scottish_Parliament_Holyrood_07.JPG": {
    file: "640px-Edinburgh_Scottish_Parliament_Holyrood_07.JPG",
    attribution: "Ad Meskens",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Edinburgh_Scottish_Parliament_Holyrood_07.JPG"
  },
  "https://commons.wikimedia.org/wiki/File:Fisheries_Museum_-_geograph.org.uk_-_564129.jpg": {
    file: "Fisheries_Museum_-_geograph.org.uk_-_564129.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Fisheries_Museum_-_geograph.org.uk_-_564129.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:St_._Andrews_Botanic_Garden_-_geograph.org.uk_-_991562.jpg": {
    file: "St_._Andrews_Botanic_Garden_-_geograph.org.uk_-_991562.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:St_._Andrews_Botanic_Garden_-_geograph.org.uk_-_991562.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Good_Samaritan_-_geograph.org.uk_-_130640.jpg": {
    file: "The_Good_Samaritan_-_geograph.org.uk_-_130640.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Good_Samaritan_-_geograph.org.uk_-_130640.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Jimmy_Shand_Sculpture_in_Auchtermuchty_(BM_Forbes_photo).jpg": {
    file: "640px-Jimmy_Shand_Sculpture_in_Auchtermuchty_%28BM_Forbes_photo%29.jpg",
    attribution: "Flickr upload bot",
    copyright: "CC BY 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Jimmy_Shand_Sculpture_in_Auchtermuchty_(BM_Forbes_photo).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Wallace_Monument_Aerial,_Stirling.jpg": {
    file: "640px-The_Wallace_Monument_Aerial%2C_Stirling.jpg",
    attribution: "BusterBrownBB",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Wallace_Monument_Aerial,_Stirling.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:MK18543_Bannockburn.jpg": {
    file: "640px-MK18543_Bannockburn.jpg",
    attribution: "Martin Kraft",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:MK18543_Bannockburn.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Blair_Drummond_Safari_Park_(21).jpg": {
    file: "640px-Blair_Drummond_Safari_Park_%2821%29.jpg",
    attribution: "Stevanhogg",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Blair_Drummond_Safari_Park_(21).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Kings_Knot_from_Stirling_Castle_-_panoramio.jpg": {
    file: "640px-The_Kings_Knot_from_Stirling_Castle_-_panoramio.jpg",
    attribution: "Panoramio upload bot",
    copyright: "CC BY 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Kings_Knot_from_Stirling_Castle_-_panoramio.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Old_Stirling_Bridge.jpg": {
    file: "640px-Old_Stirling_Bridge.jpg",
    attribution: "RFARKAS",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Old_Stirling_Bridge.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Stirling_-_The_Smith_Institute_Museum_20120419.jpg": {
    file: "640px-Stirling_-_The_Smith_Institute_Museum_20120419.jpg",
    attribution: "Otter",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Stirling_-_The_Smith_Institute_Museum_20120419.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Torwood_Castle_-_geograph.org.uk_-_2769669.jpg": {
    file: "640px-Torwood_Castle_-_geograph.org.uk_-_2769669.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Torwood_Castle_-_geograph.org.uk_-_2769669.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Pineapple.jpg": {
    file: "The_Pineapple.jpg",
    attribution: "Cactus.man",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Pineapple.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Antonine_Wall_at_Seabegs_Wood_-_geograph.org.uk_-_930380.jpg": {
    file: "Antonine_Wall_at_Seabegs_Wood_-_geograph.org.uk_-_930380.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Antonine_Wall_at_Seabegs_Wood_-_geograph.org.uk_-_930380.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Falkirk_(Millennium)_Wheel.jpg": {
    file: "640px-Falkirk_%28Millennium%29_Wheel.jpg",
    attribution: "Geo Swan",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Falkirk_(Millennium)_Wheel.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Callendar_House_-_geograph.org.uk_-_2727695.jpg": {
    file: "640px-Callendar_House_-_geograph.org.uk_-_2727695.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Callendar_House_-_geograph.org.uk_-_2727695.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Loch_Lubnaig_from_the_path_to_Ben_Ledi,_Scotland.jpg": {
    file: "640px-Loch_Lubnaig_from_the_path_to_Ben_Ledi%2C_Scotland.jpg",
    attribution: "Podzemnik",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Loch_Lubnaig_from_the_path_to_Ben_Ledi,_Scotland.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Stronachlachar_Pier_-_geograph.org.uk_-_1532477.jpg": {
    file: "Stronachlachar_Pier_-_geograph.org.uk_-_1532477.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Stronachlachar_Pier_-_geograph.org.uk_-_1532477.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Bully_beef%5E_-_geograph.org.uk_-_353697.jpg": {
    file: "Bully_beef%5E_-_geograph.org.uk_-_353697.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Bully_beef%5E_-_geograph.org.uk_-_353697.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Seat_at_the_tip_of_the_park_area_of_Ferry_Point_-_geograph.org.uk_-_2268350.jpg": {
    file: "640px-Seat_at_the_tip_of_the_park_area_of_Ferry_Point_-_geograph.org.uk_-_2268350.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Seat_at_the_tip_of_the_park_area_of_Ferry_Point_-_geograph.org.uk_-_2268350.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Path_along_the_esker,_Evanton_Community_Wood_(geograph_6311837).jpg": {
    file: "640px-Path_along_the_esker%2C_Evanton_Community_Wood_%28geograph_6311837%29.jpg",
    attribution: "Bjh21",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Path_along_the_esker,_Evanton_Community_Wood_(geograph_6311837).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Lochbroom_,_Sir_Arthur_Fowlers_Memorial_Clock_at_Ullapool_-_geograph.org.uk_-_2255531.jpg": {
    file: "640px-Lochbroom_%2C_Sir_Arthur_Fowlers_Memorial_Clock_at_Ullapool_-_geograph.org.uk_-_2255531.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Lochbroom_,_Sir_Arthur_Fowlers_Memorial_Clock_at_Ullapool_-_geograph.org.uk_-_2255531.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Touchstone_Maze_-_panoramio.jpg": {
    file: "640px-Touchstone_Maze_-_panoramio.jpg",
    attribution: "Panoramio upload bot",
    copyright: "CC BY 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Touchstone_Maze_-_panoramio.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Tain,_Alexandra_Bridge_-_geograph.org.uk_-_2526517.jpg": {
    file: "Tain%2C_Alexandra_Bridge_-_geograph.org.uk_-_2526517.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Tain,_Alexandra_Bridge_-_geograph.org.uk_-_2526517.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Track_through_Clash_Wood_-_geograph.org.uk_-_957965.jpg": {
    file: "Track_through_Clash_Wood_-_geograph.org.uk_-_957965.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Track_through_Clash_Wood_-_geograph.org.uk_-_957965.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Fairy_Glen,_Rosemarkie.png": {
    file: "640px-Fairy_Glen%2C_Rosemarkie.png",
    attribution: "Pampuco",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Fairy_Glen,_Rosemarkie.png"
  },
  "https://commons.wikimedia.org/wiki/File:Fortrose_Cathedral_north_2013.jpg": {
    file: "640px-Fortrose_Cathedral_north_2013.jpg",
    attribution: "DeFacto",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Fortrose_Cathedral_north_2013.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Cromarty_Lighthouse_(geograph_2337177).jpg": {
    file: "640px-Cromarty_Lighthouse_%28geograph_2337177%29.jpg",
    attribution: "File Upload Bot (Magnus Manske)",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Cromarty_Lighthouse_(geograph_2337177).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Falls_of_Rogie._-_geograph.org.uk_-_1020481.jpg": {
    file: "The_Falls_of_Rogie._-_geograph.org.uk_-_1020481.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Falls_of_Rogie._-_geograph.org.uk_-_1020481.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Benmore.jpg": {
    file: "640px-Benmore.jpg",
    attribution: "Javier martin",
    copyright: "CC BY 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Benmore.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Ascend_of_the_Ben_Nevis_03.jpg": {
    file: "640px-Ascend_of_the_Ben_Nevis_03.jpg",
    attribution: "Rubdos",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Ascend_of_the_Ben_Nevis_03.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Glenfinnan_Viaduct_3_20211024.jpg": {
    file: "640px-Glenfinnan_Viaduct_3_20211024.jpg",
    attribution: "Domob",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Glenfinnan_Viaduct_3_20211024.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Glenfinnan_monument_20211024.jpg": {
    file: "640px-Glenfinnan_monument_20211024.jpg",
    attribution: "Domob",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Glenfinnan_monument_20211024.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Neptune%27s_Staircase_20211023.jpg": {
    file: "640px-Neptune%27s_Staircase_20211023.jpg",
    attribution: "Domob",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Neptune%27s_Staircase_20211023.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Glencoe_Visitor_Centre_-_geograph.org.uk_-_2512200.jpg": {
    file: "640px-Glencoe_Visitor_Centre_-_geograph.org.uk_-_2512200.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Glencoe_Visitor_Centre_-_geograph.org.uk_-_2512200.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Loch_Ness_-_panoramio_(16).jpg": {
    file: "640px-Loch_Ness_-_panoramio_%2816%29.jpg",
    attribution: "Panoramio upload bot",
    copyright: "CC BY 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Loch_Ness_-_panoramio_(16).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Commando_Memorial,_Spean_Bridge_-_geograph.org.uk_-_107762.jpg": {
    file: "Commando_Memorial%2C_Spean_Bridge_-_geograph.org.uk_-_107762.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Commando_Memorial,_Spean_Bridge_-_geograph.org.uk_-_107762.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:SkyeBridge.jpg": {
    file: "640px-SkyeBridge.jpg",
    attribution: "Macieklew",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:SkyeBridge.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Eilean_Donan_Castle_Panorama.jpg": {
    file: "640px-Eilean_Donan_Castle_Panorama.jpg",
    attribution: "Ritchyblack",
    copyright: "FAL",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Eilean_Donan_Castle_Panorama.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Old_Man_of_Storr.jpg": {
    file: "640px-Old_Man_of_Storr.jpg",
    attribution: "Nono vlf",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Old_Man_of_Storr.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:John_Rae_statue,_Stromness_Pierhead,_Stromness,_Orkney.jpg": {
    file: "640px-John_Rae_statue%2C_Stromness_Pierhead%2C_Stromness%2C_Orkney.jpg",
    attribution: "Dger",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:John_Rae_statue,_Stromness_Pierhead,_Stromness,_Orkney.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Strom_Pier_Arts_Center_cropped.jpg": {
    file: "Strom_Pier_Arts_Center_cropped.jpg",
    attribution: "RTG",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Strom_Pier_Arts_Center_cropped.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Stromness_Museum_2017.jpg": {
    file: "640px-Stromness_Museum_2017.jpg",
    attribution: "Unukorno",
    copyright: "CC BY 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Stromness_Museum_2017.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Whalebone_from_North_-_geograph.org.uk_-_514435.jpg": {
    file: "Whalebone_from_North_-_geograph.org.uk_-_514435.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Whalebone_from_North_-_geograph.org.uk_-_514435.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dounby_Click_Mill,_Orkney_2017-05-24.jpg": {
    file: "640px-Dounby_Click_Mill%2C_Orkney_2017-05-24.jpg",
    attribution: "Schwerdf",
    copyright: "CC BY 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dounby_Click_Mill,_Orkney_2017-05-24.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Ring_of_Brodgar,_Orkney.jpg": {
    file: "640px-Ring_of_Brodgar%2C_Orkney.jpg",
    attribution: "Stevekeiretsu",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Ring_of_Brodgar,_Orkney.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Happy_Valley_Arch_-_geograph.org.uk_-_2514872.jpg": {
    file: "640px-Happy_Valley_Arch_-_geograph.org.uk_-_2514872.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Happy_Valley_Arch_-_geograph.org.uk_-_2514872.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Trumland_House_-_geograph.org.uk_-_1448279.jpg": {
    file: "Trumland_House_-_geograph.org.uk_-_1448279.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Trumland_House_-_geograph.org.uk_-_1448279.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Midhowe_Chambered_Cairn_20110525_compartments_from_above.jpg": {
    file: "640px-Midhowe_Chambered_Cairn_20110525_compartments_from_above.jpg",
    attribution: "Otter",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Midhowe_Chambered_Cairn_20110525_compartments_from_above.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Skara_Brae_and_the_Bay_of_Skaill_-_geograph.org.uk_-_1768351.jpg": {
    file: "Skara_Brae_and_the_Bay_of_Skaill_-_geograph.org.uk_-_1768351.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Skara_Brae_and_the_Bay_of_Skaill_-_geograph.org.uk_-_1768351.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Skara_Brae-habitations.jpg": {
    file: "640px-Skara_Brae-habitations.jpg",
    attribution: "Danielhbordeleau",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Skara_Brae-habitations.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Broch_of_Gurness,_Shamrock_House.jpg": {
    file: "640px-Broch_of_Gurness%2C_Shamrock_House.jpg",
    attribution: "Gaius Cornelius",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Broch_of_Gurness,_Shamrock_House.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Rocks_at_Herston_Taing_-_geograph.org.uk_-_178237.jpg": {
    file: "Rocks_at_Herston_Taing_-_geograph.org.uk_-_178237.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Rocks_at_Herston_Taing_-_geograph.org.uk_-_178237.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Churchill-Barrier-1.jpg": {
    file: "640px-Churchill-Barrier-1.jpg",
    attribution: "BillC",
    copyright: "CC-BY-SA-3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Churchill-Barrier-1.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Italian_Chapel_(exterior),_Orkney-PS-Edit_final.jpg": {
    file: "640px-Italian_Chapel_%28exterior%29%2C_Orkney-PS-Edit_final.jpg",
    attribution: "MichaelMaggs",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Italian_Chapel_(exterior),_Orkney-PS-Edit_final.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:St._Magnus_Cathedral,_Kirkwall_-_geograph.org.uk_-_2096130.jpg": {
    file: "640px-St._Magnus_Cathedral%2C_Kirkwall_-_geograph.org.uk_-_2096130.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:St._Magnus_Cathedral,_Kirkwall_-_geograph.org.uk_-_2096130.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Tankerness_House_Museum_20110526.jpg": {
    file: "640px-Tankerness_House_Museum_20110526.jpg",
    attribution: "LittleDwangs",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Tankerness_House_Museum_20110526.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Peedie_Sea,_Sanday_-_geograph.org.uk_-_224501.jpg": {
    file: "Peedie_Sea%2C_Sanday_-_geograph.org.uk_-_224501.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Peedie_Sea,_Sanday_-_geograph.org.uk_-_224501.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Groatie_Hoose_-_geograph.org.uk_-_1441813.jpg": {
    file: "The_Groatie_Hoose_-_geograph.org.uk_-_1441813.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Groatie_Hoose_-_geograph.org.uk_-_1441813.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:St._Magnus_Church,_Egilsay_-_geograph.org.uk_-_1434978.jpg": {
    file: "St._Magnus_Church%2C_Egilsay_-_geograph.org.uk_-_1434978.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:St._Magnus_Church,_Egilsay_-_geograph.org.uk_-_1434978.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Orkney_Wireless_Museum,_Kirkwall_(25869863128).jpg": {
    file: "640px-Orkney_Wireless_Museum%2C_Kirkwall_%2825869863128%29.jpg",
    attribution: "LittleDwangs",
    copyright: "CC BY 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Orkney_Wireless_Museum,_Kirkwall_(25869863128).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Cairn_o%27Mount_Viewpoint_-_geograph.org.uk_-_1391717.jpg": {
    file: "Cairn_o%27Mount_Viewpoint_-_geograph.org.uk_-_1391717.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Cairn_o%27Mount_Viewpoint_-_geograph.org.uk_-_1391717.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Carron_fish_bar.jpg": {
    file: "640px-Carron_fish_bar.jpg",
    attribution: "Taras",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Carron_fish_bar.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Tower_of_Johnston_-_geograph.org.uk_-_3250423.jpg": {
    file: "640px-Tower_of_Johnston_-_geograph.org.uk_-_3250423.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Tower_of_Johnston_-_geograph.org.uk_-_3250423.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Pluscarden_Abbey_20080430.jpg": {
    file: "640px-Pluscarden_Abbey_20080430.jpg",
    attribution: "Otter",
    copyright: "CC-BY-SA-3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Pluscarden_Abbey_20080430.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Loch_of_Blairs_-_geograph.org.uk_-_2321894.jpg": {
    file: "Loch_of_Blairs_-_geograph.org.uk_-_2321894.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Loch_of_Blairs_-_geograph.org.uk_-_2321894.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Duffus_Castle.jpg": {
    file: "640px-Duffus_Castle.jpg",
    attribution: "Angusmclellan",
    copyright: "CC-BY-SA-3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Duffus_Castle.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Palace_of_Spynie_-_geograph.org.uk_-_1340516.jpg": {
    file: "The_Palace_of_Spynie_-_geograph.org.uk_-_1340516.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Palace_of_Spynie_-_geograph.org.uk_-_1340516.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Sanquhar_Loch,_Forres_-_geograph.org.uk_-_253597.jpg": {
    file: "Sanquhar_Loch%2C_Forres_-_geograph.org.uk_-_253597.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Sanquhar_Loch,_Forres_-_geograph.org.uk_-_253597.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Forres_-_Mercat_Cross_and_Tolbooth_-_geograph.org.uk_-_884375.jpg": {
    file: "Forres_-_Mercat_Cross_and_Tolbooth_-_geograph.org.uk_-_884375.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Forres_-_Mercat_Cross_and_Tolbooth_-_geograph.org.uk_-_884375.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:RB_20211006_Bow_fiddle_rock.jpg": {
    file: "640px-RB_20211006_Bow_fiddle_rock.jpg",
    attribution: "Monster4711",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:RB_20211006_Bow_fiddle_rock.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Three_Kings_-_geograph.org.uk_-_684750.jpg": {
    file: "The_Three_Kings_-_geograph.org.uk_-_684750.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Three_Kings_-_geograph.org.uk_-_684750.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Cullen_viaduct_-_geograph.org.uk_-_1547842.jpg": {
    file: "640px-Cullen_viaduct_-_geograph.org.uk_-_1547842.jpg",
    attribution: "Geograph Update Bot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Cullen_viaduct_-_geograph.org.uk_-_1547842.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Whale%27s_Moo_-_geograph.org.uk_-_684697.jpg": {
    file: "Whale%27s_Moo_-_geograph.org.uk_-_684697.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Whale%27s_Moo_-_geograph.org.uk_-_684697.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Cullen_Auld_Kirk_-_geograph.org.uk_-_248927.jpg": {
    file: "Cullen_Auld_Kirk_-_geograph.org.uk_-_248927.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Cullen_Auld_Kirk_-_geograph.org.uk_-_248927.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Buckie_Lifeboat_at_Station_-_geograph.org.uk_-_2088230.jpg": {
    file: "Buckie_Lifeboat_at_Station_-_geograph.org.uk_-_2088230.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Buckie_Lifeboat_at_Station_-_geograph.org.uk_-_2088230.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:St._Rufus_Church,_Keith_-_geograph.org.uk_-_326209.jpg": {
    file: "St._Rufus_Church%2C_Keith_-_geograph.org.uk_-_326209.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:St._Rufus_Church,_Keith_-_geograph.org.uk_-_326209.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:North_CHurch,_Keith_(geograph_3626025).jpg": {
    file: "640px-North_CHurch%2C_Keith_%28geograph_3626025%29.jpg",
    attribution: "George Burgess",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:North_CHurch,_Keith_(geograph_3626025).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Keith_kosciol_katolicki.jpg": {
    file: "640px-Keith_kosciol_katolicki.jpg",
    attribution: "Hindiana~commonswiki",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Keith_kosciol_katolicki.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Keith,_Tarnash_Falls.jpg": {
    file: "640px-Keith%2C_Tarnash_Falls.jpg",
    attribution: "Reinhard M\xFCller",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Keith,_Tarnash_Falls.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Longmore_Halls_-_geograph.org.uk_-_394942.jpg": {
    file: "Longmore_Halls_-_geograph.org.uk_-_394942.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Longmore_Halls_-_geograph.org.uk_-_394942.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Auld_Brig_at_Keith_-_geograph.org.uk_-_688662.jpg": {
    file: "The_Auld_Brig_at_Keith_-_geograph.org.uk_-_688662.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Auld_Brig_at_Keith_-_geograph.org.uk_-_688662.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Fochabers_Folk_Museum_-_geograph.org.uk_-_199959.jpg": {
    file: "Fochabers_Folk_Museum_-_geograph.org.uk_-_199959.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Fochabers_Folk_Museum_-_geograph.org.uk_-_199959.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_main_entrance_to_Gordon_Castle_and_War_memorial_near_Fochabers,_Morayshire_-_geograph.org.uk_-_177990.jpg": {
    file: "The_main_entrance_to_Gordon_Castle_and_War_memorial_near_Fochabers%2C_Morayshire_-_geograph.org.uk_-_177990.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_main_entrance_to_Gordon_Castle_and_War_memorial_near_Fochabers,_Morayshire_-_geograph.org.uk_-_177990.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dufftown_Clock_Tower_looking_east.jpg": {
    file: "640px-Dufftown_Clock_Tower_looking_east.jpg",
    attribution: "Coldupnorth",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dufftown_Clock_Tower_looking_east.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Bridge_in_hill.jpg": {
    file: "640px-Bridge_in_hill.jpg",
    attribution: "Adeletron 3030",
    copyright: "CC0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Bridge_in_hill.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Elgin_Cathedral_panorama_20211025.jpg": {
    file: "640px-Elgin_Cathedral_panorama_20211025.jpg",
    attribution: "Domob",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Elgin_Cathedral_panorama_20211025.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Lady_Hill_Toposcope_-_geograph.org.uk_-_2435808.jpg": {
    file: "640px-Lady_Hill_Toposcope_-_geograph.org.uk_-_2435808.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Lady_Hill_Toposcope_-_geograph.org.uk_-_2435808.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Johnstons_Woollen_Mill_at_Elgin_-_geograph.org.uk_-_1452361.jpg": {
    file: "Johnstons_Woollen_Mill_at_Elgin_-_geograph.org.uk_-_1452361.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Johnstons_Woollen_Mill_at_Elgin_-_geograph.org.uk_-_1452361.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Biblical_Gardens_-_geograph.org.uk_-_811333.jpg": {
    file: "The_Biblical_Gardens_-_geograph.org.uk_-_811333.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Biblical_Gardens_-_geograph.org.uk_-_811333.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Museum,_Elgin_-_geograph.org.uk_-_1287997.jpg": {
    file: "Museum%2C_Elgin_-_geograph.org.uk_-_1287997.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Museum,_Elgin_-_geograph.org.uk_-_1287997.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Elgin_museum_Moray.JPG": {
    file: "640px-Elgin_museum_Moray.JPG",
    attribution: "Geni",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Elgin_museum_Moray.JPG"
  },
  "https://commons.wikimedia.org/wiki/File:St_Giles_Church_-_geograph.org.uk_-_885730.jpg": {
    file: "St_Giles_Church_-_geograph.org.uk_-_885730.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:St_Giles_Church_-_geograph.org.uk_-_885730.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Elgin,_North_College_Street,_Grant_Lodge_(former_Library).jpg": {
    file: "640px-Elgin%2C_North_College_Street%2C_Grant_Lodge_%28former_Library%29.jpg",
    attribution: "Slhuyton",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Elgin,_North_College_Street,_Grant_Lodge_(former_Library).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Covesea_Lighthouse_Lossiemouth.JPG": {
    file: "640px-Covesea_Lighthouse_Lossiemouth.JPG",
    attribution: "File Upload Bot (Magnus Manske)",
    copyright: "Public domain",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Covesea_Lighthouse_Lossiemouth.JPG"
  },
  "https://commons.wikimedia.org/wiki/File:Seine_net_and_gold_post_box_-_Pioneered_in_Lossiemouth_-_geograph.org.uk_-_3064890.jpg": {
    file: "Seine_net_and_gold_post_box_-_Pioneered_in_Lossiemouth_-_geograph.org.uk_-_3064890.jpg",
    attribution: "File Upload Bot (Magnus Manske)",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Seine_net_and_gold_post_box_-_Pioneered_in_Lossiemouth_-_geograph.org.uk_-_3064890.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Rampart_at_Burghead_-_geograph.org.uk_-_899156.jpg": {
    file: "Rampart_at_Burghead_-_geograph.org.uk_-_899156.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Rampart_at_Burghead_-_geograph.org.uk_-_899156.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Hopeman_Harbour_-_geograph.org.uk_-_1438414.jpg": {
    file: "Hopeman_Harbour_-_geograph.org.uk_-_1438414.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Hopeman_Harbour_-_geograph.org.uk_-_1438414.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Summerlee_Heritage_Park_No.53.jpg": {
    file: "640px-Summerlee_Heritage_Park_No.53.jpg",
    attribution: "Oxyman",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Summerlee_Heritage_Park_No.53.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Paisley_Philosophical_Society_-_geograph.org.uk_-_754633.jpg": {
    file: "Paisley_Philosophical_Society_-_geograph.org.uk_-_754633.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Paisley_Philosophical_Society_-_geograph.org.uk_-_754633.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Monkey_House_-_geograph.org.uk_-_75536.jpg": {
    file: "The_Monkey_House_-_geograph.org.uk_-_75536.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Monkey_House_-_geograph.org.uk_-_75536.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Wojtek_the_bear_statue._Duns,_Berwickshire.jpg": {
    file: "640px-Wojtek_the_bear_statue._Duns%2C_Berwickshire.jpg",
    attribution: "Rosser1954",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Wojtek_the_bear_statue._Duns,_Berwickshire.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Eyemouth_Harbour_-_geograph.org.uk_-_2566381.jpg": {
    file: "640px-Eyemouth_Harbour_-_geograph.org.uk_-_2566381.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Eyemouth_Harbour_-_geograph.org.uk_-_2566381.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Duns_Castle1.jpg": {
    file: "640px-Duns_Castle1.jpg",
    attribution: "File Upload Bot (Magnus Manske)",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Duns_Castle1.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Stable_block_on_the_Hirsel_estate_-_geograph.org.uk_-_3580834.jpg": {
    file: "640px-Stable_block_on_the_Hirsel_estate_-_geograph.org.uk_-_3580834.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Stable_block_on_the_Hirsel_estate_-_geograph.org.uk_-_3580834.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Kelsae_Stane_(44409807281).jpg": {
    file: "640px-Kelsae_Stane_%2844409807281%29.jpg",
    attribution: "CountessCobra",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Kelsae_Stane_(44409807281).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Floors_Castle,_Roxburghshire.jpg": {
    file: "640px-Floors_Castle%2C_Roxburghshire.jpg",
    attribution: "Hogweard",
    copyright: "Public domain",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Floors_Castle,_Roxburghshire.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Jedburgh_Castle_01.jpg": {
    file: "640px-Jedburgh_Castle_01.jpg",
    attribution: "Meho29",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Jedburgh_Castle_01.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Lodge_in_Wilton_Lodge_Park_in_Hawick.jpg": {
    file: "640px-Lodge_in_Wilton_Lodge_Park_in_Hawick.jpg",
    attribution: "Victuallers",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Lodge_in_Wilton_Lodge_Park_in_Hawick.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Monteath_Mausoleum_-_geograph.org.uk_-_891709.jpg": {
    file: "The_Monteath_Mausoleum_-_geograph.org.uk_-_891709.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Monteath_Mausoleum_-_geograph.org.uk_-_891709.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:St_Mary%27s_Abbey,_Melrose.jpg": {
    file: "640px-St_Mary%27s_Abbey%2C_Melrose.jpg",
    attribution: "Grimaft",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:St_Mary%27s_Abbey,_Melrose.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:The_Scottish_Borders_Donkey_Sanctuary_-_geograph.org.uk_-_1814165.jpg": {
    file: "The_Scottish_Borders_Donkey_Sanctuary_-_geograph.org.uk_-_1814165.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:The_Scottish_Borders_Donkey_Sanctuary_-_geograph.org.uk_-_1814165.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:GTOS_key_photo.jpg": {
    file: "640px-GTOS_key_photo.jpg",
    attribution: "IMF121",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:GTOS_key_photo.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Abbotsford_House.jpg": {
    file: "640px-Abbotsford_House.jpg",
    attribution: "Ad Meskens",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Abbotsford_House.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Borders_College_Scottish_Borders_Campus_in_Galashiels_-_geograph.org.uk_-_1398700.jpg": {
    file: "Borders_College_Scottish_Borders_Campus_in_Galashiels_-_geograph.org.uk_-_1398700.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Borders_College_Scottish_Borders_Campus_in_Galashiels_-_geograph.org.uk_-_1398700.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Mapa_Scotland,_Barony_Castle,_Scottish_Borders.JPG": {
    file: "640px-Mapa_Scotland%2C_Barony_Castle%2C_Scottish_Borders.JPG",
    attribution: "Kim Traynor",
    copyright: "CC BY-SA 3.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Mapa_Scotland,_Barony_Castle,_Scottish_Borders.JPG"
  },
  "https://commons.wikimedia.org/wiki/File:Scrape_Burn,_Dawyck_Botanic_Gardens.JPG": {
    file: "640px-Scrape_Burn%2C_Dawyck_Botanic_Gardens.JPG",
    attribution: "Rosser1954",
    copyright: "Public domain",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Scrape_Burn,_Dawyck_Botanic_Gardens.JPG"
  },
  "https://commons.wikimedia.org/wiki/File:Motherwell_Heritage_Centre_(the_tower)_-_geograph.org.uk_-_956786.jpg": {
    file: "Motherwell_Heritage_Centre_%28the_tower%29_-_geograph.org.uk_-_956786.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Motherwell_Heritage_Centre_(the_tower)_-_geograph.org.uk_-_956786.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Innerpeffray_Library_-_view_from_SW.jpg": {
    file: "640px-Innerpeffray_Library_-_view_from_SW.jpg",
    attribution: "ArchHist",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Innerpeffray_Library_-_view_from_SW.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Vane_Farm_Reserve_-_geograph.org.uk_-_955372.jpg": {
    file: "Vane_Farm_Reserve_-_geograph.org.uk_-_955372.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Vane_Farm_Reserve_-_geograph.org.uk_-_955372.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Moncreiffe_Hill_circle_01.jpg": {
    file: "640px-Moncreiffe_Hill_circle_01.jpg",
    attribution: "Syrio",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Moncreiffe_Hill_circle_01.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:ALLOA_TOWER_REAR_VIEW_FROM_ACROSS_THE_LAWN.JPG": {
    file: "640px-ALLOA_TOWER_REAR_VIEW_FROM_ACROSS_THE_LAWN.JPG",
    attribution: "HARTLEPOOLMARINA2014",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:ALLOA_TOWER_REAR_VIEW_FROM_ACROSS_THE_LAWN.JPG"
  },
  "https://commons.wikimedia.org/wiki/File:Gartmorn_Dam_-_geograph.org.uk_-_1562685.jpg": {
    file: "Gartmorn_Dam_-_geograph.org.uk_-_1562685.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Gartmorn_Dam_-_geograph.org.uk_-_1562685.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Fair_Maid%27s_House,_Perth.jpg": {
    file: "640px-Fair_Maid%27s_House%2C_Perth.jpg",
    attribution: "Kilnburn",
    copyright: "Attribution",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Fair_Maid%27s_House,_Perth.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Perth,_Scotland_(8924972766).jpg": {
    file: "640px-Perth%2C_Scotland_%288924972766%29.jpg",
    attribution: "INeverCry",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Perth,_Scotland_(8924972766).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Ossian%27s_Hall,_The_Hermitage,_Perth.JPG": {
    file: "640px-Ossian%27s_Hall%2C_The_Hermitage%2C_Perth.JPG",
    attribution: "Rosser1954",
    copyright: "Public domain",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Ossian%27s_Hall,_The_Hermitage,_Perth.JPG"
  },
  "https://commons.wikimedia.org/wiki/File:Woodland_path_-_geograph.org.uk_-_1535914.jpg": {
    file: "Woodland_path_-_geograph.org.uk_-_1535914.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Woodland_path_-_geograph.org.uk_-_1535914.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:CAI.2-000008_Cairnpapple.jpg": {
    file: "CAI.2-000008_Cairnpapple.jpg",
    attribution: "Archaeology Scotland",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:CAI.2-000008_Cairnpapple.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Torphichen_Preceptory_-_geograph.org.uk_-_2874269.jpg": {
    file: "Torphichen_Preceptory_-_geograph.org.uk_-_2874269.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Torphichen_Preceptory_-_geograph.org.uk_-_2874269.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Scottish_Korean_War_Memorial_-_geograph.org.uk_-_1157183.jpg": {
    file: "Scottish_Korean_War_Memorial_-_geograph.org.uk_-_1157183.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Scottish_Korean_War_Memorial_-_geograph.org.uk_-_1157183.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Almond_Valley_Heritage_Trust.jpg": {
    file: "640px-Almond_Valley_Heritage_Trust.jpg",
    attribution: "Macfack",
    copyright: "CC BY-SA 4.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Almond_Valley_Heritage_Trust.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dome,_McArthur_Glen_-_geograph.org.uk_-_1279552.jpg": {
    file: "Dome%2C_McArthur_Glen_-_geograph.org.uk_-_1279552.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dome,_McArthur_Glen_-_geograph.org.uk_-_1279552.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Five_Sisters_Zoo_-_geograph.org.uk_-_2109827.jpg": {
    file: "Five_Sisters_Zoo_-_geograph.org.uk_-_2109827.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Five_Sisters_Zoo_-_geograph.org.uk_-_2109827.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Naysmith_Bridge_-_geograph.org.uk_-_1396694.jpg": {
    file: "Naysmith_Bridge_-_geograph.org.uk_-_1396694.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Naysmith_Bridge_-_geograph.org.uk_-_1396694.jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dunollie_Castle_(3579199547).jpg": {
    file: "640px-Dunollie_Castle_%283579199547%29.jpg",
    attribution: "Thesupermat2",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dunollie_Castle_(3579199547).jpg"
  },
  "https://commons.wikimedia.org/wiki/File:Dundee_Law_-_geograph.org.uk_-_713047.jpg": {
    file: "Dundee_Law_-_geograph.org.uk_-_713047.jpg",
    attribution: "GeographBot",
    copyright: "CC BY-SA 2.0",
    originalUrl: "https://commons.wikimedia.org/wiki/File:Dundee_Law_-_geograph.org.uk_-_713047.jpg"
  }
};

// index.ts
var XLSX = require_xlsx();
require_main().config({ path: ".env.local" });
require_fetch_npm_node();
var COLUMN_COUNTY = "County";
var COLUMN_CITY = "City/town";
var COLUMN_NAME = "Name of location";
var COLUMN_LATITUDE = "Latitude";
var COLUMN_LONGITUDE = "Longitude";
var COLUMN_DESCRIPTION = "Description of map point";
var COLUMN_CHALLENGE = "Challenge";
var ROWS_TO_SKIP = 0;
var PHOTOS_BASEURL = process.env.PHOTOS_BASEURL;
var workbook = XLSX.readFile(process.env.SOURCE_SPREADSHEET_PATH);
var sheetNames = [...workbook.SheetNames];
sheetNames.shift();
function getPhotoColumnKey(sheetJson) {
  let photoColumnKey = void 0;
  sheetJson.forEach((row) => {
    photoColumnKey = photoColumnKey || Object.keys(row).find((key) => key.includes("folder") || key.toLowerCase().includes("image"));
  });
  return photoColumnKey;
}
function sanitise(input) {
  return input ? input.toLowerCase().replace(/[^a-z0-9]/gi, "") : "";
}
function createLocationId(county, city, name) {
  return `${sanitise(county)}-${sanitise(city)}-${sanitise(name)}`;
}
var REGEX_DEG_MIN_SEC = /^\s*([+-]?\d+)\D+(\d+)\D+(\d+(\.\d+)?)\D*$/;
function getOrdinate(input) {
  if (typeof input === "number") {
    return Number.isInteger(input) ? 0 : input;
  }
  const result = input ? parseFloat(input.trim()) : 0;
  if (!result || Number.isNaN(result)) {
    return 0;
  }
  if (!Number.isInteger(result)) {
    return result;
  }
  const components = input.match(REGEX_DEG_MIN_SEC);
  if (!components) {
    return 0;
  }
  return parseFloat(components[1]) + parseFloat(components[2]) / 60 + parseFloat(components[3]) / 3600;
}
function parseCoordinates(inputLatitude, inputLongitude) {
  const latitude = getOrdinate(inputLatitude);
  let longitude = getOrdinate(inputLongitude);
  if (!latitude || !longitude) {
    console.warn("Probably bad lat/long: ", inputLatitude, inputLongitude);
    return void 0;
  }
  longitude = -Math.abs(longitude);
  if (latitude < 50 || latitude > 61 || longitude < -9 || longitude > 0) {
    console.warn("Probably transposed lat/long: ", inputLatitude, inputLongitude);
    return void 0;
  }
  return { latitude, longitude };
}
async function getWikimediaPhotoData(wikiUrl) {
  const wikiFile = wikiUrl.substring("https://commons.wikimedia.org/wiki/File:".length);
  const queryUrl = `https://en.wikipedia.org/w/api.php?format=json&action=query&titles=File:${wikiFile}&prop=imageinfo&iiprop=user|extmetadata|url&iiextmetadatafilter=LicenseShortName&iiurlwidth=640`;
  const response = await fetch(queryUrl, { method: "GET" }).then((data) => data.json()).catch((err) => {
    console.error(err);
  });
  const imageinfo = Object.values(response.query.pages)[0].imageinfo[0];
  return {
    imageUrl: imageinfo.thumburl,
    filename: imageinfo.thumburl.split("/").pop(),
    originalUrl: wikiUrl,
    attribution: imageinfo.user,
    copyright: imageinfo.extmetadata.LicenseShortName.value
  };
}
var photoLinkCount = 0;
var photoFileCount = 0;
async function getPhotos(locationId, photoRef) {
  const photos = [];
  if (PHOTO_LINKS[photoRef]) {
    console.log("Using archived photo link", photoRef);
    const archivedPhoto = PHOTO_LINKS[photoRef];
    photos.push({
      url: `${PHOTOS_BASEURL}/${archivedPhoto.file}`,
      attribution: archivedPhoto.attribution,
      copyright: archivedPhoto.copyright,
      originalUrl: archivedPhoto.originalUrl
    });
    photoLinkCount++;
  } else if (photoRef == null ? void 0 : photoRef.startsWith("https://commons.wikimedia.org/wiki/File:")) {
    const wikiPhotoData = await getWikimediaPhotoData(photoRef);
    await new Promise((r) => setTimeout(r, 2e3));
    const photo = {
      url: `${PHOTOS_BASEURL}/${wikiPhotoData.filename}`,
      attribution: wikiPhotoData.attribution,
      copyright: wikiPhotoData.copyright,
      originalUrl: wikiPhotoData.originalUrl
    };
    console.log("Upload this photo to the photos bucket:");
    console.log(wikiPhotoData.imageUrl);
    console.log("Then add the following to PHOTO_LINKS:");
    console.log(`"${photoRef}": ${JSON.stringify({
      file: wikiPhotoData.filename,
      attribution: wikiPhotoData.attribution,
      copyright: wikiPhotoData.copyright,
      originalUrl: wikiPhotoData.originalUrl
    })},`);
    photos.push(photo);
    photoLinkCount++;
  } else if (photoRef == null ? void 0 : photoRef.includes("http")) {
    console.log("Unprocessed photo link", locationId, photoRef);
    photoLinkCount++;
  } else if (photoRef) {
    photos.push({
      url: `${PHOTOS_BASEURL}/${locationId}.jpg`
    });
    console.log("Photo file", `${locationId}.jpg`);
    photoFileCount++;
  }
  return photos;
}
async function buildLocations(workbook2) {
  let successCount = 0;
  let failCount = 0;
  photoLinkCount = 0;
  photoFileCount = 0;
  const result = [];
  for (let sheetName of sheetNames) {
    const contents = XLSX.utils.sheet_to_json(workbook2.Sheets[sheetName], {
      range: ROWS_TO_SKIP
    });
    let photoColumnKey = getPhotoColumnKey(contents);
    console.log("Sheet", sheetName);
    let county = "";
    let city = void 0;
    for (let row of contents) {
      const newCounty = row[COLUMN_COUNTY];
      if (newCounty) {
        county = newCounty;
        city = void 0;
      }
      city = row[COLUMN_CITY] || city;
      const name = row[COLUMN_NAME];
      const locationId = createLocationId(county, city, name);
      const photos = await getPhotos(locationId, row[photoColumnKey]);
      const coordinates = parseCoordinates(row[COLUMN_LATITUDE], row[COLUMN_LONGITUDE]);
      const description = row[COLUMN_DESCRIPTION];
      const challenge = row[COLUMN_CHALLENGE];
      if (!coordinates) {
        console.warn("Incomplete location coordinates: ", sheetName, {
          [COLUMN_COUNTY]: county,
          [COLUMN_CITY]: city,
          [COLUMN_NAME]: row[COLUMN_NAME],
          [COLUMN_LATITUDE]: row[COLUMN_LATITUDE],
          [COLUMN_LONGITUDE]: row[COLUMN_LONGITUDE]
        }, row);
        failCount++;
      } else if (!name || !county || !description || !challenge) {
        console.warn("Incomplete location information: ", sheetName, __spreadValues({
          [COLUMN_COUNTY]: county,
          [COLUMN_CITY]: city
        }, row));
        failCount++;
      } else {
        result.push({
          locationId,
          region: sheetName,
          county,
          city,
          latitude: coordinates.latitude,
          longitude: coordinates.longitude,
          name,
          description,
          challenge,
          photos
        });
        successCount++;
      }
    }
  }
  console.log("success: ", successCount);
  console.log("fail: ", failCount);
  console.log("photo links: ", photoLinkCount);
  console.log("photo files: ", photoFileCount);
  return result;
}
async function uploadToDynamoDB(locations) {
  const locationsTableName = process.env.LOCATIONS_TABLE_NAME;
  console.log("Loading location data into DynamoDB", locationsTableName);
  for (let location of locations) {
    const result = await dynamodbClient.send(new import_client_dynamodb2.PutItemCommand({
      TableName: locationsTableName,
      Item: (0, import_util_dynamodb.marshall)(location, { removeUndefinedValues: true })
    }));
  }
}
async function checkSpreadsheet() {
  const locations = await buildLocations(workbook);
  locations.forEach((location) => {
    console.log(location.locationId, location.name);
  });
  return locations.length;
}
async function processSpreadsheet() {
  const locations = await buildLocations(workbook);
  locations.forEach((location) => {
    console.log(location.locationId, location.name);
  });
  await uploadToDynamoDB(locations);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildLocations,
  checkSpreadsheet,
  getPhotos,
  getWikimediaPhotoData,
  parseCoordinates,
  processSpreadsheet
});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! cpexcel.js (C) 2013-present SheetJS -- http://sheetjs.com */
/*! cputils.js (C) 2013-present SheetJS -- http://sheetjs.com */
/*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */
/*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */
