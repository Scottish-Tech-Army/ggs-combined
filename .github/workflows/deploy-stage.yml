# Deploy the GGS application to AWS using the stage environment.
name: Deploy Stage

on:
  push:
    branches:
      - 'develop'  # Only run on develop branch and no other
  pull_request:
    branches:
      - 'develop'  # Only run on develop branch and no other

jobs:
  build:
    runs-on: ubuntu-latest
    environment: 
      name: stage       # Ties back to environment name configured in ggs-combined repo | settings | environments
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: install node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: create frontend build directory
        working-directory: ./ggs-frontend
        run: mkdir -p build
  
      - name: install backend dependencies
        working-directory: ./ggs-backend
        run: npm install

      - name: install backend resources dependencies
        working-directory: ./ggs-backend/resources/ggsLambda
        run: npm install

      - name: build backend
        working-directory: ./ggs-backend
        run: npm run build

      - name: run backend tests
        working-directory: ./ggs-backend/resources/ggsLambda
        run: npm test

      - name: install cdk dependencies
        working-directory: ./cdk
        run: npm install

      - name: build cdk deploy script
        working-directory: ./cdk
        run: npm run build

#      - name: cdk bootstrap environment
#        uses: youyo/aws-cdk-github-actions@v2
#        with:
#          cdk_subcommand: 'bootstrap'
#          cdk_args: '--require-approval never --context env=test'
#          actions_comment: false
#          working_dir: 'cdk'
#          debug_log: true
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
#          AWS_DEFAULT_REGION: $AWS_REGION
      
      # Note that the backend outputs a file with the various endpoints used by the frontend
      - name: cdk deploy backend
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: 'deploy'
          cdk_stack: 'GGS-backend-test'
          cdk_args: '--require-approval never --context env=test --outputs-file ../ggs-frontend/src/config.json'
          actions_comment: false
          working_dir: 'cdk'
          debug_log: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: $AWS_REGION

      - name: install frontend dependencies
        working-directory: ./ggs-frontend
        run: npm ci

      # frontend can only be built after the backend config has been generated by deploying the backend
      - name: build frontend
        working-directory: ./ggs-frontend
        env:
          CI: false         # CI=true makes react build fail on warnings
          # React build will bundle the MapBox access token into the app in clear text
          REACT_APP_MAPBOX_ACCESS_TOKEN: ${{ secrets.REACT_APP_MAPBOX_ACCESS_TOKEN }}
        run: npm run build

# TODO: frontend tests are currently red
#      - name: run frontend tests
#        working-directory: ./ggs-frontend
#        run: npm test

      - name: cdk deploy frontend
        uses: youyo/aws-cdk-github-actions@v2
        with:
          cdk_subcommand: 'deploy'
          cdk_stack: 'GGS-frontend-test'
          cdk_args: '--require-approval never --context env=test'
          actions_comment: false
          working_dir: 'cdk'
          debug_log: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_DEFAULT_REGION: $AWS_REGION
